(this["webpackChunkpaycio_wallet"] = this["webpackChunkpaycio_wallet"] || []).push([["node_modules_ledgerhq_hw-app-eth_lib-es_Eth_js"],{

/***/ "./node_modules/@ethersproject/bignumber/node_modules/bn.js/lib/bn.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = (__webpack_require__("?ff28").Buffer);
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    this.length = num === 0 ? 1 : this.length;

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);


/***/ }),

/***/ "./node_modules/@ethersproject/signing-key/node_modules/bn.js/lib/bn.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = (__webpack_require__("?0707").Buffer);
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    this.length = num === 0 ? 1 : this.length;

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);


/***/ }),

/***/ "./node_modules/@ledgerhq/errors/lib-es/index.js":
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Ej: function() { return /* binding */ DisconnectedDevice; },
  iX: function() { return /* binding */ DisconnectedDeviceDuringOperation; },
  vi: function() { return /* binding */ StatusCodes; },
  wX: function() { return /* binding */ TransportError; },
  pi: function() { return /* binding */ TransportInterfaceNotAvailable; },
  kt: function() { return /* binding */ TransportOpenUserCancelled; },
  ug: function() { return /* binding */ TransportRaceCondition; },
  _3: function() { return /* binding */ TransportStatusError; },
  e0: function() { return /* binding */ TransportWebUSBGestureRequired; },
  Oq: function() { return /* reexport */ createCustomErrorClass; }
});

// UNUSED EXPORTS: AccountAwaitingSendPendingOperations, AccountNameRequiredError, AccountNotSupported, AmountRequired, BluetoothRequired, BtcUnmatchedApp, CantOpenDevice, CantScanQRCode, CashAddrNotSupported, ClaimRewardsFeesWarning, CurrencyNotSupported, DBNotReset, DBWrongPassword, DeviceAppVerifyNotSupported, DeviceExtractOnboardingStateError, DeviceGenuineSocketEarlyClose, DeviceHalted, DeviceInOSUExpected, DeviceMangementKitError, DeviceNameInvalid, DeviceNeedsRestart, DeviceNotGenuineError, DeviceOnDashboardExpected, DeviceOnDashboardUnexpected, DeviceOnboardingStatePollingError, DeviceShouldStayInApp, DeviceSocketFail, DeviceSocketNoBulkStatus, DisabledTransactionBroadcastError, DustLimit, ETHAddressNonEIP, EnpointConfigError, EthAppPleaseEnableContractData, ExpertModeRequired, FeeEstimationFailed, FeeNotLoaded, FeeNotLoadedSwap, FeeRequired, FeeTooHigh, FirmwareNotRecognized, FirmwareOrAppUpdateRequired, GasLessThanEstimate, GenuineCheckFailed, HardResetFail, HwTransportError, HwTransportErrorType, InvalidAddress, InvalidAddressBecauseDestinationIsAlsoSource, InvalidNonce, InvalidXRPTag, LanguageNotFound, LatestFirmwareVersionRequired, LatestMCUInstalledError, LedgerAPI4xx, LedgerAPI5xx, LedgerAPIError, LedgerAPIErrorWithMessage, LedgerAPINotAvailable, LockedDeviceError, MCUNotGenuineToDashboard, ManagerAppAlreadyInstalledError, ManagerAppDepInstallRequired, ManagerAppDepUninstallRequired, ManagerAppRelyOnBTCError, ManagerDeviceLockedError, ManagerFirmwareNotEnoughSpaceError, ManagerNotEnoughSpaceError, ManagerUninstallBTCDep, MaxFeeTooLow, MaybeKeepTronAccountAlive, MissingSwapPayloadParamaters, NetworkDown, NetworkError, NoAccessToCamera, NoAddressesFound, NoDBPathGiven, NotEnoughBalance, NotEnoughBalanceBecauseDestinationNotCreated, NotEnoughBalanceFees, NotEnoughBalanceInParentAccount, NotEnoughBalanceSwap, NotEnoughBalanceToDelegate, NotEnoughGas, NotEnoughGasSwap, NotEnoughSpendableBalance, NotEnoughToRestake, NotEnoughToStake, NotEnoughToUnstake, NotSupportedLegacyAddress, OpReturnDataSizeLimit, PairingFailed, PasswordIncorrectError, PasswordsDontMatchError, PeerRemovedPairing, PendingOperation, PinNotSet, PriorityFeeHigherThanMaxFee, PriorityFeeTooHigh, PriorityFeeTooLow, RecipientRequired, RecommendSubAccountsToEmpty, RecommendUndelegation, ReplacementTransactionUnderpriced, RestakeNotEnoughStakedBalanceLeft, SequenceNumberError, SyncError, TimeoutTagged, TransactionHasBeenValidatedError, TransportExchangeTimeoutError, TronEmptyAccount, UnavailableTezosOriginatedAccountReceive, UnavailableTezosOriginatedAccountSend, UnexpectedBootloader, UnknownMCU, UnresponsiveDeviceError, UnstakeNotEnoughStakedBalanceLeft, UpdateFetchFileFail, UpdateIncorrectHash, UpdateIncorrectSig, UpdateYourApp, UserRefusedAddress, UserRefusedAllowManager, UserRefusedDeviceNameChange, UserRefusedFirmwareUpdate, UserRefusedOnDevice, WebsocketConnectionError, WebsocketConnectionFailed, WrongAppForCurrency, WrongDeviceForAccount, WrongDeviceForAccountPayout, WrongDeviceForAccountRefund, addCustomErrorDeserializer, deserializeError, getAltStatusMessage, serializeError

;// ./node_modules/@ledgerhq/errors/lib-es/helpers.js
/* eslint-disable no-continue */
/* eslint-disable no-unused-vars */
/* eslint-disable no-param-reassign */
/* eslint-disable no-prototype-builtins */
const errorClasses = {};
const deserializers = {};
const addCustomErrorDeserializer = (name, deserializer) => {
    deserializers[name] = deserializer;
};
const createCustomErrorClass = (name) => {
    class CustomErrorClass extends Error {
        cause;
        constructor(message, fields, options) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            super(message || name, options);
            // Set the prototype explicitly. See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(this, CustomErrorClass.prototype);
            this.name = name;
            if (fields) {
                for (const k in fields) {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    this[k] = fields[k];
                }
            }
            if (options && isObject(options) && "cause" in options && !this.cause) {
                // .cause was specified but the superconstructor
                // did not create an instance property.
                const cause = options.cause;
                this.cause = cause;
                if ("stack" in cause) {
                    this.stack = this.stack + "\nCAUSE: " + cause.stack;
                }
            }
        }
    }
    errorClasses[name] = CustomErrorClass;
    return CustomErrorClass;
};
function isObject(value) {
    return typeof value === "object";
}
// inspired from https://github.com/programble/errio/blob/master/index.js
const deserializeError = (object) => {
    if (object && typeof object === "object") {
        try {
            if (typeof object.message === "string") {
                const msg = JSON.parse(object.message);
                if (msg.message && msg.name) {
                    object = msg;
                }
            }
        }
        catch (e) {
            // nothing
        }
        let error;
        if (typeof object.name === "string") {
            const { name } = object;
            const des = deserializers[name];
            if (des) {
                error = des(object);
            }
            else {
                let constructor = name === "Error" ? Error : errorClasses[name];
                if (!constructor) {
                    console.warn("deserializing an unknown class '" + name + "'");
                    constructor = createCustomErrorClass(name);
                }
                error = Object.create(constructor.prototype);
                try {
                    for (const prop in object) {
                        if (object.hasOwnProperty(prop)) {
                            error[prop] = object[prop];
                        }
                    }
                }
                catch (e) {
                    // sometimes setting a property can fail (e.g. .name)
                }
            }
        }
        else {
            if (typeof object.message === "string") {
                error = new Error(object.message);
            }
        }
        if (error && !error.stack && Error.captureStackTrace) {
            Error.captureStackTrace(error, deserializeError);
        }
        return error;
    }
    return new Error(String(object));
};
// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js
const serializeError = (value) => {
    if (!value)
        return value;
    if (typeof value === "object") {
        return destroyCircular(value, []);
    }
    if (typeof value === "function") {
        return `[Function: ${value.name || "anonymous"}]`;
    }
    return value;
};
// https://www.npmjs.com/package/destroy-circular
function destroyCircular(from, seen) {
    const to = {};
    seen.push(from);
    for (const key of Object.keys(from)) {
        const value = from[key];
        if (typeof value === "function") {
            continue;
        }
        if (!value || typeof value !== "object") {
            to[key] = value;
            continue;
        }
        if (seen.indexOf(from[key]) === -1) {
            to[key] = destroyCircular(from[key], seen.slice(0));
            continue;
        }
        to[key] = "[Circular]";
    }
    if (typeof from.name === "string") {
        to.name = from.name;
    }
    if (typeof from.message === "string") {
        to.message = from.message;
    }
    if (typeof from.stack === "string") {
        to.stack = from.stack;
    }
    return to;
}
//# sourceMappingURL=helpers.js.map
;// ./node_modules/@ledgerhq/errors/lib-es/index.js


const AccountNameRequiredError = createCustomErrorClass("AccountNameRequired");
const AccountNotSupported = createCustomErrorClass("AccountNotSupported");
const AccountAwaitingSendPendingOperations = createCustomErrorClass("AccountAwaitingSendPendingOperations");
const AmountRequired = createCustomErrorClass("AmountRequired");
const BluetoothRequired = createCustomErrorClass("BluetoothRequired");
const BtcUnmatchedApp = createCustomErrorClass("BtcUnmatchedApp");
const CantOpenDevice = createCustomErrorClass("CantOpenDevice");
const CashAddrNotSupported = createCustomErrorClass("CashAddrNotSupported");
const ClaimRewardsFeesWarning = createCustomErrorClass("ClaimRewardsFeesWarning");
const CurrencyNotSupported = createCustomErrorClass("CurrencyNotSupported");
const DeviceAppVerifyNotSupported = createCustomErrorClass("DeviceAppVerifyNotSupported");
const DeviceGenuineSocketEarlyClose = createCustomErrorClass("DeviceGenuineSocketEarlyClose");
const DeviceNotGenuineError = createCustomErrorClass("DeviceNotGenuine");
const DeviceOnDashboardExpected = createCustomErrorClass("DeviceOnDashboardExpected");
const DeviceOnDashboardUnexpected = createCustomErrorClass("DeviceOnDashboardUnexpected");
const DeviceInOSUExpected = createCustomErrorClass("DeviceInOSUExpected");
const DeviceHalted = createCustomErrorClass("DeviceHalted");
const DeviceNameInvalid = createCustomErrorClass("DeviceNameInvalid");
const DeviceSocketFail = createCustomErrorClass("DeviceSocketFail");
const DeviceSocketNoBulkStatus = createCustomErrorClass("DeviceSocketNoBulkStatus");
const DeviceNeedsRestart = createCustomErrorClass("DeviceSocketNoBulkStatus");
const UnresponsiveDeviceError = createCustomErrorClass("UnresponsiveDeviceError");
const DisconnectedDevice = createCustomErrorClass("DisconnectedDevice");
const DisconnectedDeviceDuringOperation = createCustomErrorClass("DisconnectedDeviceDuringOperation");
const DeviceExtractOnboardingStateError = createCustomErrorClass("DeviceExtractOnboardingStateError");
const DeviceOnboardingStatePollingError = createCustomErrorClass("DeviceOnboardingStatePollingError");
const EnpointConfigError = createCustomErrorClass("EnpointConfig");
const EthAppPleaseEnableContractData = createCustomErrorClass("EthAppPleaseEnableContractData");
const FeeEstimationFailed = createCustomErrorClass("FeeEstimationFailed");
const FirmwareNotRecognized = createCustomErrorClass("FirmwareNotRecognized");
const HardResetFail = createCustomErrorClass("HardResetFail");
const InvalidXRPTag = createCustomErrorClass("InvalidXRPTag");
const InvalidAddress = createCustomErrorClass("InvalidAddress");
const InvalidNonce = createCustomErrorClass("InvalidNonce");
const InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass("InvalidAddressBecauseDestinationIsAlsoSource");
const LatestMCUInstalledError = createCustomErrorClass("LatestMCUInstalledError");
const LatestFirmwareVersionRequired = createCustomErrorClass("LatestFirmwareVersionRequired");
const UnknownMCU = createCustomErrorClass("UnknownMCU");
const LedgerAPIError = createCustomErrorClass("LedgerAPIError");
const LedgerAPIErrorWithMessage = createCustomErrorClass("LedgerAPIErrorWithMessage");
const LedgerAPINotAvailable = createCustomErrorClass("LedgerAPINotAvailable");
const ManagerAppAlreadyInstalledError = createCustomErrorClass("ManagerAppAlreadyInstalled");
const ManagerAppRelyOnBTCError = createCustomErrorClass("ManagerAppRelyOnBTC");
const ManagerAppDepInstallRequired = createCustomErrorClass("ManagerAppDepInstallRequired");
const ManagerAppDepUninstallRequired = createCustomErrorClass("ManagerAppDepUninstallRequired");
const ManagerDeviceLockedError = createCustomErrorClass("ManagerDeviceLocked");
const ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass("ManagerFirmwareNotEnoughSpace");
const ManagerNotEnoughSpaceError = createCustomErrorClass("ManagerNotEnoughSpace");
const ManagerUninstallBTCDep = createCustomErrorClass("ManagerUninstallBTCDep");
const NetworkDown = createCustomErrorClass("NetworkDown");
const NetworkError = createCustomErrorClass("NetworkError");
const NoAddressesFound = createCustomErrorClass("NoAddressesFound");
const NotEnoughBalance = createCustomErrorClass("NotEnoughBalance");
const NotEnoughBalanceFees = createCustomErrorClass("NotEnoughBalanceFees");
const NotEnoughBalanceSwap = createCustomErrorClass("NotEnoughBalanceSwap");
const NotEnoughBalanceToDelegate = createCustomErrorClass("NotEnoughBalanceToDelegate");
const UnstakeNotEnoughStakedBalanceLeft = createCustomErrorClass("UnstakeNotEnoughStakedBalanceLeft");
const RestakeNotEnoughStakedBalanceLeft = createCustomErrorClass("RestakeNotEnoughStakedBalanceLeft");
const NotEnoughToRestake = createCustomErrorClass("NotEnoughToRestake");
const NotEnoughToUnstake = createCustomErrorClass("NotEnoughToUnstake");
const NotEnoughBalanceInParentAccount = createCustomErrorClass("NotEnoughBalanceInParentAccount");
const NotEnoughSpendableBalance = createCustomErrorClass("NotEnoughSpendableBalance");
const NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass("NotEnoughBalanceBecauseDestinationNotCreated");
const NotEnoughToStake = createCustomErrorClass("NotEnoughToStake");
const NoAccessToCamera = createCustomErrorClass("NoAccessToCamera");
const NotEnoughGas = createCustomErrorClass("NotEnoughGas");
// Error message specifically for the PTX swap flow
const NotEnoughGasSwap = createCustomErrorClass("NotEnoughGasSwap");
const TronEmptyAccount = createCustomErrorClass("TronEmptyAccount");
const MaybeKeepTronAccountAlive = createCustomErrorClass("MaybeKeepTronAccountAlive");
const NotSupportedLegacyAddress = createCustomErrorClass("NotSupportedLegacyAddress");
const GasLessThanEstimate = createCustomErrorClass("GasLessThanEstimate");
const PriorityFeeTooLow = createCustomErrorClass("PriorityFeeTooLow");
const PriorityFeeTooHigh = createCustomErrorClass("PriorityFeeTooHigh");
const PriorityFeeHigherThanMaxFee = createCustomErrorClass("PriorityFeeHigherThanMaxFee");
const MaxFeeTooLow = createCustomErrorClass("MaxFeeTooLow");
const PasswordsDontMatchError = createCustomErrorClass("PasswordsDontMatch");
const PasswordIncorrectError = createCustomErrorClass("PasswordIncorrect");
const RecommendSubAccountsToEmpty = createCustomErrorClass("RecommendSubAccountsToEmpty");
const RecommendUndelegation = createCustomErrorClass("RecommendUndelegation");
const TimeoutTagged = createCustomErrorClass("TimeoutTagged");
const UnexpectedBootloader = createCustomErrorClass("UnexpectedBootloader");
const MCUNotGenuineToDashboard = createCustomErrorClass("MCUNotGenuineToDashboard");
const RecipientRequired = createCustomErrorClass("RecipientRequired");
const UnavailableTezosOriginatedAccountReceive = createCustomErrorClass("UnavailableTezosOriginatedAccountReceive");
const UnavailableTezosOriginatedAccountSend = createCustomErrorClass("UnavailableTezosOriginatedAccountSend");
const UpdateFetchFileFail = createCustomErrorClass("UpdateFetchFileFail");
const UpdateIncorrectHash = createCustomErrorClass("UpdateIncorrectHash");
const UpdateIncorrectSig = createCustomErrorClass("UpdateIncorrectSig");
const UpdateYourApp = createCustomErrorClass("UpdateYourApp");
const UserRefusedDeviceNameChange = createCustomErrorClass("UserRefusedDeviceNameChange");
const UserRefusedAddress = createCustomErrorClass("UserRefusedAddress");
const UserRefusedFirmwareUpdate = createCustomErrorClass("UserRefusedFirmwareUpdate");
const UserRefusedAllowManager = createCustomErrorClass("UserRefusedAllowManager");
const UserRefusedOnDevice = createCustomErrorClass("UserRefusedOnDevice"); // TODO rename because it's just for transaction refusal
const PinNotSet = createCustomErrorClass("PinNotSet");
const ExpertModeRequired = createCustomErrorClass("ExpertModeRequired");
const TransportOpenUserCancelled = createCustomErrorClass("TransportOpenUserCancelled");
const TransportInterfaceNotAvailable = createCustomErrorClass("TransportInterfaceNotAvailable");
const TransportRaceCondition = createCustomErrorClass("TransportRaceCondition");
const TransportWebUSBGestureRequired = createCustomErrorClass("TransportWebUSBGestureRequired");
const TransactionHasBeenValidatedError = createCustomErrorClass("TransactionHasBeenValidatedError");
const TransportExchangeTimeoutError = createCustomErrorClass("TransportExchangeTimeoutError");
const DeviceShouldStayInApp = createCustomErrorClass("DeviceShouldStayInApp");
const WebsocketConnectionError = createCustomErrorClass("WebsocketConnectionError");
const WebsocketConnectionFailed = createCustomErrorClass("WebsocketConnectionFailed");
const WrongDeviceForAccount = createCustomErrorClass("WrongDeviceForAccount");
const WrongDeviceForAccountPayout = createCustomErrorClass("WrongDeviceForAccountPayout");
const MissingSwapPayloadParamaters = createCustomErrorClass("MissingSwapPayloadParamaters");
const WrongDeviceForAccountRefund = createCustomErrorClass("WrongDeviceForAccountRefund");
const WrongAppForCurrency = createCustomErrorClass("WrongAppForCurrency");
const ETHAddressNonEIP = createCustomErrorClass("ETHAddressNonEIP");
const CantScanQRCode = createCustomErrorClass("CantScanQRCode");
const FeeNotLoaded = createCustomErrorClass("FeeNotLoaded");
const FeeNotLoadedSwap = createCustomErrorClass("FeeNotLoadedSwap");
const FeeRequired = createCustomErrorClass("FeeRequired");
const FeeTooHigh = createCustomErrorClass("FeeTooHigh");
const PendingOperation = createCustomErrorClass("PendingOperation");
const SyncError = createCustomErrorClass("SyncError");
const PairingFailed = createCustomErrorClass("PairingFailed");
const PeerRemovedPairing = createCustomErrorClass("PeerRemovedPairing");
const GenuineCheckFailed = createCustomErrorClass("GenuineCheckFailed");
const LedgerAPI4xx = createCustomErrorClass("LedgerAPI4xx");
const LedgerAPI5xx = createCustomErrorClass("LedgerAPI5xx");
const FirmwareOrAppUpdateRequired = createCustomErrorClass("FirmwareOrAppUpdateRequired");
// SpeedUp / Cancel EVM tx
const ReplacementTransactionUnderpriced = createCustomErrorClass("ReplacementTransactionUnderpriced");
// Bitcoin family
const OpReturnDataSizeLimit = createCustomErrorClass("OpReturnSizeLimit");
const DustLimit = createCustomErrorClass("DustLimit");
// Language
const LanguageNotFound = createCustomErrorClass("LanguageNotFound");
// db stuff, no need to translate
const NoDBPathGiven = createCustomErrorClass("NoDBPathGiven");
const DBWrongPassword = createCustomErrorClass("DBWrongPassword");
const DBNotReset = createCustomErrorClass("DBNotReset");
const SequenceNumberError = createCustomErrorClass("SequenceNumberError");
const DisabledTransactionBroadcastError = createCustomErrorClass("DisabledTransactionBroadcastError");
/**
 * Type of a Transport error used to represent all equivalent errors coming from all possible implementation of Transport
 */
var HwTransportErrorType;
(function (HwTransportErrorType) {
    HwTransportErrorType["Unknown"] = "Unknown";
    HwTransportErrorType["LocationServicesDisabled"] = "LocationServicesDisabled";
    HwTransportErrorType["LocationServicesUnauthorized"] = "LocationServicesUnauthorized";
    HwTransportErrorType["BluetoothScanStartFailed"] = "BluetoothScanStartFailed";
})(HwTransportErrorType || (HwTransportErrorType = {}));
/**
 * Represents an error coming from the usage of any Transport implementation.
 *
 * Needed to map a specific implementation error into an error that
 * can be managed by any code unaware of the specific Transport implementation
 * that was used.
 */
class HwTransportError extends Error {
    type;
    constructor(type, message) {
        super(message);
        this.name = "HwTransportError";
        this.type = type;
        // Needed as long as we target < ES6
        Object.setPrototypeOf(this, HwTransportError.prototype);
    }
}
/**
 * TransportError is used for any generic transport errors.
 * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.
 */
class TransportError extends Error {
    id;
    constructor(message, id) {
        const name = "TransportError";
        super(message || name);
        this.name = name;
        this.message = message;
        this.stack = new Error(message).stack;
        this.id = id;
    }
}
addCustomErrorDeserializer("TransportError", e => new TransportError(e.message, e.id));
const StatusCodes = {
    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,
    ALGORITHM_NOT_SUPPORTED: 0x9484,
    CLA_NOT_SUPPORTED: 0x6e00,
    CODE_BLOCKED: 0x9840,
    CODE_NOT_INITIALIZED: 0x9802,
    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,
    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,
    CONTRADICTION_INVALIDATION: 0x9810,
    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,
    DEVICE_IN_RECOVERY_MODE: 0x662f,
    CUSTOM_IMAGE_EMPTY: 0x662e,
    FILE_ALREADY_EXISTS: 0x6a89,
    FILE_NOT_FOUND: 0x9404,
    GP_AUTH_FAILED: 0x6300,
    HALTED: 0x6faa,
    INCONSISTENT_FILE: 0x9408,
    INCORRECT_DATA: 0x6a80,
    INCORRECT_LENGTH: 0x6700,
    INCORRECT_P1_P2: 0x6b00,
    INS_NOT_SUPPORTED: 0x6d00,
    DEVICE_NOT_ONBOARDED: 0x6d07,
    DEVICE_NOT_ONBOARDED_2: 0x6611,
    INVALID_KCV: 0x9485,
    INVALID_OFFSET: 0x9402,
    LICENSING: 0x6f42,
    LOCKED_DEVICE: 0x5515,
    MAX_VALUE_REACHED: 0x9850,
    MEMORY_PROBLEM: 0x9240,
    MISSING_CRITICAL_PARAMETER: 0x6800,
    NO_EF_SELECTED: 0x9400,
    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,
    OK: 0x9000,
    PIN_REMAINING_ATTEMPTS: 0x63c0,
    REFERENCED_DATA_NOT_FOUND: 0x6a88,
    SECURITY_STATUS_NOT_SATISFIED: 0x6982,
    TECHNICAL_PROBLEM: 0x6f00,
    UNKNOWN_APDU: 0x6d02,
    USER_REFUSED_ON_DEVICE: 0x5501,
    NOT_ENOUGH_SPACE: 0x5102,
    APP_NOT_FOUND_OR_INVALID_CONTEXT: 0x5123,
    INVALID_APP_NAME_LENGTH: 0x670a,
    GEN_AES_KEY_FAILED: 0x5419,
    INTERNAL_CRYPTO_OPERATION_FAILED: 0x541a,
    INTERNAL_COMPUTE_AES_CMAC_FAILED: 0x541b,
    ENCRYPT_APP_STORAGE_FAILED: 0x541c,
    INVALID_BACKUP_STATE: 0x6642,
    PIN_NOT_SET: 0x5502,
    INVALID_BACKUP_LENGTH: 0x6733,
    INVALID_RESTORE_STATE: 0x6643,
    INVALID_CHUNK_LENGTH: 0x6734,
    INVALID_BACKUP_HEADER: 0x684a,
    // Not documented:
    TRUSTCHAIN_WRONG_SEED: 0xb007,
};
function getAltStatusMessage(code) {
    switch (code) {
        // improve text of most common errors
        case 0x6700:
            return "Incorrect length";
        case 0x6800:
            return "Missing critical parameter";
        case 0x6982:
            return "Security not satisfied (dongle locked or have invalid access rights)";
        case 0x6985:
            return "Condition of use not satisfied (denied by the user?)";
        case 0x6a80:
            return "Invalid data received";
        case 0x6b00:
            return "Invalid parameter received";
        case 0x5515:
            return "Locked device";
    }
    if (0x6f00 <= code && code <= 0x6fff) {
        return "Internal error, please report";
    }
}
/**
 * Error thrown when a device returned a non success status.
 * the error.statusCode is one of the `StatusCodes` exported by this library.
 */
class TransportStatusError extends Error {
    statusCode;
    statusText;
    /**
     * @param statusCode The error status code coming from a Transport implementation
     * @param options containing:
     *  - canBeMappedToChildError: enable the mapping of TransportStatusError to an error extending/inheriting from it
     *  . Ex: LockedDeviceError. Default to true.
     */
    constructor(statusCode, { canBeMappedToChildError = true } = {}) {
        const statusText = Object.keys(StatusCodes).find(k => StatusCodes[k] === statusCode) || "UNKNOWN_ERROR";
        const smsg = getAltStatusMessage(statusCode) || statusText;
        const statusCodeStr = statusCode.toString(16);
        const message = `Ledger device: ${smsg} (0x${statusCodeStr})`;
        super(message);
        this.name = "TransportStatusError";
        this.statusCode = statusCode;
        this.statusText = statusText;
        Object.setPrototypeOf(this, TransportStatusError.prototype);
        // Maps to a LockedDeviceError
        if (canBeMappedToChildError && statusCode === StatusCodes.LOCKED_DEVICE) {
            return new LockedDeviceError(message);
        }
    }
}
class LockedDeviceError extends TransportStatusError {
    constructor(message) {
        super(StatusCodes.LOCKED_DEVICE, { canBeMappedToChildError: false });
        if (message) {
            this.message = message;
        }
        this.name = "LockedDeviceError";
        Object.setPrototypeOf(this, LockedDeviceError.prototype);
    }
}
class DeviceMangementKitError extends Error {
    constructor(name, message) {
        super(message);
        this.name = name;
        Object.setPrototypeOf(this, DeviceMangementKitError.prototype);
    }
}
addCustomErrorDeserializer("TransportStatusError", e => new TransportStatusError(e.statusCode));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@ledgerhq/hw-app-eth/lib-es/Eth.js":
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  DAPP_SELECTORS: function() { return /* reexport */ DAPP_SELECTORS; },
  ERC1155_CLEAR_SIGNED_SELECTORS: function() { return /* reexport */ ERC1155_CLEAR_SIGNED_SELECTORS; },
  ERC20_CLEAR_SIGNED_SELECTORS: function() { return /* reexport */ ERC20_CLEAR_SIGNED_SELECTORS; },
  ERC721_CLEAR_SIGNED_SELECTORS: function() { return /* reexport */ ERC721_CLEAR_SIGNED_SELECTORS; },
  "default": function() { return /* binding */ Eth; },
  getChainIdAsUint32: function() { return /* reexport */ getChainIdAsUint32; },
  getParity: function() { return /* reexport */ getParity; },
  getV: function() { return /* reexport */ getV; },
  hexBuffer: function() { return /* reexport */ hexBuffer; },
  intAsHexBytes: function() { return /* reexport */ intAsHexBytes; },
  ledgerService: function() { return /* reexport */ ledger; },
  maybeHexBuffer: function() { return /* reexport */ maybeHexBuffer; },
  mergeResolutions: function() { return /* reexport */ mergeResolutions; },
  nftSelectors: function() { return /* reexport */ nftSelectors; },
  padHexString: function() { return /* reexport */ padHexString; },
  safeChunkTransaction: function() { return /* reexport */ safeChunkTransaction; },
  splitPath: function() { return /* reexport */ splitPath; },
  tokenSelectors: function() { return /* reexport */ tokenSelectors; }
});

// NAMESPACE OBJECT: ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/platform/common/utils.js
var common_utils_namespaceObject = {};
__webpack_require__.r(common_utils_namespaceObject);
__webpack_require__.d(common_utils_namespaceObject, {
  hasBrowserEnv: function() { return hasBrowserEnv; },
  hasStandardBrowserEnv: function() { return hasStandardBrowserEnv; },
  hasStandardBrowserWebWorkerEnv: function() { return hasStandardBrowserWebWorkerEnv; },
  navigator: function() { return _navigator; },
  origin: function() { return origin; }
});

// NAMESPACE OBJECT: ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/platform/common/utils.js
var platform_common_utils_namespaceObject = {};
__webpack_require__.r(platform_common_utils_namespaceObject);
__webpack_require__.d(platform_common_utils_namespaceObject, {
  hasBrowserEnv: function() { return utils_hasBrowserEnv; },
  hasStandardBrowserEnv: function() { return utils_hasStandardBrowserEnv; },
  hasStandardBrowserWebWorkerEnv: function() { return utils_hasStandardBrowserWebWorkerEnv; },
  navigator: function() { return utils_navigator; },
  origin: function() { return utils_origin; }
});

// NAMESPACE OBJECT: ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/platform/common/utils.js
var lib_platform_common_utils_namespaceObject = {};
__webpack_require__.r(lib_platform_common_utils_namespaceObject);
__webpack_require__.d(lib_platform_common_utils_namespaceObject, {
  hasBrowserEnv: function() { return common_utils_hasBrowserEnv; },
  hasStandardBrowserEnv: function() { return common_utils_hasStandardBrowserEnv; },
  hasStandardBrowserWebWorkerEnv: function() { return common_utils_hasStandardBrowserWebWorkerEnv; },
  navigator: function() { return common_utils_navigator; },
  origin: function() { return common_utils_origin; }
});

// EXTERNAL MODULE: ./node_modules/@ledgerhq/logs/lib-es/index.js
var lib_es = __webpack_require__("./node_modules/@ledgerhq/logs/lib-es/index.js");
;// ./node_modules/bignumber.js/bignumber.mjs
/*
 *      bignumber.js v9.3.1
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */


var
  isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
  mathceil = Math.ceil,
  mathfloor = Math.floor,

  bignumberError = '[BigNumber Error] ',
  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

  BASE = 1e14,
  LOG_BASE = 14,
  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
  SQRT_BASE = 1e7,

  // EDITABLE
  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
  // the arguments to toExponential, toFixed, toFormat, and toPrecision.
  MAX = 1E9;                                   // 0 to MAX_INT32


/*
 * Create and return a BigNumber constructor.
 */
function clone(configObject) {
  var div, convertBase, parseNumeric,
    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
    ONE = new BigNumber(1),


    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


    // The default values below must be integers within the inclusive ranges stated.
    // The values can also be changed at run-time using BigNumber.set.

    // The maximum number of decimal places for operations involving division.
    DECIMAL_PLACES = 20,                     // 0 to MAX

    // The rounding mode used when rounding to the above decimal places, and when using
    // toExponential, toFixed, toFormat and toPrecision, and round (default value).
    // UP         0 Away from zero.
    // DOWN       1 Towards zero.
    // CEIL       2 Towards +Infinity.
    // FLOOR      3 Towards -Infinity.
    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
    ROUNDING_MODE = 4,                       // 0 to 8

    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

    // The exponent value at and beneath which toString returns exponential notation.
    // Number type: -7
    TO_EXP_NEG = -7,                         // 0 to -MAX

    // The exponent value at and above which toString returns exponential notation.
    // Number type: 21
    TO_EXP_POS = 21,                         // 0 to MAX

    // RANGE : [MIN_EXP, MAX_EXP]

    // The minimum exponent value, beneath which underflow to zero occurs.
    // Number type: -324  (5e-324)
    MIN_EXP = -1e7,                          // -1 to -MAX

    // The maximum exponent value, above which overflow to Infinity occurs.
    // Number type:  308  (1.7976931348623157e+308)
    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
    MAX_EXP = 1e7,                           // 1 to MAX

    // Whether to use cryptographically-secure random number generation, if available.
    CRYPTO = false,                          // true or false

    // The modulo mode used when calculating the modulus: a mod n.
    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
    // The remainder (r) is calculated as: r = a - n * q.
    //
    // UP        0 The remainder is positive if the dividend is negative, else is negative.
    // DOWN      1 The remainder has the same sign as the dividend.
    //             This modulo mode is commonly known as 'truncated division' and is
    //             equivalent to (a % n) in JavaScript.
    // FLOOR     3 The remainder has the same sign as the divisor (Python %).
    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
    //             The remainder is always positive.
    //
    // The truncated division, floored division, Euclidian division and IEEE 754 remainder
    // modes are commonly used for the modulus operation.
    // Although the other rounding modes can also be used, they may not give useful results.
    MODULO_MODE = 1,                         // 0 to 9

    // The maximum number of significant digits of the result of the exponentiatedBy operation.
    // If POW_PRECISION is 0, there will be unlimited significant digits.
    POW_PRECISION = 0,                       // 0 to MAX

    // The format specification used by the BigNumber.prototype.toFormat method.
    FORMAT = {
      prefix: '',
      groupSize: 3,
      secondaryGroupSize: 0,
      groupSeparator: ',',
      decimalSeparator: '.',
      fractionGroupSize: 0,
      fractionGroupSeparator: '\xA0',        // non-breaking space
      suffix: ''
    },

    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
    // '-', '.', whitespace, or repeated character.
    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
    alphabetHasNormalDecimalDigits = true;


  //------------------------------------------------------------------------------------------


  // CONSTRUCTOR


  /*
   * The BigNumber constructor and exported function.
   * Create and return a new instance of a BigNumber object.
   *
   * v {number|string|BigNumber} A numeric value.
   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
   */
  function BigNumber(v, b) {
    var alphabet, c, caseChanged, e, i, isNum, len, str,
      x = this;

    // Enable constructor call without `new`.
    if (!(x instanceof BigNumber)) return new BigNumber(v, b);

    if (b == null) {

      if (v && v._isBigNumber === true) {
        x.s = v.s;

        if (!v.c || v.e > MAX_EXP) {
          x.c = x.e = null;
        } else if (v.e < MIN_EXP) {
          x.c = [x.e = 0];
        } else {
          x.e = v.e;
          x.c = v.c.slice();
        }

        return;
      }

      if ((isNum = typeof v == 'number') && v * 0 == 0) {

        // Use `1 / n` to handle minus zero also.
        x.s = 1 / v < 0 ? (v = -v, -1) : 1;

        // Fast path for integers, where n < 2147483648 (2**31).
        if (v === ~~v) {
          for (e = 0, i = v; i >= 10; i /= 10, e++);

          if (e > MAX_EXP) {
            x.c = x.e = null;
          } else {
            x.e = e;
            x.c = [v];
          }

          return;
        }

        str = String(v);
      } else {

        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
      }

      // Decimal point?
      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

      // Exponential form?
      if ((i = str.search(/e/i)) > 0) {

        // Determine exponent.
        if (e < 0) e = i;
        e += +str.slice(i + 1);
        str = str.substring(0, i);
      } else if (e < 0) {

        // Integer.
        e = str.length;
      }

    } else {

      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
      intCheck(b, 2, ALPHABET.length, 'Base');

      // Allow exponential notation to be used with base 10 argument, while
      // also rounding to DECIMAL_PLACES as with other bases.
      if (b == 10 && alphabetHasNormalDecimalDigits) {
        x = new BigNumber(v);
        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
      }

      str = String(v);

      if (isNum = typeof v == 'number') {

        // Avoid potential interpretation of Infinity and NaN as base 44+ values.
        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
        if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
          throw Error
           (tooManyDigits + v);
        }
      } else {
        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
      }

      alphabet = ALPHABET.slice(0, b);
      e = i = 0;

      // Check that str is a valid base b number.
      // Don't use RegExp, so alphabet can contain special characters.
      for (len = str.length; i < len; i++) {
        if (alphabet.indexOf(c = str.charAt(i)) < 0) {
          if (c == '.') {

            // If '.' is not the first character and it has not be found before.
            if (i > e) {
              e = len;
              continue;
            }
          } else if (!caseChanged) {

            // Allow e.g. hexadecimal 'FF' as well as 'ff'.
            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                str == str.toLowerCase() && (str = str.toUpperCase())) {
              caseChanged = true;
              i = -1;
              e = 0;
              continue;
            }
          }

          return parseNumeric(x, String(v), isNum, b);
        }
      }

      // Prevent later check for length on converted number.
      isNum = false;
      str = convertBase(str, b, 10, x.s);

      // Decimal point?
      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
      else e = str.length;
    }

    // Determine leading zeros.
    for (i = 0; str.charCodeAt(i) === 48; i++);

    // Determine trailing zeros.
    for (len = str.length; str.charCodeAt(--len) === 48;);

    if (str = str.slice(i, ++len)) {
      len -= i;

      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
      if (isNum && BigNumber.DEBUG &&
        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
          throw Error
           (tooManyDigits + (x.s * v));
      }

       // Overflow?
      if ((e = e - i - 1) > MAX_EXP) {

        // Infinity.
        x.c = x.e = null;

      // Underflow?
      } else if (e < MIN_EXP) {

        // Zero.
        x.c = [x.e = 0];
      } else {
        x.e = e;
        x.c = [];

        // Transform base

        // e is the base 10 exponent.
        // i is where to slice str to get the first element of the coefficient array.
        i = (e + 1) % LOG_BASE;
        if (e < 0) i += LOG_BASE;  // i < 1

        if (i < len) {
          if (i) x.c.push(+str.slice(0, i));

          for (len -= LOG_BASE; i < len;) {
            x.c.push(+str.slice(i, i += LOG_BASE));
          }

          i = LOG_BASE - (str = str.slice(i)).length;
        } else {
          i -= len;
        }

        for (; i--; str += '0');
        x.c.push(+str);
      }
    } else {

      // Zero.
      x.c = [x.e = 0];
    }
  }


  // CONSTRUCTOR PROPERTIES


  BigNumber.clone = clone;

  BigNumber.ROUND_UP = 0;
  BigNumber.ROUND_DOWN = 1;
  BigNumber.ROUND_CEIL = 2;
  BigNumber.ROUND_FLOOR = 3;
  BigNumber.ROUND_HALF_UP = 4;
  BigNumber.ROUND_HALF_DOWN = 5;
  BigNumber.ROUND_HALF_EVEN = 6;
  BigNumber.ROUND_HALF_CEIL = 7;
  BigNumber.ROUND_HALF_FLOOR = 8;
  BigNumber.EUCLID = 9;


  /*
   * Configure infrequently-changing library-wide settings.
   *
   * Accept an object with the following optional properties (if the value of a property is
   * a number, it must be an integer within the inclusive range stated):
   *
   *   DECIMAL_PLACES   {number}           0 to MAX
   *   ROUNDING_MODE    {number}           0 to 8
   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
   *   CRYPTO           {boolean}          true or false
   *   MODULO_MODE      {number}           0 to 9
   *   POW_PRECISION       {number}           0 to MAX
   *   ALPHABET         {string}           A string of two or more unique characters which does
   *                                       not contain '.'.
   *   FORMAT           {object}           An object with some of the following properties:
   *     prefix                 {string}
   *     groupSize              {number}
   *     secondaryGroupSize     {number}
   *     groupSeparator         {string}
   *     decimalSeparator       {string}
   *     fractionGroupSize      {number}
   *     fractionGroupSeparator {string}
   *     suffix                 {string}
   *
   * (The values assigned to the above FORMAT object properties are not checked for validity.)
   *
   * E.g.
   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
   *
   * Ignore properties/parameters set to null or undefined, except for ALPHABET.
   *
   * Return an object with the properties current values.
   */
  BigNumber.config = BigNumber.set = function (obj) {
    var p, v;

    if (obj != null) {

      if (typeof obj == 'object') {

        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
          v = obj[p];
          intCheck(v, 0, MAX, p);
          DECIMAL_PLACES = v;
        }

        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
          v = obj[p];
          intCheck(v, 0, 8, p);
          ROUNDING_MODE = v;
        }

        // EXPONENTIAL_AT {number|number[]}
        // Integer, -MAX to MAX inclusive or
        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
          v = obj[p];
          if (v && v.pop) {
            intCheck(v[0], -MAX, 0, p);
            intCheck(v[1], 0, MAX, p);
            TO_EXP_NEG = v[0];
            TO_EXP_POS = v[1];
          } else {
            intCheck(v, -MAX, MAX, p);
            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
          }
        }

        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
        if (obj.hasOwnProperty(p = 'RANGE')) {
          v = obj[p];
          if (v && v.pop) {
            intCheck(v[0], -MAX, -1, p);
            intCheck(v[1], 1, MAX, p);
            MIN_EXP = v[0];
            MAX_EXP = v[1];
          } else {
            intCheck(v, -MAX, MAX, p);
            if (v) {
              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
            } else {
              throw Error
               (bignumberError + p + ' cannot be zero: ' + v);
            }
          }
        }

        // CRYPTO {boolean} true or false.
        // '[BigNumber Error] CRYPTO not true or false: {v}'
        // '[BigNumber Error] crypto unavailable'
        if (obj.hasOwnProperty(p = 'CRYPTO')) {
          v = obj[p];
          if (v === !!v) {
            if (v) {
              if (typeof crypto != 'undefined' && crypto &&
               (crypto.getRandomValues || crypto.randomBytes)) {
                CRYPTO = v;
              } else {
                CRYPTO = !v;
                throw Error
                 (bignumberError + 'crypto unavailable');
              }
            } else {
              CRYPTO = v;
            }
          } else {
            throw Error
             (bignumberError + p + ' not true or false: ' + v);
          }
        }

        // MODULO_MODE {number} Integer, 0 to 9 inclusive.
        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
          v = obj[p];
          intCheck(v, 0, 9, p);
          MODULO_MODE = v;
        }

        // POW_PRECISION {number} Integer, 0 to MAX inclusive.
        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
          v = obj[p];
          intCheck(v, 0, MAX, p);
          POW_PRECISION = v;
        }

        // FORMAT {object}
        // '[BigNumber Error] FORMAT not an object: {v}'
        if (obj.hasOwnProperty(p = 'FORMAT')) {
          v = obj[p];
          if (typeof v == 'object') FORMAT = v;
          else throw Error
           (bignumberError + p + ' not an object: ' + v);
        }

        // ALPHABET {string}
        // '[BigNumber Error] ALPHABET invalid: {v}'
        if (obj.hasOwnProperty(p = 'ALPHABET')) {
          v = obj[p];

          // Disallow if less than two characters,
          // or if it contains '+', '-', '.', whitespace, or a repeated character.
          if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
            ALPHABET = v;
          } else {
            throw Error
             (bignumberError + p + ' invalid: ' + v);
          }
        }

      } else {

        // '[BigNumber Error] Object expected: {v}'
        throw Error
         (bignumberError + 'Object expected: ' + obj);
      }
    }

    return {
      DECIMAL_PLACES: DECIMAL_PLACES,
      ROUNDING_MODE: ROUNDING_MODE,
      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
      RANGE: [MIN_EXP, MAX_EXP],
      CRYPTO: CRYPTO,
      MODULO_MODE: MODULO_MODE,
      POW_PRECISION: POW_PRECISION,
      FORMAT: FORMAT,
      ALPHABET: ALPHABET
    };
  };


  /*
   * Return true if v is a BigNumber instance, otherwise return false.
   *
   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
   *
   * v {any}
   *
   * '[BigNumber Error] Invalid BigNumber: {v}'
   */
  BigNumber.isBigNumber = function (v) {
    if (!v || v._isBigNumber !== true) return false;
    if (!BigNumber.DEBUG) return true;

    var i, n,
      c = v.c,
      e = v.e,
      s = v.s;

    out: if ({}.toString.call(c) == '[object Array]') {

      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

        // If the first element is zero, the BigNumber value must be zero.
        if (c[0] === 0) {
          if (e === 0 && c.length === 1) return true;
          break out;
        }

        // Calculate number of digits that c[0] should have, based on the exponent.
        i = (e + 1) % LOG_BASE;
        if (i < 1) i += LOG_BASE;

        // Calculate number of digits of c[0].
        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
        if (String(c[0]).length == i) {

          for (i = 0; i < c.length; i++) {
            n = c[i];
            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
          }

          // Last element cannot be zero, unless it is the only element.
          if (n !== 0) return true;
        }
      }

    // Infinity/NaN
    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
      return true;
    }

    throw Error
      (bignumberError + 'Invalid BigNumber: ' + v);
  };


  /*
   * Return a new BigNumber whose value is the maximum of the arguments.
   *
   * arguments {number|string|BigNumber}
   */
  BigNumber.maximum = BigNumber.max = function () {
    return maxOrMin(arguments, -1);
  };


  /*
   * Return a new BigNumber whose value is the minimum of the arguments.
   *
   * arguments {number|string|BigNumber}
   */
  BigNumber.minimum = BigNumber.min = function () {
    return maxOrMin(arguments, 1);
  };


  /*
   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
   * zeros are produced).
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
   * '[BigNumber Error] crypto unavailable'
   */
  BigNumber.random = (function () {
    var pow2_53 = 0x20000000000000;

    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
    // Check if Math.random() produces more than 32 bits of randomness.
    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
     ? function () { return mathfloor(Math.random() * pow2_53); }
     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
       (Math.random() * 0x800000 | 0); };

    return function (dp) {
      var a, b, e, k, v,
        i = 0,
        c = [],
        rand = new BigNumber(ONE);

      if (dp == null) dp = DECIMAL_PLACES;
      else intCheck(dp, 0, MAX);

      k = mathceil(dp / LOG_BASE);

      if (CRYPTO) {

        // Browsers supporting crypto.getRandomValues.
        if (crypto.getRandomValues) {

          a = crypto.getRandomValues(new Uint32Array(k *= 2));

          for (; i < k;) {

            // 53 bits:
            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
            //                                     11111 11111111 11111111
            // 0x20000 is 2^21.
            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

            // Rejection sampling:
            // 0 <= v < 9007199254740992
            // Probability that v >= 9e15, is
            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
            if (v >= 9e15) {
              b = crypto.getRandomValues(new Uint32Array(2));
              a[i] = b[0];
              a[i + 1] = b[1];
            } else {

              // 0 <= v <= 8999999999999999
              // 0 <= (v % 1e14) <= 99999999999999
              c.push(v % 1e14);
              i += 2;
            }
          }
          i = k / 2;

        // Node.js supporting crypto.randomBytes.
        } else if (crypto.randomBytes) {

          // buffer
          a = crypto.randomBytes(k *= 7);

          for (; i < k;) {

            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
            // 0x100000000 is 2^32, 0x1000000 is 2^24
            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
            // 0 <= v < 9007199254740992
            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

            if (v >= 9e15) {
              crypto.randomBytes(7).copy(a, i);
            } else {

              // 0 <= (v % 1e14) <= 99999999999999
              c.push(v % 1e14);
              i += 7;
            }
          }
          i = k / 7;
        } else {
          CRYPTO = false;
          throw Error
           (bignumberError + 'crypto unavailable');
        }
      }

      // Use Math.random.
      if (!CRYPTO) {

        for (; i < k;) {
          v = random53bitInt();
          if (v < 9e15) c[i++] = v % 1e14;
        }
      }

      k = c[--i];
      dp %= LOG_BASE;

      // Convert trailing digits to zeros according to dp.
      if (k && dp) {
        v = POWS_TEN[LOG_BASE - dp];
        c[i] = mathfloor(k / v) * v;
      }

      // Remove trailing elements which are zero.
      for (; c[i] === 0; c.pop(), i--);

      // Zero?
      if (i < 0) {
        c = [e = 0];
      } else {

        // Remove leading elements which are zero and adjust exponent accordingly.
        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

        // Count the digits of the first element of c to determine leading zeros, and...
        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

        // adjust the exponent accordingly.
        if (i < LOG_BASE) e -= LOG_BASE - i;
      }

      rand.e = e;
      rand.c = c;
      return rand;
    };
  })();


   /*
   * Return a BigNumber whose value is the sum of the arguments.
   *
   * arguments {number|string|BigNumber}
   */
  BigNumber.sum = function () {
    var i = 1,
      args = arguments,
      sum = new BigNumber(args[0]);
    for (; i < args.length;) sum = sum.plus(args[i++]);
    return sum;
  };


  // PRIVATE FUNCTIONS


  // Called by BigNumber and BigNumber.prototype.toString.
  convertBase = (function () {
    var decimal = '0123456789';

    /*
     * Convert string of baseIn to an array of numbers of baseOut.
     * Eg. toBaseOut('255', 10, 16) returns [15, 15].
     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
     */
    function toBaseOut(str, baseIn, baseOut, alphabet) {
      var j,
        arr = [0],
        arrL,
        i = 0,
        len = str.length;

      for (; i < len;) {
        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

        arr[0] += alphabet.indexOf(str.charAt(i++));

        for (j = 0; j < arr.length; j++) {

          if (arr[j] > baseOut - 1) {
            if (arr[j + 1] == null) arr[j + 1] = 0;
            arr[j + 1] += arr[j] / baseOut | 0;
            arr[j] %= baseOut;
          }
        }
      }

      return arr.reverse();
    }

    // Convert a numeric string of baseIn to a numeric string of baseOut.
    // If the caller is toString, we are converting from base 10 to baseOut.
    // If the caller is BigNumber, we are converting from baseIn to base 10.
    return function (str, baseIn, baseOut, sign, callerIsToString) {
      var alphabet, d, e, k, r, x, xc, y,
        i = str.indexOf('.'),
        dp = DECIMAL_PLACES,
        rm = ROUNDING_MODE;

      // Non-integer.
      if (i >= 0) {
        k = POW_PRECISION;

        // Unlimited precision.
        POW_PRECISION = 0;
        str = str.replace('.', '');
        y = new BigNumber(baseIn);
        x = y.pow(str.length - i);
        POW_PRECISION = k;

        // Convert str as if an integer, then restore the fraction part by dividing the
        // result by its base raised to a power.

        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
         10, baseOut, decimal);
        y.e = y.c.length;
      }

      // Convert the number as integer.

      xc = toBaseOut(str, baseIn, baseOut, callerIsToString
       ? (alphabet = ALPHABET, decimal)
       : (alphabet = decimal, ALPHABET));

      // xc now represents str as an integer and converted to baseOut. e is the exponent.
      e = k = xc.length;

      // Remove trailing zeros.
      for (; xc[--k] == 0; xc.pop());

      // Zero?
      if (!xc[0]) return alphabet.charAt(0);

      // Does str represent an integer? If so, no need for the division.
      if (i < 0) {
        --e;
      } else {
        x.c = xc;
        x.e = e;

        // The sign is needed for correct rounding.
        x.s = sign;
        x = div(x, y, dp, rm, baseOut);
        xc = x.c;
        r = x.r;
        e = x.e;
      }

      // xc now represents str converted to baseOut.

      // The index of the rounding digit.
      d = e + dp + 1;

      // The rounding digit: the digit to the right of the digit that may be rounded up.
      i = xc[d];

      // Look at the rounding digits and mode to determine whether to round up.

      k = baseOut / 2;
      r = r || d < 0 || xc[d + 1] != null;

      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
             rm == (x.s < 0 ? 8 : 7));

      // If the index of the rounding digit is not greater than zero, or xc represents
      // zero, then the result of the base conversion is zero or, if rounding up, a value
      // such as 0.00001.
      if (d < 1 || !xc[0]) {

        // 1^-dp or 0
        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
      } else {

        // Truncate xc to the required number of decimal places.
        xc.length = d;

        // Round up?
        if (r) {

          // Rounding up may mean the previous digit has to be rounded up and so on.
          for (--baseOut; ++xc[--d] > baseOut;) {
            xc[d] = 0;

            if (!d) {
              ++e;
              xc = [1].concat(xc);
            }
          }
        }

        // Determine trailing zeros.
        for (k = xc.length; !xc[--k];);

        // E.g. [4, 11, 15] becomes 4bf.
        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

        // Add leading zeros, decimal point and trailing zeros as required.
        str = toFixedPoint(str, e, alphabet.charAt(0));
      }

      // The caller will add the sign.
      return str;
    };
  })();


  // Perform division in the specified base. Called by div and convertBase.
  div = (function () {

    // Assume non-zero x and k.
    function multiply(x, k, base) {
      var m, temp, xlo, xhi,
        carry = 0,
        i = x.length,
        klo = k % SQRT_BASE,
        khi = k / SQRT_BASE | 0;

      for (x = x.slice(); i--;) {
        xlo = x[i] % SQRT_BASE;
        xhi = x[i] / SQRT_BASE | 0;
        m = khi * xlo + xhi * klo;
        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
        x[i] = temp % base;
      }

      if (carry) x = [carry].concat(x);

      return x;
    }

    function compare(a, b, aL, bL) {
      var i, cmp;

      if (aL != bL) {
        cmp = aL > bL ? 1 : -1;
      } else {

        for (i = cmp = 0; i < aL; i++) {

          if (a[i] != b[i]) {
            cmp = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }

      return cmp;
    }

    function subtract(a, b, aL, base) {
      var i = 0;

      // Subtract b from a.
      for (; aL--;) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      }

      // Remove leading zeros.
      for (; !a[0] && a.length > 1; a.splice(0, 1));
    }

    // x: dividend, y: divisor.
    return function (x, y, dp, rm, base) {
      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
        yL, yz,
        s = x.s == y.s ? 1 : -1,
        xc = x.c,
        yc = y.c;

      // Either NaN, Infinity or 0?
      if (!xc || !xc[0] || !yc || !yc[0]) {

        return new BigNumber(

         // Return NaN if either NaN, or both Infinity or 0.
         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
          xc && xc[0] == 0 || !yc ? s * 0 : s / 0
       );
      }

      q = new BigNumber(s);
      qc = q.c = [];
      e = x.e - y.e;
      s = dp + e + 1;

      if (!base) {
        base = BASE;
        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
        s = s / LOG_BASE | 0;
      }

      // Result exponent may be one less then the current value of e.
      // The coefficients of the BigNumbers from convertBase may have trailing zeros.
      for (i = 0; yc[i] == (xc[i] || 0); i++);

      if (yc[i] > (xc[i] || 0)) e--;

      if (s < 0) {
        qc.push(1);
        more = true;
      } else {
        xL = xc.length;
        yL = yc.length;
        i = 0;
        s += 2;

        // Normalise xc and yc so highest order digit of yc is >= base / 2.

        n = mathfloor(base / (yc[0] + 1));

        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
        if (n > 1) {
          yc = multiply(yc, n, base);
          xc = multiply(xc, n, base);
          yL = yc.length;
          xL = xc.length;
        }

        xi = yL;
        rem = xc.slice(0, yL);
        remL = rem.length;

        // Add zeros to make remainder as long as divisor.
        for (; remL < yL; rem[remL++] = 0);
        yz = yc.slice();
        yz = [0].concat(yz);
        yc0 = yc[0];
        if (yc[1] >= base / 2) yc0++;
        // Not necessary, but to prevent trial digit n > base, when using base 3.
        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

        do {
          n = 0;

          // Compare divisor and remainder.
          cmp = compare(yc, rem, yL, remL);

          // If divisor < remainder.
          if (cmp < 0) {

            // Calculate trial digit, n.

            rem0 = rem[0];
            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

            // n is how many times the divisor goes into the current remainder.
            n = mathfloor(rem0 / yc0);

            //  Algorithm:
            //  product = divisor multiplied by trial digit (n).
            //  Compare product and remainder.
            //  If product is greater than remainder:
            //    Subtract divisor from product, decrement trial digit.
            //  Subtract product from remainder.
            //  If product was less than remainder at the last compare:
            //    Compare new remainder and divisor.
            //    If remainder is greater than divisor:
            //      Subtract divisor from remainder, increment trial digit.

            if (n > 1) {

              // n may be > base only when base is 3.
              if (n >= base) n = base - 1;

              // product = divisor * trial digit.
              prod = multiply(yc, n, base);
              prodL = prod.length;
              remL = rem.length;

              // Compare product and remainder.
              // If product > remainder then trial digit n too high.
              // n is 1 too high about 5% of the time, and is not known to have
              // ever been more than 1 too high.
              while (compare(prod, rem, prodL, remL) == 1) {
                n--;

                // Subtract divisor from product.
                subtract(prod, yL < prodL ? yz : yc, prodL, base);
                prodL = prod.length;
                cmp = 1;
              }
            } else {

              // n is 0 or 1, cmp is -1.
              // If n is 0, there is no need to compare yc and rem again below,
              // so change cmp to 1 to avoid it.
              // If n is 1, leave cmp as -1, so yc and rem are compared again.
              if (n == 0) {

                // divisor < remainder, so n must be at least 1.
                cmp = n = 1;
              }

              // product = divisor
              prod = yc.slice();
              prodL = prod.length;
            }

            if (prodL < remL) prod = [0].concat(prod);

            // Subtract product from remainder.
            subtract(rem, prod, remL, base);
            remL = rem.length;

             // If product was < remainder.
            if (cmp == -1) {

              // Compare divisor and new remainder.
              // If divisor < new remainder, subtract divisor from remainder.
              // Trial digit n too low.
              // n is 1 too low about 5% of the time, and very rarely 2 too low.
              while (compare(yc, rem, yL, remL) < 1) {
                n++;

                // Subtract divisor from remainder.
                subtract(rem, yL < remL ? yz : yc, remL, base);
                remL = rem.length;
              }
            }
          } else if (cmp === 0) {
            n++;
            rem = [0];
          } // else cmp === 1 and n will be 0

          // Add the next digit, n, to the result array.
          qc[i++] = n;

          // Update the remainder.
          if (rem[0]) {
            rem[remL++] = xc[xi] || 0;
          } else {
            rem = [xc[xi]];
            remL = 1;
          }
        } while ((xi++ < xL || rem[0] != null) && s--);

        more = rem[0] != null;

        // Leading zero?
        if (!qc[0]) qc.splice(0, 1);
      }

      if (base == BASE) {

        // To calculate q.e, first get the number of digits of qc[0].
        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

      // Caller is convertBase.
      } else {
        q.e = e;
        q.r = +more;
      }

      return q;
    };
  })();


  /*
   * Return a string representing the value of BigNumber n in fixed-point or exponential
   * notation rounded to the specified decimal places or significant digits.
   *
   * n: a BigNumber.
   * i: the index of the last digit required (i.e. the digit that may be rounded up).
   * rm: the rounding mode.
   * id: 1 (toExponential) or 2 (toPrecision).
   */
  function format(n, i, rm, id) {
    var c0, e, ne, len, str;

    if (rm == null) rm = ROUNDING_MODE;
    else intCheck(rm, 0, 8);

    if (!n.c) return n.toString();

    c0 = n.c[0];
    ne = n.e;

    if (i == null) {
      str = coeffToString(n.c);
      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
       ? toExponential(str, ne)
       : toFixedPoint(str, ne, '0');
    } else {
      n = round(new BigNumber(n), i, rm);

      // n.e may have changed if the value was rounded up.
      e = n.e;

      str = coeffToString(n.c);
      len = str.length;

      // toPrecision returns exponential notation if the number of significant digits
      // specified is less than the number of digits necessary to represent the integer
      // part of the value in fixed-point notation.

      // Exponential notation.
      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

        // Append zeros?
        for (; len < i; str += '0', len++);
        str = toExponential(str, e);

      // Fixed-point notation.
      } else {
        i -= ne + (id === 2 && e > ne);
        str = toFixedPoint(str, e, '0');

        // Append zeros?
        if (e + 1 > len) {
          if (--i > 0) for (str += '.'; i--; str += '0');
        } else {
          i += e - len;
          if (i > 0) {
            if (e + 1 == len) str += '.';
            for (; i--; str += '0');
          }
        }
      }
    }

    return n.s < 0 && c0 ? '-' + str : str;
  }


  // Handle BigNumber.max and BigNumber.min.
  // If any number is NaN, return NaN.
  function maxOrMin(args, n) {
    var k, y,
      i = 1,
      x = new BigNumber(args[0]);

    for (; i < args.length; i++) {
      y = new BigNumber(args[i]);
      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
        x = y;
      }
    }

    return x;
  }


  /*
   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
   * Called by minus, plus and times.
   */
  function normalise(n, c, e) {
    var i = 1,
      j = c.length;

     // Remove trailing zeros.
    for (; !c[--j]; c.pop());

    // Calculate the base 10 exponent. First get the number of digits of c[0].
    for (j = c[0]; j >= 10; j /= 10, i++);

    // Overflow?
    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

      // Infinity.
      n.c = n.e = null;

    // Underflow?
    } else if (e < MIN_EXP) {

      // Zero.
      n.c = [n.e = 0];
    } else {
      n.e = e;
      n.c = c;
    }

    return n;
  }


  // Handle values that fail the validity test in BigNumber.
  parseNumeric = (function () {
    var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
      dotAfter = /^([^.]+)\.$/,
      dotBefore = /^\.([^.]+)$/,
      isInfinityOrNaN = /^-?(Infinity|NaN)$/,
      whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

    return function (x, str, isNum, b) {
      var base,
        s = isNum ? str : str.replace(whitespaceOrPlus, '');

      // No exception on ±Infinity or NaN.
      if (isInfinityOrNaN.test(s)) {
        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
      } else {
        if (!isNum) {

          // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
          s = s.replace(basePrefix, function (m, p1, p2) {
            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
            return !b || b == base ? p1 : m;
          });

          if (b) {
            base = b;

            // E.g. '1.' to '1', '.1' to '0.1'
            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
          }

          if (str != s) return new BigNumber(s, base);
        }

        // '[BigNumber Error] Not a number: {n}'
        // '[BigNumber Error] Not a base {b} number: {n}'
        if (BigNumber.DEBUG) {
          throw Error
            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
        }

        // NaN
        x.s = null;
      }

      x.c = x.e = null;
    }
  })();


  /*
   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
   * If r is truthy, it is known that there are more digits after the rounding digit.
   */
  function round(x, sd, rm, r) {
    var d, i, j, k, n, ni, rd,
      xc = x.c,
      pows10 = POWS_TEN;

    // if x is not Infinity or NaN...
    if (xc) {

      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
      // n is a base 1e14 number, the value of the element of array x.c containing rd.
      // ni is the index of n within x.c.
      // d is the number of digits of n.
      // i is the index of rd within n including leading zeros.
      // j is the actual index of rd within n (if < 0, rd is a leading zero).
      out: {

        // Get the number of digits of the first element of xc.
        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
        i = sd - d;

        // If the rounding digit is in the first element of xc...
        if (i < 0) {
          i += LOG_BASE;
          j = sd;
          n = xc[ni = 0];

          // Get the rounding digit at index j of n.
          rd = mathfloor(n / pows10[d - j - 1] % 10);
        } else {
          ni = mathceil((i + 1) / LOG_BASE);

          if (ni >= xc.length) {

            if (r) {

              // Needed by sqrt.
              for (; xc.length <= ni; xc.push(0));
              n = rd = 0;
              d = 1;
              i %= LOG_BASE;
              j = i - LOG_BASE + 1;
            } else {
              break out;
            }
          } else {
            n = k = xc[ni];

            // Get the number of digits of n.
            for (d = 1; k >= 10; k /= 10, d++);

            // Get the index of rd within n.
            i %= LOG_BASE;

            // Get the index of rd within n, adjusted for leading zeros.
            // The number of leading zeros of n is given by LOG_BASE - d.
            j = i - LOG_BASE + d;

            // Get the rounding digit at index j of n.
            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
          }
        }

        r = r || sd < 0 ||

        // Are there any non-zero digits after the rounding digit?
        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

        r = rm < 4
         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

          // Check whether the digit to the left of the rounding digit is odd.
          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
           rm == (x.s < 0 ? 8 : 7));

        if (sd < 1 || !xc[0]) {
          xc.length = 0;

          if (r) {

            // Convert sd to decimal places.
            sd -= x.e + 1;

            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
            x.e = -sd || 0;
          } else {

            // Zero.
            xc[0] = x.e = 0;
          }

          return x;
        }

        // Remove excess digits.
        if (i == 0) {
          xc.length = ni;
          k = 1;
          ni--;
        } else {
          xc.length = ni + 1;
          k = pows10[LOG_BASE - i];

          // E.g. 56700 becomes 56000 if 7 is the rounding digit.
          // j > 0 means i > number of leading zeros of n.
          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
        }

        // Round up?
        if (r) {

          for (; ;) {

            // If the digit to be rounded up is in the first element of xc...
            if (ni == 0) {

              // i will be the length of xc[0] before k is added.
              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
              j = xc[0] += k;
              for (k = 1; j >= 10; j /= 10, k++);

              // if i != k the length has increased.
              if (i != k) {
                x.e++;
                if (xc[0] == BASE) xc[0] = 1;
              }

              break;
            } else {
              xc[ni] += k;
              if (xc[ni] != BASE) break;
              xc[ni--] = 0;
              k = 1;
            }
          }
        }

        // Remove trailing zeros.
        for (i = xc.length; xc[--i] === 0; xc.pop());
      }

      // Overflow? Infinity.
      if (x.e > MAX_EXP) {
        x.c = x.e = null;

      // Underflow? Zero.
      } else if (x.e < MIN_EXP) {
        x.c = [x.e = 0];
      }
    }

    return x;
  }


  function valueOf(n) {
    var str,
      e = n.e;

    if (e === null) return n.toString();

    str = coeffToString(n.c);

    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
      ? toExponential(str, e)
      : toFixedPoint(str, e, '0');

    return n.s < 0 ? '-' + str : str;
  }


  // PROTOTYPE/INSTANCE METHODS


  /*
   * Return a new BigNumber whose value is the absolute value of this BigNumber.
   */
  P.absoluteValue = P.abs = function () {
    var x = new BigNumber(this);
    if (x.s < 0) x.s = 1;
    return x;
  };


  /*
   * Return
   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
   *   0 if they have the same value,
   *   or null if the value of either is NaN.
   */
  P.comparedTo = function (y, b) {
    return compare(this, new BigNumber(y, b));
  };


  /*
   * If dp is undefined or null or true or false, return the number of decimal places of the
   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
   *
   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
   * ROUNDING_MODE if rm is omitted.
   *
   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.decimalPlaces = P.dp = function (dp, rm) {
    var c, n, v,
      x = this;

    if (dp != null) {
      intCheck(dp, 0, MAX);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);

      return round(new BigNumber(x), dp + x.e + 1, rm);
    }

    if (!(c = x.c)) return null;
    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

    // Subtract the number of trailing zeros of the last number.
    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
    if (n < 0) n = 0;

    return n;
  };


  /*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
   */
  P.dividedBy = P.div = function (y, b) {
    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
  };


  /*
   * Return a new BigNumber whose value is the integer part of dividing the value of this
   * BigNumber by the value of BigNumber(y, b).
   */
  P.dividedToIntegerBy = P.idiv = function (y, b) {
    return div(this, new BigNumber(y, b), 0, 1);
  };


  /*
   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
   *
   * If m is present, return the result modulo m.
   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
   *
   * The modular power operation works efficiently when x, n, and m are integers, otherwise it
   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
   *
   * n {number|string|BigNumber} The exponent. An integer.
   * [m] {number|string|BigNumber} The modulus.
   *
   * '[BigNumber Error] Exponent not an integer: {n}'
   */
  P.exponentiatedBy = P.pow = function (n, m) {
    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
      x = this;

    n = new BigNumber(n);

    // Allow NaN and ±Infinity, but not other non-integers.
    if (n.c && !n.isInteger()) {
      throw Error
        (bignumberError + 'Exponent not an integer: ' + valueOf(n));
    }

    if (m != null) m = new BigNumber(m);

    // Exponent of MAX_SAFE_INTEGER is 15.
    nIsBig = n.e > 14;

    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

      // The sign of the result of pow when x is negative depends on the evenness of n.
      // If +n overflows to ±Infinity, the evenness of n would be not be known.
      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
      return m ? y.mod(m) : y;
    }

    nIsNeg = n.s < 0;

    if (m) {

      // x % m returns NaN if abs(m) is zero, or m is NaN.
      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

      isModExp = !nIsNeg && x.isInteger() && m.isInteger();

      if (isModExp) x = x.mod(m);

    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
      // [1, 240000000]
      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
      // [80000000000000]  [99999750000000]
      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

      // If x is negative and n is odd, k = -0, else k = 0.
      k = x.s < 0 && isOdd(n) ? -0 : 0;

      // If x >= 1, k = ±Infinity.
      if (x.e > -1) k = 1 / k;

      // If n is negative return ±0, else return ±Infinity.
      return new BigNumber(nIsNeg ? 1 / k : k);

    } else if (POW_PRECISION) {

      // Truncating each coefficient array to a length of k after each multiplication
      // equates to truncating significant digits to POW_PRECISION + [28, 41],
      // i.e. there will be a minimum of 28 guard digits retained.
      k = mathceil(POW_PRECISION / LOG_BASE + 2);
    }

    if (nIsBig) {
      half = new BigNumber(0.5);
      if (nIsNeg) n.s = 1;
      nIsOdd = isOdd(n);
    } else {
      i = Math.abs(+valueOf(n));
      nIsOdd = i % 2;
    }

    y = new BigNumber(ONE);

    // Performs 54 loop iterations for n of 9007199254740991.
    for (; ;) {

      if (nIsOdd) {
        y = y.times(x);
        if (!y.c) break;

        if (k) {
          if (y.c.length > k) y.c.length = k;
        } else if (isModExp) {
          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
        }
      }

      if (i) {
        i = mathfloor(i / 2);
        if (i === 0) break;
        nIsOdd = i % 2;
      } else {
        n = n.times(half);
        round(n, n.e + 1, 1);

        if (n.e > 14) {
          nIsOdd = isOdd(n);
        } else {
          i = +valueOf(n);
          if (i === 0) break;
          nIsOdd = i % 2;
        }
      }

      x = x.times(x);

      if (k) {
        if (x.c && x.c.length > k) x.c.length = k;
      } else if (isModExp) {
        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
      }
    }

    if (isModExp) return y;
    if (nIsNeg) y = ONE.div(y);

    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
  };


  /*
   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
   *
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
   */
  P.integerValue = function (rm) {
    var n = new BigNumber(this);
    if (rm == null) rm = ROUNDING_MODE;
    else intCheck(rm, 0, 8);
    return round(n, n.e + 1, rm);
  };


  /*
   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
   * otherwise return false.
   */
  P.isEqualTo = P.eq = function (y, b) {
    return compare(this, new BigNumber(y, b)) === 0;
  };


  /*
   * Return true if the value of this BigNumber is a finite number, otherwise return false.
   */
  P.isFinite = function () {
    return !!this.c;
  };


  /*
   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
   * otherwise return false.
   */
  P.isGreaterThan = P.gt = function (y, b) {
    return compare(this, new BigNumber(y, b)) > 0;
  };


  /*
   * Return true if the value of this BigNumber is greater than or equal to the value of
   * BigNumber(y, b), otherwise return false.
   */
  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

  };


  /*
   * Return true if the value of this BigNumber is an integer, otherwise return false.
   */
  P.isInteger = function () {
    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
  };


  /*
   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
   * otherwise return false.
   */
  P.isLessThan = P.lt = function (y, b) {
    return compare(this, new BigNumber(y, b)) < 0;
  };


  /*
   * Return true if the value of this BigNumber is less than or equal to the value of
   * BigNumber(y, b), otherwise return false.
   */
  P.isLessThanOrEqualTo = P.lte = function (y, b) {
    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
  };


  /*
   * Return true if the value of this BigNumber is NaN, otherwise return false.
   */
  P.isNaN = function () {
    return !this.s;
  };


  /*
   * Return true if the value of this BigNumber is negative, otherwise return false.
   */
  P.isNegative = function () {
    return this.s < 0;
  };


  /*
   * Return true if the value of this BigNumber is positive, otherwise return false.
   */
  P.isPositive = function () {
    return this.s > 0;
  };


  /*
   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
   */
  P.isZero = function () {
    return !!this.c && this.c[0] == 0;
  };


  /*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new BigNumber whose value is the value of this BigNumber minus the value of
   * BigNumber(y, b).
   */
  P.minus = function (y, b) {
    var i, j, t, xLTy,
      x = this,
      a = x.s;

    y = new BigNumber(y, b);
    b = y.s;

    // Either NaN?
    if (!a || !b) return new BigNumber(NaN);

    // Signs differ?
    if (a != b) {
      y.s = -b;
      return x.plus(y);
    }

    var xe = x.e / LOG_BASE,
      ye = y.e / LOG_BASE,
      xc = x.c,
      yc = y.c;

    if (!xe || !ye) {

      // Either Infinity?
      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

      // Either zero?
      if (!xc[0] || !yc[0]) {

        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
         ROUNDING_MODE == 3 ? -0 : 0);
      }
    }

    xe = bitFloor(xe);
    ye = bitFloor(ye);
    xc = xc.slice();

    // Determine which is the bigger number.
    if (a = xe - ye) {

      if (xLTy = a < 0) {
        a = -a;
        t = xc;
      } else {
        ye = xe;
        t = yc;
      }

      t.reverse();

      // Prepend zeros to equalise exponents.
      for (b = a; b--; t.push(0));
      t.reverse();
    } else {

      // Exponents equal. Check digit by digit.
      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

      for (a = b = 0; b < j; b++) {

        if (xc[b] != yc[b]) {
          xLTy = xc[b] < yc[b];
          break;
        }
      }
    }

    // x < y? Point xc to the array of the bigger number.
    if (xLTy) {
      t = xc;
      xc = yc;
      yc = t;
      y.s = -y.s;
    }

    b = (j = yc.length) - (i = xc.length);

    // Append zeros to xc if shorter.
    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
    if (b > 0) for (; b--; xc[i++] = 0);
    b = BASE - 1;

    // Subtract yc from xc.
    for (; j > a;) {

      if (xc[--j] < yc[j]) {
        for (i = j; i && !xc[--i]; xc[i] = b);
        --xc[i];
        xc[j] += BASE;
      }

      xc[j] -= yc[j];
    }

    // Remove leading zeros and adjust exponent accordingly.
    for (; xc[0] == 0; xc.splice(0, 1), --ye);

    // Zero?
    if (!xc[0]) {

      // Following IEEE 754 (2008) 6.3,
      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
      y.s = ROUNDING_MODE == 3 ? -1 : 1;
      y.c = [y.e = 0];
      return y;
    }

    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
    // for finite x and y.
    return normalise(y, xc, ye);
  };


  /*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
   * BigNumber(y, b). The result depends on the value of MODULO_MODE.
   */
  P.modulo = P.mod = function (y, b) {
    var q, s,
      x = this;

    y = new BigNumber(y, b);

    // Return NaN if x is Infinity or NaN, or y is NaN or zero.
    if (!x.c || !y.s || y.c && !y.c[0]) {
      return new BigNumber(NaN);

    // Return x if y is Infinity or x is zero.
    } else if (!y.c || x.c && !x.c[0]) {
      return new BigNumber(x);
    }

    if (MODULO_MODE == 9) {

      // Euclidian division: q = sign(y) * floor(x / abs(y))
      // r = x - qy    where  0 <= r < abs(y)
      s = y.s;
      y.s = 1;
      q = div(x, y, 0, 3);
      y.s = s;
      q.s *= s;
    } else {
      q = div(x, y, 0, MODULO_MODE);
    }

    y = x.minus(q.times(y));

    // To match JavaScript %, ensure sign of zero is sign of dividend.
    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

    return y;
  };


  /*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
   * of BigNumber(y, b).
   */
  P.multipliedBy = P.times = function (y, b) {
    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
      base, sqrtBase,
      x = this,
      xc = x.c,
      yc = (y = new BigNumber(y, b)).c;

    // Either NaN, ±Infinity or ±0?
    if (!xc || !yc || !xc[0] || !yc[0]) {

      // Return NaN if either is NaN, or one is 0 and the other is Infinity.
      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
        y.c = y.e = y.s = null;
      } else {
        y.s *= x.s;

        // Return ±Infinity if either is ±Infinity.
        if (!xc || !yc) {
          y.c = y.e = null;

        // Return ±0 if either is ±0.
        } else {
          y.c = [0];
          y.e = 0;
        }
      }

      return y;
    }

    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
    y.s *= x.s;
    xcL = xc.length;
    ycL = yc.length;

    // Ensure xc points to longer array and xcL to its length.
    if (xcL < ycL) {
      zc = xc;
      xc = yc;
      yc = zc;
      i = xcL;
      xcL = ycL;
      ycL = i;
    }

    // Initialise the result array with zeros.
    for (i = xcL + ycL, zc = []; i--; zc.push(0));

    base = BASE;
    sqrtBase = SQRT_BASE;

    for (i = ycL; --i >= 0;) {
      c = 0;
      ylo = yc[i] % sqrtBase;
      yhi = yc[i] / sqrtBase | 0;

      for (k = xcL, j = i + k; j > i;) {
        xlo = xc[--k] % sqrtBase;
        xhi = xc[k] / sqrtBase | 0;
        m = yhi * xlo + xhi * ylo;
        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
        zc[j--] = xlo % base;
      }

      zc[j] = c;
    }

    if (c) {
      ++e;
    } else {
      zc.splice(0, 1);
    }

    return normalise(y, zc, e);
  };


  /*
   * Return a new BigNumber whose value is the value of this BigNumber negated,
   * i.e. multiplied by -1.
   */
  P.negated = function () {
    var x = new BigNumber(this);
    x.s = -x.s || null;
    return x;
  };


  /*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new BigNumber whose value is the value of this BigNumber plus the value of
   * BigNumber(y, b).
   */
  P.plus = function (y, b) {
    var t,
      x = this,
      a = x.s;

    y = new BigNumber(y, b);
    b = y.s;

    // Either NaN?
    if (!a || !b) return new BigNumber(NaN);

    // Signs differ?
     if (a != b) {
      y.s = -b;
      return x.minus(y);
    }

    var xe = x.e / LOG_BASE,
      ye = y.e / LOG_BASE,
      xc = x.c,
      yc = y.c;

    if (!xe || !ye) {

      // Return ±Infinity if either ±Infinity.
      if (!xc || !yc) return new BigNumber(a / 0);

      // Either zero?
      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
    }

    xe = bitFloor(xe);
    ye = bitFloor(ye);
    xc = xc.slice();

    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
    if (a = xe - ye) {
      if (a > 0) {
        ye = xe;
        t = yc;
      } else {
        a = -a;
        t = xc;
      }

      t.reverse();
      for (; a--; t.push(0));
      t.reverse();
    }

    a = xc.length;
    b = yc.length;

    // Point xc to the longer array, and b to the shorter length.
    if (a - b < 0) {
      t = yc;
      yc = xc;
      xc = t;
      b = a;
    }

    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
    for (a = 0; b;) {
      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
    }

    if (a) {
      xc = [a].concat(xc);
      ++ye;
    }

    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
    // ye = MAX_EXP + 1 possible
    return normalise(y, xc, ye);
  };


  /*
   * If sd is undefined or null or true or false, return the number of significant digits of
   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
   * If sd is true include integer-part trailing zeros in the count.
   *
   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
   * ROUNDING_MODE if rm is omitted.
   *
   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
   *                     boolean: whether to count integer-part trailing zeros: true or false.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
   */
  P.precision = P.sd = function (sd, rm) {
    var c, n, v,
      x = this;

    if (sd != null && sd !== !!sd) {
      intCheck(sd, 1, MAX);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);

      return round(new BigNumber(x), sd, rm);
    }

    if (!(c = x.c)) return null;
    v = c.length - 1;
    n = v * LOG_BASE + 1;

    if (v = c[v]) {

      // Subtract the number of trailing zeros of the last element.
      for (; v % 10 == 0; v /= 10, n--);

      // Add the number of digits of the first element.
      for (v = c[0]; v >= 10; v /= 10, n++);
    }

    if (sd && x.e + 1 > n) n = x.e + 1;

    return n;
  };


  /*
   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
   *
   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
   */
  P.shiftedBy = function (k) {
    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    return this.times('1e' + k);
  };


  /*
   *  sqrt(-n) =  N
   *  sqrt(N) =  N
   *  sqrt(-I) =  N
   *  sqrt(I) =  I
   *  sqrt(0) =  0
   *  sqrt(-0) = -0
   *
   * Return a new BigNumber whose value is the square root of the value of this BigNumber,
   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
   */
  P.squareRoot = P.sqrt = function () {
    var m, n, r, rep, t,
      x = this,
      c = x.c,
      s = x.s,
      e = x.e,
      dp = DECIMAL_PLACES + 4,
      half = new BigNumber('0.5');

    // Negative/NaN/Infinity/zero?
    if (s !== 1 || !c || !c[0]) {
      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
    }

    // Initial estimate.
    s = Math.sqrt(+valueOf(x));

    // Math.sqrt underflow/overflow?
    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
    if (s == 0 || s == 1 / 0) {
      n = coeffToString(c);
      if ((n.length + e) % 2 == 0) n += '0';
      s = Math.sqrt(+n);
      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

      if (s == 1 / 0) {
        n = '5e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new BigNumber(n);
    } else {
      r = new BigNumber(s + '');
    }

    // Check for zero.
    // r could be zero if MIN_EXP is changed after the this value was created.
    // This would cause a division by zero (x/t) and hence Infinity below, which would cause
    // coeffToString to throw.
    if (r.c[0]) {
      e = r.e;
      s = e + dp;
      if (s < 3) s = 0;

      // Newton-Raphson iteration.
      for (; ;) {
        t = r;
        r = half.times(t.plus(div(x, t, dp, 1)));

        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

          // The exponent of r may here be one less than the final result exponent,
          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
          // are indexed correctly.
          if (r.e < e) --s;
          n = n.slice(s - 3, s + 1);

          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
          // iteration.
          if (n == '9999' || !rep && n == '4999') {

            // On the first iteration only, check to see if rounding up gives the
            // exact result as the nines may infinitely repeat.
            if (!rep) {
              round(t, t.e + DECIMAL_PLACES + 2, 0);

              if (t.times(t).eq(x)) {
                r = t;
                break;
              }
            }

            dp += 4;
            s += 4;
            rep = 1;
          } else {

            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
            // result. If not, then there are further digits and m will be truthy.
            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

              // Truncate to the first rounding digit.
              round(r, r.e + DECIMAL_PLACES + 2, 1);
              m = !r.times(r).eq(x);
            }

            break;
          }
        }
      }
    }

    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
  };


  /*
   * Return a string representing the value of this BigNumber in exponential notation and
   * rounded using ROUNDING_MODE to dp fixed decimal places.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.toExponential = function (dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp++;
    }
    return format(this, dp, rm, 1);
  };


  /*
   * Return a string representing the value of this BigNumber in fixed-point notation rounding
   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
   *
   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
   * but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.toFixed = function (dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp = dp + this.e + 1;
    }
    return format(this, dp, rm);
  };


  /*
   * Return a string representing the value of this BigNumber in fixed-point notation rounded
   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
   * of the format or FORMAT object (see BigNumber.set).
   *
   * The formatting object may contain some or all of the properties shown below.
   *
   * FORMAT = {
   *   prefix: '',
   *   groupSize: 3,
   *   secondaryGroupSize: 0,
   *   groupSeparator: ',',
   *   decimalSeparator: '.',
   *   fractionGroupSize: 0,
   *   fractionGroupSeparator: '\xA0',      // non-breaking space
   *   suffix: ''
   * };
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   * [format] {object} Formatting options. See FORMAT pbject above.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   * '[BigNumber Error] Argument not an object: {format}'
   */
  P.toFormat = function (dp, rm, format) {
    var str,
      x = this;

    if (format == null) {
      if (dp != null && rm && typeof rm == 'object') {
        format = rm;
        rm = null;
      } else if (dp && typeof dp == 'object') {
        format = dp;
        dp = rm = null;
      } else {
        format = FORMAT;
      }
    } else if (typeof format != 'object') {
      throw Error
        (bignumberError + 'Argument not an object: ' + format);
    }

    str = x.toFixed(dp, rm);

    if (x.c) {
      var i,
        arr = str.split('.'),
        g1 = +format.groupSize,
        g2 = +format.secondaryGroupSize,
        groupSeparator = format.groupSeparator || '',
        intPart = arr[0],
        fractionPart = arr[1],
        isNeg = x.s < 0,
        intDigits = isNeg ? intPart.slice(1) : intPart,
        len = intDigits.length;

      if (g2) {
        i = g1;
        g1 = g2;
        g2 = i;
        len -= i;
      }

      if (g1 > 0 && len > 0) {
        i = len % g1 || g1;
        intPart = intDigits.substr(0, i);
        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
        if (isNeg) intPart = '-' + intPart;
      }

      str = fractionPart
       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
        ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
         '$&' + (format.fractionGroupSeparator || ''))
        : fractionPart)
       : intPart;
    }

    return (format.prefix || '') + str + (format.suffix || '');
  };


  /*
   * Return an array of two BigNumbers representing the value of this BigNumber as a simple
   * fraction with an integer numerator and an integer denominator.
   * The denominator will be a positive non-zero value less than or equal to the specified
   * maximum denominator. If a maximum denominator is not specified, the denominator will be
   * the lowest value necessary to represent the number exactly.
   *
   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
   *
   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
   */
  P.toFraction = function (md) {
    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
      x = this,
      xc = x.c;

    if (md != null) {
      n = new BigNumber(md);

      // Throw if md is less than one or is not an integer, unless it is Infinity.
      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
        throw Error
          (bignumberError + 'Argument ' +
            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
      }
    }

    if (!xc) return new BigNumber(x);

    d = new BigNumber(ONE);
    n1 = d0 = new BigNumber(ONE);
    d1 = n0 = new BigNumber(ONE);
    s = coeffToString(xc);

    // Determine initial denominator.
    // d is a power of 10 and the minimum max denominator that specifies the value exactly.
    e = d.e = s.length - x.e - 1;
    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

    exp = MAX_EXP;
    MAX_EXP = 1 / 0;
    n = new BigNumber(s);

    // n0 = d1 = 0
    n0.c[0] = 0;

    for (; ;)  {
      q = div(n, d, 0, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.comparedTo(md) == 1) break;
      d0 = d1;
      d1 = d2;
      n1 = n0.plus(q.times(d2 = n1));
      n0 = d2;
      d = n.minus(q.times(d2 = d));
      n = d2;
    }

    d2 = div(md.minus(d0), d1, 0, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;
    e = e * 2;

    // Determine which fraction is closer to x, n0/d0 or n1/d1
    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

    MAX_EXP = exp;

    return r;
  };


  /*
   * Return the value of this BigNumber converted to a number primitive.
   */
  P.toNumber = function () {
    return +valueOf(this);
  };


  /*
   * Return a string representing the value of this BigNumber rounded to sd significant digits
   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
   * necessary to represent the integer part of the value in fixed-point notation, then use
   * exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
   */
  P.toPrecision = function (sd, rm) {
    if (sd != null) intCheck(sd, 1, MAX);
    return format(this, sd, rm, 2);
  };


  /*
   * Return a string representing the value of this BigNumber in base b, or base 10 if b is
   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
   * TO_EXP_NEG, return exponential notation.
   *
   * [b] {number} Integer, 2 to ALPHABET.length inclusive.
   *
   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
   */
  P.toString = function (b) {
    var str,
      n = this,
      s = n.s,
      e = n.e;

    // Infinity or NaN?
    if (e === null) {
      if (s) {
        str = 'Infinity';
        if (s < 0) str = '-' + str;
      } else {
        str = 'NaN';
      }
    } else {
      if (b == null) {
        str = e <= TO_EXP_NEG || e >= TO_EXP_POS
         ? toExponential(coeffToString(n.c), e)
         : toFixedPoint(coeffToString(n.c), e, '0');
      } else if (b === 10 && alphabetHasNormalDecimalDigits) {
        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
        str = toFixedPoint(coeffToString(n.c), n.e, '0');
      } else {
        intCheck(b, 2, ALPHABET.length, 'Base');
        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
      }

      if (s < 0 && n.c[0]) str = '-' + str;
    }

    return str;
  };


  /*
   * Return as toString, but do not accept a base argument, and include the minus sign for
   * negative zero.
   */
  P.valueOf = P.toJSON = function () {
    return valueOf(this);
  };


  P._isBigNumber = true;

  P[Symbol.toStringTag] = 'BigNumber';

  // Node.js v10.12.0+
  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;

  if (configObject != null) BigNumber.set(configObject);

  return BigNumber;
}


// PRIVATE HELPER FUNCTIONS

// These functions don't need access to variables,
// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


function bitFloor(n) {
  var i = n | 0;
  return n > 0 || n === i ? i : i - 1;
}


// Return a coefficient array as a string of base 10 digits.
function coeffToString(a) {
  var s, z,
    i = 1,
    j = a.length,
    r = a[0] + '';

  for (; i < j;) {
    s = a[i++] + '';
    z = LOG_BASE - s.length;
    for (; z--; s = '0' + s);
    r += s;
  }

  // Determine trailing zeros.
  for (j = r.length; r.charCodeAt(--j) === 48;);

  return r.slice(0, j + 1 || 1);
}


// Compare the value of BigNumbers x and y.
function compare(x, y) {
  var a, b,
    xc = x.c,
    yc = y.c,
    i = x.s,
    j = y.s,
    k = x.e,
    l = y.e;

  // Either NaN?
  if (!i || !j) return null;

  a = xc && !xc[0];
  b = yc && !yc[0];

  // Either zero?
  if (a || b) return a ? b ? 0 : -j : i;

  // Signs differ?
  if (i != j) return i;

  a = i < 0;
  b = k == l;

  // Either Infinity?
  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

  // Compare exponents.
  if (!b) return k > l ^ a ? 1 : -1;

  j = (k = xc.length) < (l = yc.length) ? k : l;

  // Compare digit by digit.
  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

  // Compare lengths.
  return k == l ? 0 : k > l ^ a ? 1 : -1;
}


/*
 * Check that n is a primitive number, an integer, and in range, otherwise throw.
 */
function intCheck(n, min, max, name) {
  if (n < min || n > max || n !== mathfloor(n)) {
    throw Error
     (bignumberError + (name || 'Argument') + (typeof n == 'number'
       ? n < min || n > max ? ' out of range: ' : ' not an integer: '
       : ' not a primitive number: ') + String(n));
  }
}


// Assumes finite n.
function isOdd(n) {
  var k = n.c.length - 1;
  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
}


function toExponential(str, e) {
  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
   (e < 0 ? 'e' : 'e+') + e;
}


function toFixedPoint(str, e, z) {
  var len, zs;

  // Negative exponent?
  if (e < 0) {

    // Prepend zeros.
    for (zs = z + '.'; ++e; zs += z);
    str = zs + str;

  // Positive exponent
  } else {
    len = str.length;

    // Append zeros.
    if (++e > len) {
      for (zs = z, e -= len; --e; zs += z);
      str += zs;
    } else if (e < len) {
      str = str.slice(0, e) + '.' + str.slice(e);
    }
  }

  return str;
}


// EXPORT


var bignumber_BigNumber = clone();

/* harmony default export */ var bignumber = (bignumber_BigNumber);

;// ./node_modules/@ethersproject/logger/lib.esm/_version.js
const version = "logger/5.8.0";
//# sourceMappingURL=_version.js.map
;// ./node_modules/@ethersproject/logger/lib.esm/index.js

let _permanentCensorErrors = false;
let _censorErrors = false;
const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
let _logLevel = LogLevels["default"];

let _globalLogger = null;
function _checkNormalize() {
    try {
        const missing = [];
        // Make sure all forms of normalization are supported
        ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
            try {
                if ("test".normalize(form) !== "test") {
                    throw new Error("bad normalize");
                }
                ;
            }
            catch (error) {
                missing.push(form);
            }
        });
        if (missing.length) {
            throw new Error("missing " + missing.join(", "));
        }
        if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
            throw new Error("broken implementation");
        }
    }
    catch (error) {
        return error.message;
    }
    return null;
}
const _normalizeError = _checkNormalize();
var LogLevel;
(function (LogLevel) {
    LogLevel["DEBUG"] = "DEBUG";
    LogLevel["INFO"] = "INFO";
    LogLevel["WARNING"] = "WARNING";
    LogLevel["ERROR"] = "ERROR";
    LogLevel["OFF"] = "OFF";
})(LogLevel || (LogLevel = {}));
var ErrorCode;
(function (ErrorCode) {
    ///////////////////
    // Generic Errors
    // Unknown Error
    ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
    // Not Implemented
    ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
    // Unsupported Operation
    //   - operation
    ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
    //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
    ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
    // Some sort of bad response from the server
    ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
    // Timeout
    ErrorCode["TIMEOUT"] = "TIMEOUT";
    ///////////////////
    // Operational  Errors
    // Buffer Overrun
    ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
    // Numeric Fault
    //   - operation: the operation being executed
    //   - fault: the reason this faulted
    ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
    ///////////////////
    // Argument Errors
    // Missing new operator to an object
    //  - name: The name of the class
    ErrorCode["MISSING_NEW"] = "MISSING_NEW";
    // Invalid argument (e.g. value is incompatible with type) to a function:
    //   - argument: The argument name that was invalid
    //   - value: The value of the argument
    ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
    // Missing argument to a function:
    //   - count: The number of arguments received
    //   - expectedCount: The number of arguments expected
    ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
    // Too many arguments
    //   - count: The number of arguments received
    //   - expectedCount: The number of arguments expected
    ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
    ///////////////////
    // Blockchain Errors
    // Call exception
    //  - transaction: the transaction
    //  - address?: the contract address
    //  - args?: The arguments passed into the function
    //  - method?: The Solidity method signature
    //  - errorSignature?: The EIP848 error signature
    //  - errorArgs?: The EIP848 error parameters
    //  - reason: The reason (only for EIP848 "Error(string)")
    ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
    // Insufficient funds (< value + gasLimit * gasPrice)
    //   - transaction: the transaction attempted
    ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
    // Nonce has already been used
    //   - transaction: the transaction attempted
    ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
    // The replacement fee for the transaction is too low
    //   - transaction: the transaction attempted
    ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
    // The gas limit could not be estimated
    //   - transaction: the transaction passed to estimateGas
    ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
    // The transaction was replaced by one with a higher gas price
    //   - reason: "cancelled", "replaced" or "repriced"
    //   - cancelled: true if reason == "cancelled" or reason == "replaced")
    //   - hash: original transaction hash
    //   - replacement: the full TransactionsResponse for the replacement
    //   - receipt: the receipt of the replacement
    ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
    ///////////////////
    // Interaction Errors
    // The user rejected the action, such as signing a message or sending
    // a transaction
    ErrorCode["ACTION_REJECTED"] = "ACTION_REJECTED";
})(ErrorCode || (ErrorCode = {}));
;
const HEX = "0123456789abcdef";
class lib_esm_Logger {
    constructor(version) {
        Object.defineProperty(this, "version", {
            enumerable: true,
            value: version,
            writable: false
        });
    }
    _log(logLevel, args) {
        const level = logLevel.toLowerCase();
        if (LogLevels[level] == null) {
            this.throwArgumentError("invalid log level name", "logLevel", logLevel);
        }
        if (_logLevel > LogLevels[level]) {
            return;
        }
        console.log.apply(console, args);
    }
    debug(...args) {
        this._log(lib_esm_Logger.levels.DEBUG, args);
    }
    info(...args) {
        this._log(lib_esm_Logger.levels.INFO, args);
    }
    warn(...args) {
        this._log(lib_esm_Logger.levels.WARNING, args);
    }
    makeError(message, code, params) {
        // Errors are being censored
        if (_censorErrors) {
            return this.makeError("censored error", code, {});
        }
        if (!code) {
            code = lib_esm_Logger.errors.UNKNOWN_ERROR;
        }
        if (!params) {
            params = {};
        }
        const messageDetails = [];
        Object.keys(params).forEach((key) => {
            const value = params[key];
            try {
                if (value instanceof Uint8Array) {
                    let hex = "";
                    for (let i = 0; i < value.length; i++) {
                        hex += HEX[value[i] >> 4];
                        hex += HEX[value[i] & 0x0f];
                    }
                    messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                }
                else {
                    messageDetails.push(key + "=" + JSON.stringify(value));
                }
            }
            catch (error) {
                messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
            }
        });
        messageDetails.push(`code=${code}`);
        messageDetails.push(`version=${this.version}`);
        const reason = message;
        let url = "";
        switch (code) {
            case ErrorCode.NUMERIC_FAULT: {
                url = "NUMERIC_FAULT";
                const fault = message;
                switch (fault) {
                    case "overflow":
                    case "underflow":
                    case "division-by-zero":
                        url += "-" + fault;
                        break;
                    case "negative-power":
                    case "negative-width":
                        url += "-unsupported";
                        break;
                    case "unbound-bitwise-result":
                        url += "-unbound-result";
                        break;
                }
                break;
            }
            case ErrorCode.CALL_EXCEPTION:
            case ErrorCode.INSUFFICIENT_FUNDS:
            case ErrorCode.MISSING_NEW:
            case ErrorCode.NONCE_EXPIRED:
            case ErrorCode.REPLACEMENT_UNDERPRICED:
            case ErrorCode.TRANSACTION_REPLACED:
            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
                url = code;
                break;
        }
        if (url) {
            message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
        }
        if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
        }
        // @TODO: Any??
        const error = new Error(message);
        error.reason = reason;
        error.code = code;
        Object.keys(params).forEach(function (key) {
            error[key] = params[key];
        });
        return error;
    }
    throwError(message, code, params) {
        throw this.makeError(message, code, params);
    }
    throwArgumentError(message, name, value) {
        return this.throwError(message, lib_esm_Logger.errors.INVALID_ARGUMENT, {
            argument: name,
            value: value
        });
    }
    assert(condition, message, code, params) {
        if (!!condition) {
            return;
        }
        this.throwError(message, code, params);
    }
    assertArgument(condition, message, name, value) {
        if (!!condition) {
            return;
        }
        this.throwArgumentError(message, name, value);
    }
    checkNormalize(message) {
        if (message == null) {
            message = "platform missing String.prototype.normalize";
        }
        if (_normalizeError) {
            this.throwError("platform missing String.prototype.normalize", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "String.prototype.normalize", form: _normalizeError
            });
        }
    }
    checkSafeUint53(value, message) {
        if (typeof (value) !== "number") {
            return;
        }
        if (message == null) {
            message = "value not safe";
        }
        if (value < 0 || value >= 0x1fffffffffffff) {
            this.throwError(message, lib_esm_Logger.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "out-of-safe-range",
                value: value
            });
        }
        if (value % 1) {
            this.throwError(message, lib_esm_Logger.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "non-integer",
                value: value
            });
        }
    }
    checkArgumentCount(count, expectedCount, message) {
        if (message) {
            message = ": " + message;
        }
        else {
            message = "";
        }
        if (count < expectedCount) {
            this.throwError("missing argument" + message, lib_esm_Logger.errors.MISSING_ARGUMENT, {
                count: count,
                expectedCount: expectedCount
            });
        }
        if (count > expectedCount) {
            this.throwError("too many arguments" + message, lib_esm_Logger.errors.UNEXPECTED_ARGUMENT, {
                count: count,
                expectedCount: expectedCount
            });
        }
    }
    checkNew(target, kind) {
        if (target === Object || target == null) {
            this.throwError("missing new", lib_esm_Logger.errors.MISSING_NEW, { name: kind.name });
        }
    }
    checkAbstract(target, kind) {
        if (target === kind) {
            this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
        }
        else if (target === Object || target == null) {
            this.throwError("missing new", lib_esm_Logger.errors.MISSING_NEW, { name: kind.name });
        }
    }
    static globalLogger() {
        if (!_globalLogger) {
            _globalLogger = new lib_esm_Logger(version);
        }
        return _globalLogger;
    }
    static setCensorship(censorship, permanent) {
        if (!censorship && permanent) {
            this.globalLogger().throwError("cannot permanently disable censorship", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
            });
        }
        if (_permanentCensorErrors) {
            if (!censorship) {
                return;
            }
            this.globalLogger().throwError("error censorship permanent", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
            });
        }
        _censorErrors = !!censorship;
        _permanentCensorErrors = !!permanent;
    }
    static setLogLevel(logLevel) {
        const level = LogLevels[logLevel.toLowerCase()];
        if (level == null) {
            lib_esm_Logger.globalLogger().warn("invalid log level - " + logLevel);
            return;
        }
        _logLevel = level;
    }
    static from(version) {
        return new lib_esm_Logger(version);
    }
}
lib_esm_Logger.errors = ErrorCode;
lib_esm_Logger.levels = LogLevel;
//# sourceMappingURL=index.js.map
;// ./node_modules/@ethersproject/bytes/lib.esm/_version.js
const _version_version = "bytes/5.8.0";
//# sourceMappingURL=_version.js.map
;// ./node_modules/@ethersproject/bytes/lib.esm/index.js



const logger = new lib_esm_Logger(_version_version);
///////////////////////////////
function isHexable(value) {
    return !!(value.toHexString);
}
function addSlice(array) {
    if (array.slice) {
        return array;
    }
    array.slice = function () {
        const args = Array.prototype.slice.call(arguments);
        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
    };
    return array;
}
function lib_esm_isBytesLike(value) {
    return ((lib_esm_isHexString(value) && !(value.length % 2)) || lib_esm_isBytes(value));
}
function isInteger(value) {
    return (typeof (value) === "number" && value == value && (value % 1) === 0);
}
function lib_esm_isBytes(value) {
    if (value == null) {
        return false;
    }
    if (value.constructor === Uint8Array) {
        return true;
    }
    if (typeof (value) === "string") {
        return false;
    }
    if (!isInteger(value.length) || value.length < 0) {
        return false;
    }
    for (let i = 0; i < value.length; i++) {
        const v = value[i];
        if (!isInteger(v) || v < 0 || v >= 256) {
            return false;
        }
    }
    return true;
}
function lib_esm_arrayify(value, options) {
    if (!options) {
        options = {};
    }
    if (typeof (value) === "number") {
        logger.checkSafeUint53(value, "invalid arrayify value");
        const result = [];
        while (value) {
            result.unshift(value & 0xff);
            value = parseInt(String(value / 256));
        }
        if (result.length === 0) {
            result.push(0);
        }
        return addSlice(new Uint8Array(result));
    }
    if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
        value = "0x" + value;
    }
    if (isHexable(value)) {
        value = value.toHexString();
    }
    if (lib_esm_isHexString(value)) {
        let hex = value.substring(2);
        if (hex.length % 2) {
            if (options.hexPad === "left") {
                hex = "0" + hex;
            }
            else if (options.hexPad === "right") {
                hex += "0";
            }
            else {
                logger.throwArgumentError("hex data is odd-length", "value", value);
            }
        }
        const result = [];
        for (let i = 0; i < hex.length; i += 2) {
            result.push(parseInt(hex.substring(i, i + 2), 16));
        }
        return addSlice(new Uint8Array(result));
    }
    if (lib_esm_isBytes(value)) {
        return addSlice(new Uint8Array(value));
    }
    return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function lib_esm_concat(items) {
    const objects = items.map(item => lib_esm_arrayify(item));
    const length = objects.reduce((accum, item) => (accum + item.length), 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
        result.set(object, offset);
        return offset + object.length;
    }, 0);
    return addSlice(result);
}
function lib_esm_stripZeros(value) {
    let result = lib_esm_arrayify(value);
    if (result.length === 0) {
        return result;
    }
    // Find the first non-zero entry
    let start = 0;
    while (start < result.length && result[start] === 0) {
        start++;
    }
    // If we started with zeros, strip them
    if (start) {
        result = result.slice(start);
    }
    return result;
}
function zeroPad(value, length) {
    value = lib_esm_arrayify(value);
    if (value.length > length) {
        logger.throwArgumentError("value out of range", "value", arguments[0]);
    }
    const result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice(result);
}
function lib_esm_isHexString(value, length) {
    if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
    }
    if (length && value.length !== 2 + 2 * length) {
        return false;
    }
    return true;
}
const HexCharacters = "0123456789abcdef";
function lib_esm_hexlify(value, options) {
    if (!options) {
        options = {};
    }
    if (typeof (value) === "number") {
        logger.checkSafeUint53(value, "invalid hexlify value");
        let hex = "";
        while (value) {
            hex = HexCharacters[value & 0xf] + hex;
            value = Math.floor(value / 16);
        }
        if (hex.length) {
            if (hex.length % 2) {
                hex = "0" + hex;
            }
            return "0x" + hex;
        }
        return "0x00";
    }
    if (typeof (value) === "bigint") {
        value = value.toString(16);
        if (value.length % 2) {
            return ("0x0" + value);
        }
        return "0x" + value;
    }
    if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
        value = "0x" + value;
    }
    if (isHexable(value)) {
        return value.toHexString();
    }
    if (lib_esm_isHexString(value)) {
        if (value.length % 2) {
            if (options.hexPad === "left") {
                value = "0x0" + value.substring(2);
            }
            else if (options.hexPad === "right") {
                value += "0";
            }
            else {
                logger.throwArgumentError("hex data is odd-length", "value", value);
            }
        }
        return value.toLowerCase();
    }
    if (lib_esm_isBytes(value)) {
        let result = "0x";
        for (let i = 0; i < value.length; i++) {
            let v = value[i];
            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
        }
        return result;
    }
    return logger.throwArgumentError("invalid hexlify value", "value", value);
}
/*
function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
    if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
        return "0x0" + value.substring(2);
    }
    return value;
}
*/
function lib_esm_hexDataLength(data) {
    if (typeof (data) !== "string") {
        data = lib_esm_hexlify(data);
    }
    else if (!lib_esm_isHexString(data) || (data.length % 2)) {
        return null;
    }
    return (data.length - 2) / 2;
}
function lib_esm_hexDataSlice(data, offset, endOffset) {
    if (typeof (data) !== "string") {
        data = lib_esm_hexlify(data);
    }
    else if (!lib_esm_isHexString(data) || (data.length % 2)) {
        logger.throwArgumentError("invalid hexData", "value", data);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
        return "0x" + data.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data.substring(offset);
}
function hexConcat(items) {
    let result = "0x";
    items.forEach((item) => {
        result += lib_esm_hexlify(item).substring(2);
    });
    return result;
}
function hexValue(value) {
    const trimmed = hexStripZeros(lib_esm_hexlify(value, { hexPad: "left" }));
    if (trimmed === "0x") {
        return "0x0";
    }
    return trimmed;
}
function hexStripZeros(value) {
    if (typeof (value) !== "string") {
        value = lib_esm_hexlify(value);
    }
    if (!lib_esm_isHexString(value)) {
        logger.throwArgumentError("invalid hex string", "value", value);
    }
    value = value.substring(2);
    let offset = 0;
    while (offset < value.length && value[offset] === "0") {
        offset++;
    }
    return "0x" + value.substring(offset);
}
function hexZeroPad(value, length) {
    if (typeof (value) !== "string") {
        value = lib_esm_hexlify(value);
    }
    else if (!lib_esm_isHexString(value)) {
        logger.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
        logger.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
        value = "0x0" + value.substring(2);
    }
    return value;
}
function lib_esm_splitSignature(signature) {
    const result = {
        r: "0x",
        s: "0x",
        _vs: "0x",
        recoveryParam: 0,
        v: 0,
        yParityAndS: "0x",
        compact: "0x"
    };
    if (lib_esm_isBytesLike(signature)) {
        let bytes = lib_esm_arrayify(signature);
        // Get the r, s and v
        if (bytes.length === 64) {
            // EIP-2098; pull the v from the top bit of s and clear it
            result.v = 27 + (bytes[32] >> 7);
            bytes[32] &= 0x7f;
            result.r = lib_esm_hexlify(bytes.slice(0, 32));
            result.s = lib_esm_hexlify(bytes.slice(32, 64));
        }
        else if (bytes.length === 65) {
            result.r = lib_esm_hexlify(bytes.slice(0, 32));
            result.s = lib_esm_hexlify(bytes.slice(32, 64));
            result.v = bytes[64];
        }
        else {
            logger.throwArgumentError("invalid signature string", "signature", signature);
        }
        // Allow a recid to be used as the v
        if (result.v < 27) {
            if (result.v === 0 || result.v === 1) {
                result.v += 27;
            }
            else {
                logger.throwArgumentError("signature invalid v byte", "signature", signature);
            }
        }
        // Compute recoveryParam from v
        result.recoveryParam = 1 - (result.v % 2);
        // Compute _vs from recoveryParam and s
        if (result.recoveryParam) {
            bytes[32] |= 0x80;
        }
        result._vs = lib_esm_hexlify(bytes.slice(32, 64));
    }
    else {
        result.r = signature.r;
        result.s = signature.s;
        result.v = signature.v;
        result.recoveryParam = signature.recoveryParam;
        result._vs = signature._vs;
        // If the _vs is available, use it to populate missing s, v and recoveryParam
        // and verify non-missing s, v and recoveryParam
        if (result._vs != null) {
            const vs = zeroPad(lib_esm_arrayify(result._vs), 32);
            result._vs = lib_esm_hexlify(vs);
            // Set or check the recid
            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);
            if (result.recoveryParam == null) {
                result.recoveryParam = recoveryParam;
            }
            else if (result.recoveryParam !== recoveryParam) {
                logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
            }
            // Set or check the s
            vs[0] &= 0x7f;
            const s = lib_esm_hexlify(vs);
            if (result.s == null) {
                result.s = s;
            }
            else if (result.s !== s) {
                logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
            }
        }
        // Use recid and v to populate each other
        if (result.recoveryParam == null) {
            if (result.v == null) {
                logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
            }
            else if (result.v === 0 || result.v === 1) {
                result.recoveryParam = result.v;
            }
            else {
                result.recoveryParam = 1 - (result.v % 2);
            }
        }
        else {
            if (result.v == null) {
                result.v = 27 + result.recoveryParam;
            }
            else {
                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
                if (result.recoveryParam !== recId) {
                    logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
                }
            }
        }
        if (result.r == null || !lib_esm_isHexString(result.r)) {
            logger.throwArgumentError("signature missing or invalid r", "signature", signature);
        }
        else {
            result.r = hexZeroPad(result.r, 32);
        }
        if (result.s == null || !lib_esm_isHexString(result.s)) {
            logger.throwArgumentError("signature missing or invalid s", "signature", signature);
        }
        else {
            result.s = hexZeroPad(result.s, 32);
        }
        const vs = lib_esm_arrayify(result.s);
        if (vs[0] >= 128) {
            logger.throwArgumentError("signature s out of range", "signature", signature);
        }
        if (result.recoveryParam) {
            vs[0] |= 0x80;
        }
        const _vs = lib_esm_hexlify(vs);
        if (result._vs) {
            if (!lib_esm_isHexString(result._vs)) {
                logger.throwArgumentError("signature invalid _vs", "signature", signature);
            }
            result._vs = hexZeroPad(result._vs, 32);
        }
        // Set or check the _vs
        if (result._vs == null) {
            result._vs = _vs;
        }
        else if (result._vs !== _vs) {
            logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
        }
    }
    result.yParityAndS = result._vs;
    result.compact = result.r + result.yParityAndS.substring(2);
    return result;
}
function joinSignature(signature) {
    signature = lib_esm_splitSignature(signature);
    return lib_esm_hexlify(lib_esm_concat([
        signature.r,
        signature.s,
        (signature.recoveryParam ? "0x1c" : "0x1b")
    ]));
}
//# sourceMappingURL=index.js.map
// EXTERNAL MODULE: ./node_modules/@ethersproject/bignumber/node_modules/bn.js/lib/bn.js
var bn = __webpack_require__("./node_modules/@ethersproject/bignumber/node_modules/bn.js/lib/bn.js");
var bn_default = /*#__PURE__*/__webpack_require__.n(bn);
;// ./node_modules/@ethersproject/bignumber/lib.esm/_version.js
const lib_esm_version_version = "bignumber/5.8.0";
//# sourceMappingURL=_version.js.map
;// ./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js

/**
 *  BigNumber
 *
 *  A wrapper around the BN.js object. We use the BN.js library
 *  because it is used by elliptic, so it is required regardless.
 *
 */

var BN = (bn_default()).BN;



const bignumber_logger = new lib_esm_Logger(lib_esm_version_version);
const _constructorGuard = {};
const MAX_SAFE = 0x1fffffffffffff;
function isBigNumberish(value) {
    return (value != null) && (lib_esm_bignumber_BigNumber.isBigNumber(value) ||
        (typeof (value) === "number" && (value % 1) === 0) ||
        (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
        isHexString(value) ||
        (typeof (value) === "bigint") ||
        isBytes(value));
}
// Only warn about passing 10 into radix once
let _warnedToStringRadix = false;
class lib_esm_bignumber_BigNumber {
    constructor(constructorGuard, hex) {
        if (constructorGuard !== _constructorGuard) {
            bignumber_logger.throwError("cannot call constructor directly; use BigNumber.from", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new (BigNumber)"
            });
        }
        this._hex = hex;
        this._isBigNumber = true;
        Object.freeze(this);
    }
    fromTwos(value) {
        return toBigNumber(toBN(this).fromTwos(value));
    }
    toTwos(value) {
        return toBigNumber(toBN(this).toTwos(value));
    }
    abs() {
        if (this._hex[0] === "-") {
            return lib_esm_bignumber_BigNumber.from(this._hex.substring(1));
        }
        return this;
    }
    add(other) {
        return toBigNumber(toBN(this).add(toBN(other)));
    }
    sub(other) {
        return toBigNumber(toBN(this).sub(toBN(other)));
    }
    div(other) {
        const o = lib_esm_bignumber_BigNumber.from(other);
        if (o.isZero()) {
            throwFault("division-by-zero", "div");
        }
        return toBigNumber(toBN(this).div(toBN(other)));
    }
    mul(other) {
        return toBigNumber(toBN(this).mul(toBN(other)));
    }
    mod(other) {
        const value = toBN(other);
        if (value.isNeg()) {
            throwFault("division-by-zero", "mod");
        }
        return toBigNumber(toBN(this).umod(value));
    }
    pow(other) {
        const value = toBN(other);
        if (value.isNeg()) {
            throwFault("negative-power", "pow");
        }
        return toBigNumber(toBN(this).pow(value));
    }
    and(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
            throwFault("unbound-bitwise-result", "and");
        }
        return toBigNumber(toBN(this).and(value));
    }
    or(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
            throwFault("unbound-bitwise-result", "or");
        }
        return toBigNumber(toBN(this).or(value));
    }
    xor(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
            throwFault("unbound-bitwise-result", "xor");
        }
        return toBigNumber(toBN(this).xor(value));
    }
    mask(value) {
        if (this.isNegative() || value < 0) {
            throwFault("negative-width", "mask");
        }
        return toBigNumber(toBN(this).maskn(value));
    }
    shl(value) {
        if (this.isNegative() || value < 0) {
            throwFault("negative-width", "shl");
        }
        return toBigNumber(toBN(this).shln(value));
    }
    shr(value) {
        if (this.isNegative() || value < 0) {
            throwFault("negative-width", "shr");
        }
        return toBigNumber(toBN(this).shrn(value));
    }
    eq(other) {
        return toBN(this).eq(toBN(other));
    }
    lt(other) {
        return toBN(this).lt(toBN(other));
    }
    lte(other) {
        return toBN(this).lte(toBN(other));
    }
    gt(other) {
        return toBN(this).gt(toBN(other));
    }
    gte(other) {
        return toBN(this).gte(toBN(other));
    }
    isNegative() {
        return (this._hex[0] === "-");
    }
    isZero() {
        return toBN(this).isZero();
    }
    toNumber() {
        try {
            return toBN(this).toNumber();
        }
        catch (error) {
            throwFault("overflow", "toNumber", this.toString());
        }
        return null;
    }
    toBigInt() {
        try {
            return BigInt(this.toString());
        }
        catch (e) { }
        return bignumber_logger.throwError("this platform does not support BigInt", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, {
            value: this.toString()
        });
    }
    toString() {
        // Lots of people expect this, which we do not support, so check (See: #889)
        if (arguments.length > 0) {
            if (arguments[0] === 10) {
                if (!_warnedToStringRadix) {
                    _warnedToStringRadix = true;
                    bignumber_logger.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                }
            }
            else if (arguments[0] === 16) {
                bignumber_logger.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", lib_esm_Logger.errors.UNEXPECTED_ARGUMENT, {});
            }
            else {
                bignumber_logger.throwError("BigNumber.toString does not accept parameters", lib_esm_Logger.errors.UNEXPECTED_ARGUMENT, {});
            }
        }
        return toBN(this).toString(10);
    }
    toHexString() {
        return this._hex;
    }
    toJSON(key) {
        return { type: "BigNumber", hex: this.toHexString() };
    }
    static from(value) {
        if (value instanceof lib_esm_bignumber_BigNumber) {
            return value;
        }
        if (typeof (value) === "string") {
            if (value.match(/^-?0x[0-9a-f]+$/i)) {
                return new lib_esm_bignumber_BigNumber(_constructorGuard, toHex(value));
            }
            if (value.match(/^-?[0-9]+$/)) {
                return new lib_esm_bignumber_BigNumber(_constructorGuard, toHex(new BN(value)));
            }
            return bignumber_logger.throwArgumentError("invalid BigNumber string", "value", value);
        }
        if (typeof (value) === "number") {
            if (value % 1) {
                throwFault("underflow", "BigNumber.from", value);
            }
            if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                throwFault("overflow", "BigNumber.from", value);
            }
            return lib_esm_bignumber_BigNumber.from(String(value));
        }
        const anyValue = value;
        if (typeof (anyValue) === "bigint") {
            return lib_esm_bignumber_BigNumber.from(anyValue.toString());
        }
        if (lib_esm_isBytes(anyValue)) {
            return lib_esm_bignumber_BigNumber.from(lib_esm_hexlify(anyValue));
        }
        if (anyValue) {
            // Hexable interface (takes priority)
            if (anyValue.toHexString) {
                const hex = anyValue.toHexString();
                if (typeof (hex) === "string") {
                    return lib_esm_bignumber_BigNumber.from(hex);
                }
            }
            else {
                // For now, handle legacy JSON-ified values (goes away in v6)
                let hex = anyValue._hex;
                // New-form JSON
                if (hex == null && anyValue.type === "BigNumber") {
                    hex = anyValue.hex;
                }
                if (typeof (hex) === "string") {
                    if (lib_esm_isHexString(hex) || (hex[0] === "-" && lib_esm_isHexString(hex.substring(1)))) {
                        return lib_esm_bignumber_BigNumber.from(hex);
                    }
                }
            }
        }
        return bignumber_logger.throwArgumentError("invalid BigNumber value", "value", value);
    }
    static isBigNumber(value) {
        return !!(value && value._isBigNumber);
    }
}
// Normalize the hex string
function toHex(value) {
    // For BN, call on the hex string
    if (typeof (value) !== "string") {
        return toHex(value.toString(16));
    }
    // If negative, prepend the negative sign to the normalized positive value
    if (value[0] === "-") {
        // Strip off the negative sign
        value = value.substring(1);
        // Cannot have multiple negative signs (e.g. "--0x04")
        if (value[0] === "-") {
            bignumber_logger.throwArgumentError("invalid hex", "value", value);
        }
        // Call toHex on the positive component
        value = toHex(value);
        // Do not allow "-0x00"
        if (value === "0x00") {
            return value;
        }
        // Negate the value
        return "-" + value;
    }
    // Add a "0x" prefix if missing
    if (value.substring(0, 2) !== "0x") {
        value = "0x" + value;
    }
    // Normalize zero
    if (value === "0x") {
        return "0x00";
    }
    // Make the string even length
    if (value.length % 2) {
        value = "0x0" + value.substring(2);
    }
    // Trim to smallest even-length string
    while (value.length > 4 && value.substring(0, 4) === "0x00") {
        value = "0x" + value.substring(4);
    }
    return value;
}
function toBigNumber(value) {
    return lib_esm_bignumber_BigNumber.from(toHex(value));
}
function toBN(value) {
    const hex = lib_esm_bignumber_BigNumber.from(value).toHexString();
    if (hex[0] === "-") {
        return (new BN("-" + hex.substring(3), 16));
    }
    return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
    const params = { fault: fault, operation: operation };
    if (value != null) {
        params.value = value;
    }
    return bignumber_logger.throwError(fault, lib_esm_Logger.errors.NUMERIC_FAULT, params);
}
// value should have no prefix
function _base36To16(value) {
    return (new BN(value, 36)).toString(16);
}
// value should have no prefix
function bignumber_base16To36(value) {
    return (new BN(value, 16)).toString(36);
}
//# sourceMappingURL=bignumber.js.map
// EXTERNAL MODULE: ./node_modules/js-sha3/src/sha3.js
var sha3 = __webpack_require__("./node_modules/js-sha3/src/sha3.js");
var sha3_default = /*#__PURE__*/__webpack_require__.n(sha3);
;// ./node_modules/@ethersproject/keccak256/lib.esm/index.js



function lib_esm_keccak256(data) {
    return '0x' + sha3_default().keccak_256(lib_esm_arrayify(data));
}
//# sourceMappingURL=index.js.map
;// ./node_modules/@ethersproject/address/lib.esm/_version.js
const address_lib_esm_version_version = "address/5.8.0";
//# sourceMappingURL=_version.js.map
;// ./node_modules/@ethersproject/address/lib.esm/index.js







const lib_esm_logger = new lib_esm_Logger(address_lib_esm_version_version);
function getChecksumAddress(address) {
    if (!lib_esm_isHexString(address, 20)) {
        lib_esm_logger.throwArgumentError("invalid address", "address", address);
    }
    address = address.toLowerCase();
    const chars = address.substring(2).split("");
    const expanded = new Uint8Array(40);
    for (let i = 0; i < 40; i++) {
        expanded[i] = chars[i].charCodeAt(0);
    }
    const hashed = lib_esm_arrayify(lib_esm_keccak256(expanded));
    for (let i = 0; i < 40; i += 2) {
        if ((hashed[i >> 1] >> 4) >= 8) {
            chars[i] = chars[i].toUpperCase();
        }
        if ((hashed[i >> 1] & 0x0f) >= 8) {
            chars[i + 1] = chars[i + 1].toUpperCase();
        }
    }
    return "0x" + chars.join("");
}
// Shims for environments that are missing some required constants and functions
const lib_esm_MAX_SAFE_INTEGER = 0x1fffffffffffff;
function log10(x) {
    if (Math.log10) {
        return Math.log10(x);
    }
    return Math.log(x) / Math.LN10;
}
// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
// Create lookup table
const ibanLookup = {};
for (let i = 0; i < 10; i++) {
    ibanLookup[String(i)] = String(i);
}
for (let i = 0; i < 26; i++) {
    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
}
// How many decimal digits can we process? (for 64-bit float, this is 15)
const safeDigits = Math.floor(log10(lib_esm_MAX_SAFE_INTEGER));
function ibanChecksum(address) {
    address = address.toUpperCase();
    address = address.substring(4) + address.substring(0, 2) + "00";
    let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
    // Javascript can handle integers safely up to 15 (decimal) digits
    while (expanded.length >= safeDigits) {
        let block = expanded.substring(0, safeDigits);
        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }
    let checksum = String(98 - (parseInt(expanded, 10) % 97));
    while (checksum.length < 2) {
        checksum = "0" + checksum;
    }
    return checksum;
}
;
function getAddress(address) {
    let result = null;
    if (typeof (address) !== "string") {
        lib_esm_logger.throwArgumentError("invalid address", "address", address);
    }
    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        // Missing the 0x prefix
        if (address.substring(0, 2) !== "0x") {
            address = "0x" + address;
        }
        result = getChecksumAddress(address);
        // It is a checksummed address with a bad checksum
        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
            lib_esm_logger.throwArgumentError("bad address checksum", "address", address);
        }
        // Maybe ICAP? (we only support direct mode)
    }
    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        // It is an ICAP address with a bad checksum
        if (address.substring(2, 4) !== ibanChecksum(address)) {
            lib_esm_logger.throwArgumentError("bad icap checksum", "address", address);
        }
        result = _base36To16(address.substring(4));
        while (result.length < 40) {
            result = "0" + result;
        }
        result = getChecksumAddress("0x" + result);
    }
    else {
        lib_esm_logger.throwArgumentError("invalid address", "address", address);
    }
    return result;
}
function isAddress(address) {
    try {
        getAddress(address);
        return true;
    }
    catch (error) { }
    return false;
}
function getIcapAddress(address) {
    let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
    while (base36.length < 30) {
        base36 = "0" + base36;
    }
    return "XE" + ibanChecksum("XE00" + base36) + base36;
}
// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
function getContractAddress(transaction) {
    let from = null;
    try {
        from = getAddress(transaction.from);
    }
    catch (error) {
        lib_esm_logger.throwArgumentError("missing from address", "transaction", transaction);
    }
    const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
    return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));
}
function getCreate2Address(from, salt, initCodeHash) {
    if (hexDataLength(salt) !== 32) {
        lib_esm_logger.throwArgumentError("salt must be 32 bytes", "salt", salt);
    }
    if (hexDataLength(initCodeHash) !== 32) {
        lib_esm_logger.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
    }
    return getAddress(hexDataSlice(keccak256(concat(["0xff", getAddress(from), salt, initCodeHash])), 12));
}
//# sourceMappingURL=index.js.map
;// ./node_modules/@ethersproject/constants/lib.esm/bignumbers.js

const NegativeOne = ( /*#__PURE__*/lib_esm_bignumber_BigNumber.from(-1));
const Zero = ( /*#__PURE__*/lib_esm_bignumber_BigNumber.from(0));
const One = ( /*#__PURE__*/lib_esm_bignumber_BigNumber.from(1));
const Two = ( /*#__PURE__*/(/* unused pure expression or super */ null && (BigNumber.from(2))));
const WeiPerEther = ( /*#__PURE__*/(/* unused pure expression or super */ null && (BigNumber.from("1000000000000000000"))));
const MaxUint256 = ( /*#__PURE__*/lib_esm_bignumber_BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
const MinInt256 = ( /*#__PURE__*/(/* unused pure expression or super */ null && (BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000"))));
const MaxInt256 = ( /*#__PURE__*/(/* unused pure expression or super */ null && (BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"))));

//# sourceMappingURL=bignumbers.js.map
;// ./node_modules/@ethersproject/rlp/lib.esm/_version.js
const rlp_lib_esm_version_version = "rlp/5.8.0";
//# sourceMappingURL=_version.js.map
;// ./node_modules/@ethersproject/rlp/lib.esm/index.js

//See: https://github.com/ethereum/wiki/wiki/RLP



const rlp_lib_esm_logger = new lib_esm_Logger(rlp_lib_esm_version_version);
function arrayifyInteger(value) {
    const result = [];
    while (value) {
        result.unshift(value & 0xff);
        value >>= 8;
    }
    return result;
}
function unarrayifyInteger(data, offset, length) {
    let result = 0;
    for (let i = 0; i < length; i++) {
        result = (result * 256) + data[offset + i];
    }
    return result;
}
function _encode(object) {
    if (Array.isArray(object)) {
        let payload = [];
        object.forEach(function (child) {
            payload = payload.concat(_encode(child));
        });
        if (payload.length <= 55) {
            payload.unshift(0xc0 + payload.length);
            return payload;
        }
        const length = arrayifyInteger(payload.length);
        length.unshift(0xf7 + length.length);
        return length.concat(payload);
    }
    if (!lib_esm_isBytesLike(object)) {
        rlp_lib_esm_logger.throwArgumentError("RLP object must be BytesLike", "object", object);
    }
    const data = Array.prototype.slice.call(lib_esm_arrayify(object));
    if (data.length === 1 && data[0] <= 0x7f) {
        return data;
    }
    else if (data.length <= 55) {
        data.unshift(0x80 + data.length);
        return data;
    }
    const length = arrayifyInteger(data.length);
    length.unshift(0xb7 + length.length);
    return length.concat(data);
}
function lib_esm_encode(object) {
    return lib_esm_hexlify(_encode(object));
}
function _decodeChildren(data, offset, childOffset, length) {
    const result = [];
    while (childOffset < offset + 1 + length) {
        const decoded = _decode(data, childOffset);
        result.push(decoded.result);
        childOffset += decoded.consumed;
        if (childOffset > offset + 1 + length) {
            rlp_lib_esm_logger.throwError("child data too short", lib_esm_Logger.errors.BUFFER_OVERRUN, {});
        }
    }
    return { consumed: (1 + length), result: result };
}
// returns { consumed: number, result: Object }
function _decode(data, offset) {
    if (data.length === 0) {
        rlp_lib_esm_logger.throwError("data too short", lib_esm_Logger.errors.BUFFER_OVERRUN, {});
    }
    // Array with extra length prefix
    if (data[offset] >= 0xf8) {
        const lengthLength = data[offset] - 0xf7;
        if (offset + 1 + lengthLength > data.length) {
            rlp_lib_esm_logger.throwError("data short segment too short", lib_esm_Logger.errors.BUFFER_OVERRUN, {});
        }
        const length = unarrayifyInteger(data, offset + 1, lengthLength);
        if (offset + 1 + lengthLength + length > data.length) {
            rlp_lib_esm_logger.throwError("data long segment too short", lib_esm_Logger.errors.BUFFER_OVERRUN, {});
        }
        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
    }
    else if (data[offset] >= 0xc0) {
        const length = data[offset] - 0xc0;
        if (offset + 1 + length > data.length) {
            rlp_lib_esm_logger.throwError("data array too short", lib_esm_Logger.errors.BUFFER_OVERRUN, {});
        }
        return _decodeChildren(data, offset, offset + 1, length);
    }
    else if (data[offset] >= 0xb8) {
        const lengthLength = data[offset] - 0xb7;
        if (offset + 1 + lengthLength > data.length) {
            rlp_lib_esm_logger.throwError("data array too short", lib_esm_Logger.errors.BUFFER_OVERRUN, {});
        }
        const length = unarrayifyInteger(data, offset + 1, lengthLength);
        if (offset + 1 + lengthLength + length > data.length) {
            rlp_lib_esm_logger.throwError("data array too short", lib_esm_Logger.errors.BUFFER_OVERRUN, {});
        }
        const result = lib_esm_hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
        return { consumed: (1 + lengthLength + length), result: result };
    }
    else if (data[offset] >= 0x80) {
        const length = data[offset] - 0x80;
        if (offset + 1 + length > data.length) {
            rlp_lib_esm_logger.throwError("data too short", lib_esm_Logger.errors.BUFFER_OVERRUN, {});
        }
        const result = lib_esm_hexlify(data.slice(offset + 1, offset + 1 + length));
        return { consumed: (1 + length), result: result };
    }
    return { consumed: 1, result: lib_esm_hexlify(data[offset]) };
}
function decode(data) {
    const bytes = lib_esm_arrayify(data);
    const decoded = _decode(bytes, 0);
    if (decoded.consumed !== bytes.length) {
        rlp_lib_esm_logger.throwArgumentError("invalid rlp data", "data", data);
    }
    return decoded.result;
}
//# sourceMappingURL=index.js.map
// EXTERNAL MODULE: ./node_modules/@ethersproject/signing-key/node_modules/bn.js/lib/bn.js
var lib_bn = __webpack_require__("./node_modules/@ethersproject/signing-key/node_modules/bn.js/lib/bn.js");
var lib_bn_default = /*#__PURE__*/__webpack_require__.n(lib_bn);
// EXTERNAL MODULE: ./node_modules/hash.js/lib/hash.js
var hash = __webpack_require__("./node_modules/hash.js/lib/hash.js");
var hash_default = /*#__PURE__*/__webpack_require__.n(hash);
;// ./node_modules/@ethersproject/signing-key/lib.esm/elliptic.js



var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window :  true ? ({}) : 0;

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function getDefaultExportFromNamespaceIfPresent (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
}

function getDefaultExportFromNamespaceIfNotNamed (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
}

function getAugmentedNamespace(n) {
	if (n.__esModule) return n;
	var a = Object.defineProperty({}, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var minimalisticAssert = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

var utils_1 = createCommonjsModule(function (module, exports) {
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};
});

var utils_1$1 = createCommonjsModule(function (module, exports) {
'use strict';

var utils = exports;




utils.assert = minimalisticAssert;
utils.toArray = utils_1.toArray;
utils.zero2 = utils_1.zero2;
utils.toHex = utils_1.toHex;
utils.encode = utils_1.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  var i;
  for (i = 0; i < naf.length; i += 1) {
    naf[i] = 0;
  }

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new (lib_bn_default())(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;
});

'use strict';



var getNAF = utils_1$1.getNAF;
var getJSF = utils_1$1.getJSF;
var assert$1 = utils_1$1.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new (lib_bn_default())(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? lib_bn_default().red(conf.prime) : lib_bn_default().mont(this.p);

  // Useful for many curves
  this.zero = new (lib_bn_default())(0).toRed(this.red);
  this.one = new (lib_bn_default())(1).toRed(this.red);
  this.two = new (lib_bn_default())(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new (lib_bn_default())(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
var base = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert$1(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert$1(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils_1$1.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert$1(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert$1(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils_1$1.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

var inherits_browser = createCommonjsModule(function (module) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}
});

'use strict';






var assert$2 = utils_1$1.assert;

function ShortCurve(conf) {
  base.call(this, 'short', conf);

  this.a = new (lib_bn_default())(conf.a, 16).toRed(this.red);
  this.b = new (lib_bn_default())(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits_browser(ShortCurve, base);
var short_1 = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new (lib_bn_default())(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new (lib_bn_default())(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new (lib_bn_default())(vec.a, 16),
        b: new (lib_bn_default())(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : lib_bn_default().mont(num);
  var tinv = new (lib_bn_default())(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new (lib_bn_default())(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new (lib_bn_default())(1);
  var y1 = new (lib_bn_default())(0);
  var x2 = new (lib_bn_default())(0);
  var y2 = new (lib_bn_default())(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new (lib_bn_default())(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new (lib_bn_default())(x, 16);
    this.y = new (lib_bn_default())(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits_browser(Point, base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new (lib_bn_default())(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new (lib_bn_default())(0);
  } else {
    this.x = new (lib_bn_default())(x, 16);
    this.y = new (lib_bn_default())(y, 16);
    this.z = new (lib_bn_default())(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits_browser(JPoint, base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new (lib_bn_default())(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

var curve_1 = createCommonjsModule(function (module, exports) {
'use strict';

var curve = exports;

curve.base = base;
curve.short = short_1;
curve.mont = /*RicMoo:ethers:require(./mont)*/(null);
curve.edwards = /*RicMoo:ethers:require(./edwards)*/(null);
});

var curves_1 = createCommonjsModule(function (module, exports) {
'use strict';

var curves = exports;





var assert = utils_1$1.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve_1.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve_1.edwards(options);
  else
    this.curve = new curve_1.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: (hash_default()).sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: (hash_default()).sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: (hash_default()).sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: (hash_default()).sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: (hash_default()).sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: (hash_default()).sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: (hash_default()).sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/(null).crash();
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: (hash_default()).sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});
});

'use strict';





function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
  minimalisticAssert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
var hmacDrbg = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new (hash_default()).hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils_1.toArray(entropy, entropyEnc);
  add = utils_1.toArray(add, addEnc);

  minimalisticAssert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils_1.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils_1.encode(res, enc);
};

'use strict';



var assert$3 = utils_1$1.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
var key = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new (lib_bn_default())(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert$3(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert$3(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert$3(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature, options) {
  return this.ec.verify(msg, signature, this, undefined, options);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

'use strict';




var assert$4 = utils_1$1.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert$4(options.r && options.s, 'Signature without r or s');
  this.r = new (lib_bn_default())(options.r, 16);
  this.s = new (lib_bn_default())(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
var signature = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  if(buf[p.place] === 0x00) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils_1$1.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  if ((data[p.place] & 128) !== 0) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  if ((data[p.place] & 128) !== 0) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new (lib_bn_default())(r);
  this.s = new (lib_bn_default())(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils_1$1.encode(res, enc);
};

'use strict';





var rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
var assert$5 = utils_1$1.assert;




function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert$5(Object.prototype.hasOwnProperty.call(curves_1, options),
      'Unknown curve ' + options);

    options = curves_1[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves_1.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
var ec = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new key(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return key.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return key.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new hmacDrbg({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new (lib_bn_default())(2));
  for (;;) {
    var priv = new (lib_bn_default())(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {
  var byteLength;
  if (lib_bn_default().isBN(msg) || typeof msg === 'number') {
    msg = new (lib_bn_default())(msg, 16);
    byteLength = msg.byteLength();
  } else if (typeof msg === 'object') {
    // BN assumes an array-like input and asserts length
    byteLength = msg.length;
    msg = new (lib_bn_default())(msg, 16);
  } else {
    // BN converts the value to string
    var str = msg.toString();
    // HEX encoding
    byteLength = (str.length + 1) >>> 1;
    msg = new (lib_bn_default())(str, 16);
  }
  // Allow overriding
  if (typeof bitLength !== 'number') {
    bitLength = byteLength * 8;
  }
  var delta = bitLength - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  if (typeof msg !== 'string' && typeof msg !== 'number' && !lib_bn_default().isBN(msg)) {
    assert$5(typeof msg === 'object' && msg && typeof msg.length === 'number',
      'Expected message to be an array-like, a hex string, or a BN instance');
    assert$5((msg.length >>> 0) === msg.length); // non-negative 32-bit integer
    for (var i = 0; i < msg.length; i++) assert$5((msg[i] & 255) === msg[i]);
  }

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(msg, false, options.msgBitLength);

  // Would fail further checks, but let's make the error message clear
  assert$5(!msg.isNeg(), 'Can not sign a negative message');

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Recheck nonce to be bijective to msg
  assert$5((new (lib_bn_default())(nonce)).eq(msg), 'Can not sign message');

  // Instantiate Hmac_DRBG
  var drbg = new hmacDrbg({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new (lib_bn_default())(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new (lib_bn_default())(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature$1, key, enc, options) {
  if (!options)
    options = {};

  msg = this._truncateToN(msg, false, options.msgBitLength);
  key = this.keyFromPublic(key, enc);
  signature$1 = new signature(signature$1, 'hex');

  // Perform primitive values validation
  var r = signature$1.r;
  var s = signature$1.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
  assert$5((3 & j) === j, 'The recovery param is more than two bits');
  signature$1 = new signature(signature$1, enc);

  var n = this.n;
  var e = new (lib_bn_default())(msg);
  var r = signature$1.r;
  var s = signature$1.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature$1.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
  signature$1 = new signature(signature$1, enc);
  if (signature$1.recoveryParam !== null)
    return signature$1.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature$1, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

var elliptic_1 = createCommonjsModule(function (module, exports) {
'use strict';

var elliptic = exports;

elliptic.version = /*RicMoo:ethers*/{ version: "6.6.1" }.version;
elliptic.utils = utils_1$1;
elliptic.rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
elliptic.curve = curve_1;
elliptic.curves = curves_1;

// Protocols
elliptic.ec = ec;
elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/(null);
});

var EC$1 = elliptic_1.ec;


//# sourceMappingURL=elliptic.js.map

;// ./node_modules/@ethersproject/properties/lib.esm/_version.js
const properties_lib_esm_version_version = "properties/5.8.0";
//# sourceMappingURL=_version.js.map
;// ./node_modules/@ethersproject/properties/lib.esm/index.js

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const properties_lib_esm_logger = new lib_esm_Logger(properties_lib_esm_version_version);
function defineReadOnly(object, name, value) {
    Object.defineProperty(object, name, {
        enumerable: true,
        value: value,
        writable: false,
    });
}
// Crawl up the constructor chain to find a static method
function getStatic(ctor, key) {
    for (let i = 0; i < 32; i++) {
        if (ctor[key]) {
            return ctor[key];
        }
        if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
            break;
        }
        ctor = Object.getPrototypeOf(ctor.prototype).constructor;
    }
    return null;
}
function resolveProperties(object) {
    return __awaiter(this, void 0, void 0, function* () {
        const promises = Object.keys(object).map((key) => {
            const value = object[key];
            return Promise.resolve(value).then((v) => ({ key: key, value: v }));
        });
        const results = yield Promise.all(promises);
        return results.reduce((accum, result) => {
            accum[(result.key)] = result.value;
            return accum;
        }, {});
    });
}
function lib_esm_checkProperties(object, properties) {
    if (!object || typeof (object) !== "object") {
        properties_lib_esm_logger.throwArgumentError("invalid object", "object", object);
    }
    Object.keys(object).forEach((key) => {
        if (!properties[key]) {
            properties_lib_esm_logger.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
        }
    });
}
function shallowCopy(object) {
    const result = {};
    for (const key in object) {
        result[key] = object[key];
    }
    return result;
}
const opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
function _isFrozen(object) {
    // Opaque objects are not mutable, so safe to copy by assignment
    if (object === undefined || object === null || opaque[typeof (object)]) {
        return true;
    }
    if (Array.isArray(object) || typeof (object) === "object") {
        if (!Object.isFrozen(object)) {
            return false;
        }
        const keys = Object.keys(object);
        for (let i = 0; i < keys.length; i++) {
            let value = null;
            try {
                value = object[keys[i]];
            }
            catch (error) {
                // If accessing a value triggers an error, it is a getter
                // designed to do so (e.g. Result) and is therefore "frozen"
                continue;
            }
            if (!_isFrozen(value)) {
                return false;
            }
        }
        return true;
    }
    return properties_lib_esm_logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
}
// Returns a new copy of object, such that no properties may be replaced.
// New properties may be added only to objects.
function _deepCopy(object) {
    if (_isFrozen(object)) {
        return object;
    }
    // Arrays are mutable, so we need to create a copy
    if (Array.isArray(object)) {
        return Object.freeze(object.map((item) => deepCopy(item)));
    }
    if (typeof (object) === "object") {
        const result = {};
        for (const key in object) {
            const value = object[key];
            if (value === undefined) {
                continue;
            }
            defineReadOnly(result, key, deepCopy(value));
        }
        return result;
    }
    return properties_lib_esm_logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
}
function deepCopy(object) {
    return _deepCopy(object);
}
class Description {
    constructor(info) {
        for (const key in info) {
            this[key] = deepCopy(info[key]);
        }
    }
}
//# sourceMappingURL=index.js.map
;// ./node_modules/@ethersproject/signing-key/lib.esm/_version.js
const signing_key_lib_esm_version_version = "signing-key/5.8.0";
//# sourceMappingURL=_version.js.map
;// ./node_modules/@ethersproject/signing-key/lib.esm/index.js






const signing_key_lib_esm_logger = new lib_esm_Logger(signing_key_lib_esm_version_version);
let _curve = null;
function getCurve() {
    if (!_curve) {
        _curve = new EC$1("secp256k1");
    }
    return _curve;
}
class SigningKey {
    constructor(privateKey) {
        defineReadOnly(this, "curve", "secp256k1");
        defineReadOnly(this, "privateKey", lib_esm_hexlify(privateKey));
        if (lib_esm_hexDataLength(this.privateKey) !== 32) {
            signing_key_lib_esm_logger.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
        }
        const keyPair = getCurve().keyFromPrivate(lib_esm_arrayify(this.privateKey));
        defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
        defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
        defineReadOnly(this, "_isSigningKey", true);
    }
    _addPoint(other) {
        const p0 = getCurve().keyFromPublic(lib_esm_arrayify(this.publicKey));
        const p1 = getCurve().keyFromPublic(lib_esm_arrayify(other));
        return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
    }
    signDigest(digest) {
        const keyPair = getCurve().keyFromPrivate(lib_esm_arrayify(this.privateKey));
        const digestBytes = lib_esm_arrayify(digest);
        if (digestBytes.length !== 32) {
            signing_key_lib_esm_logger.throwArgumentError("bad digest length", "digest", digest);
        }
        const signature = keyPair.sign(digestBytes, { canonical: true });
        return lib_esm_splitSignature({
            recoveryParam: signature.recoveryParam,
            r: hexZeroPad("0x" + signature.r.toString(16), 32),
            s: hexZeroPad("0x" + signature.s.toString(16), 32),
        });
    }
    computeSharedSecret(otherKey) {
        const keyPair = getCurve().keyFromPrivate(lib_esm_arrayify(this.privateKey));
        const otherKeyPair = getCurve().keyFromPublic(lib_esm_arrayify(computePublicKey(otherKey)));
        return hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
    }
    static isSigningKey(value) {
        return !!(value && value._isSigningKey);
    }
}
function recoverPublicKey(digest, signature) {
    const sig = lib_esm_splitSignature(signature);
    const rs = { r: lib_esm_arrayify(sig.r), s: lib_esm_arrayify(sig.s) };
    return "0x" + getCurve().recoverPubKey(lib_esm_arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
}
function computePublicKey(key, compressed) {
    const bytes = lib_esm_arrayify(key);
    if (bytes.length === 32) {
        const signingKey = new SigningKey(bytes);
        if (compressed) {
            return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
        }
        return signingKey.publicKey;
    }
    else if (bytes.length === 33) {
        if (compressed) {
            return lib_esm_hexlify(bytes);
        }
        return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
    }
    else if (bytes.length === 65) {
        if (!compressed) {
            return lib_esm_hexlify(bytes);
        }
        return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
    }
    return signing_key_lib_esm_logger.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}
//# sourceMappingURL=index.js.map
;// ./node_modules/@ethersproject/transactions/lib.esm/_version.js
const transactions_lib_esm_version_version = "transactions/5.8.0";
//# sourceMappingURL=_version.js.map
;// ./node_modules/@ethersproject/transactions/lib.esm/index.js











const transactions_lib_esm_logger = new lib_esm_Logger(transactions_lib_esm_version_version);
var TransactionTypes;
(function (TransactionTypes) {
    TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
    TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
    TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
})(TransactionTypes || (TransactionTypes = {}));
;
///////////////////////////////
function handleAddress(value) {
    if (value === "0x") {
        return null;
    }
    return getAddress(value);
}
function handleNumber(value) {
    if (value === "0x") {
        return Zero;
    }
    return lib_esm_bignumber_BigNumber.from(value);
}
// Legacy Transaction Fields
const transactionFields = [
    { name: "nonce", maxLength: 32, numeric: true },
    { name: "gasPrice", maxLength: 32, numeric: true },
    { name: "gasLimit", maxLength: 32, numeric: true },
    { name: "to", length: 20 },
    { name: "value", maxLength: 32, numeric: true },
    { name: "data" },
];
const allowedTransactionKeys = {
    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true
};
function computeAddress(key) {
    const publicKey = computePublicKey(key);
    return getAddress(lib_esm_hexDataSlice(lib_esm_keccak256(lib_esm_hexDataSlice(publicKey, 1)), 12));
}
function recoverAddress(digest, signature) {
    return computeAddress(recoverPublicKey(lib_esm_arrayify(digest), signature));
}
function formatNumber(value, name) {
    const result = lib_esm_stripZeros(lib_esm_bignumber_BigNumber.from(value).toHexString());
    if (result.length > 32) {
        transactions_lib_esm_logger.throwArgumentError("invalid length for " + name, ("transaction:" + name), value);
    }
    return result;
}
function accessSetify(addr, storageKeys) {
    return {
        address: getAddress(addr),
        storageKeys: (storageKeys || []).map((storageKey, index) => {
            if (lib_esm_hexDataLength(storageKey) !== 32) {
                transactions_lib_esm_logger.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
            }
            return storageKey.toLowerCase();
        })
    };
}
function accessListify(value) {
    if (Array.isArray(value)) {
        return value.map((set, index) => {
            if (Array.isArray(set)) {
                if (set.length > 2) {
                    transactions_lib_esm_logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
                }
                return accessSetify(set[0], set[1]);
            }
            return accessSetify(set.address, set.storageKeys);
        });
    }
    const result = Object.keys(value).map((addr) => {
        const storageKeys = value[addr].reduce((accum, storageKey) => {
            accum[storageKey] = true;
            return accum;
        }, {});
        return accessSetify(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a, b) => (a.address.localeCompare(b.address)));
    return result;
}
function formatAccessList(value) {
    return accessListify(value).map((set) => [set.address, set.storageKeys]);
}
function _serializeEip1559(transaction, signature) {
    // If there is an explicit gasPrice, make sure it matches the
    // EIP-1559 fees; otherwise they may not understand what they
    // think they are setting in terms of fee.
    if (transaction.gasPrice != null) {
        const gasPrice = lib_esm_bignumber_BigNumber.from(transaction.gasPrice);
        const maxFeePerGas = lib_esm_bignumber_BigNumber.from(transaction.maxFeePerGas || 0);
        if (!gasPrice.eq(maxFeePerGas)) {
            transactions_lib_esm_logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                gasPrice, maxFeePerGas
            });
        }
    }
    const fields = [
        formatNumber(transaction.chainId || 0, "chainId"),
        formatNumber(transaction.nonce || 0, "nonce"),
        formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
        formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
        formatNumber(transaction.gasLimit || 0, "gasLimit"),
        ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
        formatNumber(transaction.value || 0, "value"),
        (transaction.data || "0x"),
        (formatAccessList(transaction.accessList || []))
    ];
    if (signature) {
        const sig = lib_esm_splitSignature(signature);
        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
        fields.push(lib_esm_stripZeros(sig.r));
        fields.push(lib_esm_stripZeros(sig.s));
    }
    return hexConcat(["0x02", lib_esm_encode(fields)]);
}
function _serializeEip2930(transaction, signature) {
    const fields = [
        formatNumber(transaction.chainId || 0, "chainId"),
        formatNumber(transaction.nonce || 0, "nonce"),
        formatNumber(transaction.gasPrice || 0, "gasPrice"),
        formatNumber(transaction.gasLimit || 0, "gasLimit"),
        ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
        formatNumber(transaction.value || 0, "value"),
        (transaction.data || "0x"),
        (formatAccessList(transaction.accessList || []))
    ];
    if (signature) {
        const sig = lib_esm_splitSignature(signature);
        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
        fields.push(lib_esm_stripZeros(sig.r));
        fields.push(lib_esm_stripZeros(sig.s));
    }
    return hexConcat(["0x01", lib_esm_encode(fields)]);
}
// Legacy Transactions and EIP-155
function _serialize(transaction, signature) {
    checkProperties(transaction, allowedTransactionKeys);
    const raw = [];
    transactionFields.forEach(function (fieldInfo) {
        let value = transaction[fieldInfo.name] || ([]);
        const options = {};
        if (fieldInfo.numeric) {
            options.hexPad = "left";
        }
        value = arrayify(hexlify(value, options));
        // Fixed-width field
        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
            transactions_lib_esm_logger.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
        }
        // Variable-width (with a maximum)
        if (fieldInfo.maxLength) {
            value = stripZeros(value);
            if (value.length > fieldInfo.maxLength) {
                transactions_lib_esm_logger.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
            }
        }
        raw.push(hexlify(value));
    });
    let chainId = 0;
    if (transaction.chainId != null) {
        // A chainId was provided; if non-zero we'll use EIP-155
        chainId = transaction.chainId;
        if (typeof (chainId) !== "number") {
            transactions_lib_esm_logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
        }
    }
    else if (signature && !isBytesLike(signature) && signature.v > 28) {
        // No chainId provided, but the signature is signing with EIP-155; derive chainId
        chainId = Math.floor((signature.v - 35) / 2);
    }
    // We have an EIP-155 transaction (chainId was specified and non-zero)
    if (chainId !== 0) {
        raw.push(hexlify(chainId)); // @TODO: hexValue?
        raw.push("0x");
        raw.push("0x");
    }
    // Requesting an unsigned transaction
    if (!signature) {
        return RLP.encode(raw);
    }
    // The splitSignature will ensure the transaction has a recoveryParam in the
    // case that the signTransaction function only adds a v.
    const sig = splitSignature(signature);
    // We pushed a chainId and null r, s on for hashing only; remove those
    let v = 27 + sig.recoveryParam;
    if (chainId !== 0) {
        raw.pop();
        raw.pop();
        raw.pop();
        v += chainId * 2 + 8;
        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
        if (sig.v > 28 && sig.v !== v) {
            transactions_lib_esm_logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
        }
    }
    else if (sig.v !== v) {
        transactions_lib_esm_logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
    }
    raw.push(hexlify(v));
    raw.push(stripZeros(arrayify(sig.r)));
    raw.push(stripZeros(arrayify(sig.s)));
    return RLP.encode(raw);
}
function serialize(transaction, signature) {
    // Legacy and EIP-155 Transactions
    if (transaction.type == null || transaction.type === 0) {
        if (transaction.accessList != null) {
            transactions_lib_esm_logger.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
        }
        return _serialize(transaction, signature);
    }
    // Typed Transactions (EIP-2718)
    switch (transaction.type) {
        case 1:
            return _serializeEip2930(transaction, signature);
        case 2:
            return _serializeEip1559(transaction, signature);
        default:
            break;
    }
    return transactions_lib_esm_logger.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "serializeTransaction",
        transactionType: transaction.type
    });
}
function _parseEipSignature(tx, fields, serialize) {
    try {
        const recid = handleNumber(fields[0]).toNumber();
        if (recid !== 0 && recid !== 1) {
            throw new Error("bad recid");
        }
        tx.v = recid;
    }
    catch (error) {
        transactions_lib_esm_logger.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
    }
    tx.r = hexZeroPad(fields[1], 32);
    tx.s = hexZeroPad(fields[2], 32);
    try {
        const digest = lib_esm_keccak256(serialize(tx));
        tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
    }
    catch (error) { }
}
function _parseEip1559(payload) {
    const transaction = decode(payload.slice(1));
    if (transaction.length !== 9 && transaction.length !== 12) {
        transactions_lib_esm_logger.throwArgumentError("invalid component count for transaction type: 2", "payload", lib_esm_hexlify(payload));
    }
    const maxPriorityFeePerGas = handleNumber(transaction[2]);
    const maxFeePerGas = handleNumber(transaction[3]);
    const tx = {
        type: 2,
        chainId: handleNumber(transaction[0]).toNumber(),
        nonce: handleNumber(transaction[1]).toNumber(),
        maxPriorityFeePerGas: maxPriorityFeePerGas,
        maxFeePerGas: maxFeePerGas,
        gasPrice: null,
        gasLimit: handleNumber(transaction[4]),
        to: handleAddress(transaction[5]),
        value: handleNumber(transaction[6]),
        data: transaction[7],
        accessList: accessListify(transaction[8]),
    };
    // Unsigned EIP-1559 Transaction
    if (transaction.length === 9) {
        return tx;
    }
    tx.hash = lib_esm_keccak256(payload);
    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
    return tx;
}
function _parseEip2930(payload) {
    const transaction = decode(payload.slice(1));
    if (transaction.length !== 8 && transaction.length !== 11) {
        transactions_lib_esm_logger.throwArgumentError("invalid component count for transaction type: 1", "payload", lib_esm_hexlify(payload));
    }
    const tx = {
        type: 1,
        chainId: handleNumber(transaction[0]).toNumber(),
        nonce: handleNumber(transaction[1]).toNumber(),
        gasPrice: handleNumber(transaction[2]),
        gasLimit: handleNumber(transaction[3]),
        to: handleAddress(transaction[4]),
        value: handleNumber(transaction[5]),
        data: transaction[6],
        accessList: accessListify(transaction[7])
    };
    // Unsigned EIP-2930 Transaction
    if (transaction.length === 8) {
        return tx;
    }
    tx.hash = lib_esm_keccak256(payload);
    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
    return tx;
}
// Legacy Transactions and EIP-155
function _parse(rawTransaction) {
    const transaction = decode(rawTransaction);
    if (transaction.length !== 9 && transaction.length !== 6) {
        transactions_lib_esm_logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
    }
    const tx = {
        nonce: handleNumber(transaction[0]).toNumber(),
        gasPrice: handleNumber(transaction[1]),
        gasLimit: handleNumber(transaction[2]),
        to: handleAddress(transaction[3]),
        value: handleNumber(transaction[4]),
        data: transaction[5],
        chainId: 0
    };
    // Legacy unsigned transaction
    if (transaction.length === 6) {
        return tx;
    }
    try {
        tx.v = lib_esm_bignumber_BigNumber.from(transaction[6]).toNumber();
    }
    catch (error) {
        // @TODO: What makes snese to do? The v is too big
        return tx;
    }
    tx.r = hexZeroPad(transaction[7], 32);
    tx.s = hexZeroPad(transaction[8], 32);
    if (lib_esm_bignumber_BigNumber.from(tx.r).isZero() && lib_esm_bignumber_BigNumber.from(tx.s).isZero()) {
        // EIP-155 unsigned transaction
        tx.chainId = tx.v;
        tx.v = 0;
    }
    else {
        // Signed Transaction
        tx.chainId = Math.floor((tx.v - 35) / 2);
        if (tx.chainId < 0) {
            tx.chainId = 0;
        }
        let recoveryParam = tx.v - 27;
        const raw = transaction.slice(0, 6);
        if (tx.chainId !== 0) {
            raw.push(lib_esm_hexlify(tx.chainId));
            raw.push("0x");
            raw.push("0x");
            recoveryParam -= tx.chainId * 2 + 8;
        }
        const digest = lib_esm_keccak256(lib_esm_encode(raw));
        try {
            tx.from = recoverAddress(digest, { r: lib_esm_hexlify(tx.r), s: lib_esm_hexlify(tx.s), recoveryParam: recoveryParam });
        }
        catch (error) { }
        tx.hash = lib_esm_keccak256(rawTransaction);
    }
    tx.type = null;
    return tx;
}
function parse(rawTransaction) {
    const payload = lib_esm_arrayify(rawTransaction);
    // Legacy and EIP-155 Transactions
    if (payload[0] > 0x7f) {
        return _parse(payload);
    }
    // Typed Transaction (EIP-2718)
    switch (payload[0]) {
        case 1:
            return _parseEip2930(payload);
        case 2:
            return _parseEip1559(payload);
        default:
            break;
    }
    return transactions_lib_esm_logger.throwError(`unsupported transaction type: ${payload[0]}`, lib_esm_Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "parseTransaction",
        transactionType: payload[0]
    });
}
//# sourceMappingURL=index.js.map
// EXTERNAL MODULE: ./node_modules/@ledgerhq/errors/lib-es/index.js + 1 modules
var errors_lib_es = __webpack_require__("./node_modules/@ledgerhq/errors/lib-es/index.js");
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/errors.js

const EthAppPleaseEnableContractData = (0,errors_lib_es/* createCustomErrorClass */.Oq)("EthAppPleaseEnableContractData");
const EthAppNftNotSupported = (0,errors_lib_es/* createCustomErrorClass */.Oq)("EthAppNftNotSupported");
//# sourceMappingURL=errors.js.map
// EXTERNAL MODULE: ./node_modules/semver/index.js
var semver = __webpack_require__("./node_modules/semver/index.js");
var semver_default = /*#__PURE__*/__webpack_require__.n(semver);
;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/bind.js


function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/utils.js
/* provided dependency */ var process = __webpack_require__("process/browser");




// utils is a library of generic helper functions non-specific to axios

const {toString: utils_toString} = Object.prototype;
const {getPrototypeOf} = Object;

const kindOf = (cache => thing => {
    const str = utils_toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
}

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
}

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject(val) && isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

const [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : ({}))
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  }

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
}

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
}

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const utils_hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
}

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
}

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  }

  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
}

const noop = () => {}

const toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
}

const ALPHA = 'abcdefghijklmnopqrstuvwxyz'

const DIGIT = '0123456789';

const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
}

const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0]
  }

  return str;
}

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  }

  return visit(obj, 0);
}

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

// original code
// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }

  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({source, data}) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);

    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    }
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === 'function',
  isFunction(_global.postMessage)
);

const asap = typeof queueMicrotask !== 'undefined' ?
  queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);

// *********************

/* harmony default export */ var utils = ({
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty: utils_hasOwnProperty,
  hasOwnProp: utils_hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap
});

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/core/AxiosError.js




/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}

utils.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});

const AxiosError_prototype = AxiosError.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(AxiosError_prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(AxiosError_prototype);

  utils.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

/* harmony default export */ var core_AxiosError = (AxiosError);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/null.js
// eslint-disable-next-line strict
/* harmony default export */ var helpers_null = (null);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/toFormData.js
/* provided dependency */ var Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];




// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored


/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return utils.isPlainObject(thing) || utils.isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return utils.isArray(arr) && !arr.some(isVisitable);
}

const predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData(obj, formData, options) {
  if (!utils.isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (helpers_null || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = utils.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !utils.isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && utils.isSpecCompliantForm(formData);

  if (!utils.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (utils.isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && utils.isBlob(value)) {
      throw new core_AxiosError('Blob is not supported. Use a Buffer instead.');
    }

    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (utils.endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (utils.isArray(value) && isFlatArray(value)) ||
        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(utils.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (utils.isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    utils.forEach(value, function each(el, key) {
      const result = !(utils.isUndefined(el) || el === null) && visitor.call(
        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!utils.isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/* harmony default export */ var helpers_toFormData = (toFormData);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/AxiosURLSearchParams.js




/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function AxiosURLSearchParams_encode(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && helpers_toFormData(params, this, options);
}

const AxiosURLSearchParams_prototype = AxiosURLSearchParams.prototype;

AxiosURLSearchParams_prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

AxiosURLSearchParams_prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, AxiosURLSearchParams_encode);
  } : AxiosURLSearchParams_encode;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/* harmony default export */ var helpers_AxiosURLSearchParams = (AxiosURLSearchParams);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/buildURL.js





/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function buildURL_encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || buildURL_encode;

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils.isURLSearchParams(params) ?
      params.toString() :
      new helpers_AxiosURLSearchParams(params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/core/InterceptorManager.js




class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

/* harmony default export */ var core_InterceptorManager = (InterceptorManager);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/defaults/transitional.js


/* harmony default export */ var defaults_transitional = ({
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
});

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js



/* harmony default export */ var classes_URLSearchParams = (typeof URLSearchParams !== 'undefined' ? URLSearchParams : helpers_AxiosURLSearchParams);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/platform/browser/classes/FormData.js


/* harmony default export */ var classes_FormData = (typeof FormData !== 'undefined' ? FormData : null);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/platform/browser/classes/Blob.js


/* harmony default export */ var classes_Blob = (typeof Blob !== 'undefined' ? Blob : null);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/platform/browser/index.js




/* harmony default export */ var browser = ({
  isBrowser: true,
  classes: {
    URLSearchParams: classes_URLSearchParams,
    FormData: classes_FormData,
    Blob: classes_Blob
  },
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
});

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/platform/common/utils.js
const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

const _navigator = typeof navigator === 'object' && navigator || undefined;

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = hasBrowserEnv &&
  (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();

const origin = hasBrowserEnv && window.location.href || 'http://localhost';



;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/platform/index.js



/* harmony default export */ var platform = ({
  ...common_utils_namespaceObject,
  ...browser
});

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/toURLEncodedForm.js






function toURLEncodedForm(data, options) {
  return helpers_toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils.isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/formDataToJSON.js




/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return utils.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils.isArray(target) ? target.length : name;

    if (isLast) {
      if (utils.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !utils.isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && utils.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {
    const obj = {};

    utils.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/* harmony default export */ var helpers_formDataToJSON = (formDataToJSON);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/defaults/index.js










/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: defaults_transitional,

  adapter: ['xhr', 'http', 'fetch'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = utils.isObject(data);

    if (isObjectPayload && utils.isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = utils.isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify(helpers_formDataToJSON(data)) : data;
    }

    if (utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data) ||
      utils.isReadableStream(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }

      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return helpers_toFormData(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (utils.isResponse(data) || utils.isReadableStream(data)) {
      return data;
    }

    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw core_AxiosError.from(e, core_AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

/* harmony default export */ var lib_defaults = (defaults);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/parseHeaders.js




// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = utils.toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
/* harmony default export */ var parseHeaders = (rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
});

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/core/AxiosHeaders.js





const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return utils.isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (utils.isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!utils.isString(value)) return;

  if (utils.isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (utils.isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = utils.toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = utils.findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (utils.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite)
    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else if (utils.isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils.findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (utils.isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (utils.isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils.findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = utils.findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (utils.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    utils.forEach(this, (value, header) => {
      const key = utils.findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    utils.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
utils.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

utils.freezeMethods(AxiosHeaders);

/* harmony default export */ var core_AxiosHeaders = (AxiosHeaders);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/core/transformData.js






/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || lib_defaults;
  const context = response || config;
  const headers = core_AxiosHeaders.from(context.headers);
  let data = context.data;

  utils.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/cancel/isCancel.js


function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/cancel/CanceledError.js





/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  core_AxiosError.call(this, message == null ? 'canceled' : message, core_AxiosError.ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

utils.inherits(CanceledError, core_AxiosError, {
  __CANCEL__: true
});

/* harmony default export */ var cancel_CanceledError = (CanceledError);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/core/settle.js




/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new core_AxiosError(
      'Request failed with status code ' + response.status,
      [core_AxiosError.ERR_BAD_REQUEST, core_AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/parseProtocol.js


function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/speedometer.js


/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/* harmony default export */ var helpers_speedometer = (speedometer);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/throttle.js
/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1000 / freq;
  let lastArgs;
  let timer;

  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  }

  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if ( passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs)
        }, threshold - passed);
      }
    }
  }

  const flush = () => lastArgs && invoke(lastArgs);

  return [throttled, flush];
}

/* harmony default export */ var helpers_throttle = (throttle);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/progressEventReducer.js




const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = helpers_speedometer(50, 250);

  return helpers_throttle(e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? 'download' : 'upload']: true
    };

    listener(data);
  }, freq);
}

const progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;

  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
}

const asyncDecorator = (fn) => (...args) => utils.asap(() => fn(...args));

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/isURLSameOrigin.js





/* harmony default export */ var isURLSameOrigin = (platform.hasStandardBrowserEnv ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    const msie = platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent);
    const urlParsingNode = document.createElement('a');
    let originURL;

    /**
    * Parse a URL to discover its components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      let href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
          urlParsingNode.pathname :
          '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
          parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })());

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/cookies.js



/* harmony default export */ var cookies = (platform.hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      utils.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      utils.isString(path) && cookie.push('path=' + path);

      utils.isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  });


;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/isAbsoluteURL.js


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/combineURLs.js


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/core/buildFullPath.js





/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/core/mergeConfig.js





const headersToObject = (thing) => thing instanceof core_AxiosHeaders ? { ...thing } : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, caseless) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge.call({caseless}, target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, caseless) {
    if (!utils.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils.isUndefined(a)) {
      return getMergedValue(undefined, a, caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!utils.isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!utils.isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!utils.isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };

  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/resolveConfig.js









/* harmony default export */ var resolveConfig = ((config) => {
  const newConfig = mergeConfig({}, config);

  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

  newConfig.headers = headers = core_AxiosHeaders.from(headers);

  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);

  // HTTP basic authentication
  if (auth) {
    headers.set('Authorization', 'Basic ' +
      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
    );
  }

  let contentType;

  if (utils.isFormData(data)) {
    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(undefined); // Let the browser set it
    } else if ((contentType = headers.getContentType()) !== false) {
      // fix semicolon duplication issue for ReactNative FormData implementation
      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
    }
  }

  // Add xsrf header
  // This is only done if running in a standard browser environment.
  // Specifically not if we're in a web worker, or react-native.

  if (platform.hasStandardBrowserEnv) {
    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {
      // Add xsrf header
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);

      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }

  return newConfig;
});


;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/adapters/xhr.js











const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

/* harmony default export */ var xhr = (isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig(config);
    let requestData = _config.data;
    const requestHeaders = core_AxiosHeaders.from(_config.headers).normalize();
    let {responseType, onUploadProgress, onDownloadProgress} = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;

    function done() {
      flushUpload && flushUpload(); // flush events
      flushDownload && flushDownload(); // flush events

      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);

      _config.signal && _config.signal.removeEventListener('abort', onCanceled);
    }

    let request = new XMLHttpRequest();

    request.open(_config.method.toUpperCase(), _config.url, true);

    // Set the request timeout in MS
    request.timeout = _config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = core_AxiosHeaders.from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new core_AxiosError('Request aborted', core_AxiosError.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new core_AxiosError('Network Error', core_AxiosError.ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = _config.transitional || defaults_transitional;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new core_AxiosError(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? core_AxiosError.ETIMEDOUT : core_AxiosError.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = _config.responseType;
    }

    // Handle progress if needed
    if (onDownloadProgress) {
      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));
      request.addEventListener('progress', downloadThrottled);
    }

    // Not all browsers support upload events
    if (onUploadProgress && request.upload) {
      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));

      request.upload.addEventListener('progress', uploadThrottled);

      request.upload.addEventListener('loadend', flushUpload);
    }

    if (_config.cancelToken || _config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new cancel_CanceledError(null, config, request) : cancel);
        request.abort();
        request = null;
      };

      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = parseProtocol(_config.url);

    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new core_AxiosError('Unsupported protocol ' + protocol + ':', core_AxiosError.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
});

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/composeSignals.js




const composeSignals = (signals, timeout) => {
  const {length} = (signals = signals ? signals.filter(Boolean) : []);

  if (timeout || length) {
    let controller = new AbortController();

    let aborted;

    const onabort = function (reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof core_AxiosError ? err : new cancel_CanceledError(err instanceof Error ? err.message : err));
      }
    }

    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new core_AxiosError(`timeout ${timeout} of ms exceeded`, core_AxiosError.ETIMEDOUT))
    }, timeout)

    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach(signal => {
          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);
        });
        signals = null;
      }
    }

    signals.forEach((signal) => signal.addEventListener('abort', onabort));

    const {signal} = controller;

    signal.unsubscribe = () => utils.asap(unsubscribe);

    return signal;
  }
}

/* harmony default export */ var helpers_composeSignals = (composeSignals);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/trackStream.js

const streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;

  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }

  let pos = 0;
  let end;

  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
}

const readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
}

const readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }

  const reader = stream.getReader();
  try {
    for (;;) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
}

const trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator = readBytes(stream, chunkSize);

  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  }

  return new ReadableStream({
    async pull(controller) {
      try {
        const {done, value} = await iterator.next();

        if (done) {
         _onFinish();
          controller.close();
          return;
        }

        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  })
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/adapters/fetch.js










const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';

// used only inside the fetch adapter
const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?
    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
    async (str) => new Uint8Array(await new Response(str).arrayBuffer())
);

const test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false
  }
}

const supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;

  const hasContentType = new Request(platform.origin, {
    body: new ReadableStream(),
    method: 'POST',
    get duplex() {
      duplexAccessed = true;
      return 'half';
    },
  }).headers.has('Content-Type');

  return duplexAccessed && !hasContentType;
});

const DEFAULT_CHUNK_SIZE = 64 * 1024;

const supportsResponseStream = isReadableStreamSupported &&
  test(() => utils.isReadableStream(new Response('').body));


const resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};

isFetchSupported && (((res) => {
  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? (res) => res[type]() :
      (_, config) => {
        throw new core_AxiosError(`Response type '${type}' is not supported`, core_AxiosError.ERR_NOT_SUPPORT, config);
      })
  });
})(new Response));

const getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }

  if(utils.isBlob(body)) {
    return body.size;
  }

  if(utils.isSpecCompliantForm(body)) {
    const _request = new Request(platform.origin, {
      method: 'POST',
      body,
    });
    return (await _request.arrayBuffer()).byteLength;
  }

  if(utils.isArrayBufferView(body) || utils.isArrayBuffer(body)) {
    return body.byteLength;
  }

  if(utils.isURLSearchParams(body)) {
    body = body + '';
  }

  if(utils.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
}

const resolveBodyLength = async (headers, body) => {
  const length = utils.toFiniteNumber(headers.getContentLength());

  return length == null ? getBodyLength(body) : length;
}

/* harmony default export */ var adapters_fetch = (isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = 'same-origin',
    fetchOptions
  } = resolveConfig(config);

  responseType = responseType ? (responseType + '').toLowerCase() : 'text';

  let composedSignal = helpers_composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);

  let request;

  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
  });

  let requestContentLength;

  try {
    if (
      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&
      (requestContentLength = await resolveBodyLength(headers, data)) !== 0
    ) {
      let _request = new Request(url, {
        method: 'POST',
        body: data,
        duplex: "half"
      });

      let contentTypeHeader;

      if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
        headers.setContentType(contentTypeHeader)
      }

      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(
          requestContentLength,
          progressEventReducer(asyncDecorator(onUploadProgress))
        );

        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }

    if (!utils.isString(withCredentials)) {
      withCredentials = withCredentials ? 'include' : 'omit';
    }

    // Cloudflare Workers throws when credentials are defined
    // see https://github.com/cloudflare/workerd/issues/902
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : undefined
    });

    let response = await fetch(request);

    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');

    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {
      const options = {};

      ['status', 'statusText', 'headers'].forEach(prop => {
        options[prop] = response[prop];
      });

      const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));

      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
        responseContentLength,
        progressEventReducer(asyncDecorator(onDownloadProgress), true)
      ) || [];

      response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }

    responseType = responseType || 'text';

    let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);

    !isStreamResponse && unsubscribe && unsubscribe();

    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: core_AxiosHeaders.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      })
    })
  } catch (err) {
    unsubscribe && unsubscribe();

    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {
      throw Object.assign(
        new core_AxiosError('Network Error', core_AxiosError.ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      )
    }

    throw core_AxiosError.from(err, err && err.code, config, request);
  }
}));



;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/adapters/adapters.js






const knownAdapters = {
  http: helpers_null,
  xhr: xhr,
  fetch: adapters_fetch
}

utils.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => utils.isFunction(adapter) || adapter === null || adapter === false;

/* harmony default export */ var adapters = ({
  getAdapter: (adapters) => {
    adapters = utils.isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new core_AxiosError(`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new core_AxiosError(
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
});

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/core/dispatchRequest.js









/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new cancel_CanceledError(null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = core_AxiosHeaders.from(config.headers);

  // Transform request data
  config.data = transformData.call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = adapters.getAdapter(config.adapter || lib_defaults.adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );

    response.headers = core_AxiosHeaders.from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = core_AxiosHeaders.from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/env/data.js
const VERSION = "1.7.7";
;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/validator.js





const validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new core_AxiosError(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        core_AxiosError.ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new core_AxiosError('options must be an object', core_AxiosError.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new core_AxiosError('option ' + opt + ' must be ' + result, core_AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new core_AxiosError('Unknown option ' + opt, core_AxiosError.ERR_BAD_OPTION);
    }
  }
}

/* harmony default export */ var validator = ({
  assertOptions,
  validators
});

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/core/Axios.js











const Axios_validators = validator.validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new core_InterceptorManager(),
      response: new core_InterceptorManager()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;

        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
        try {
          if (!err.stack) {
            err.stack = stack;
            // match without the 2 top stack lines
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
            err.stack += '\n' + stack
          }
        } catch (e) {
          // ignore the case where "stack" is an un-writable property
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = mergeConfig(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      validator.assertOptions(transitional, {
        silentJSONParsing: Axios_validators.transitional(Axios_validators.boolean),
        forcedJSONParsing: Axios_validators.transitional(Axios_validators.boolean),
        clarifyTimeoutError: Axios_validators.transitional(Axios_validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (utils.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        }
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: Axios_validators.function,
          serialize: Axios_validators.function
        }, true);
      }
    }

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && utils.merge(
      headers.common,
      headers[config.method]
    );

    headers && utils.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = core_AxiosHeaders.concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

/* harmony default export */ var core_Axios = (Axios);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/cancel/CancelToken.js




/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new cancel_CanceledError(message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  toAbortSignal() {
    const controller = new AbortController();

    const abort = (err) => {
      controller.abort(err);
    };

    this.subscribe(abort);

    controller.signal.unsubscribe = () => this.unsubscribe(abort);

    return controller.signal;
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

/* harmony default export */ var cancel_CancelToken = (CancelToken);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/spread.js


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/isAxiosError.js




/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
}

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/helpers/HttpStatusCode.js
const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});

/* harmony default export */ var helpers_HttpStatusCode = (HttpStatusCode);

;// ./node_modules/@ledgerhq/evm-tools/node_modules/axios/lib/axios.js




















/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new core_Axios(defaultConfig);
  const instance = bind(core_Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, core_Axios.prototype, context, {allOwnKeys: true});

  // Copy context to instance
  utils.extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(lib_defaults);

// Expose Axios class to allow class inheritance
axios.Axios = core_Axios;

// Expose Cancel & CancelToken
axios.CanceledError = cancel_CanceledError;
axios.CancelToken = cancel_CancelToken;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = helpers_toFormData;

// Expose AxiosError class
axios.AxiosError = core_AxiosError;

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = spread;

// Expose isAxiosError
axios.isAxiosError = isAxiosError;

// Expose mergeConfig
axios.mergeConfig = mergeConfig;

axios.AxiosHeaders = core_AxiosHeaders;

axios.formToJSON = thing => helpers_formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = adapters.getAdapter;

axios.HttpStatusCode = helpers_HttpStatusCode;

axios.default = axios;

// this module should only have a default export
/* harmony default export */ var lib_axios = (axios);

// EXTERNAL MODULE: ./node_modules/crypto-js/sha224.js
var sha224 = __webpack_require__("./node_modules/crypto-js/sha224.js");
var sha224_default = /*#__PURE__*/__webpack_require__.n(sha224);
// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.mjs
var tslib_es6 = __webpack_require__("./node_modules/tslib/tslib.es6.mjs");
;// ./node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction_isFunction(value) {
    return typeof value === 'function';
}
//# sourceMappingURL=isFunction.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
    var _super = function (instance) {
        Error.call(instance);
        instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
}
//# sourceMappingURL=createErrorClass.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js

var UnsubscriptionError = createErrorClass(function (_super) {
    return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors
            ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
            : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
    };
});
//# sourceMappingURL=UnsubscriptionError.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
    if (arr) {
        var index = arr.indexOf(item);
        0 <= index && arr.splice(index, 1);
    }
}
//# sourceMappingURL=arrRemove.js.map
;// ./node_modules/rxjs/dist/esm5/internal/Subscription.js




var Subscription = (function () {
    function Subscription(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
    }
    Subscription.prototype.unsubscribe = function () {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
                this._parentage = null;
                if (Array.isArray(_parentage)) {
                    try {
                        for (var _parentage_1 = (0,tslib_es6.__values)(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                            var parent_1 = _parentage_1_1.value;
                            parent_1.remove(this);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    _parentage.remove(this);
                }
            }
            var initialFinalizer = this.initialTeardown;
            if (isFunction_isFunction(initialFinalizer)) {
                try {
                    initialFinalizer();
                }
                catch (e) {
                    errors = e instanceof UnsubscriptionError ? e.errors : [e];
                }
            }
            var _finalizers = this._finalizers;
            if (_finalizers) {
                this._finalizers = null;
                try {
                    for (var _finalizers_1 = (0,tslib_es6.__values)(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                        var finalizer = _finalizers_1_1.value;
                        try {
                            execFinalizer(finalizer);
                        }
                        catch (err) {
                            errors = errors !== null && errors !== void 0 ? errors : [];
                            if (err instanceof UnsubscriptionError) {
                                errors = (0,tslib_es6.__spreadArray)((0,tslib_es6.__spreadArray)([], (0,tslib_es6.__read)(errors)), (0,tslib_es6.__read)(err.errors));
                            }
                            else {
                                errors.push(err);
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (errors) {
                throw new UnsubscriptionError(errors);
            }
        }
    };
    Subscription.prototype.add = function (teardown) {
        var _a;
        if (teardown && teardown !== this) {
            if (this.closed) {
                execFinalizer(teardown);
            }
            else {
                if (teardown instanceof Subscription) {
                    if (teardown.closed || teardown._hasParent(this)) {
                        return;
                    }
                    teardown._addParent(this);
                }
                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
            }
        }
    };
    Subscription.prototype._hasParent = function (parent) {
        var _parentage = this._parentage;
        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
    };
    Subscription.prototype._addParent = function (parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription.prototype._removeParent = function (parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) {
            this._parentage = null;
        }
        else if (Array.isArray(_parentage)) {
            arrRemove(_parentage, parent);
        }
    };
    Subscription.prototype.remove = function (teardown) {
        var _finalizers = this._finalizers;
        _finalizers && arrRemove(_finalizers, teardown);
        if (teardown instanceof Subscription) {
            teardown._removeParent(this);
        }
    };
    Subscription.EMPTY = (function () {
        var empty = new Subscription();
        empty.closed = true;
        return empty;
    })();
    return Subscription;
}());

var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
    return (value instanceof Subscription ||
        (value && 'closed' in value && isFunction_isFunction(value.remove) && isFunction_isFunction(value.add) && isFunction_isFunction(value.unsubscribe)));
}
function execFinalizer(finalizer) {
    if (isFunction_isFunction(finalizer)) {
        finalizer();
    }
    else {
        finalizer.unsubscribe();
    }
}
//# sourceMappingURL=Subscription.js.map
;// ./node_modules/rxjs/dist/esm5/internal/config.js
var config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: undefined,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false,
};
//# sourceMappingURL=config.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js

var timeoutProvider = {
    setTimeout: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
            return delegate.setTimeout.apply(delegate, (0,tslib_es6.__spreadArray)([handler, timeout], (0,tslib_es6.__read)(args)));
        }
        return setTimeout.apply(void 0, (0,tslib_es6.__spreadArray)([handler, timeout], (0,tslib_es6.__read)(args)));
    },
    clearTimeout: function (handle) {
        var delegate = timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=timeoutProvider.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js


function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function () {
        var onUnhandledError = config.onUnhandledError;
        if (onUnhandledError) {
            onUnhandledError(err);
        }
        else {
            throw err;
        }
    });
}
//# sourceMappingURL=reportUnhandledError.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop_noop() { }
//# sourceMappingURL=noop.js.map
;// ./node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();
function errorNotification(error) {
    return createNotification('E', undefined, error);
}
function nextNotification(value) {
    return createNotification('N', value, undefined);
}
function createNotification(kind, value, error) {
    return {
        kind: kind,
        value: value,
        error: error,
    };
}
//# sourceMappingURL=NotificationFactories.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/errorContext.js

var context = null;
function errorContext(cb) {
    if (config.useDeprecatedSynchronousErrorHandling) {
        var isRoot = !context;
        if (isRoot) {
            context = { errorThrown: false, error: null };
        }
        cb();
        if (isRoot) {
            var _a = context, errorThrown = _a.errorThrown, error = _a.error;
            context = null;
            if (errorThrown) {
                throw error;
            }
        }
    }
    else {
        cb();
    }
}
function captureError(err) {
    if (config.useDeprecatedSynchronousErrorHandling && context) {
        context.errorThrown = true;
        context.error = err;
    }
}
//# sourceMappingURL=errorContext.js.map
;// ./node_modules/rxjs/dist/esm5/internal/Subscriber.js









var Subscriber = (function (_super) {
    (0,tslib_es6.__extends)(Subscriber, _super);
    function Subscriber(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
            _this.destination = destination;
            if (isSubscription(destination)) {
                destination.add(_this);
            }
        }
        else {
            _this.destination = EMPTY_OBSERVER;
        }
        return _this;
    }
    Subscriber.create = function (next, error, complete) {
        return new SafeSubscriber(next, error, complete);
    };
    Subscriber.prototype.next = function (value) {
        if (this.isStopped) {
            handleStoppedNotification(nextNotification(value), this);
        }
        else {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (this.isStopped) {
            handleStoppedNotification(errorNotification(err), this);
        }
        else {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (this.isStopped) {
            handleStoppedNotification(COMPLETE_NOTIFICATION, this);
        }
        else {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
        }
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        try {
            this.destination.error(err);
        }
        finally {
            this.unsubscribe();
        }
    };
    Subscriber.prototype._complete = function () {
        try {
            this.destination.complete();
        }
        finally {
            this.unsubscribe();
        }
    };
    return Subscriber;
}(Subscription));

var _bind = Function.prototype.bind;
function Subscriber_bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
}
var ConsumerObserver = (function () {
    function ConsumerObserver(partialObserver) {
        this.partialObserver = partialObserver;
    }
    ConsumerObserver.prototype.next = function (value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) {
            try {
                partialObserver.next(value);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    ConsumerObserver.prototype.error = function (err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) {
            try {
                partialObserver.error(err);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
        else {
            handleUnhandledError(err);
        }
    };
    ConsumerObserver.prototype.complete = function () {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) {
            try {
                partialObserver.complete();
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    return ConsumerObserver;
}());
var SafeSubscriber = (function (_super) {
    (0,tslib_es6.__extends)(SafeSubscriber, _super);
    function SafeSubscriber(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if (isFunction_isFunction(observerOrNext) || !observerOrNext) {
            partialObserver = {
                next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),
                error: error !== null && error !== void 0 ? error : undefined,
                complete: complete !== null && complete !== void 0 ? complete : undefined,
            };
        }
        else {
            var context_1;
            if (_this && config.useDeprecatedNextContext) {
                context_1 = Object.create(observerOrNext);
                context_1.unsubscribe = function () { return _this.unsubscribe(); };
                partialObserver = {
                    next: observerOrNext.next && Subscriber_bind(observerOrNext.next, context_1),
                    error: observerOrNext.error && Subscriber_bind(observerOrNext.error, context_1),
                    complete: observerOrNext.complete && Subscriber_bind(observerOrNext.complete, context_1),
                };
            }
            else {
                partialObserver = observerOrNext;
            }
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
    }
    return SafeSubscriber;
}(Subscriber));

function handleUnhandledError(error) {
    if (config.useDeprecatedSynchronousErrorHandling) {
        captureError(error);
    }
    else {
        reportUnhandledError(error);
    }
}
function defaultErrorHandler(err) {
    throw err;
}
function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = config.onStoppedNotification;
    onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
}
var EMPTY_OBSERVER = {
    closed: true,
    next: noop_noop,
    error: defaultErrorHandler,
    complete: noop_noop,
};
//# sourceMappingURL=Subscriber.js.map
;// ./node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();
//# sourceMappingURL=observable.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/pipe.js

function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
function pipeFromArray(fns) {
    if (fns.length === 0) {
        return identity;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
//# sourceMappingURL=pipe.js.map
;// ./node_modules/rxjs/dist/esm5/internal/Observable.js







var Observable = (function () {
    function Observable(subscribe) {
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
        errorContext(function () {
            var _a = _this, operator = _a.operator, source = _a.source;
            subscriber.add(operator
                ?
                    operator.call(subscriber, source)
                : source
                    ?
                        _this._subscribe(subscriber)
                    :
                        _this._trySubscribe(subscriber));
        });
        return subscriber;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.error(err);
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscriber = new SafeSubscriber({
                next: function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscriber.unsubscribe();
                    }
                },
                error: reject,
                complete: resolve,
            });
            _this.subscribe(subscriber);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable.prototype[observable] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        return pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());

function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
    return value && isFunction_isFunction(value.next) && isFunction_isFunction(value.error) && isFunction_isFunction(value.complete);
}
function isSubscriber(value) {
    return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
}
//# sourceMappingURL=Observable.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js

var ObjectUnsubscribedError = createErrorClass(function (_super) {
    return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = 'ObjectUnsubscribedError';
        this.message = 'object unsubscribed';
    };
});
//# sourceMappingURL=ObjectUnsubscribedError.js.map
;// ./node_modules/rxjs/dist/esm5/internal/Subject.js






var Subject = (function (_super) {
    (0,tslib_es6.__extends)(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype._throwIfClosed = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
    };
    Subject.prototype.next = function (value) {
        var _this = this;
        errorContext(function () {
            var e_1, _a;
            _this._throwIfClosed();
            if (!_this.isStopped) {
                if (!_this.currentObservers) {
                    _this.currentObservers = Array.from(_this.observers);
                }
                try {
                    for (var _b = (0,tslib_es6.__values)(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var observer = _c.value;
                        observer.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
    };
    Subject.prototype.error = function (err) {
        var _this = this;
        errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.hasError = _this.isStopped = true;
                _this.thrownError = err;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().error(err);
                }
            }
        });
    };
    Subject.prototype.complete = function () {
        var _this = this;
        errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.isStopped = true;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().complete();
                }
            }
        });
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject.prototype, "observed", {
        get: function () {
            var _a;
            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
    });
    Subject.prototype._trySubscribe = function (subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
    };
    Subject.prototype._innerSubscribe = function (subscriber) {
        var _this = this;
        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
        if (hasError || isStopped) {
            return EMPTY_SUBSCRIPTION;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new Subscription(function () {
            _this.currentObservers = null;
            arrRemove(observers, subscriber);
        });
    };
    Subject.prototype._checkFinalizedStatuses = function (subscriber) {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
        if (hasError) {
            subscriber.error(thrownError);
        }
        else if (isStopped) {
            subscriber.complete();
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable));

var AnonymousSubject = (function (_super) {
    (0,tslib_es6.__extends)(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject.prototype.error = function (err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject.prototype.complete = function () {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject;
}(Subject));

//# sourceMappingURL=Subject.js.map
;// ./node_modules/@ledgerhq/live-env/lib-es/env.js
// set and get environment & config variables

const intParser = (v) => {
    if (!Number.isNaN(v))
        return parseInt(v, 10);
};
const floatParser = (v) => {
    if (!Number.isNaN(v))
        return parseFloat(v);
};
const boolParser = (v) => {
    if (typeof v === "boolean")
        return v;
    return !(v === "0" || v === "false");
};
const stringParser = (v) => (typeof v === "string" ? v : undefined);
const jsonParser = (v) => {
    try {
        if (typeof v !== "string")
            throw new Error();
        return JSON.parse(v);
    }
    catch (e) {
        return undefined;
    }
};
const stringArrayParser = (v) => {
    const v_array = typeof v === "string" ? v.split(",") : null;
    if (Array.isArray(v_array) && v_array.length > 0)
        return v_array;
};
const envDefinitions = {
    ADDRESS_POISONING_FAMILIES: {
        def: "evm,tron",
        parser: stringParser,
        desc: "List of families impacted by the address poisoning attack",
    },
    ANALYTICS_CONSOLE: {
        def: false,
        parser: boolParser,
        desc: "Show tracking overlays on the app UI",
    },
    DEBUG_THEME: {
        def: false,
        parser: boolParser,
        desc: "Show theme debug overlay UI",
    },
    API_ICP_ENDPOINT: {
        def: "https://icp.coin.ledger.com/",
        parser: stringParser,
        desc: "Rosetta API for ICP",
    },
    APTOS_API_ENDPOINT: {
        def: "https://apt.coin.ledger.com/node/v1",
        parser: stringParser,
        desc: "API enpoint for Aptos",
    },
    APTOS_TESTNET_API_ENDPOINT: {
        def: "https://apt.coin.ledger-stg.com/node/v1",
        parser: stringParser,
        desc: "API enpoint for Aptos",
    },
    APTOS_INDEXER_ENDPOINT: {
        def: "https://apt.coin.ledger.com/node/v1/graphql",
        parser: stringParser,
        desc: "Indexer endpoint for Aptos",
    },
    APTOS_TESTNET_INDEXER_ENDPOINT: {
        def: "https://apt.coin.ledger-stg.com/node/v1/graphql",
        parser: stringParser,
        desc: "Indexer endpoint for Aptos",
    },
    APTOS_ENABLE_TOKENS: {
        def: false,
        parser: boolParser,
        desc: "Enable tokens on Aptos",
    },
    APTOS_ENABLE_STAKING: {
        def: false,
        parser: boolParser,
        desc: "Enable staking for Aptos",
    },
    API_ALGORAND_BLOCKCHAIN_EXPLORER_API_ENDPOINT: {
        def: "https://algorand.coin.ledger.com",
        parser: stringParser,
        desc: "Node API endpoint for algorand",
    },
    API_CELO_INDEXER: {
        def: "https://celo.coin.ledger.com/indexer/",
        parser: stringParser,
        desc: "Explorer API for celo",
    },
    API_CELO_NODE: {
        def: "https://celo.coin.ledger.com/archive/",
        parser: stringParser,
        desc: "Node endpoint for celo",
    },
    COSMOS_GAS_AMPLIFIER: {
        def: 1.3, // Same as Keplr
        parser: intParser,
        desc: "Cosmos gas estimate multiplier",
    },
    API_FILECOIN_ENDPOINT: {
        parser: stringParser,
        def: "https://filecoin.coin.ledger.com",
        desc: "Filecoin API url",
    },
    API_STACKS_ENDPOINT: {
        parser: stringParser,
        def: "https://stacks.coin.ledger.com",
        desc: "Stacks API url",
    },
    API_POLKADOT_INDEXER: {
        parser: stringParser,
        def: "https://polkadot.coin.ledger.com",
        desc: "Explorer API for polkadot",
    },
    API_POLKADOT_SIDECAR: {
        parser: stringParser,
        def: "https://polkadot-sidecar.coin.ledger.com",
        desc: "Polkadot Sidecar API url",
    },
    API_POLKADOT_SIDECAR_CREDENTIALS: {
        parser: stringParser,
        def: "",
        desc: "Polkadot Sidecar API credentials",
    },
    API_POLKADOT_NODE: {
        parser: stringParser,
        def: "https://polkadot-fullnodes.api.live.ledger.com",
        desc: "Polkadot Node",
    },
    MULTIVERSX_API_ENDPOINT: {
        parser: stringParser,
        def: "https://elrond.coin.ledger.com",
        desc: "MultiversX API url",
    },
    MULTIVERSX_DELEGATION_API_ENDPOINT: {
        parser: stringParser,
        def: "https://delegations-elrond.coin.ledger.com",
        desc: "MultiversX DELEGATION API url",
    },
    API_STELLAR_HORIZON: {
        parser: stringParser,
        def: "https://stellar.coin.ledger.com",
        desc: "Stellar Horizon API url",
    },
    API_STELLAR_HORIZON_FETCH_LIMIT: {
        parser: intParser,
        def: 100,
        desc: "Limit of operation that Horizon will fetch per page",
    },
    API_STELLAR_HORIZON_INITIAL_FETCH_MAX_OPERATIONS: {
        parser: intParser,
        def: 1000,
        desc: "Limit of operation that Horizon will fetch on initial sync",
    },
    API_STELLAR_HORIZON_STATIC_FEE: {
        def: false,
        parser: boolParser,
        desc: "Static fee for Stellar account",
    },
    API_TEZOS_BAKER: {
        parser: stringParser,
        def: "https://tezos-bakers.api.live.ledger.com",
        desc: "bakers API for tezos",
    },
    API_TEZOS_BLOCKCHAIN_EXPLORER_API_ENDPOINT: {
        def: "https://xtz-explorer.api.live.ledger.com/explorer",
        parser: stringParser,
        desc: "Ledger explorer API for tezos",
    },
    API_TEZOS_TZKT_API: {
        def: "https://xtz-tzkt-explorer.api.live.ledger.com",
        parser: stringParser,
        desc: "tzkt.io explorer",
    },
    API_TEZOS_NODE: {
        def: "https://xtz-node.api.live.ledger.com",
        parser: stringParser,
        desc: "node API for tezos (for broadcast only)",
    },
    API_TRONGRID_PROXY: {
        parser: stringParser,
        def: "https://tron.coin.ledger.com",
        desc: "proxy url for trongrid API",
    },
    API_SOLANA_PROXY: {
        parser: stringParser,
        def: "https://solana.coin.ledger.com",
        desc: "proxy url for solana API",
    },
    API_SUI_NODE_PROXY_TEST: {
        parser: stringParser,
        def: "https://sui.coin.ledger-test.com",
        desc: "reverse proxy url for sui node",
    },
    API_SUI_NODE_PROXY: {
        parser: stringParser,
        def: "https://sui.coin.ledger.com",
        desc: "reverse proxy url for sui node",
    },
    SUI_ENABLE_TOKENS: {
        parser: boolParser,
        def: true,
        desc: "Enable tokens on Sui",
    },
    SOLANA_VALIDATORS_APP_BASE_URL: {
        parser: stringParser,
        def: "https://earn.api.live.ledger.com/v0/network/solana/validator-details",
        desc: "base url for validators.app validator list",
    },
    SOLANA_VALIDATORS_SUMMARY_BASE_URL: {
        parser: stringParser,
        def: "https://earn-dashboard.aws.stg.ldg-tech.com/figment/solana/validators_summary",
        desc: "base url for validators.app validator summary",
    },
    SOLANA_TESTNET_VALIDATORS_APP_BASE_URL: {
        parser: stringParser,
        def: "https://validators-solana.coin.ledger.com/api/v1/validators",
        desc: "base url for testnet validators.app validator list",
    },
    SOLANA_TX_CONFIRMATION_TIMEOUT: {
        def: 100 * 1000,
        parser: intParser,
        desc: "solana transaction broadcast confirmation timeout",
    },
    API_HEDERA_MIRROR: {
        def: "https://hedera.coin.ledger.com",
        parser: stringParser,
        desc: "mirror node API for Hedera",
    },
    API_VECHAIN_THOREST: {
        def: "https://vechain.coin.ledger.com",
        parser: stringParser,
        desc: "Thorest API for VeChain",
    },
    BASE_SOCKET_URL: {
        def: "wss://scriptrunner.api.live.ledger.com/update",
        parser: stringParser,
        desc: "Ledger script runner API",
    },
    BOT_TIMEOUT_SCAN_ACCOUNTS: {
        def: 10 * 60 * 1000,
        parser: intParser,
        desc: "bot's default timeout for scanAccounts",
    },
    BOT_SPEC_DEFAULT_TIMEOUT: {
        def: 30 * 60 * 1000,
        parser: intParser,
        desc: "define the default value of spec.skipMutationsTimeout (if not overriden by spec)",
    },
    BUY_API_BASE: {
        def: "https://buy.api.live.ledger.com/buy/v1",
        parser: stringParser,
        desc: "Buy crypto API base url - version 1",
    },
    CARDANO_API_ENDPOINT: {
        def: "https://cardano.coin.ledger.com/api",
        parser: stringParser,
        desc: "Cardano API url",
    },
    CARDANO_TESTNET_API_ENDPOINT: {
        def: "https://testnet-ledger.cardanoscan.io/api",
        parser: stringParser,
        desc: "Cardano API url",
    },
    ICON_NODE_ENDPOINT: {
        parser: stringParser,
        def: "https://icon.coin.ledger.com/api/v3",
        desc: "ICON RPC url",
    },
    ICON_DEBUG_ENDPOINT: {
        parser: stringParser,
        def: "https://icon.coin.ledger.com/api/v3d",
        desc: "ICON debug RPC url",
    },
    ICON_INDEXER_ENDPOINT: {
        parser: stringParser,
        def: "https://icon.coin.ledger.com/api/v1",
        desc: "ICON API url",
    },
    ICON_TESTNET_NODE_ENDPOINT: {
        parser: stringParser,
        def: "https://berlin.net.solidwallet.io/api/v3",
        desc: "ICON Berlin Testnet API url",
    },
    ICON_TESTNET_DEBUG_ENDPOINT: {
        parser: stringParser,
        def: "https://berlin.net.solidwallet.io/api/v3d",
        desc: "ICON Berlin Testnet debug",
    },
    ICON_TESTNET_INDEXER_ENDPOINT: {
        parser: stringParser,
        def: "https://tracker.berlin.icon.community/api/v1",
        desc: "ICON Berlin Testnet API url",
    },
    COINAPPS: {
        def: "",
        parser: stringParser,
        desc: "(dev feature) defines the folder for speculos mode that contains Nano apps binaries (.elf) in a specific structure: <device>/<firmware>/<appName>/app_<appVersion>.elf",
    },
    CAL_REF: {
        def: "",
        parser: stringParser,
        desc: "(dev feature) allows to target a different reference of the CAL for testing purposes",
    },
    CRYPTO_ORG_INDEXER: {
        def: "https://cryptoorg-rpc-indexer.coin.ledger.com",
        parser: stringParser,
        desc: "location of the Cronos POS Chain (formerly Crypto.org) indexer API",
    },
    CRYPTO_ORG_TESTNET_INDEXER: {
        def: "https://cronos-pos.org/explorer/croeseid4",
        parser: stringParser,
        desc: "location of the Cronos POS Chain (formerly Crypto.org) indexer testnet API",
    },
    CRYPTO_ORG_RPC_URL: {
        def: "https://cryptoorg-rpc-node.coin.ledger.com",
        parser: stringParser,
        desc: "location of the Cronos POS Chain (formerly Crypto.org) chain node",
    },
    CRYPTO_ORG_TESTNET_RPC_URL: {
        def: "https://rpc-testnet-croeseid-4.crypto.org",
        parser: stringParser,
        desc: "location of the Cronos POS Chain (formerly Crypto.org) chain testnet node",
    },
    DEBUG_UTXO_DISPLAY: {
        def: 4,
        parser: intParser,
        desc: "define maximum number of utxos to display in CLI",
    },
    DEBUG_HTTP_RESPONSE: {
        def: false,
        parser: boolParser,
        desc: "includes HTTP response body in logs",
    },
    DEVICE_CANCEL_APDU_FLUSH_MECHANISM: {
        def: true,
        parser: boolParser,
        desc: "enable a mechanism that send a 0x00 apdu to force device to awake from its 'Processing' UI state",
    },
    DEVICE_PROXY_URL: {
        def: "",
        parser: stringParser,
        desc: "enable a proxy to use instead of a physical device",
    },
    DEVICE_PROXY_MODEL: {
        def: "nanoS",
        parser: stringParser,
        desc: "allow to override the default model of a proxied device",
    },
    DISABLE_TRANSACTION_BROADCAST: {
        def: false,
        parser: boolParser,
        desc: "disable broadcast of transactions",
    },
    DISABLE_SYNC_TOKEN: {
        def: true,
        parser: boolParser,
        desc: "disable a problematic mechanism of our API",
    },
    DISABLE_FW_UPDATE_VERSION_CHECK: {
        def: false,
        parser: boolParser,
        desc: "disable the version check for firmware update eligibility",
    },
    DETOX: {
        def: "",
        parser: stringParser,
        desc: "switch the app into a DETOX mode for test purpose. Avoid falsy values.",
    },
    EIP1559_MINIMUM_FEES_GATE: {
        def: true,
        parser: boolParser,
        desc: "prevents the user from doing an EIP1559 transaction with fees too low",
    },
    EIP1559_PRIORITY_FEE_LOWER_GATE: {
        def: 0.85,
        parser: floatParser,
        desc: "minimum priority fee percents allowed compared to network conditions allowed when EIP1559_MINIMUM_FEES_GATE is activated",
    },
    EIP1559_BASE_FEE_MULTIPLIER: {
        def: 1.27,
        parser: floatParser,
        desc: "mutiplier for the base fee that is composing the maxFeePerGas property",
    },
    EXPERIMENTAL_BLE: {
        def: false,
        parser: boolParser,
        desc: "enable experimental support of Bluetooth",
    },
    EXPERIMENTAL_CURRENCIES: {
        def: "",
        parser: stringParser,
        desc: "enable experimental support of currencies (comma separated)",
    },
    EXPERIMENTAL_EXPLORERS: {
        def: false,
        parser: boolParser,
        desc: "enable experimental explorer APIs",
    },
    EXPERIMENTAL_LANGUAGES: {
        def: false,
        parser: boolParser,
        desc: "enable experimental languages",
    },
    EXPERIMENTAL_MANAGER: {
        def: false,
        parser: boolParser,
        desc: "enable an experimental version of Manager",
    },
    EXPERIMENTAL_ROI_CALCULATION: {
        def: false,
        parser: boolParser,
        desc: "enable an experimental version of the portfolio percentage calculation",
    },
    EXPERIMENTAL_SEND_MAX: {
        def: false,
        parser: boolParser,
        desc: "force enabling SEND MAX even if not yet stable",
    },
    EXPERIMENTAL_USB: {
        def: false,
        parser: boolParser,
        desc: "enable an experimental implementation of USB support",
    },
    EXPERIMENTAL_SWAP: {
        def: false,
        parser: boolParser,
        desc: "enable an experimental swap interface",
    },
    EXPLORER: {
        def: "https://explorers.api.live.ledger.com",
        parser: stringParser,
        desc: "Ledger generic explorer API",
    },
    EXPLORER_STAGING: {
        def: "https://explorers.api-01.live.ledger-stg.com",
        parser: stringParser,
        desc: "Ledger staging explorer API",
    },
    EXPLORER_BETA: {
        def: "https://explorers.api.live.ledger.com",
        parser: stringParser,
        desc: "Ledger generic explorer beta API",
    },
    EXPLORER_SATSTACK: {
        def: "http://localhost:20000",
        parser: stringParser,
        desc: "Ledger satstack Bitcoin explorer API",
    },
    EXPORT_EXCLUDED_LOG_TYPES: {
        def: "ble-frame",
        parser: stringParser,
        desc: "comma-separated list of excluded log types for exported logs",
    },
    EXPORT_MAX_LOGS: {
        def: 5000,
        parser: intParser,
        desc: "maximum logs to keep for export",
    },
    DISABLE_APP_VERSION_REQUIREMENTS: {
        def: false,
        parser: boolParser,
        desc: "force an old application version to be accepted regardless of its version",
    },
    FORCE_PROVIDER: {
        def: 1,
        parser: intParser,
        desc: "use a different provider for app store (for developers only)",
    },
    FILTER_ZERO_AMOUNT_ERC20_EVENTS: {
        def: true,
        parser: boolParser,
        desc: "Remove filter of address poisoning",
    },
    GET_CALLS_RETRY: {
        def: 2,
        parser: intParser,
        desc: "how many times to retry a GET http call",
    },
    GET_CALLS_TIMEOUT: {
        def: 60 * 1000,
        parser: intParser,
        desc: "how much time to timeout a GET http call",
    },
    HIDE_EMPTY_TOKEN_ACCOUNTS: {
        def: false,
        parser: boolParser,
        desc: "hide the sub accounts when they are empty",
    },
    KEYCHAIN_OBSERVABLE_RANGE: {
        def: 0,
        parser: intParser,
        desc: "overrides the gap limit specified by BIP44 (default to 20)",
    },
    LEDGER_CLIENT_VERSION: {
        def: "",
        parser: stringParser,
        desc: "the 'X-Ledger-Client-Version' HTTP header to use for queries to Ledger APIs",
    },
    LEDGER_COUNTERVALUES_API: {
        def: "https://countervalues.live.ledger.com",
        parser: stringParser,
        desc: "Ledger countervalues API",
    },
    LEDGER_REST_API_BASE: {
        def: "https://explorers.api.live.ledger.com",
        parser: stringParser,
        desc: "DEPRECATED",
    },
    LEGACY_KT_SUPPORT_TO_YOUR_OWN_RISK: {
        def: false,
        parser: boolParser,
        desc: "enable sending to KT accounts. Not tested.",
    },
    MANAGER_API_BASE: {
        def: "https://manager.api.live.ledger.com/api",
        parser: stringParser,
        desc: "Ledger Manager API",
    },
    MANAGER_DEV_MODE: {
        def: false,
        parser: boolParser,
        desc: "enable visibility of utility apps in Manager",
    },
    MANAGER_INSTALL_DELAY: {
        def: 1000,
        parser: intParser,
        desc: "defines the time to wait before installing apps to prevent known glitch (<=1.5.5) when chaining installs",
    },
    MAPPING_SERVICE: {
        def: "https://mapping-service.api.ledger.com",
        parser: stringParser,
        desc: "",
    },
    MAX_ACCOUNT_NAME_SIZE: {
        def: 50,
        parser: intParser,
        desc: "maximum size of account names",
    },
    MOCK: {
        def: "",
        parser: stringParser,
        desc: "switch the app into a MOCK mode for test purpose, the value will be used as a seed for the rng. Avoid falsy values.",
    },
    MOCK_COUNTERVALUES: {
        def: "",
        parser: stringParser,
        desc: "switch the countervalues resolution into a MOCK mode for test purpose",
    },
    MOCK_APP_UPDATE: {
        def: false,
        parser: boolParser,
        desc: "Always shows app update in the manager",
    },
    /**
     * Note: the mocked cryptoassets config and test partner are signed with the
     * Ledger test private key
     */
    MOCK_EXCHANGE_TEST_CONFIG: {
        def: false,
        parser: boolParser,
        desc: "mock the cryptoassets config and test partner (in the context of app-exchange)",
    },
    MOCK_EXCHANGE_TEST_PARTNER: {
        def: false,
        parser: boolParser,
        desc: "change CAL partner context to test",
    },
    MOCK_REMOTE_LIVE_MANIFEST: {
        def: "",
        parser: stringParser,
        desc: "mock remote live app manifest",
    },
    MOCK_OS_VERSION: {
        def: "",
        parser: stringParser,
        desc: "if defined, overrides the os and version. format: os@version. Example: Windows_NT@6.1.7601",
    },
    MOCK_NO_BYPASS: {
        def: false,
        parser: boolParser,
        desc: "if defined, avoids bypass of the currentDevice in the store.",
    },
    NFT_CURRENCIES: {
        def: ["avalanche_c_chain", "bsc", "ethereum", "polygon", "solana"],
        parser: stringArrayParser,
        desc: "set the currencies where NFT is active",
    },
    NFT_METADATA_SERVICE: {
        def: "https://nft.api.live.ledger.com",
        parser: stringParser,
        desc: "service uri used to get the metadata of an nft",
    },
    OPERATION_ADDRESSES_LIMIT: {
        def: 100,
        parser: intParser,
        desc: "limit the number of addresses in from/to of operations",
    },
    OPERATION_OPTIMISTIC_RETENTION: {
        def: 30 * 60 * 1000,
        parser: intParser,
        desc: "timeout to keep an optimistic operation that was broadcasted but not yet visible from the coin implementation or the API",
    },
    OPERATION_PAGE_SIZE_INITIAL: {
        def: 100,
        parser: intParser,
        desc: "defines the initial default operation length page to use",
    },
    POLKADOT_ELECTION_STATUS_THRESHOLD: {
        def: 25,
        parser: intParser,
        desc: "in blocks - number of blocks before Polkadot election effectively opens to consider it as open and disable all staking features",
    },
    SATSTACK: {
        def: false,
        parser: boolParser,
        desc: "Switch to satstack mode",
    },
    SCAN_FOR_INVALID_PATHS: {
        def: false,
        parser: boolParser,
        desc: "enable searching accounts in exotic derivation paths",
    },
    SEED: {
        def: "",
        parser: stringParser,
        desc: "(dev feature) seed to be used by speculos (device simulator)",
    },
    SHOW_LEGACY_NEW_ACCOUNT: {
        def: false,
        parser: boolParser,
        desc: "allow the creation of legacy accounts",
    },
    SIMPLE_HASH_API_BASE: {
        def: "https://simplehash.api.live.ledger.com/api/v0",
        parser: stringParser,
        desc: "SimpleHash API base url",
    },
    SKIP_ONBOARDING: {
        def: false,
        parser: boolParser,
        desc: "dev flag to skip onboarding flow",
    },
    SPECULOS_API_PORT: {
        def: 0,
        parser: intParser,
        desc: "API port for speculos",
    },
    SPECULOS_DEVICE: {
        def: "",
        parser: stringParser,
        desc: "Device model id for speculos",
    },
    SPECULOS_PID_OFFSET: {
        def: 0,
        parser: intParser,
        desc: "offset to be added to the speculos pid and avoid collision with other instances",
    },
    /**
     * It's just here as a backup, the REST API is supposed to be the right mode
     * We can always fallback on the previous method if we need to.
     * The websocket option is harmless, we can remove it at some point but let's
     * keep it for a while just in case.
     * Introduced on June 27th 2023 by https://github.com/LedgerHQ/ledger-live/pull/3824
     */
    SPECULOS_USE_WEBSOCKET: {
        def: false,
        parser: boolParser,
        desc: "Use speculos websocket interface instead of Rest API",
    },
    SWAP_API_BASE: {
        def: "https://swap.ledger.com/v5",
        parser: stringParser,
        desc: "Swap API base",
    },
    SWAP_USER_IP: {
        def: "",
        parser: stringParser,
        desc: "Swap IP",
    },
    SWAP_DISABLE_APPS_INSTALL: {
        def: false,
        parser: boolParser,
        desc: "bypass app checks on Nano for speculos swap tests",
    },
    SYNC_ALL_INTERVAL: {
        def: 8 * 60 * 1000,
        parser: intParser,
        desc: "delay between successive sync",
    },
    SYNC_BOOT_DELAY: {
        def: 2 * 1000,
        parser: intParser,
        desc: "delay before the sync starts",
    },
    SYNC_PENDING_INTERVAL: {
        def: 10 * 1000,
        parser: intParser,
        desc: "delay between sync when an operation is still pending",
    },
    SYNC_OUTDATED_CONSIDERED_DELAY: {
        def: 10 * 60 * 1000,
        parser: intParser,
        desc: "delay until Live consider a sync outdated",
    },
    SYNC_MAX_CONCURRENT: {
        def: 4,
        parser: intParser,
        desc: "maximum limit to synchronize accounts concurrently to limit overload",
    },
    BOT_MAX_CONCURRENT: {
        def: 10,
        parser: intParser,
        desc: "maximum limit to run bot spec in parallel",
    },
    USER_ID: {
        def: "",
        parser: stringParser,
        desc: "unique identifier of app instance. used to derivate dissociated ids for difference purposes (e.g. the firmware update incremental deployment).",
    },
    WALLETCONNECT: {
        def: false,
        parser: boolParser,
        desc: "is walletconnect enabled",
    },
    CLOUD_SYNC_API_STAGING: {
        def: "https://cloud-sync-backend.api.aws.stg.ldg-tech.com",
        parser: stringParser,
        desc: "wallet sync api staging base url",
    },
    CLOUD_SYNC_API_PROD: {
        def: "https://cloud-sync.api.live.ledger.com",
        parser: stringParser,
        desc: "wallet sync api production base url",
    },
    WITH_DEVICE_POLLING_DELAY: {
        def: 500,
        parser: floatParser,
        desc: "delay when polling device",
    },
    ANNOUNCEMENTS_API_URL: {
        def: "https://cdn.live.ledger.com/announcements",
        parser: stringParser,
        desc: "url used to fetch new announcements",
    },
    ANNOUNCEMENTS_API_VERSION: {
        def: 1,
        parser: intParser,
        desc: "version used for the announcements api",
    },
    STATUS_API_URL: {
        def: "https://ledger.statuspage.io/api",
        parser: stringParser,
        desc: "url used to fetch ledger status",
    },
    STATUS_API_VERSION: {
        def: 2,
        parser: intParser,
        desc: "version used for ledger status api",
    },
    TEZOS_MAX_TX_QUERIES: {
        def: 100,
        parser: intParser,
        desc: "safe max on maximum number of queries to synchronize a tezos account",
    },
    TRUSTCHAIN_API_STAGING: {
        def: "https://trustchain-backend.api.aws.stg.ldg-tech.com",
        parser: stringParser,
        desc: "Trustchain API Staging",
    },
    TRUSTCHAIN_API_PROD: {
        def: "https://trustchain.api.live.ledger.com",
        parser: stringParser,
        desc: "Trustchain API Prod",
    },
    PLATFORM_DEBUG: {
        def: false,
        parser: boolParser,
        desc: "enable visibility of debug apps and tools in Platform Catalog",
    },
    PLATFORM_EXPERIMENTAL_APPS: {
        def: false,
        parser: boolParser,
        desc: "enable visibility of experimental apps and tools in Platform Catalog",
    },
    PLATFORM_MANIFEST_API_URL: {
        def: "https://live-app-catalog.ledger.com/api/v1/apps",
        parser: stringParser,
        desc: "url used to fetch platform app manifests",
    },
    PLATFORM_LOCAL_MANIFEST_JSON: {
        def: "",
        parser: stringParser,
        desc: 'json manifest for a local (test) platform app manifests. How to use: PLATFORM_LOCAL_MANIFEST_JSON="$(cat /path/to/file.json)"',
    },
    PLATFORM_GLOBAL_CATALOG_API_URL: {
        def: "https://cdn.live.ledger.com/platform/catalog/v1/data.json",
        parser: stringParser,
        desc: "url used to fetch platform app manifests",
    },
    PLATFORM_GLOBAL_CATALOG_STAGING_API_URL: {
        def: "https://cdn.live.ledger-stg.com/platform/catalog/v1/data.json",
        parser: stringParser,
        desc: "url used to fetch platform app manifests (staging)",
    },
    PLATFORM_RAMP_CATALOG_API_URL: {
        def: "https://cdn.live.ledger.com/platform/trade/v1/data.json",
        parser: stringParser,
        desc: "url used to fetch platform app manifests",
    },
    PLATFORM_RAMP_CATALOG_STAGING_API_URL: {
        def: "https://cdn.live.ledger-stg.com/platform/trade/v1/data.json",
        parser: stringParser,
        desc: "url used to fetch platform app manifests (staging)",
    },
    PLATFORM_API_URL: {
        def: "",
        parser: stringParser,
        desc: "url used to fetch platform catalog",
    },
    PLATFORM_API_VERSION: {
        def: 1,
        parser: intParser,
        desc: "version used for the platform api",
    },
    PLAYWRIGHT_RUN: {
        def: false,
        parser: boolParser,
        desc: "true when launched for E2E testing",
    },
    MARKET_API_URL: {
        def: "https://proxycg.api.live.ledger.com/api/v3",
        parser: stringParser,
        desc: "Market data api",
    },
    USE_LEARN_STAGING_URL: {
        def: false,
        parser: boolParser,
        desc: "use the staging URL for the learn page",
    },
    DYNAMIC_CAL_BASE_URL: {
        def: "https://cdn.live.ledger.com/cryptoassets",
        parser: stringParser,
        desc: "bucket S3 of the dynamic cryptoassets list",
    },
    CAL_SERVICE_URL: {
        def: "https://crypto-assets-service.api.ledger.com",
        parser: stringParser,
        desc: "Cryptoassets list service url",
    },
    FEATURE_FLAGS: {
        def: "{}",
        parser: jsonParser,
        desc: "key value map for feature flags: {[key in FeatureId]?: Feature]}",
    },
    PERFORMANCE_CONSOLE: {
        def: false,
        parser: boolParser,
        desc: "Show a performance overlay on the app UI",
    },
    STORAGE_PERFORMANCE_OVERLAY: {
        def: false,
        parser: boolParser,
        desc: "Show a performance overlay on the app storage",
    },
    ETHEREUM_STUCK_TRANSACTION_TIMEOUT: {
        def: 5 * 60 * 1000,
        parser: intParser,
        desc: "Time after which an optimisc operation is considered stuck",
    },
    EVM_REPLACE_TX_LEGACY_GASPRICE_FACTOR: {
        def: 1.3,
        parser: floatParser,
        desc: "Replace transaction gasprice factor for legacy evm transaction. This value should be 1.1 minimum since this is the minimum increase required by most nodes",
    },
    EVM_REPLACE_TX_EIP1559_MAXFEE_FACTOR: {
        def: 1.3,
        parser: floatParser,
        desc: "Replace transaction max fee factor for EIP1559 evm transaction. This value should be 1.1 minimum since this is the minimum increase required by most nodes",
    },
    EVM_REPLACE_TX_EIP1559_MAXPRIORITYFEE_FACTOR: {
        def: 1.1,
        parser: floatParser,
        desc: "Replace transaction max priority fee factor for EIP1559 evm transaction. This value should be 1.1 minimum since this is the minimum increase required by most nodes",
    },
    EVM_FORCE_LEGACY_TRANSACTIONS: {
        def: false,
        parser: boolParser,
        desc: "Force transaction type 0 on EVM networks",
    },
    ENABLE_NETWORK_LOGS: {
        def: false,
        parser: boolParser,
        desc: "Enable network request and responses logs. Errors are always logged",
    },
    CRYPTO_ASSET_SEARCH_KEYS: {
        def: ["ticker", "name", "keywords"],
        parser: stringArrayParser,
        desc: "Fuse search attributes to find a currency according to user input",
    },
    VERBOSE: {
        def: [],
        parser: stringArrayParser,
        desc: 'Sets up debug console printing of logs. `VERBOSE=1` or `VERBOSE=true`: to print all logs | `VERBOSE="apdu,hw,transport,hid-verbose"` : filtering on a list of log `type` separated by a `,`',
    },
    DEFAULT_TRANSACTION_POLLING_INTERVAL: {
        def: 30 * 1000,
        parser: intParser,
        desc: "Default interval to poll for transaction confirmation in speedup/cancel evm flow (in ms)",
    },
    LOW_BATTERY_PERCENTAGE: {
        def: 20,
        parser: intParser,
        desc: "Configure the low battery percentage threshold",
    },
    LOG_DRAWERS: {
        def: false,
        parser: boolParser,
        desc: "Enable logs for drawers",
    },
    SANCTIONED_ADDRESSES_URL: {
        def: "https://compliance.ledger.com/all_sanctioned_addresses_without_ticker.json",
        parser: stringParser,
        desc: "List of sanctioned addresses",
    },
};
const getDefinition = (name) => {
    if (name in envDefinitions) {
        return envDefinitions[name];
    }
    return undefined;
};
const env_defaults = Object.keys(envDefinitions).reduce((acc, curr) => {
    return {
        ...acc,
        [curr]: envDefinitions[curr].def,
    };
}, {});
// private local state
const env = { ...env_defaults };
const getAllEnvNames = () => Object.keys(envDefinitions);
const getAllEnvs = () => ({ ...env });
// Usage: you must use getEnv at runtime because the env might be settled over time. typically will allow us to dynamically change them on the interface (e.g. some sort of experimental flags system)
const env_getEnv = (name) => env[name];
const getEnvDefault = (name) => env_defaults[name];
const isEnvDefault = (name) => env[name] === env_defaults[name];
const getEnvDesc = (name) => envDefinitions[name].desc;
const changes = new Subject();
// change one environment
const setEnv = (name, value) => {
    const oldValue = env[name];
    if (oldValue !== value) {
        env[name] = value;
        changes.next({
            name,
            value,
            oldValue,
        });
    }
};
// change one environment with safety. returns true if it succeed
const setEnvUnsafe = (name, unsafeValue) => {
    const definition = getDefinition(name);
    if (!definition)
        return false;
    const { parser } = definition;
    const value = parser(unsafeValue);
    if (value === undefined || value === null) {
        console.warn(`Invalid ENV value for ${name}`);
        return false;
    }
    setEnv(name, value);
    return true;
};
//# sourceMappingURL=env.js.map
;// ./node_modules/@ledgerhq/live-env/lib-es/index.js

//# sourceMappingURL=index.js.map
;// ./node_modules/@ethersproject/constants/lib.esm/addresses.js
const AddressZero = "0x0000000000000000000000000000000000000000";
//# sourceMappingURL=addresses.js.map
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/eip712.json
var eip712_namespaceObject = /*#__PURE__*/JSON.parse('{"42161:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c":{"contractName":{"label":"1inch Order","signature":"3044022020da162d81217220a0ae92baec05c5e99cbb391469186e27b2609740980c7dff0220285603f10f261ae8a02779cb97033906c5a7901c9e3acae041c2385d17182290"},"fields":[{"label":"From","path":"maker","signature":"3044022060df9e42841cef20df24776b08774abf84cdeac36925b5c5817b02a57138718702200b8d4d0c56f01cbbee2334c9b62d05324382acc3e6ee0b5426871ee1117d921e"},{"label":"Send","path":"makerAsset","signature":"3045022100de035d8c1fd5f7f03b113053bf0076b562faadaf767b86ad4cdde63cc7983daa0220422ad10026c955f944b4869b0018957682bb31a79918b6d9f01034ccfaf83a5c"},{"label":"Send","path":"makingAmount","signature":"3045022100ff3a4e5bfefc86a65c1d24732f435f593b7f034254ed8d5c49ad837a09e30762022027e9f17d658dd815d40e7010eafe5a7f3da7d1d0f532471247a4490d04fcc473"},{"label":"Receive minimum","path":"takerAsset","signature":"3045022100f30c4f92e576a0aab8b3a86369fd68892bafd4920f47087c772b396ef125c4f40220023a0f6d598e64c64c731fb86a1a331d48558462422f85088d420872b386e367"},{"label":"Receive minimum","path":"takingAmount","signature":"304502210086c4f94eb3334026efaf73cc99cdf0b63818eb259e1ccb52b143e9cf47465c79022036532d7b42c4fdf502b53f074d98aec07fa752ca324946917c3ba8f92ff7293e"},{"label":"To","path":"receiver","signature":"3044022050a705227d3b7b1ae5fb8bb170171b47ba7f54243df6b417f669bec5c6ae072902206d293823929e946f2207efea226dfa0e0e6f153729d5351e664da007bc75a6a1"}]},"42161:0x7f069df72b7a39bce9806e3afaf579e54d8cf2b9:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337":{"contractName":{"label":"1inch Order","signature":"304502210086b3dfc9a254c1bedf6f227a6ba373df5830ed15c8cd076ab81ccdfa1d9704ea02201a322596fd79104092cfdf1bb50e625de21a5ae6621d324893533b5fd09bdf73"},"fields":[{"label":"From","path":"maker","signature":"304402207836e75bba70bff3ac5c36cea8bba78c5ce37aeedaddee4d96f23ebdab274e2a022036076d9f85a3c5fab437e72dd64d12f12507ff34ee73828d5639a848dbac1f85"},{"label":"Send","path":"makerAsset","signature":"3044022067f37bfce6e054bdeb307b7949eae73359f65fbe85eb79b8d88e6ac65169a06502207e9a91bac7ab6c0af97ba245a322dd64c8e6297cdfd85445b89f592b1e158d21"},{"label":"Send","path":"makingAmount","signature":"30440220435a279ff85928b3b0b16bc0a92cc7dbf4ab76d6d173d67f28588f131930ad7102207b433afc9626e1fbb4305a12a45d1895506b84ff02d80a6c132d8f4f9820bb87"},{"label":"Receive minimum","path":"takerAsset","signature":"30440220411a6efe5337858634ba91743cb534e6748336d276a50cb0e0d15c31956cc82f02204e7306db34a14c64284d87fafc89a7b9ea58d0eca755034e1f6dd137671137fb"},{"label":"Receive minimum","path":"takingAmount","signature":"304402200f76c7710af7ef186f5673ab73685de1ae8af493a45d96bc83995cecf9824e030220576058fc7dd68808458730612078b92e65bb589aa1770a96ddac6ffc55cf6e05"},{"label":"To","path":"receiver","signature":"3045022100cd448518044c4bfd4a0773c00d700b62a35fe208d27771caaa4239743736f09102204064886c6f5272ea4545977fa1c9d075e3abba0655de494cc81bf969ade063bf"}]},"42161:0x7f069df72b7a39bce9806e3afaf579e54d8cf2b9:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a":{"contractName":{"label":"1inch Order","signature":"3044022017457b1725fc3af0932818d7f2e727510326094bebf470c313c726104201f4160220233662309328ebf5acf57c1a23384beb8d29b6c026c3084113b3d42e16ad3094"},"fields":[{"label":"From","path":"maker","signature":"3045022100f26083b8baa79070fe0424f6b6f0cbe1a6c49a6f7aa00c322f1de5bc6634144202205f49700d5f3360654764353c9ef75a6bcb9940c2cc7a8d0fa3bca82c40ce96c3"},{"label":"Send","path":"makerAsset","signature":"3045022100e4527604bde8bcc397947c9d1b3936b19aee70ea2eb702ae55dfc071efeccef3022033eeb350bf4f03741b3d0d420816a338f449ec7df33608f057038931c1f84fe9"},{"label":"Send","path":"makingAmount","signature":"3045022100902220e354b11ccd4a16b4a4e91e3c2d4e8fd8448df6b41b8466c90c81bc2f2d02205a8dea6307bfda2b0b108c29c35e6a99ad2042a83fa70b8931f244a83c57cb51"},{"label":"Receive minimum","path":"takerAsset","signature":"3045022100eabd1e9fed349c12c341846d084b3a67898490bbd2adf0199452a2835faea5f60220017baf11b3d7c12982e2958befb485e15396ca7f6f7d1ee6ab758801ee5a4d16"},{"label":"Receive minimum","path":"takingAmount","signature":"304402204f4953b728d0776fdd0de8424bf611bfa89daaec9f7352d087eb86eb951130a3022030f94ca49d256a91dd3ccabae63d5acaf053ece9e9b103ac9b3529f49b58cd29"},{"label":"To","path":"receiver","signature":"304402203bdfeec857a64ca1eafba51d77d090936bed9dafc09ba461ced6c058b02758d402202546dd5ab8a003490c5fdc4a789ffeedb9656622ed2ac867d2c712c68ccab104"}]},"42161:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3":{"contractName":{"label":"AugustusRFQ ERC20 order","signature":"304502210085c3d02e3f1d2d9dc6bb9975e46e8b90e514d578d9e6974b10b3cc1bf4a2fe7f02205d2257c30412b9067a707f8cfa8da92b0336faa39a2bd7099d2b55e0a085b8cc"},"fields":[{"label":"Nonce and metadata","path":"nonceAndMeta","signature":"3045022100ff187b0adc9b9e2b9aea716d4047d2ac92c44cd0d0f2b6ac09ec4b52d89e9dcb02200b18d913b72125c7a2d6083e2097f786979c04056b881e44957242982a81931f"},{"label":"Expiration time","path":"expiry","signature":"3044022038ca4d34df27f672a40cea96f4397c70148e07a29662601ad765e01c71a5aaf502203c88823e913193f5eff4b8f5eee72463b660b6d146f589151af2164de4d6bb28"},{"label":"Maker asset address","path":"makerAsset","signature":"3044022058de4c432c785035fe20e160f7a98a9ebfb1152df0c61d679b0bf8cf838a3412022006447e72822301ca0fdd56cfeedd0ca04cdf018bb600df3f9b28d633e90b65a4"},{"label":"Taker asset address","path":"takerAsset","signature":"3045022100dd48da4bd40c2ae4e389462e9792c67bf699749fcabf954e0121c7759a499ba4022011b3c12c7d356a8ec62a57643eea50fed6d831b9fe95f94a7b31c4d1ba8fd887"},{"label":"Maker address","path":"maker","signature":"3044022074fb2c7f1569c685e740015a91deb0cfaf771d71ba0fffcd14c24d59023878fd02202488ff10efbf225f1750ba334dd885f7966b3be7d57b87bce966aa3aec7fc3b4"},{"label":"Taker address","path":"taker","signature":"3045022100ec75b1e6c770ab39c3dec4c827af340b13750d55436002504e8d27872284749d022048dde24cfa5b564e04c3880febbe40650687ea0e85fc634d27f18b95c14f8e59"},{"label":"Maker amount","path":"makerAmount","signature":"304402205ee3c0ebf4735b3e7209237a2c4a745ecaa8e0310a7e0b33651aaff4baadd10102205aab92e8cc4444f900e368502e8424d5d05d1216a71e8b4dfa1a30d7ecf29e01"},{"label":"Taker amount","path":"takerAmount","signature":"304402202da05529a3b7efb5120658b02f7de224887517b67c26f6cae85c3b4a52d9dcdd022071ecb8acf9bb2ec27d3ef5564394a48192692c1214e3c98f87e651c7c6353994"}]},"42161:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623":{"contractName":{"label":"AugustusRFQ NFT order","signature":"304402205aa1d43c376b38e68d4cf0d9fa51da49572de9a7d5c8e2fa6f0bb1430b522abf02201e8c73865ecd95e36d106a2fd58e3eaa7a73d6181879aab9254d66e45dfbf16c"},"fields":[{"label":"Nonce and metadata","path":"nonceAndMeta","signature":"304402205cc7b36d3b1cf49f956486ba56c571474b1c2dc74776f3d73d1720f402578c9a0220781edc10e5ee70a56a65881b9a4510f2dc0227899664d6ff3c5ca0465ca4b6ef"},{"label":"Expiration time","path":"expiry","signature":"3045022100d3d524282bcacd494cd6b72b148033f17fe05789032f5da58944863d24259ecc0220228df613f5d2d2f3662c3c35ad3316ba5a231d95b9fe95cfc39d433b9e0201d7"},{"label":"Maker asset encoded","path":"makerAsset","signature":"3045022100c8e4bc97eabdd4b267c6733652b735c011cb353bcb14b61ca8b2c732a701db9302204f35ce83dc85008afd0a93608b531f0ea5d680472c077d8dc2a32cc5ccf581c4"},{"label":"Maker asset NFT ID","path":"makerAssetId","signature":"3045022100aeadd32775d3d63a1dde73c23fab6d7fef0375d5210728fd8f2ed56adbee5b220220462f3c126c78dd0fc9499005b5ce3b81c995f11c55e9cdaf55d19fb1686f853e"},{"label":"Taker asset encoded","path":"takerAsset","signature":"3045022100f6ee6ab28521c9f282fcc897f165e780ec9b0fe9268f2a18beeb3c67922ca679022055a2d60bbc05145e3b55483b502c576066469c6d6fbb9ee3336a16b7b5df4900"},{"label":"Taker asset NFT ID","path":"takerAssetId","signature":"304402203c84ee7655fd53fbe7eefb9e7522eeceb29bb7f03559d5e0a92b1ee55e711dcb02200c99dd941f9e58b6b0f28e592c089dbcb245f73ebeddbab9e2e88defacd186df"},{"label":"Maker address","path":"maker","signature":"30440220109b530322d864a1e29d431a00f0dcde1cd165a2ad11b021eef605074d4c9758022052f04b7e2a2cd70cae54a881c7f783fcc2058d5b2791b24bc557e4e231cc2dff"},{"label":"Taker address","path":"taker","signature":"3045022100f85a6ad793151886d7b4fe8902f55b81e4db1ee73589e1ed180a3f9b2285288b022023d061e2f9694a086229fff173f351c630e907806e8e7f80e9fc154a510962ee"},{"label":"Maker amount","path":"makerAmount","signature":"3045022100d97b6d8cadff2e066b43c0bf3cc363741dd3227c9989ead29a51466f2f1d9cf302205b76c51c2e2d2e75855acf5416be5e3a066b2e671884ae81343cedf9eb42b7c7"},{"label":"Taker amount","path":"takerAmount","signature":"30440220249407bacec2053557a7360ec596daf931fd002c31f77acd94b151a035728bb7022050769d692217e817efb3f6845dfa293cfbeaa39f93b97dac2d063a4be7c44cf6"}]},"42161:0x912ce59144191c1204e64559fe8253a0e49e6548:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Arbitrum transfers","signature":"304402200f7f97c35bb60e6f4052b2a129740c55e716fef26eb0a83a834bbe03d7d82c9e022047b2d37e4149990d28cf1b1b1f9caf803259cae2a343ff72000eddfa319de15f"},"fields":[{"label":"From","path":"owner","signature":"3045022100db5520b82af16dd2ac45775fe3db20db5c9829b47b847616b39fa1744685d13202202d1a2c60d5c500eb1119ea52951983c686327f81a0f08d06e58e18ee84486883"},{"label":"Approve to spender","path":"spender","signature":"30440220556ec93aa29917934f4a3626de9b9a2e9ec589446201981a05a860696d33e97d02207792c8caa52e5bc7236d81d11e71bdf9d2845a3b2d7b3a3e99e7371736152374"},{"label":"Amount allowance","path":"value","signature":"304402206874b15e518f42bcfdde97f409cf86624598ce619890f2c927506c36e1c70bc2022072a649d004485b701e95bdf16b0d7880852df6f3821a3fade0ecb99d947b2157"},{"label":"Aproval expire","path":"deadline","signature":"30440220154b8581a690ee98338540152de43f833571c53113698d4c210745abc5883ac2022022d38615c362d630672aa9cdaa57d799824862e79ac356511055c0f989d80deb"}]},"42161:0xff970a61a04b1ca14834a43f5de4533ebddb5cc8:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit USDC","signature":"3044022028314adc36ce0808ecb88517feae3291408503877c3bd9abcdb8b4b24de83f5102207a92d8ea367676eccba14c0aff75efd66b141debac865dd7749013cc306645de"},"fields":[{"label":"From","path":"owner","signature":"3045022100d2b596afa0df5133f55d692928734bd15d46fdab388a6f4f69df43420bc99a64022066c087594da4c6d57c24e2bb7c333e78290a1f7f8f9f8262aa4da0812bea1f60"},{"label":"Approve to spender","path":"spender","signature":"3045022100834772d8adc519f3a5bd4a6ef33e45c8ef3dfd2c9290afe8e33cc57aa56c4dd802200d7306bf364284118da4710e9a9fae3a0e7e3579206cde4543158e85c3ff4b5b"},{"label":"Amount allowance","path":"value","signature":"3045022100ba188c9fa149de6daeb42904ccd2abc828da911585f983deb669b9bef2fa61a702204e2573968e6d1f61a4e608da485243ef946ce1ab9adab19c0a37514d4971cc5c"},{"label":"Approval expire","path":"deadline","signature":"3045022100a72fb1d0a80c68a07076d873613f1f4152c9565a14c54a653a240b6c2f0ea38f02203534a46e31fba5f5c9db78b3f4eeb728b6c7b9580f270bfb1619dc28246c53e1"}]},"42161:0x789fc99093b09ad01c34dc7251d0c89ce743e5a4:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e":{"contractName":{"label":"Arbitrum Foundation: Treasury Governor","signature":"304402200fa08b5ce686eaf6bb708211bd4bbfe2d4e278f6966ad2e481be73a472bb4b46022067481a8a0d0357e42592498b0e099f8b1313003c423595972bfbf19add008e58"},"fields":[{"label":"Proposal id","path":"proposalId","signature":"3045022100a464daba1b2a7a35336e03fe0c68977597df0917dd14d40b5b794dc12dd1696a0220594ce98bf0fffd98a6717c26465b1c67f14955cd0013f0b9817d85d771ec0acc"},{"label":"Support","path":"support","signature":"3044022051f41d12c90d0e82d9724f7fe43d5b9d035ba46c160fed7a9d6026b8317f80f7022057f325aaae71c60bdaa9bc371a5af9a1d4a5354a7f7dd6865c36faaa4ecf929d"}]},"42161:0x912ce59144191c1204e64559fe8253a0e49e6548:2c3e6b3e91e39ef9bb3c1b1cd2b4d8da76bf433179c8042962671278":{"contractName":{"label":"ARB token","signature":"3045022100d083aa12bc96ed7568942bad291c90fa0710b984b6d8693021be961d99df15b702200d29db9c738e3fbd7dc3d21612833e32b5e2f197f8273662ce16e20058276a47"},"fields":[{"label":"Delegatee","path":"delegatee","signature":"304402205274148210b7cc92e2714d33d5c7c280ace94b9d09b41539af5056ddcb588b9b02204b104de75d5fb03f4ec1b455b9785a3c6f41a897142c40f88bd0e27a51ac940d"},{"label":"Nonce","path":"nonce","signature":"3045022100fdab6f7a16e999d0b0bd2fd4be92682a0c65cd5ae928ed3cd071b11ebe5fbc7702207cf139627f6e2aeee8b0b22fde9c1025cb847b2ba3b4d27a4726e596c284d62e"},{"label":"Expiry","path":"expiry","signature":"30450221009d00f19bd6bc9f14502c0ab2ff54f372f00c6a153083898505f1b9fea585b70002205c1b4afbc7efc4fd027528917d107a95b5f24caba816806fd393d4e419dbdcde"}]},"42161:0xf07ded9dc292157749b6fd268e37df6ea38395b9:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e":{"contractName":{"label":"Arbitrum Foundation: Core Governor","signature":"3045022100e328451e523340c7f0c6229d69a9196703d33a9aa4920cc775ef4c254eba08b402204d3c4a0be0a1aa383c6895db61ff07623fb000773713a62e56bf107fa8a852d4"},"fields":[{"label":"Proposal id","path":"proposalId","signature":"304502210087d449414d2e9d6466e5b9fc5a2a4c0f93e13b6674fb6f3b5673ad3fcc8780f802204b9e8b83c62042f4f4326d975b0f7e9ac8490d19a2d04f2e26568c3433444783"},{"label":"Support","path":"support","signature":"3044022023b69aa0f439df05ae5be7d03df5fd69ce8a01fce764bc1c8455d2c92106bc85022027866dbb7c5e09eb70f90329dcb59c90a87da90f2b77d17c1f74a9c2e0f663db"}]},"42161:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"30440220699737c39cd9763b66d094ef1d30d3985c4f11bc77007df7fdfe3fd5f3d80ec8022003eca58128646ba5cc121bb97c12ab5c9bf36bb9c5f9146377edd55845d4aff2"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"3045022100efa855d1d8d09a5234f3e8b307c84ef59871baf73d3233faaecc3a4e1c3747c502203f452a44cc4e298f43a23599291fd21b7048c1003b9e936433c1c3162af7ef9b"},{"label":"Amount allowance","path":"details.amount","signature":"304402203d79ec67dc90bc4313a635f4b36295d4c15f3bfea21c92597e968e67573cc5fe02201530a640ddbea23cfc968d9e869ed510b15552343c34ebd01bfa07a1b1c29100"},{"label":"Approve to spender","path":"spender","signature":"30450221008eecd0e1f432daf722fd00c54038a4cd4d96624cc117ddfb12c7ed10a59b260d02203d34c811a5918c2654e301a071b624088aa9a0813f19dbfa1c803f3dcec64557"},{"label":"Approval expire","path":"details.expiration","signature":"304402205f583663ca8fb88b0cc9e507ec6fc86f2fb4815a79bf1b0c551ea5b812019152022054bbea380363ef360d49b07d441a54ee5cd82f207efd855edef221a62109e4ea"}]},"42161:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100e322fbcf244d817c6af9e807d36f5a0eb2db21309c07963e826ab5d20c7dc278022068ecb28b65f9844d40ef09e7b141bb220d30d25a42f6ba4a648110901a79c191"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100b9f0229134290af4cfeb549204eb02bf34f084b1d0a7c8f161e6beace10dcf1b02203ef40e4c9e88b83a85f0af47b54fa142741bb52ef26302c8aa46b0b274d02fd2"},{"label":"Amount allowance","path":"permitted.token","signature":"3044022000fa125d0c29fbf34da4a6f690857aee73185f5eac7bd8aa5a30f89c91a0e0d2022000bd77b100224b5a89c1aec387dc5a252588a1086958afa1764224da0209bd1a"},{"label":"Amount allowance","path":"permitted.amount","signature":"3045022100baaccc98644dde5f8cc244e052d8c826e3c1431f444f1f6db3f79413f0f5612302201b6e4b36e8eded626dc04f5d5b4260c83cf43a203e040259cb38f145e13632dc"},{"label":"To swap","path":"witness.inputToken","signature":"3044022011b7def88426cb6b1b9f6aed60d260774c3f9c2772edc20fb9d678eafecf1d8a02200e8dbacc49e39edf3f04cfd4467f3abc25e6de1e26619a931ee9cd4e28d26b1e"},{"label":"To swap","path":"witness.inputAmount","signature":"304402203623c139b4a7b2b887fbcd197fd35efed9577f7a097e4b4796c35db809e257a802207494069d25e1891a6e846cdaf7d8deb55d9c4e7d2d0cb9455ace4d840a5a86cb"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402202b9e93d841f3f81b63f31cc974d7204bd9c7c00ff57e7021ce3296225b605f04022026293bf2777b6b1971b5fee2c6aeb5e07623f6acd715f39de88796774d931dab"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100b927a3639c291f1c5f5a4459ee6e9eeb172e4fff2639cf2417a0ee22668ee785022016f22532a98ce38d2fec2956118eb67b80c748e012e2e9cc119a84618fd356c3"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022070df47bd9af9e8f70ba486b5188cd24ff2a6a7b7963a628608936986713eb108022023440cee1a31e3d73489a849ec925a85da16d1c096b3029d4337eeaf46a26d4a"},{"label":"Approval expire","path":"deadline","signature":"3044022034c36e86566f7ad86131fdd1f1d2f1b203bbb8f0c80f90ef7b828b603b383a8f02207944fdfc150467a83b580314ee2935df5e22cc8c8e70924755f24e0f48fd6070"}]},"42161:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"304502210087b5fd4ca85d8d902459aabf0cfb97c676809c967b84c8a8301838f54d2f144602200d268e03f892d81b35ac1bd493310f4fb65a202c2ad2ebec3f427978756b3106"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100b5e936abd5df8c51ae2ee04b8f06e58162c5702083fddce3494b19c9bc9c2e01022032e9c8fdfd04c78d70d0f1e03e1fe716afc7bb2d2f643cb4586316e87a7c2150"},{"label":"Amount allowance","path":"permitted.token","signature":"30450221008f6d92026f956e9a4635ea2877fcff52b58349050e14e446175d668464090fed022051ace7037868f8984aa208c8d9b7d8a94cd22a93b83e9ca8911227d0f5e5747b"},{"label":"Amount allowance","path":"permitted.amount","signature":"30440220659cebc0ec70ec020a1c0ec8dd6a4ce650a836ceddda28d9c26d01404ce03bf402205ff6c87cace6b7b575a341347d81927a8fb0650d53cfa2020eb13b542ce68780"},{"label":"To swap","path":"witness.inputToken","signature":"3044022100d2a7086532e5076845eef95cd717a59527499db3e32081bc54f1d194cb03091c021f2a2c5b8062b9b48bce8993ba878bd516d6123a022537319a3671be2554f4f9"},{"label":"To swap","path":"witness.inputStartAmount","signature":"3044022039f099a0c207376807f176374b8ddd15b4b0d54396915ecf071e120e4002c8e4022024478aa5c1074cda3755894674a55e21e773b83fc6b74e55822b2d05cab29cce"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402205cb992ba630452b43cc31c19df9a6dd6287a31fe3e8b67ca27880acfd89cce65022009b13c4746edad9a5bd39b82911a68b0be7f772c51df6617f7cfd2ffe0645bc1"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402205d4def0d4820dec59e1705730f3a18a5ca3ddb6b8580265420049c7a522ba0cd0220737132ba1352c7b8dd8463d871cabf53a5dedf5aee68c7b1172e833806aea572"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100eb5d8a309b9b9865377f4b430acc4ac5845c6b4339ce2bb9228fc76947904e3b02207530da05e41c522a6385d0cb586cb459305e98b45d32d0decc078081781986ae"},{"label":"Approval expire","path":"deadline","signature":"30440220641f8f08fd8041a66afbeaced49baebf1b9da777154391dc73c65bea935579c1022042d5bd8a956823bf2640618c1ec9781e198ff2e139674c9cff1ea5c795219cd0"}]},"42161:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3045022100b3750d69ba1ceb422b418946d10e3cb101b19c28040300628622cfaf2e3984c5022003f355a155850073b1511f6109fe1d2d0d178f81f229659b5b4277a1a322c06e"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100b7d9aaad264938c68c358c81da5a0bfece07b718b547b82a421ec2958dfe8cce02201a58b6f6cec2a232cb9f974b0186ffb7d2ebedd2899c81c8774cb4be9358a289"},{"label":"Amount allowance","path":"permitted.token","signature":"3044022040492fcba100a05d3d62a15a165912603b866151d5437fa5985a3893eddcd97f02202f1cca4cb81db6e199b5f39e73153db2114781201c7d1c39809f4a1da323543d"},{"label":"Amount allowance","path":"permitted.amount","signature":"3045022100ec73657edad99aff8303f81c094141ebaa9bd95fcad237ce9992539a0449c4f30220641c172f4c4fa386cbb73b94c501e7f7f1eb192fdfe3846c08040d09c669c868"},{"label":"Spend max","path":"witness.inputToken","signature":"304502210089dd4d93ee46dbfce828aff080df592be27d90da889f24471accdbbba93d222a02207529a91c4adef2576bae26536fb152ffa8d611665b3302299e646709b87d7e57"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"30450221009c8a318956245ff5b253baa80fd81b5bf9f5628453de4f54c953f8e2112e4f6f02207b740e1eee2e61786136f3c3aeb53a05d1f908d9ad2d21813b1fed8828c3e6aa"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100cbc2390f81a6af67d5225c34c51b2289d0aba65ccfff6cb03acf3b54f2334cc5022010fdebe0e5a601ba1ec521391805bf13dbaced0c707475b05ccaadaa82acce61"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100ebb9f99820a07f27860036adb3ba27eb37bcc0024e79e38c0f39066f1973fb0c022054873d3322dd59dc5ef11e252ee2e6f9d9bcbf9aad645732cd601a3a74145181"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022023711cac25abd661c6078cb2efd72795ccfc94da57c136c11569369c381be82c02206a616167025ddbab91ab5796ff5be6745b1929772597bab447e57baca50d411d"},{"label":"Approval expire","path":"deadline","signature":"3045022100868bc53f10623bd59e3b04f68bc24e170e33cd4b76bb702f665d0a5fadd02bc102201bcf6f84e27bd37d4494523a2a5653a8be91ca3db9bcfd733e7d7fc16d57a619"}]},"421614:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3045022100963447dd2d0e26370bfc88c42fa2b3cb1b2220c985d281aaed627a14732cf4b802207fd61acb22cace24228c1bb89143f2ae6d9b0f0bd1cf28e64b6bcd37b45bd4c3"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"304402206e991c4580062c63ac181c586f0ad351ba39736eaf14a79fe342ccb71abbc8d202202bd402efa3f806fe726fb2c503d7851e908751005ee640f9f02a16bbe8dce5d2"},{"label":"Amount allowance","path":"details.amount","signature":"3044022046a474f26e60b84e4faa75234eaeb5b0540d0389dce081a908bb3c25604b1bb00220579a712778b93574a43300f2e98ea75dbb9a300dd1379006d72f7066e6df5e5d"},{"label":"Approve to spender","path":"spender","signature":"3045022100a13f58bb5a24056fe745a8e8d395ae68f0cb4df88faefc2e5e06f94aba87dafe022039f1ca74ab9d53ab274dd45a53aaaf54f84bdd3502ee862a9e9641b256476a5d"},{"label":"Approval expire","path":"details.expiration","signature":"3044022039c480029a814fd8be055a98e73b48fa026163b142bfe3e57ebe30c9d08f6c0d02200c05fee7089faa7c177dde268acbf82301267ef1fce78134f7dc1cf7f1a2484b"}]},"421614:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3044022056ddb8be9857a616ac0fd8d07ef87ba9585adfa5f8a70e39de39e9421e3158d4022063f5d63bab0252445849a2ff57c17060f14028e0b6e4752ce0ee3c38cc3606d1"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100e52d8026ec5618bf67ad9286db3003b7c86c2c133ee353b9abe45382a87509dd02203a6be936b97685161a61684d3a21cb5e722aca7df0fdb0832a6eb8579631f77b"},{"label":"Amount allowance","path":"permitted.token","signature":"3045022100db278e0559e796fff15fc53f1da019fb41d027bc69bbe7019b5dfae07299d941022047468894f23d515170ae4faad586573fa56d646b6e2ec645098ffc6420bcce77"},{"label":"Amount allowance","path":"permitted.amount","signature":"3045022100a2e778396529cb86a62f170193ee6f095672405ffe42ec861ca37f3693b3914902205ca96fec39821b896040678a5b71c012cc68f22afa7127e4fa1a8f9f65967b23"},{"label":"To swap","path":"witness.inputToken","signature":"3045022100b5882d4ad02d12eae534f9d1ff1b78a05a92b7f0373c7ac197f2b1a54f288b85022001173f03288d4bd5389474686c3e8c2ecb9477d1f6bb538b336f3baefacbab77"},{"label":"To swap","path":"witness.inputAmount","signature":"304402205ffcf7767735a1b90c4d83622c5682166d81ed6b985d833da7cde22b6ed61ca902200a86fc5ec8e86385756cc01209e6debea94fd5f0a71bec9d374aa9b2f8aef548"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100c653dac1de42e9a06e91982e7395670fc31213804fdad1aab5f80b48a3878bc502204a13ccfb0442383bc6e5a8848a14a8fc403f18d673581f0987562483d756adda"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100d6b3200366bc308fa9f51f9d11e987a7893fff7e74e1b74be9560398e3de143c02201530b59f0fe68b61d730e139e536f8006289ce785fa5336bcf36f80cced7c1f4"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"30440220467adf22e4e7c7429f91bebc3f472e55239faf3e2416351c832c122781faaa9402201015d31677212841b284d59f4f5e79666bbdc72965d01021a2560097752355c0"},{"label":"Approval expire","path":"deadline","signature":"3044022052326001b48bfcd1c21b2f024bba59f98218e3589a8f8503eba321204b0074ff02202e5881562e3bdc84b0f646a8c142aa5b369b1c87d5b35616adcdaad234c238cb"}]},"421614:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3044022037ab41e91701a005e4370b9e4d08cd48ad6b7ad2370c05fe2a1e91442b98ca00022053b91091753675a3521d6dd3bb862ea75d41f0737bf256ddae9abc1f82b9d381"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3044022050fd436716794cbe59d75015a7b1ae8f831807df2c6d91723bf433e8262ee50002204edfbd14add2c0794529359430e5b1cae049212f473742c06a78f968ed01323f"},{"label":"Amount allowance","path":"permitted.token","signature":"304402205f817f897ffea3fcba2828da564bef1ca4c79c0ae11d3dcf21defa7451696f23022006deb403fb005f92c01524725c21df16fd20a9e0a0200d7bd98c0f61255d8b94"},{"label":"Amount allowance","path":"permitted.amount","signature":"3045022100bc9240ad550da04e1587783e34b370ce79609a4b8f057aee85cccb3a33b5e3e1022013097401f3ddfad2314a56b6b5db611c773608b85892a2b143eb3f7f0de4868f"},{"label":"To swap","path":"witness.inputToken","signature":"304402200759bb654909486bc6b6f4e61351f8d8f2fdde3829180aab49cc980d5a8c8b61022028a38a444daa256a45154b41d7b4a324e8ce4b24c40fc0f67c714ee190a8fbb2"},{"label":"To swap","path":"witness.inputStartAmount","signature":"30450221008073007555659c2d8c09421bb56610f8f8e8493441c0be8371f734451c61472e022046176ae6e0493b90b61afb4fe9731e59abccaf9bfe5dcadbbe155d854c427f6a"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022025d4c29f2bf3190ac638a8c44252881f9fd7c119d9792a186a993beda543979102202e553a2ff762e0b4421b5b94f6a09b39bd80b51ccca621bde18c1d020295e1e7"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402206bc4e8a63d673119b11c62367dc9f91d7cac4750b11a18a49910fc8c8dabe9da02202e5b2724e6f09ae4d1c6bb768217ee0b4b433e4d0f8c10c899cd59f2f0d6ab5e"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e4b0447e17f8405fa5dcce533203a1b261d85e4303feba4cc6172f431b4fca1f02203901d0cf8198bffb13f60fb63a1b7ec29b436ad0e074aa9336e2a53a725a1c85"},{"label":"Approval expire","path":"deadline","signature":"30440220523a3a3966d1f133d943da71e28b85beb2abe91af1ad16eb279beae62c16f20402207632131e5be4fc33e9807c39c2634c497883f32fe29ef66af85678ee218846a5"}]},"421614:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3045022100a006282860410afbee02a5635a7ef399e6f68359c6d6519b4d16f907e9abd8a802204b50d873637823d10544ab286a96a763e747c206b538e46c8b03f752a38f1474"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100ed0d3d08389c58dca517c3e7b354562deac1988cc4e76c09e5bd092571c99d91022034a9b44485220f2c7c35d8e35e050ac1bd16c12277825a97449ce0405d5b240a"},{"label":"Amount allowance","path":"permitted.token","signature":"3044022031e65ca731446c9f0696f2e2650fd874d2f03875f8333bfbc96a50db1fd5e2f50220784cbadf9b5736d014ae3ec6d629b19d2b2a9393b392d873c5850af32cba003f"},{"label":"Amount allowance","path":"permitted.amount","signature":"3044022012d6ed3fd29623ece01c31db7f2d4bbbd4d80e5eb031f39f751bafd6831d45500220549141a3ca4cc291cba898c246674fea1b89a4f1652b6f4f4bf3aa8f1a4f29da"},{"label":"Spend max","path":"witness.inputToken","signature":"3045022100939a434c73b4eafa718cacb6189034a38ed5e244b223d92561fb64a5ccc0442b0220251923a7698a3addd3891535d21866fda8d2a3d22b27b83a305b769db864c312"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"3045022100cfc79bb01f8b71e4a5b20be80b1d1cf6c914d0649172ec03d68b1a5d1bc9677402201b557f2880caa79f89e871f2121fab24553c21cb8d75b39a4c745943573d242c"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100c1d34447ee07cbb18e09cab3912af57a37ce1f11f00787bf46d7484b806c7aef022033754a8fe682a62e78a60c0a469d29a9a5bcaaaef08b8def7af28a55a8628d2a"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100868a44e4c25b04b725a176b8f7b4eef46901da86f06b415cffaab28a3ab0b20602205a81621e8257c061154daea2240faf2d17841b9dc60bee6b4f258d5bf8b69d42"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402201a965cff40403691f6a160869a7771ca1cf0d1070ab7f3b7205487bc1629ddd70220522c0135a82d8f0a0ee789d5c779e44e81558525e8df54e1777acff5d328e451"},{"label":"Approval expire","path":"deadline","signature":"3045022100d59aec3a10916d15dae521d51e843205adf123ea2bd8ff6b889f755f6a5e68d202200240ad074371b9a8fc663fa457ce76900f2000b4d20e8e40865342a50a8542bc"}]},"43114:0x488f73cddda1de3664775ffd91623637383d6404:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit YetiSwap transfers","signature":"3044022061c93c53b0c2335ca5f757d908f74a4905721eb250673a29c69a698860552f1402203f2650df17b5efebd1a11f4de73f8a87031f60736b6dcd64b148785f1bc07452"},"fields":[{"label":"From","path":"owner","signature":"304402201eae20831519d5af947c9a5396ea2836827fc0a5fa00a2a0839c975e853c1bbd0220719b5eea76f03cb0391341dbf77a3d093b8a625a109d5770ead2b72a8d72e49f"},{"label":"Approve to spender","path":"spender","signature":"304402203bf42146dd0e211e081696f99e8f4a6b9df06b29f5ca420ac2d16a23067b538f022016987f7351bfa2c43d0aecef6e9ad11cb48ac6719131238c0fef62e26852f7f6"},{"label":"Amount allowance","path":"value","signature":"3044022008f42be03d19c27e69cc988bb80b7785cf4f15bafe5bb7a53073fc970ac227df02201ba67d6b90fcd7e27b2f326f80bff070a32541e32e4856dd4214c54c741318b2"},{"label":"Approval expire","path":"deadline","signature":"3045022100e09f56a657e9c15df6903f296ff156d1fdc33f2c779a0ab2e33f584c391f278c02202a677ae818a70d9e28615892d248ae3803ad2a6c44924d90bb1b9eb026c9db9b"}]},"43114:0x60781c2586d68229fde47564546784ab3faca982:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Pangolin transfers","signature":"30440220770892c4d4e2e277b8121044cb7b5756d5406aabbbc7a50056da06aa6df68f470220689a5eaa6da11691510377fbb6b7e03350b219ca0365fdec23af1b10e301f918"},"fields":[{"label":"From","path":"owner","signature":"304402204e1a437dd77b3ffa34ee991ca19e17661de82c458923a42d75875df82e360ccb0220719ad40a493290ab6c009a5e88e1da06f4aa1d0ce625a8d4c573f7730673e56a"},{"label":"Approve to spender","path":"spender","signature":"3045022100ceb969e775648a8ce730b42ca117980836855ddcc8d251d0fddb9763e520ba9302205020f115396bb7acd2d6358dff6c3637841fabd08aa5bf191bb83ff727aff5c3"},{"label":"Amount allowance","path":"value","signature":"3045022100db330d00212e40c1f7fc1ce35805a00774c4eb199a9a3b1dec15bf642c9908ed022016bff276700446af1931dabb2790578f3da7ebf944f53abaca777ff4431a7d25"},{"label":"Approval expire","path":"deadline","signature":"3045022100a7c52ccf78516b9ff19706684e596606c7cb08bade810be15a99c9dbffbc39a4022026f15337ad91d0ab7352a3a97eee65e3f4796fc8fba62ff25a9885496ff0c4df"}]},"43114:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3044022003ee948f9c65d57cdd893fb060db8dba8e4d13a8625b3f3e57095d2f8d42faa602207e7e8772cdfc984d9bedd1ddbd47147414e66de635a8e3bb8ac820a8a9246e52"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"304402207a0f2573ccec193fbda1e2bdb2ec9e2b72c619daef9e18f095f12705d2ffe04002207161fe261ae2c7f447941ac4d6c648a75a15107d4d2dc85663a347e64f79d012"},{"label":"Amount allowance","path":"details.amount","signature":"304402205a8682c70edda76d020ae2414152fd409875aac0e79a7ae9193bcff7e02c0c23022067e9bd85f332ee6b6bbc222eab60b4ca4ad9b83fc4aa7dcc0c33640fe29b73e8"},{"label":"Approve to spender","path":"spender","signature":"3044022017022e5bf63fb42f68c6c46ebc2f3335b928070017b6d5ffd58cf7bfa713a22502202850975f985f4668029660914d07452c01b3017e29f419f99f691a7091fa7468"},{"label":"Approval expire","path":"details.expiration","signature":"304402202608b0a1237b79dd283250fb90a4217eea1dab6f495c225cb71d798511fc9afe02202d6787dc7467a4adf7b3d1ef93dbb71da78d03ba50d1aaa815435517e988e791"}]},"43114:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"30440220349868288837e7a698727e0f563945ed4cb2dd1dd4cd5d481f17014413337e1a02204c56f13d6c0e0d7e656ada6ea92ec7acb1cd0b01194eb5622c63afef19b53952"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304402204d1b1637dfbac199b25c1185a3b7f0320c339b0e870db4229090e7078f96a04e02207a255306bd55d54b6ed1f4e392e12cb943077748f76d987c7bb9e52f3e17fc77"},{"label":"Amount allowance","path":"permitted.token","signature":"30440220089c48867e0bacb54a312589e081a1e6a318cecf4965aff1ca891a5bac887a60022067bc539179ea7ce9f92763500430fa9695f8fbdafcfd49a541780bfd75d676a3"},{"label":"Amount allowance","path":"permitted.amount","signature":"30440220508494f844f41d1cbd318e7dcede62ed5784fbf003a770ccb504810a7a8883a10220745ace703b8b8821d131d203b96b10be99b3c71ce91f385f63435168a6d5648b"},{"label":"To swap","path":"witness.inputToken","signature":"3044022054ba2a6445a842ec43ba21800fc049f5137dcf2ee36767e57a2984b535750cad0220069c1d56d50d8799e64d7b4bac700fc086623910991d9d7779e5e7ec020c5c48"},{"label":"To swap","path":"witness.inputAmount","signature":"3045022100c8d4a428005b8b2e45e9775825a0361a834f667f4c19240c9a3f2de2bc49fc2002203855b1367af0f3b67c9475007a29b620c77716b72ddf7212316c7fdc4b18549a"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"30440220608f164bb66487e40b58a0c04d9d44d8d183bf7f972f17b5447a6fc904521c35022058e107a79d22481cd94cc0478af4073acedad872b3392543af29ce89173d4944"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"30440220568ff6fb360044e769d02905ae3ee24278d160a5ca91b6060eeb188c6af2273502201cc668921cb26cef253aca531ecc5d46c3af788bbac3a97e751bf811963f2465"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e1ad96f1bfee5a1818087b61a8a1a6ff99a0a2065407f405dc935d0b7bdeae370220785d8713228cab5c9bc24bf0f2c3289fc9c12cdda65c179ce2a46c7f8f54ae95"},{"label":"Approval expire","path":"deadline","signature":"3045022100dfd334762cf1022191fc42f860de2087b06560a0cfa9d0d598b4e5a38d595e8902202b6bf6493324aee1523186b0b6de3007e0d0fc1becdeb8c5a30f84d538c8ef9a"}]},"43114:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"304402205e6eb8bb7f353c47228734fe6a5b6903cc9a1acb617ce5133c679520a88f996b0220651328d2ffc2f36284dd1bf69557b960c6d5135eccd6fda600f87dd563b891fb"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304302205662abd6f6ff0f413a45994d310c3d657bac78a1fb70f73e82da358ca6c5ba45021f7f607412527bb58d4a61fc38affadcff12dda584bfe5a8431a86a7fc627b08"},{"label":"Amount allowance","path":"permitted.token","signature":"30440220091b504f45eaca754a9ae775af50a4b127a2a67d9e27060bc80eb567da81836602203cc4b53c007487895e2df977a705e080e1c8a086aa9f21ac2770facf37d62a0b"},{"label":"Amount allowance","path":"permitted.amount","signature":"3044022004f35a959016e4d65f03c47489ee6c1552306d53f97355e1179171aa3676f900022018df4a31e1e568efc8ee42b1e78824b014044b9a4e91f69b78a0433f30cde574"},{"label":"To swap","path":"witness.inputToken","signature":"3044022073cfec5d22ba9a1fe4d4495561005e49e1d3afc2edb9721a8e915365f9e82d9f02202397afb9a07a8750b9f884d2a099543cbdceedb4295677ee70658c5bac63c958"},{"label":"To swap","path":"witness.inputStartAmount","signature":"30440220114565b8914636898107985ed93a4c642d97fa8b1fdf852e7da42400d3b39c6f02201208dc71fddff8c1d2b3ac6dfc05d9ff228567dd1ccef53b45842026f20371c8"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022014b946f532fc2b94334e2bfae4033b880ce7337534a1317e7e37a35a337efd4f02206c586e8866dc274cbf05c87cb99f7ca4cfa024f22af333de7bbcbf6555171734"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402201372c5ad1476c5ea685e6c446e0f59fc4840b26477f1c33ffd3ce61ffe81707002201488c5197d6f6496fa2cee35c00b684d1d0b1b2560c4d997a52dd2c1973325c4"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100867601927ebe4188c3bf88b0832be2d08336c7619d32ccd838ff4a2dc856b052022033092c29c3ba304313f0bee2c0a056eb26187aa2bf3c10c8023642e59a4cbf0a"},{"label":"Approval expire","path":"deadline","signature":"30450221008948e1f74ba96ea2f588f9408f6bf9786b8ce40432846196efb0280aaae47f8202206fc6f8b38bc1745babea8b708cba0ce91a4f7484f4a0b0e52c31709284c7a06a"}]},"43114:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3044022007e15ad9f225b84f7e0e45ebe2d39389fc20a334164506260e0276e18b6e756902205da894ed8cf30d8b018e03f69b67463f46cbd7575c4bef0f8529e51db0f86bd9"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304402201f900fb0163542f7311ebfe33b4269caab8e0315a66d3e48116a5f94a96e2b10022050c31c3e77efa383eeb843462e6d3f95ab62d0ad594bf19f572205eed60f254e"},{"label":"Amount allowance","path":"permitted.token","signature":"3045022100c140c7c7fbf1806e3201fa9dc1a9d6294a85e1e30c83a67c5f6470e4dd41aabc022053a08d25bd768da259f528fa229b3e549fa4addd12af70501300ae391ba34b20"},{"label":"Amount allowance","path":"permitted.amount","signature":"3045022100c6fbfcc974c8abd48c3c4b492959e901818c1a06c29afe72583b62ee98d1b1b902202a73f396021e5967d541405239fcbdccfbccd8886be2efe6ec8b73204e15d267"},{"label":"Spend max","path":"witness.inputToken","signature":"30440220307e34ec7564a949149fb69d188a5900d56400fd0aba162e47383b8ad0e1a2bd022064bb89bd5ba641981d901d6764a7d28b6163a0da66972ce742bf024afee7c5da"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"3045022100f0d725cc6efd2119dd7dd7a5e5eea02273fb29c4cb8d9ce11df473c30a232d3e02206c81eb49b1512cc96a76f56b4da59f7ad85edcb527b4bd0e86fb8b5ced99c37d"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022060b25a3b2ce80ec450c3da93b4f355d0631373c1059013347419338a74e764e6022054e30b696f317bb323d1ab2565e998a9476cbdcd8b67db8a57ca9f45de294368"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100c6df0535500f31424657e310c37a60157319609aeee74e073b2609fd6b1c134202204f7039c1bb76f0de7e1c448e01135010d436a6e2573a780eea3c896f88ea0b52"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022057e68f6b4693885fcce2e68333fe9d1f9d9ddcf8b1c342ce27c04d396a8e798102201b5e9656718840318e7fea4fed2774f549d74c0897ac249cc8c74d7d78f6df6a"},{"label":"Approval expire","path":"deadline","signature":"304402207fcfb17e921d219c95fd1e3f6d39f7ca8228cc0e54ec0e37ddc989324d26f2da02203850147a828a5499136ccb3502f1114f19c8811018f5db4c628306963591bc37"}]},"8453:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"304402204b1c78db814ee83d9d87e88f7ef89f0f1074690fa6327f4d445634b24448beb4022030ae3f55cf0530aa104eb394e444b95c87777e798ec1e1550c668cd0e0e41749"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"3045022100ae9bff1ecad5f816e8c26e1a32bce5388e863f266bbe4ac6669ee83f4ad86b300220682bca33140307f043b816bc1819a72189645d5f4450d2fa03d9e88cb174389e"},{"label":"Amount allowance","path":"details.amount","signature":"30440220524175675a92912d4d9e2dd556edbc75e92fe77790a5fd49e28bd7433e5d8855022025fa8ec3d0f4fdece10615b27d2cb196b8a2bd2666db8ed0b693fcbcf9226cdb"},{"label":"Approve to spender","path":"spender","signature":"30440220237184fbd16a92abb8b733794db859ac5544164221f476352d86e952e1433f00022045d9a3f360452425093e746cba27b6c5952749d3fa83e8595cc5d92cb9b0cd12"},{"label":"Approval expire","path":"details.expiration","signature":"3045022100ad4b0852e457406162aa12c25f4742b344731a8fbb8465cc1831433f1d198978022062102ed269c936d46b415ca60b5a876d2c19361236ba18fa54ccd698f340ccb5"}]},"8453:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100d8b5c3c8fe2f7acdcdf905da6c7001e0cd6487ec062135c15b85cd933c556ed402200a399ed01b57b97d2b19b4daccb52f272c7bde9014b7d41d79b8a085f3a79d73"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100ec153713441eaf40cd0204e9cbbc33cd3d7c59fb3b1477c3b53220f40119dd63022069991f07b246ea82b63414e08fe59ca35099f8785b878b1edddaebb6324554c4"},{"label":"Amount allowance","path":"permitted.token","signature":"3045022100ef0d614c37b53b773e409c12e09b97f23dbef86dfdbc295c0e83881fe16026b1022079a2ee65b87e0d1bed440865305f43f104a11c987c796c44021b0e92b5b29aec"},{"label":"Amount allowance","path":"permitted.amount","signature":"3044022045ccf9d82286c00fdc49ebe07e6eec106d1216d9906520f6dc956c096bee810d0220062402bdc7806f44b904fd7becb78185b85b492ef7ededffe46c67816871a475"},{"label":"To swap","path":"witness.inputToken","signature":"3045022100f8b53c697dc5293ee5155755da6fb43fd9a6950955443942fd626a616654b7d702205e362395afb2413ba2234ba1d30e20f27b21bc22d0f038fd5e40426288819608"},{"label":"To swap","path":"witness.inputAmount","signature":"3044022029e71de3686ea2383fc36cdc0afd56930da76749e207b748382c4a58da63f6cd02203adb858e49b0b3b7de5b2b1737e00da820a572de92f96f8f6e3619b1a5382de0"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022028a31a24e9634d9f73b8cd7b66293a8ff55d169231a4b99cf5e31104053c2b5502202b13da42fa9fda0300276deeb8201e8c7f32e8e9e91b3017da2a09a92961a26f"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3044022004ececb7a100d7bdd4496978fbc6b6b1ea2dc7500c2aaf7ebac524c4b6063c9f0220345c604f3cae26c08fd309dd92df5f82cb433e30bd8af93b50d10a9b9e3bb4dc"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402206245a83c1e904563c959f5313917e62d3c6981c908267d1ebec3fad50304dd7b02204d7e70b181c829848cfec91404ab34d78818e5b20e3f952da118114864ae1943"},{"label":"Approval expire","path":"deadline","signature":"304502210082e5f15ab93979000c09cb5099ec739f2aa6a450f05d0006e673608c1181cbaa02200ed16df15b10f0f9952fb650f26a51de6c66f3ae1e132cd63cb42f65cc85a2e0"}]},"8453:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3044022025de3dc4a6c31c0ff18772802c4701dd23ea7e7cba9edd8ddbf96cca3a3938c60220472b2c75a6ee54201f9214d99fd9cf184bca8136129e00e4361017eb5c451f1a"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100b9fd6e4e25d4c9fc61d82e0aff4b84323160151e9adb3016a1289e496b20aa8a02202366d365fe6fcd63e3d9d4d4523e16e6495dddc98f5ca5ce8cd2e87626ea282e"},{"label":"Amount allowance","path":"permitted.token","signature":"3045022100b9b906ca0d81e0bcc5cde2c976d5b8d169b2462525ac1f22d08cd4a611798443022069217754e79676186584c95807c62e5e3db169edd535ad74bfc17e483e535f99"},{"label":"Amount allowance","path":"permitted.amount","signature":"3045022100cc9fd13001e29970a5059a27dbdcacba28e7a9aa8367f1beb1b259b06935d971022029f27b0b5a0e4479724b8982f4bd1c9257a086b405bccb00893cf03287d65310"},{"label":"To swap","path":"witness.inputToken","signature":"30440220596d7453f5d8d1fd0f22db5cbb566b62a73312b9e8c0fc071636a0c65e7ade55022001ab01736562cf509adff844ba079a85a990776c379423f50251bf61e7022320"},{"label":"To swap","path":"witness.inputStartAmount","signature":"3045022100aec8458711993d020c5ced905548b810c9fc99495d73b8489b31ccde8cfe639402206b6d85c7a202b61bbbe9036bf5bed43a85fa732c287b1ea2dbf64b37e2dc2808"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022048fa80368d01103c90e027729b47294bc7dde4e8bccf29289300e2dd6586b5a102206af70d016afb13480ba6d3b14d89557e2a7f486e2d98d1e7d09fca047c853e26"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100d6356531f31daceb8e3b2793c2e6dd0e529768d13c8ecc9ff4d6f89cf574c26102203760bb9f2fc5fc4db772fbcf233923e262f00aeb25849bbc0fc4b999466f0b0a"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022044001f5a950e400513e1b6a9f20832e37417397bbcfc41af622be5e977be9a3f022014c711ebe6b30afb347cedcef5e1f738ce4a4d4840e6ea1ed2e425ec9e602869"},{"label":"Approval expire","path":"deadline","signature":"3044022012649ae0ec4dd5a2b8416bd2a785d3636822e2c6623d8cfe1a39a51ef395c4510220422344c804ea5474845d744f73b94528d43160489d5acdb87c6defe1cb1e8df0"}]},"8453:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3045022100be418fe8d24c526cbeb610530571ca02ae8c6eb0199af96858ac3db97d3ce0e5022036fc1acec0f0a679ca891d0fbfe88582750566c081006bba515b6fcfc77c48f2"},"fields":[{"label":"Approve to spender","path":"spender","signature":"30450221008fed313823073739177e4c13f2fad99e6b47de5d1f1c3a36cb1da35658ff852302202f9293fe1b8cefaf55fc5ce08e3bc1592b37ed7de44a749e1ac0d698190f2dbb"},{"label":"Amount allowance","path":"permitted.token","signature":"304402202a9be1f7f7a079b6ba25b06de2e84664b663e034e724e299fa370c8e2da8c8a9022066dfc6d0aebf143e5bc3abb3199dff40c63b055b2e2f99d13f7c96b4fe41c460"},{"label":"Amount allowance","path":"permitted.amount","signature":"3045022100fb142a0f902db3eb071e446a248bcae665279bed6868672d22f6e70ce90ab74102207c3fdaa13a90f754f0d2f6c79a9697e6064fabeed86a1316119921d26cbc623c"},{"label":"Spend max","path":"witness.inputToken","signature":"304402202a6cf3cb2c35ad87ba1c0c41221c692221eaf1d3544343de8bd3f4adee678877022065e521b8bffb3946340b661eff728bed9682f625b20aeb039f00cfc5ae55a52b"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"304502210093df12c52c1be2e7845bde29678384988e95a18b77dcde5ca9c1f17be758153302204a23bc7fa7b20421406517cc8a5796deadd4eb09bda848211529be3fcdda0186"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402203d08277d359d1b89035442b8b2fdac96ffcef1d566be51a76f45ef9a5dbdb206022033fcbabcf6b64633c9dc7ea75eaea489cf0b20aae2bbbbed4feac5d930d58060"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"30440220573094a76824fbcf48f9590e4a83f1aa10898aae9e1e7143073a46a1cebc7db2022043976e109401e2a9aa383094cb3cb660550c4bebf796122001d8df044ab8dadc"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"30440220757cccccc2037820c96d861ba58033cf5fc2a9b97fe19340006d7b3a165203a2022055f505404c8219bbf366bd2263cae3ef8327a015ec78f7ef5113ed15ee1e6434"},{"label":"Approval expire","path":"deadline","signature":"3045022100e27c845e942afcc9051dde9910494e75482c8684ec390e823920a860f50de6fc022066409c5d2eefc4bbdda04d367d76f90a8ea6425972c21ad371440f7704d3fb95"}]},"84532:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"304402201b8930a6d2fd3e52b70112e18b18f05707b39d5a6775cd95933d93f205c869e50220597a310ea8d5afd889151db8093b62785488aedbd46fc748c46c41496800fb1d"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"30450221009e89ca8f4e26912823c5140907a6d7c65a090a91606f0d0ecc405e6c33ff00200220564fbfb329e5c2e3128ae5495546f9bc138a0bc2fb7c8d15ad886bd76026d110"},{"label":"Amount allowance","path":"details.amount","signature":"304402203eca221b2e6791bd43195c38fd540e2881bbdb9e838f9f712d958c63dd128f760220532ecc18dfc800b34b06329ba8fc9056de5626c379e32e43860f9a98327de68f"},{"label":"Approve to spender","path":"spender","signature":"304502210084c37d4b27a48d2c3fc4cc3692c0997a495437662c15e82a62cb6837280e6ec802207e76e35c206bad884c042e3203eb77a94e26dacd64c85554adcb4cab130c7d46"},{"label":"Approval expire","path":"details.expiration","signature":"304402206e7b877d386d880e26dbdd341f7ae4ce6c88ed2c5c92737edf3c85968d30116302203a196c18f84fb714ee4b89c2af8ef729ae017ecd21a43d1c183a41ef38017fef"}]},"84532:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100ae27a2ce7c21ab6b878fa87199ff74b9c280e0f71f6be84f32becd012a672aa802204f35357cc1bf66e81369288298d1aa8003bed3814ea971fe93a18b16d1955981"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100f196398d9bfa19c49c4d805abeb4a165da4d1a6fc3299ba0f4af2b8434a8d84202203a3ecaf227a071afada4a8c039d2cd333724542a29f89713ab1d48e848fe4dc6"},{"label":"Amount allowance","path":"permitted.token","signature":"3045022100d64375b327b5ce16a033b8eca8ed918d84e476f4275c56b7f78ead45caec77b002205920ba8053ce630632d85ec8040b5c4891bf0317931fb18c9487d7fb735e39a4"},{"label":"Amount allowance","path":"permitted.amount","signature":"304402206ea47b5f9b6c281b8f7fb430c552197846f745c5f54809e64c69493411ead43e02202864274641b3d17e3b6521b1ae933dde4df3961f48b2487b3fd6bd68d8e6da1d"},{"label":"To swap","path":"witness.inputToken","signature":"30450221008d86ac72cfc5923017f7d43bb5f35ee349719402fef749a582a4d935067c471402203f030688d1cc8409bbb8ae992394ca6eddb55799e159bec2d50d9eb0e32db85c"},{"label":"To swap","path":"witness.inputAmount","signature":"3045022100ca7b1f74d5a77d77bce9b385e177202a3356ca9e72cdef6b52128002a62eba62022074b56f79f006f3821865a659eef8c4da6d8773c5b815ade163915514b3786760"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022019697b8585ce1a047cd67b57a248e254f44c2d19fd5146c0f6f6b8cb0e7c63af02207140315222c9d8ee1fc10cb69ec22c47ec1d8c6e26c6c38064896dc13c8c0256"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"30440220297f11265bc8c5d7f88159f8e35d8ca67af5a7bc553ecc045949f76643588a360220280e3235460b4d7aa70e01543b5700bc35232cff797d4ea947cc62f1b75e5a99"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022063d1ad0bee9c6c242ce49b69aa92428397b347b3557a09758f122765109cb5230220342cc9110766eaca071721220290aa635ef71d61b742e92423e086af0fb04b59"},{"label":"Approval expire","path":"deadline","signature":"304402202514bd523dbcd517606fb485a735f29d37b4a3317553e071f6ff9fe90ee49cda0220340768fb723be53e9f9f4c84167c46bf1b5c1809cdb0fef406aade6eba91da70"}]},"84532:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3044022049e302c1b6b56751508711de1040ec01f1d7937de6d49fbd23be661686b19b290220245d58ae8f7fe389b9b1e138ce044114f4684df84770089f2879b27c6b8b7f6d"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304402203aed848b5b759f22593f9b12aa74d7f81027aff827feb3849397b62f3c4cd84b0220468ce42a6e53043d5e112d4b51f3c9c4ba3d87b5004af872d279231da7d06f88"},{"label":"Amount allowance","path":"permitted.token","signature":"30450221008dce444c5f2f3ef16204faab270419c2e5cb40b975b5741f77594c015e32a137022064009664a535bf0bd82bc72c0230f7bc21c6ad8eb3e323d5c3faf3c9225ca050"},{"label":"Amount allowance","path":"permitted.amount","signature":"3045022100b402667eaabb0e32b38eb4a2eeeb9e9ece86d6db9d273f54f14f55e57a8c78ef02203442ee943e576b74774d793a0ddc2e81b4368efd2a89b98b901cfeecd5be9690"},{"label":"To swap","path":"witness.inputToken","signature":"30440220772bd816346e36c57da7a18065076c60f08b132b8b2e2eea20b5fdf47a68349a02205f32577f52990d3422ea22996c260f7bfe9a57b54b37e3a1dd9ed5b435950cf0"},{"label":"To swap","path":"witness.inputStartAmount","signature":"3045022100a08889583cc1f8d6440cecccaf49a5370b0685e20d9f8e8fae60f66d3660159502200ca68d67a9e48c8f210a00af5dfb400adb4ac2779d2eb839ad6f04c077969ccd"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402201d58deac9bac044520c912ab926d05e399391b4adffb1a79a6eaddca7174c2a20220180b25d9491de0e732a27617f3377b30283ac0a242e2fbbabb177b3d5f417962"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402206978d529c025061fff4af0a6a8c6c5200d419c89cf77fcc1a8b567f4f49cb7a1022061b5a74e8923b8d74ebc14d8787c8f8f41984d0ffb8d3bb80a42ce4931c03992"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100fc9227cd0cf747b5ce1229cdc61a2fd2eee6c92537b9f712b3704ec51564a4fb02207f4652444666c529860464b0f022ec754ea69f7d7e157406121b7ca9a664a943"},{"label":"Approval expire","path":"deadline","signature":"304402202882db2ce4ddcebc3b50a94fdaf013a400352910de439520a342193467425ed0022071e86b1e7c0c816fceccde51db6e915dee9bad8daab3d6b7fb6520566846ca94"}]},"84532:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"304402205ceb238ae7d7e5924567075726e458a1721cb87fa860e8b93a33d20ffb5fe5c10220077f45136c66450212ae888654bfe5b88e05dcf294939601674bbed2533129a6"},"fields":[{"label":"Approve to spender","path":"spender","signature":"30440220348a323febb87cb3e2e8dbee6c9126ef332e5bf9f0d246e7ff5f7f6240c44905022075b4d2e20ecb372334239b3904dceb30e8f911cc9b17223f917dbcc86b7d8cfa"},{"label":"Amount allowance","path":"permitted.token","signature":"304402202b5001577cf615dc5ddcea11d606f1cb5a7d7631028c2fcff85de3879758516202203c987c264c64e3bb275552eb76492dc02d9c2c127bedcd5934f4cb00c679dadb"},{"label":"Amount allowance","path":"permitted.amount","signature":"304402200e8c079a47d32e5d6669ffad323b898621c37e8e89e3b8e5bd6d866e406974e8022007f12de8159c8a4fa9a918f858d86b25b99d533ff21b41b9734493d06128f5cf"},{"label":"Spend max","path":"witness.inputToken","signature":"3045022100ae2dde9ab89c2a6c7f974327064ba8f8e97020f75f9f97bef09ffe7ae85eb05902201609703da8263fcea0fea780ae90a8f2599b6ce676204c6a56c1d0821dafdba2"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"3045022100ee0dd499114b5dc68069aa557aa22d08ac4b796d6771d75593922752bbd4affe0220790cd6480a28199ca551bc5a2710f6ae9a6585015d5fe4678034276733f48056"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100bb95fc54481be412c9dbcc591208a41a26ba817eb4335bd3717ef7c6850752db02202758a350b0a20fa0131c30916c994eea456869be69e205b7c9c3360104cb28d8"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100a092009d45e163fffb0b444c6e3d6fb65e713e215556f58fca3c2aefa4fb90ab02207f806681a01844d5b8a71adb7c4916c6328e6d3031f9452df0448b5ee89563c0"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402205e9660746916629f22d2ee192f12e3fdbe0843b4d92f7ba0c590835ba42e6adb022044493521b43807c7a788edd0d9f4eb21ca1d67838aa3f5d245806fdbdb5e372b"},{"label":"Approval expire","path":"deadline","signature":"304502210090b6eef7e5f9afa42c2796fa9a0cd48b31362f528f1ab01258f393d346875fa302201f45edc697a5a0436a96ce98f1aef8c037f6b980ada4b6e910753192d62f18a0"}]},"81457:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"304402202db28b94aa0c8cb8669f39c1a9a5cfb34c1701cf37d1c2d3b9560a54965e55ca02202a06eff39eb12ad39f9fb6283dfa9c57e169f241bf87a52be30364a445b6c298"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"3045022100ba45089f25514861544402a91bd0aa7977cf99cce2d7c1b6b6e7226a3c1921a802201bcd326f725b7fe23fa56642471fec0493286a25b9bdaf6a0d510e5c6c8dd518"},{"label":"Amount allowance","path":"details.amount","signature":"3044022054fcbe3bded824a9e4d62841bbd8aff9a870fc0a9ee02540655007e1ff399c430220349d155d294b5215e5c9674c48132321f5f2da963fa17f169be16968655fa1d3"},{"label":"Approve to spender","path":"spender","signature":"3044022079acd9fcec5d59d470ae58b7d8245483569c5ed36fab7f3f74cf69bba748434d0220794de13f70511156246b5cc41a2492ebc49274254d49d4f68abea2344cfdd445"},{"label":"Approval expire","path":"details.expiration","signature":"30450221008f71912e7880042de7a9482215a9adc79aa10c70b57fd653ebe0a790bd4d9d91022052790cc472695212c4ba6a1640bcc60a48f38c7c2537cfdf3feec501abaca266"}]},"81457:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100be55a55fd64c0e1fc95855798e76f3f74cae6508ec2437092e0b1c6a717114470220153cdb7d3b5e12e3afe39ca006815c7bd7915f664968e4991973eff1f7f7d621"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100c47c6aee9caeded33210b25e03722d98dd03f1919eb8ee70e1e2f08807ed1efe02204e0f7409a7782d00e7654cb2e497e486c5396688121e76b0e47dd6d6873de48c"},{"label":"Approve amount","path":"permitted.token","signature":"30440220227f4ee39f6304a70ba60851194d045cc1ad2e1bb0a3203c6a5354fa33f2506c022031e6432df07fe528d7323fd24ecb946b61ab33ea9049a7c56e437b9f34026237"},{"label":"Approve amount","path":"permitted.amount","signature":"3045022100d13fd444236e790a4badeaa44b73757181d76f25bcb59221cc88d871ea61c0ad0220490936484916780e0537edd6a5105abacbcb87965fd99f5899d5df4dd88d666d"},{"label":"To swap","path":"witness.inputToken","signature":"3045022100aec531e28917dd06db3ae6ac215d01fd159d6fe0559a4b857b3305395776c19f02204f7fa74fff259549209c91c176ce0ae1cdf314bae077dc0e36a7c2639aa849e0"},{"label":"To swap","path":"witness.inputAmount","signature":"3044022074aa54f62a9d7f186d9a40aa0c27f2a0d8dfd071201d49a246b647e23e1b7db3022003c17ae6877d74cfef6f95f6cbc478030fe5a7815e115c8268361dabfcb57c00"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100cf95d21cda04d030f6a9565329c4c21131ab144c4c5362fb007ccd4a0ca68e040220572707e5372d45663617204bfff56dbd45e19030d9edca7f6e165e2df9732c58"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100f9e1ded6051392c91d9ebd96c7088984d60b52b9ca5ef649ea9fa7fcfeca69f302207f9c0e5fe03b60beea467b98045e183b38e08d6105079eda81c73412f7f7afb4"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402200e852f3a10a27da0959c7838ffa13918d8c040fffb004a4895176dae562becdd02207744ead3b3867520352d373089a5a2e9133e2b6cf80e73bc6a3018e3cb97b66a"},{"label":"Approval expire","path":"deadline","signature":"3044022026d5fe8e3ce00930ef5e6570edd4f41353be08dc88348cd952fd446d0d1df8be0220016c8bc785e8400d0577256242bfcdb84292395c10e7febe5a33ee31959e16e0"}]},"81457:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"304402206682ca8cdd3919bde89591adf3b3557a0d2250ca14090302577621262119cc180220032e6be3a31385955cbc7fd92c272918ce3837856ca861111cdae4aaa891693e"},"fields":[{"label":"Approve to spender","path":"spender","signature":"30440220551ff5382c4dd8a6ff94d019b7d8ca4c4699da5256a8f8d88ccc3172e12e288202201b3e157cbda19d1faacf0786e03db74e378e29de36bdbdcb9f93c1af9a1cd167"},{"label":"Approve amount","path":"permitted.token","signature":"304402203edbd69ed1b9cbb4047628ff122ddfd50445ba044f7f31404dee64feb9aa4ef502206e9f932cff0e0e2177cf52c5d796814f80a75185e7e2538b4ff6bbc7c26663ad"},{"label":"Approve amount","path":"permitted.amount","signature":"304402200aa3c1e642a387c25b206d54e499c1e36145528b7e386e24943cb3e98532a51602201bcd77d048876da549cd9f66f7a8d6ab45a3e5da23a3b1c6f6247428b9bc9c3a"},{"label":"To swap","path":"witness.inputToken","signature":"3045022100cc53c3507f2f5d0ed621fe7022ee61f1e5e4da2f0a7f5d01e8a8eb37829b5d3102201086205ff1ad67e1864ab8c8fe2e1b9b03c164a3b7310874a1dffb98ee221cdf"},{"label":"To swap","path":"witness.inputStartAmount","signature":"3044022079894a18deb78660d152edf61b58f8163aeeaed75296d682a950ded169b0eb1a0220634b07b660c11003b26bead49501a0e6c3ee155337c8fc5e91c7607cf90b11d9"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100cb198982728a85c9fe6212f49568246b3305b2f75dc2a5745d63947d6413caf702200f27d60a13425e3455693a46f165dd6b3dc2c31f19b99a5a9e1fa80f67df72cd"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"30440220067fb9fd3ac8659a9696e7db4bf1232cb151b56bc8bd2290e108547277b0f4ce022053181ba8521cdf59ae0d9aeb3de4f67c6d4d3848c42cc3d2656ae32c5552c125"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e22603eeebcd353c5997deb30bd1a9849ea98a2e8f1a34502664e2cf304eeb5c022058425fded67ef3020e33235fcc2cfe4d9fb54bcdf821af4982cc84d9eee3e439"},{"label":"Approval expire","path":"deadline","signature":"304402200698b60bf5ad885d2c034a2fc7590a41c53c76eb0ac43d2bcc0ecd2d9a88d9f50220117637d14dc577772f9a98fac31af37e0fb7f98ac3353f7ba2017b87f431ebdf"}]},"81457:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3044022059de8867f4c71cbd68942d33a0815c687a34559b401c8f9ea536f7636da7594f022044a0265b452c56d59ac1766e491f3af5ccedba92d7050bd5b26361690c57b604"},"fields":[{"label":"Approve to spender","path":"spender","signature":"30440220267966c2680bb8bc4e11e5f36cce971f3705df698a358bc1157424d360e9c5fe02207be8dc337f700c574910190327bb22454ed5ea505b344689745ab9915b2e3b99"},{"label":"Approve amount","path":"permitted.token","signature":"30440220761e743bdf5da76a9ee06c2aa014b69b1e93b73a3297f2cec57e29ef34977e43022003b0b5d60c8ea75f590bcaa6618ba39d601f9d218e2e5639d2aed184ab6c4035"},{"label":"Approve amount","path":"permitted.amount","signature":"3045022100ea0bd22b41d69831c52642b308151bd8befc1ac8959441fa6171269faf65424f02206555b206493d83634d6e15870e3b8e705aac82fb6292f959cb7f587093c5af9e"},{"label":"Spend max","path":"witness.inputToken","signature":"30440220207b05a1cdce09168273678ff891b2fc40833a722922e9255e4dadb4685a7c3e0220327bf2930ea1c9f0679c50ad18693ed7a2ec78cc41b75f0fd747cdea37245a1c"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"3045022100a1a98b23d7be8e23f9a1b941781496ccdcde4fcf5a270cfda72e361b22fe5fa002203a64ae2ebe2d565965487951c748006609dc4ff9efe15cd1ee00879591195397"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022038f3afd661023a0ad536236314f045447c0562bf2b5c9c91e3276fb86603114802201d55a2b564f0309fbea9ee54751e0d3545ecb78c4c60c130e34b0ad3e22d6331"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402202c9b4beea5271aed5353b41fe5656887577bea31fd9f50585ae38afafdfd8ddf02207325fc56931c91863bb862708de2c1d03b4ef870874b8d5ae0bb96c257d6051e"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402205ff928098d8370cd6a22c178ca0e671e594d9e2bf2bd96da1ac03c5d4b9697c50220243871ca02532d058f0a754e8cc255bdb4cbfb383360fc23a14597dc8bbde47b"},{"label":"Approval expire","path":"deadline","signature":"304402203f7f6de0497da145ccb25d36a0568f45b11d0ee93f50b558a0264505c455a7ef02204aa5b7def9960550bf0f92b2a51d5db925af2143eb1992da524a9a5daac27ea5"}]},"56:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c":{"contractName":{"label":"1inch Order","signature":"30450221008ca7069d4bfe28e696182e615d80653533684c3a60a47cb9866fd00dafa0698102202758b4b80484f73584345367167cab655aad8be09051ca695f2a07c7900b6e1e"},"fields":[{"label":"From","path":"maker","signature":"304402200ec2c38d3bf7fbb9bceca392237e6c681670f4d244cc2a07aef68b8ff8520bd202205a09e80f9fc667a0e20430a6eb426a63797ccb4fb6daf9e339b8dc91d7cd840d"},{"label":"Send","path":"makerAsset","signature":"3044022006061d9f6c1536e34057d49034cff50e5b7aa888996f56a6b330deca100893ec0220092fbac88ecdfc7414ab4234efe8756068800e8ba991d31611c501b11cf99684"},{"label":"Send","path":"makingAmount","signature":"30450221008e65b57e831f4147c10f5b5fa1df156b244fd519b97f8ebd66c1d4aafea3986b02204370dfdf9c494f0bb36098d19b8158c4472c546f788148ac121de2621800d9fa"},{"label":"Receive minimum","path":"takerAsset","signature":"30450221009b9f5be699a1cf348687b2b47d0783a3191b25ee739e1beb3a9af1bafacef6310220612eaa3ad1270074e1b6be57d645afe96ca58249b6cb17df3c8d768ca9489700"},{"label":"Receive minimum","path":"takingAmount","signature":"3044022023b3d924443b10e486ed99e1c7a3bf20d877b3bb54d787d21e227c1be6db345402201eecb1b2945dcfdd717ead307db40dffb996d2fa0ea7f0b811855b35fa051a8d"},{"label":"To","path":"receiver","signature":"304502210087b92858f43caebadf20ed8741da081c0ffcf34676eb81ae4338ea2328fb26fd022035c215d867684139a6720b4fe15d2e77272a0873074823bf7cd48a07ec9550b6"}]},"56:0x1e38eff998df9d3669e32f4ff400031385bf6362:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337":{"contractName":{"label":"1inch Order","signature":"30440220461a9ba62577bf43ea41d862cec0764de9389c0a601bfd69940565b19b2bbc3502202d7e2b88f2e6ae6cdabec4de8ef587bcbcadbb3ce0f6904f15accd9be866d3fa"},"fields":[{"label":"From","path":"maker","signature":"3045022100faa5b3f2b1b0a7f74d4500ee44479ed1d91124afaf33ff35311ad0e6624276ce0220304b5380d2b3f47be9da6a3296f5c18b4dccc8b161997610aaee3b4357f5c5d3"},{"label":"Send","path":"makerAsset","signature":"304402205d0fa20f58adf7042b63d1670a0608fe224b18d6f8a9f19d8b3912aaf431e8ee0220555bb83fafe46361c703c81b501b8fc93c6279a9ab46c2f7d4ce9a09cd1d8a27"},{"label":"Send","path":"makingAmount","signature":"3045022100f006075164431b4f55544c1ae9895a2b5fafb6dd1095b7afc6cea12d0ec3bba1022026e191106a8f3eaa94b5ee253f742d262acd500aeae40759345c748069fc0d90"},{"label":"Receive minimum","path":"takerAsset","signature":"3045022100d4dced7fb1790fa8aea1fd9963da5bc4be87af7468c360221cf1e253d0b38b5e0220175d2e3f2c4c25db5d3f2bb4a21d8bef7a801b604dc9be48e80ae70b6c7bd410"},{"label":"Receive minimum","path":"takingAmount","signature":"3044022075930e46a9e8a103d310d2569f7a1adc3c5bfb7df1f56af4e95b0ff05952dec902204f29902627328099c161e379dab0e0dc0a5d72fd3d80c60bfec183b29d0f1d34"},{"label":"To","path":"receiver","signature":"304402203737e60321ad30f5a865ab29494545893c6339629cc2aca3f0d4042f9a0ad87c022062bbcb34c0210e5c1cdc6a08791b73fbfda35a516dd94967fae3dc5482e6e0cc"}]},"56:0x1e38eff998df9d3669e32f4ff400031385bf6362:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a":{"contractName":{"label":"1inch Order","signature":"3045022100d6bc531ec620b3a2464dd2a78bf13fec64c39e9577cc7dacdc09869fdff447490220032a6299809fc13be25d6778c365dfe8a2441f78c6d9dc0a349f2f9ebc57c141"},"fields":[{"label":"From","path":"maker","signature":"3045022100d10b34ea91dfc4ee22ffe5337bc8131a7f3eb21851317cd1a4f0f4499e0b7590022023b39908f6fd615b88ce59fb335fcc78c1aa1dfc784657128593aff716328c54"},{"label":"Send","path":"makerAsset","signature":"3045022100eb70602ace9685478727ab2f12d03c9210cc9f5ee32580af0eeb467a7577de5c02200b4b67bc66181a17a2c1c603b2e0dd3fcf385b3fa2169605bad7ddd25c022ca1"},{"label":"Send","path":"makingAmount","signature":"3044022100ce65ab26827ccc2e79ff04abdc3d05b0e4fd19be0d2619e12c3db8854de62bcb021f4e78b8b9399a3f30ff7e9cac37798c1c4dc598067717e7328793f6359c48e5"},{"label":"Receive minimum","path":"takerAsset","signature":"3045022100be2e9fe8302374e9bc32ed3e977d66fb1835dd8db252d1b3a3d66c9b3a4412da022079750784ab3280bbc0ef6dc6e67d9552349887541120c9dfb4e50e6908bde40f"},{"label":"Receive minimum","path":"takingAmount","signature":"3044022061509cdba73f94eac1a1aa1d6e609956512aaf1d036aae20051409ea6b3ac57702202a4beefe376253d982d3492fc0d363010395c8d0a87c633b91c257c52b677d5d"},{"label":"To","path":"receiver","signature":"3045022100b126627250c5a18b36529103d398f5f5f86bd07f97979d481486ae0bb7bc87ea02207664b33b6f13a7614bd821a76cb19dc2c8f21e4ae00575917b3d7892a4da00f3"}]},"56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3":{"contractName":{"label":"AugustusRFQ ERC20 order","signature":"3045022100cdd6ed9272614ffdedb2b2aa22418386928f1174a6214451d67b82c06b637d4102205ee814ca52cfbdab011e337727cfe91fa272b98246ecbfb1683bfc0de3086efc"},"fields":[{"label":"Nonce and metadata","path":"nonceAndMeta","signature":"3044022056e3fdb59c9ece3d411d03963edfcb9a186ccb753b4e984366e7ca6baa99b38902206a7267e31543659ba3bf8b796edec2d1c6f174a810b89862e43541f94b191eca"},{"label":"Expiration time","path":"expiry","signature":"3045022100a4cc77374944e947748dd36408f48f43a94e67436231fad62191554d1ea5ff0e022001baa4fc0587af310bebe1c0044d7b4280bb5537192736fa3805584c735a6710"},{"label":"Maker asset address","path":"makerAsset","signature":"30440220770b731ffb6091493ce2fcdb4163ad872add409a9c66e88e29b0d7a82b0ee79c02201e0130c1841c484e816b9f9ff3694eea3601e1569c1ddb87319b08d86e9823d5"},{"label":"Taker asset address","path":"takerAsset","signature":"304502210094b700c3383bf0d8740e09d23dac120addc1c21029746f672d8f8c8b3a2a2995022008b5d3af862f7fb0510321cd9ae4f7172ab3b347f6556b3da79e2a95950ff34b"},{"label":"Maker address","path":"maker","signature":"304402202dafdefb2181e5bbdf5816fc710400bae0846bc08dfc389ef8008048228e2fd0022002b89786ea578488cf6c6b751dac0c13dd6c2c57c8d6bb0fcb47a28d2b07b1b6"},{"label":"Taker address","path":"taker","signature":"304402204c27aac1c07e8bde8a998bf06acd5eaf40e874a9b128a4f19ee8c39ce45c9cbe0220380d9438d10ce81f7545f3de8530a19c1eda78e4683fc2145b9715eb260f1d66"},{"label":"Maker amount","path":"makerAmount","signature":"3045022100e7f19c15b49e6f40eddd2c8a24d8c55e9224262aa0b856a413f842fc5c0fc7d00220341e5eaf45d8335bb6143768b1c961b6c7e97897bda5ef485457020661ac3ae3"},{"label":"Taker amount","path":"takerAmount","signature":"3045022100e36cd43f82fc0f99ec2770a26b245f6af13623cee69670d68dd696ff76d4630e02202057a0dd1faee909037429ba7489ccf3891a38d29a4da04648441105c1e89048"}]},"56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623":{"contractName":{"label":"AugustusRFQ NFT order","signature":"3044022045bb3ce0d61f428537754555a0d69cfc5554de2dd58c1c5cc7ae81abe073b1df022039ba8d7e1230c3851fc08db58cda6222c420dce4b8cf96725891906fc5f7539b"},"fields":[{"label":"Nonce and metadata","path":"nonceAndMeta","signature":"3044022020d30ebe13aa1235ea25dcc247a1c494a6aa2ac4f121aadc3beb874b9de4b75e022078efc82c2343d6165960fc252d10313550b6d9d1faeb6f2ff611c288fb53f364"},{"label":"Expiration time","path":"expiry","signature":"3045022100ee126c98d8ad5b000090d6c16131709618d803878a72ceb1f58f2b11b2e52324022076403ce3d181511afc9b59b3f4a0ce4de9ee76dd60c78eb61660d623294d4070"},{"label":"Maker asset encoded","path":"makerAsset","signature":"3045022100ed1f432fe0c33307e397f846970f7de0fc18098f3d5b4cc1a25844f75dbbfb9902204075ef8e6d6dae438dac2a7e3aace3e27bc7c67fe22728395f92888e68361f20"},{"label":"Maker asset NFT ID","path":"makerAssetId","signature":"3044022022be34e598b158445f7ff6a5565b04627b61789339aa956b03f5c8dcb81e0ca102201b970d57742618204906414d7d23dc42e9e566776e7bda9060bcde335817a8ce"},{"label":"Taker asset encoded","path":"takerAsset","signature":"304402203ec8a77927b84388d5a0ba1bb0bfa38fcb862b8c43d988bbbbccbd547a4ae38e022002f2f736d3cfbf42829b750af704323f29b1eedcbde789c49052521ec47bafee"},{"label":"Taker asset NFT ID","path":"takerAssetId","signature":"304402205defad5bc1514f254cece6e8dfbfe3b68c3818bef6d4268b40c59858a6a2187502206767bb96c040e523dfd88724a0ce4b4f6bde73c02a286772f2a73c973dab0bab"},{"label":"Maker address","path":"maker","signature":"3045022100a273a21625a130728e0448f53a047d50867a9ba5e4a285d7e06d98fb3bd655c2022061e93ce13cedef0ebe9bc9340b988d0fc7353e99e2ec28b77102a14b3a129479"},{"label":"Taker address","path":"taker","signature":"3045022100b74529d5cab0055f80732bcf7864f03db98bb9f779fa56171f3faafdfee2719e0220757505e2ba5df6184002e921f678f9f5bb073197652a45d86c6edf003067ce2c"},{"label":"Maker amount","path":"makerAmount","signature":"3045022100c14e1f90619be9cc92da927b1c908a18133b043e138d908bf81117e1fc73fe000220503047ae5e75ee53c0ed60601644ec09f430c613edc6ec72cdae4021d29438ce"},{"label":"Taker amount","path":"takerAmount","signature":"304402201096ca9ff9b886a77fcbc7fdc8ddfc0f42a9c8e7fccb783581ca3abc75ba61dd0220191d21eed8b4eed56975b580832a8b1891a5b674fe1a0e5d7314b7b6486d7104"}]},"56:0x111111111117dc0aa78b770fa6a738034120c302:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit 1INCH Token transfers","signature":"3045022100aa4cd645694179ca07ae32f7b9e940ef3268cab34bb2a67d4c4f31d0ccac76be02201a98adc704ff642bae02e8566470b83e98f95a70ece9a4589d1e7c865ffbe06a"},"fields":[{"label":"From","path":"owner","signature":"30440220379cbc9fde04d67f3bb79f0559aa097ac10cc5f3581ad5ee7b2d32babc95298202207e0fd82eef66dec1f39ebff087ef36affa96e6d70c15a3ed57f820d08a11111c"},{"label":"Approve to spender","path":"spender","signature":"304402204a8c834e5fcbc352bddfc02f932f2a068d3fdb134caa710ea472a37f1e8e3a1d022064452eb834e0ef14bdcb574c68c120d950a04af9062a4333d886ec6919dadbea"},{"label":"Amount allowance","path":"value","signature":"3045022100a088cba51cb5b8f2990bb945e9e927e0bfc11e76c8385adb7b2fc51e07a0281e022044f8a9d52181488e0e01fb88bb5634a2119845658869a66d2ad4860be1b1bb27"},{"label":"Approval expire","path":"deadline","signature":"304502210090d04cc0125bb3c6dab234122400aaf545065c6b9500df29da1e3544e2c7a3b7022036ced41cee57f6342c50ef32524fba068f470448054a50521d4bd51aa6c9bf14"}]},"56:0x7e624fa0e1c4abfd309cc15719b7e2580887f570:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit PolkastarterToken transfers","signature":"3044022070d11eddf5a69c484c2db1d472abcaf3a4a3c5c9bb821b7b5adcf24ca658110a0220227670ef7ced8b0f603bc997967b67b12ba6a1d8022b29e4292d8b6aad14cf05"},"fields":[{"label":"From","path":"owner","signature":"304402207f0fe68dc0d1b965726ed17a6f4eeb8a5643387dae6afd4d64a10ec1e5dafbda02200d4ea50dc2c96a73d8e2b868414ee83d8003c21fa5399279704756803e1ede10"},{"label":"Approve to spender","path":"spender","signature":"304402202bba41fde065250b92e68333ca0abf62e596be683f777a70e68ede89bb72ea2c02202a8c58eeb203db1c42559234a8a6f271fa36c1a14762ae84d88721d741978bf8"},{"label":"Amount allowance","path":"value","signature":"304502210082b117a6d962e4ebd7149b49b078d2d66b86103c8ddb82279d9dc78258cc2bbd02203edf8667c304058056553ecb3f4436d578abdafbe0225e0742196d367dddcdcb"},{"label":"Approval expire","path":"deadline","signature":"3045022100b57b1f68bcc9ed8cf405aadfc9542a7082ff870b1e4b9eccadd4ac3da8a16d6a022049d2fe4d0506764f6be7e6389b54dc936a517600cd3e7c640b781a2102142491"}]},"56:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3044022039764daffb73a12d21ffa77c263d071d00bc1dc310ce4cc9060c5330730709820220123a0e20ffc1cbcbc9537556ad29c04ec8e19dde7e7eea47afdee360fe09d242"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"3044022014a44eab1d24466ab29b61bcd263dfa466e45d9f03cc11cb5b121c941271fd3d02203e5e85227f53465dde124fa0ebc0692bd2b1cf5b90bfac44fe9d536b7a4b4a96"},{"label":"Amount allowance","path":"details.amount","signature":"3045022100922910c61d22377a87ef85dee6da9e29c100ac9876bc6c9cdb9881eb3d0e131802200cd42f4698d4d679da31474cd4ea4296e7094ec17e06adc3c133f1a8dc41669d"},{"label":"Approve to spender","path":"spender","signature":"304402204cc4c139386164490893d3d2f2933effed82ed5daa0e0ee4d23ce9176705441202202ba382b1639ae0826ee0bff9cce3ef2c7943f32c45ff4584bd55b3a49b0f4c95"},{"label":"Approval expire","path":"details.expiration","signature":"30440220686ad6284ef0d911254be7711cb1ac23633723aeab62a7165cb4b98999ccbb9c02207e9829c804557417dca25c7e23f005b13c851beaa6bb93b42e9f07aa1a210667"}]},"56:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"304402206be53d7a3bdafd6e4bdb86e3d1b3767900986bdd6a10d6075963c21b4ab0992e02201220cd9023788f36704f3b62fca65de422605ba68b833964c0792ec719ba837e"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3044022026ab43885c98f433ad1424f572718fbd548d56b2c02354d512a0b5e4466f4c750220677b8d7ee647b4b483a66274adf2afdae3bff55edbfcb5d005d20a5ae3026228"},{"label":"Amount allowance","path":"permitted.token","signature":"30450221008e26defd212f1f8e9d537a13709a882614f1bc342efc8b7db9e61ff29df1466602201e4c948dc25397dec005f49ed4edac675707c248f3289ffea6f481bcdf474e8f"},{"label":"Amount allowance","path":"permitted.amount","signature":"3044022026b4e495aa2d354c03e15295606dececc983e5e285ccea63582e02af02f407dd022029f4377378a3548c9b2dbc37df374d5d4af8cdc6d8a97ded5ba10f212902f91c"},{"label":"To swap","path":"witness.inputToken","signature":"304402205df3ca33c7c47b4f60ff51af10d9ddc3537015ddc22f374c2c192470ebe1e61f022070025d90624fd305bc893f0284f6673761b7318381b30899c0576fc89692b38b"},{"label":"To swap","path":"witness.inputAmount","signature":"3045022100c7a4dd786407dcae4d3cb167f1594dcc76e83760bdbb5b21dd08d550b18093a0022074819e0600908ef7ac7c81be5029486d7b0b4383884cab6df8966802766be2a1"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100feee7fef4693c181917b5aaebcd8d8933c9f7522ac5eebb13a8612c4eefae23b0220498b1180915442e73ac2770f63df86a781c645356b5218241a265770501ed4a1"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100a951f388b18ed053e69fea412e90e01c12bb5e1e4c20beaa29c2a94e871d667202204702861a2921c92a11f60a6e7ea6a82d1f67a254ef8ae89aa80376ea0a1c7d63"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100dd21a591bf52a2fcd8a87e63e1f920455b87e71b124cd2613371b2421cc64d4d02202ab80b9b2cb4c647123fd967e133b33eef3eb685d6d9a8028427501fa2db4a32"},{"label":"Approval expire","path":"deadline","signature":"3045022100e734637a14265d0a682d28205a964f2e632981ae39c49dfd022339bac8982daf02203662dfe1cc6e99a6b1679a68eaa00eb7157b0334ee2f68474c9d7832396de6e0"}]},"56:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3045022100960422217afa9fdd640240ce7e5be69848669bc6d63e92615f7dee6c0a4a42be02205abdfaf049823bb5c97bae109f73987713cbedcfd7019ee5a930106df816b900"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3044022051c30857bcbd3f70280d7c896a016da0ad49dff1722d25ca0cf3f0acd0703bd20220105ef2f7e1710d0f89e2e5117c28a305923127435c12b5ea1f30277ce7b230bd"},{"label":"Amount allowance","path":"permitted.token","signature":"3045022100d366a3ee4f420bc5f959c929570dc2546955b9466c141514fac7d051712d80b102203c23b3de82773af68e15d78dbc87edec398a28bff8436716af0369fcb3860e44"},{"label":"Amount allowance","path":"permitted.amount","signature":"30450221008b10f9234382c1efc5d294d98975a25a16c9027604cd083ecd05af20851b04e202200de68027bc4951fbac1fa434a663c8ab89134fb9d8236e77fa5dc16c5178c9c7"},{"label":"To swap","path":"witness.inputToken","signature":"3045022100e58442d4ad3a6b3d73c6e9a1f7cfe96d98179bcc4e3ad926ae9c544bb2cca940022027bf7d44027e967ccda7b0b0e077194eb9c2499f31e75efe1895cd10f28f0a99"},{"label":"To swap","path":"witness.inputStartAmount","signature":"304402202fb5009434c51b55f88b48fe62be378a22e8ab82d895ea66d877f4ab94010dfd02204564388184db20c182dea67978d9de519533473280b37a7f2b9f911dab1671d4"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100dce11b4a8cfc9847bdfaa3e0f38ef3632f57e5188177f4c17dd8a531bff652e50220050c59b5f67c0d4f59ba37b2e0f578915a44ef055693d92aca43c0c2570d79cd"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3044022001fedbc154eed1d9a1628dfa85eeddd9abb91b18d49a59e8c7fb3c4cc55f1ba4022042ba188fe844feb40d5bccce05c1296fc9acb19f92331f592413bec294926940"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402201bc1cfe7677b63fe456cb3a78ff032122d9353af812c68a07052dd8b63a62a73022079c4a25e1a1d3a3d3630490174a9adbed8351488c98b7e6e1b055a4600d38df6"},{"label":"Approval expire","path":"deadline","signature":"3045022100cb619f27b93e791f667f780925b1647f49faff0bd3a8f3f126444e1860ecab95022000f156774aff76c8db348a0a5677b7a99a630f0c6ba55f9f2805bd363df1be50"}]},"56:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"304402203d2fd78eec8d725bfb69586e5d588174860d2e962b0659440d8c6f2a0cef6611022059dc7fe99f8fd6f89a15b5534c71e7571c485fe9f3d21d0a5d2b0437f92186c2"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100edef138680959b2ea2ba9c336988fe47c4e6078b19a94e64d53a80cc654bf3c002205a9a78c89421cd27eaba1b07c9beb47eac621396c19d79ba02c5d6be277a0401"},{"label":"Amount allowance","path":"permitted.token","signature":"304402203041ac9f31682911a83b11ee0cc13c225e4be455be045fbf8b0a5741c6863a3f022075863f0396604e2c74027e8fef019433d681fcff3ae546b1d59c33f1c585ed28"},{"label":"Amount allowance","path":"permitted.amount","signature":"3045022100fcc91d0d928ddc5d34ba6ebfbaf512c01f93a8abc53f1ad0a76eca84aa78a701022010525ef9569401b1680592415c9b4507d484d59bb37095f204c3a7d5f647f329"},{"label":"Spend max","path":"witness.inputToken","signature":"3045022100cb4c66d1a45af4bd6d116b77fb66b926bff56afb8a550c3e28582f5e436761d102202aac75fdcf2e4713257e41e91e8df5fcb7e16937c74a61d0c2398ade9611fa80"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"3045022100c87c215918f308eed7462ccfe005907d17cb841267ead035340e8f9eb2d87db602205ace7a0b47150b3f423a679fbfb2a00b015b5014ac8c3ca3e885499a300cb5a6"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100c62059c35d7644eaa5fde91b0e7e110273229d01dcb8aec96afc13d01f404f220220674b885b86399f953f824185d70df46e92142518a8f4950ed2d7ed54af34f677"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100e5bf376e10e5f64a253d43489f38b8eb4fb2135c04078709e90c8ca49e20b9a7022078e48814760f2df95dc8d45d3c7a438674db223f6b727828c2784fc2bb2eaf29"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e62d51d254f6d76c0333cef9ed6af8dff443b4879ece411f18b408e24c65b40302207cf8df390dbfa6a0997047d97fd57eab184210e0819addff6a3e91fab8f7922a"},{"label":"Approval expire","path":"deadline","signature":"3044022001a89b05eb7f2c0eb520e8e9152af5a2bee435d4ca84912ecb16cfdc9e2b36f202207a19b3b63a6311cbc3ff21c587f4622adb0856174c26d444c063b825d981b16d"}]},"42220:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3044022026254c5b6903c27b62b2f0678ba4d99e853842af501bce7d6cce9e01448d76bf0220517550421f2c67d7486fafbcba486513287cc3797d45cca7cf0c3d904c598f7c"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"3045022100e88f44eed7b2fb491aa4bcd8fc96907cf09a8f8aa194b099dc0fe7668d7c303702203099d5b55a43752a4e6777ed448b6a96d2e5da2ee7149620322c66c72248f154"},{"label":"Amount allowance","path":"details.amount","signature":"30440220162d4f3fd7a5c8e19d1b70aff5448914ac7082230e1e1c6472462640bc97e4f6022022ba8773c06cbea23b13e6953c8a0f7a98ffdebceaa5542b9c3e330ee474003c"},{"label":"Approve to spender","path":"spender","signature":"304402203ce7919144ad501982f67d07e5f14ac966643ebd85306bfd2ed01a0b195bee6b02207ec812a2d0bab9ed1b9a83f669a291ee0571249950a8f0be1164af9da79780a3"},{"label":"Approval expire","path":"details.expiration","signature":"30440220610736904a597ab55bacc2821c8701670d08ef91661a148a425fcac47657926302202f83060b29d4623d0d13ad80d8057a19ef50986d243609bb3fdad0b93b7320a6"}]},"42220:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100e72714fb3004f389173e1e396dfb953163ebd1f8427e390e6b6787cfd02ef54902207d4ea7e366753356e0c4d9ef1c124f20636c0b76a2040d51abe29aca5781611d"},"fields":[{"label":"Spender","path":"spender","signature":"3044022066ee1bb3c08d1c38278427508027778ab802d61f09023c8549977282d884a5bb022048bb50f5631e49354a7bf63f5801c1402eefed99d2b74e775854c64a77b2283f"},{"label":"Amount allowance","path":"permitted.token","signature":"3045022100976a51db9cb1b52023660a375533f1fc1cdcd6b7887dbe37d8232a863fd320c902201f0613a22c2cdb74fe98f8ae254d77c56ad9bbe7c15012c82975cb0d81857240"},{"label":"Amount allowance","path":"permitted.amount","signature":"304402207a2fa57613c73382cc1214387c355d097baac6a4bf82c33054b4593ec50514c8022049bae1f0bda8f1594a37ad118eb48ac48ec53c562d37a7a5775b409584dbcfc3"},{"label":"To swap","path":"witness.inputToken","signature":"304402207ffae59782b65f421908a2ee34ab165ff2734c678413458e875d235978362df102200863ed5ff10a08de0f175726ef2af9ba476c57077b89cedf2d9d13eb90a77c7a"},{"label":"To swap","path":"witness.inputAmount","signature":"3045022100a100d0b7b6494837e9162f26c08e8554969be1e212097ae974edfca5d63fffee022016fe8082a1ff56b71cd80fa54ac6d7bd21958ada0b664a6e0be7580b6b65d9ea"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100bd5ce8b79974823bdb9a7188b2d300ab5ac346578b0c73b10fdb0ee98d68a14302207f405deda89efed5b9aef4d2911a90481770e48db7a4ef02a209da55bb750f85"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3044022069e268580149f3806e0fbe3cd09b54fddf16805ca901de001a115ad2330eeab9022051e808755f106f96ced721d1e510cf6dedd341759a0e362b18e747ff54982c69"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402204a9c020d1fdee5156097f946327eb4977e5d2e9208b25dcb90e7b383fbdce26402204378adef26d05e8287c328ef2d09651b9b4c1b26cdebbcf776286847ee2f4913"},{"label":"Approval expire","path":"deadline","signature":"3045022100d47b1423b880c60c932876e15749cd082acfe2fe32a661617ca8270feb7743e40220335191829d6a3b1a27dee3ef704c0cf92b6c0a14aecfb3a8e314c7b3e5f569f7"}]},"42220:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3044022020a162731ec93ee7f98027a5feb5e03807818be464b00affa750a4558a99f98102202578eb63dadc6b18743a96ee393384ef40fdae8029941931a84b039c19c933c8"},"fields":[{"label":"Spender","path":"spender","signature":"3044022070bcfabeb93910982344547495147294072e624f0134a0eaa195e73f0a1b7268022030ac8cdac2076a43b304ba29cedf90674147000b3b37ed9b28ca1348d679e92d"},{"label":"Amount allowance","path":"permitted.token","signature":"3044022033591b50b9b1f62d550f9d2ad404003a516e6b85ded26936b8ae51d037bdf600022039c27bc86b448a2e3cae64006c4cc1cda73ccb3c683fe0ceb61bc3ada16362b4"},{"label":"Amount allowance","path":"permitted.amount","signature":"3045022100eafa8d03750d6ff10950d8e41bac1c1a23de0754d4d2fce1c98d3f6d548c15580220447ea101241ae8086d83f2c2e190d23b660b790d905db80ac782b4dc7752399a"},{"label":"To swap","path":"witness.inputToken","signature":"304402206f8fd6a67e26cfabae4117fe67bab3184a8b493389c84e1249b7f9ca7a62a69c02204e00b017befe02baac4e1dcd3b64bdc1436401c5d58f8f54e0d44b9af65552eb"},{"label":"To swap","path":"witness.inputStartAmount","signature":"3044022034fade1f5e208a71196e268fd3a1aee8cfa01c707ea163cd74d7afefecca6461022000d66770d077d17cc655a8263eb1317f30012f169c8068e865b19b6321706431"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100d45ba12fa943bc8c48a5085d4241c964a1f65823ed3b5f7a288c6885fc0b12e402207b5310e046215438da64cb370514f642d097030575a9497cb7cb82ef393d09c3"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100da37ad4b694bc7ee59f0dfe9f37ce8100b2fbd1d22fe866ab90fcb5a75c9071a02203927e28b4df2e583c70f6e15272ca813ffe4d3971afab27ef3f403730aa48c59"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022020be4365768b961d019a3bd11f3c72b52b093252d8b0c692ef03dcfd9f8d648102203a793e8cae971cf3fbd53518d0c2b77b15417657ca2c3b0bb24754c70c372574"},{"label":"Approval expire","path":"deadline","signature":"304402203d728a67ff37efa4d431b1d682b3bb13535818f3e0338b47c863f5a8d80d138f02206d0b0d51a8ea7cd751f0599906f82dbf40da64603b376321dc4112a10b36a791"}]},"42220:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"304402206a03800c227fead9cf18053d5cd9f282f1c86122c257075589094526f02adea00220193bd64c8d0c04045f8cb3367da07adc0121c9b35a30895b62333e1ff58d00a2"},"fields":[{"label":"Spender","path":"spender","signature":"30440220731aff0ad876d81442c75102cb83fff4139d74cd9cbed9f31850a7f1a0fc643602201fd344d75222883622706ea73e0d2c9067cd1f744f17ba716cf37e04bf5eed28"},{"label":"Amount allowance","path":"permitted.token","signature":"3044022002876096e574d655f029dafcb9c356dcc2d8fb2dcd3bdf3fce15564e3d50ce8a02203b2a4c99c7113b784465c741bd1456fd598edcf5f0af772d6766606901b46a32"},{"label":"Amount allowance","path":"permitted.amount","signature":"304402207c902bdcdb3709c8a1aa3c1e52b9ffe85c1c6468fb42e542c67d371a29ce1c560220289e633566912180b531e66e147de1eb59dd6d7d3d0d4e2eae22dd369f2dc507"},{"label":"Spend max","path":"witness.inputToken","signature":"3045022100ac31cae76a61aa434d6fcf7230abfea0ea868292640f607129d20cc310b61bf602202a70073a17ed6ebe2676816febd37f488435cba843ffbb184e14dcff207bc213"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"3045022100e58823841f5b5ae04b011af5d1546d3514254c39af4c5f140371d40d2db9534302206333652326ee585116844754351feb73189345cbf2bed596e92bcb5c73d37fc8"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100f4707993b6c3ad2702ca775cade1ff69bd4f6dac7ee3e6cfee9eef71f9088f900220189696a9ae7371fd16cda5147d6f282d416d2956651ac0361ca1fc0d60504d6e"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100c3b0891248431134809b5e5383aacf261eb56018fff48dcbbd043e5551888ee702207b1b8ce28cba1aefa9a6c95821346422b466b05ad4784b5461afb874dc0fbd9b"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402203640de985c876c17d297a73ba553aa55e517ea36838d9fd235c1b94f9a805c3302204e1e64b95f27416bb1dc4c823ecf9f1bc4e25791b6c7338035f58ab8fae59170"},{"label":"Approval expire","path":"deadline","signature":"304402207e78eade3c5caa49976eb8d06dcf60c5268e9a0af3ec3a23c686b718c744ea1e022067e283c42fa55edce36d01cba872198011dc91c849044a119f34d951ab067163"}]},"1:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c":{"contractName":{"label":"1inch Order","signature":"3045022100e1f7e1db3081ebad48f85b6443892986b2048bde4dcc8e7be4c926923ef6de0a02203d042c0caf4ba241f1a9715ab2e18bd6d581d8383a5ac41b9e29e2fa247ea21e"},"fields":[{"label":"From","path":"maker","signature":"304502210084df0994694c4f28ce49b11ca4d04c961e50a723393e1e62e7fa62f3460649340220489ea716160dadd85eeca97e8dd42945c95e5d5b02e6b1abc0d6292049783e72"},{"label":"Send","path":"makerAsset","signature":"3045022100963859d2192e1d9ee9541cd7fcd7e10c305ad0dc18d132f17a8904cd61510067022077ada6acd906aa77fd25ae8e09bb1d71c8d04655f4a3eb30d847b1174292ca36"},{"label":"Send","path":"makingAmount","signature":"304402206e991015ec3d74a70cb091b070f9c980209767246bfaee40e19343e6e558e60502205ea0e5eb238706500b23e9dd94da24ff6caec60fb9996fb2fbe4140151f47409"},{"label":"Receive minimum","path":"takerAsset","signature":"304502210099b30c9ca05ac710efec2d7d21bedf063446da29a7e5864c0bc8cbe30d2e6031022054d5257fe0f4d2624b4650361048b642dd269592acd19cc8801035b91b7774fe"},{"label":"Receive minimum","path":"takingAmount","signature":"30440220760e20dac71d010d9a93c3d34a6847469fbe21807b539d5bf9302325073f59fb02202c876f4105fb051e6f69430ebf2ea2e7ad77c63eed86e699eed863ae0a8407aa"},{"label":"To","path":"receiver","signature":"3045022100c23f20e9c3cea7e06b6642635884b11ba3653805327413f0e779dd2148faae3b02206c613e4f4470527b6ef0304b09396ec915045116607901d1c2337b5f04b87634"}]},"1:0x119c71d3bbac22029622cbaec24854d3d32d2828:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337":{"contractName":{"label":"1inch Order","signature":"3045022100ea11ec08e4ee7178eb6121d603d00e6c6e62d0d94e6d4098abc22d709c47b5d7022041c0c9a56c14a783c02a8ff358b0162ac1f743c3f8fbfe8726d125d041a55a04"},"fields":[{"label":"From","path":"maker","signature":"3044022062d5d76cb58f4b20f6516df1154c983610b57fa7a2d65be91915012075ccf19902201b5b86649fceb99cab590143133b535ac0455505fd70e94ccc5d6712bf1cc963"},{"label":"Send","path":"makerAsset","signature":"3044022016261940797159c32ca0d8f646e3994fbaece31f143d5978c04ca680419bead6022004f2a06f87a7a857ab78cc64f8bfa15a188ae8606a0989cb411c3ac86fa3a7d3"},{"label":"Send","path":"makingAmount","signature":"3044022055fedebdae7b379c3ccaac3b27c8104a67fb4966befa270366ce79cfa0115620022074b785487894db3445f9584db078d6718c7a3f63d1d8e1324c37b4eac80c40f4"},{"label":"Receive minimum","path":"takerAsset","signature":"30450221008e8094c8fdb71ed55f71526c77d58b4331f057f97253dc318b42dd985f2131a202203b910fb2f7fd7cf8abf43b7457544df3322a1c4fff60b4e1f1a96f88f889bae3"},{"label":"Receive minimum","path":"takingAmount","signature":"3045022100eae49be17c711d0833b8e4e05c5a0a1655d0522c2cdac8f174d32db86e6f778902205a1608d20bcbd0e18f3abbfe717ae248328468853d952ebe63d0787535fb6296"},{"label":"To","path":"receiver","signature":"3045022100a372339b731529e6315864744dae1826fc136eb899925e46826faeaf6ad5b10f022062ced218ac80dbb3bf8d25203de72c7d06ee20e39115bde37de3f3a50e9f1868"}]},"1:0x119c71d3bbac22029622cbaec24854d3d32d2828:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a":{"contractName":{"label":"1inch Order","signature":"3045022100f2bc7298d431b6f742100623febe6824eea30e37b2d89093c9cfa933a053878102207332846b67bfdde820103d7d775c51a1c2b0fcaf48f2a9a19cad9364e12fde13"},"fields":[{"label":"From","path":"maker","signature":"304402202c13c39d9be77721727b3920ecf3e856503d952caf07a74496984b6bac252567022057cbbabfff5bf7a00ca18d4ff9ecb0c5215d779a4750daa96fd3a257838d7907"},{"label":"Send","path":"makerAsset","signature":"304402203f4e208ce3eaf2cdc9c892c3579ecfcdea71936d7931695294d4242a31b05cf20220370f8d5f60500e7219e6e18d3d0ad89eace7bc19506b51a192f4b285db0647bc"},{"label":"Send","path":"makingAmount","signature":"3044022078b8702255d94aa9013dafe99cc2ef96b7a6c30fa5cc3f7d2c47541e193b47cd0220492a89c9bf72e0236d57449008407b2a5ddd20ba3a0abbe2cf851d9bbd7c1aa4"},{"label":"Receive minimum","path":"takerAsset","signature":"3045022100f50a715d4590f892c74d417c2d2727d7bc5ab3f7406ba00fd1e15b539368fa66022026c8e8af1802cb5f0fb71d91c8341ff54bc00afc9141e883ce0a38a24136952d"},{"label":"Receive minimum","path":"takingAmount","signature":"304402204b5fc646ef012cf525b8e2a85113e532e16d805c7abb899175d40eb0bdb6bd2f0220586bca533943916d742c4a12cd8f82da5f93b6990acbb240e6d559edf6f23167"},{"label":"To","path":"receiver","signature":"3045022100d116efa90828b9a139cb8b54c3665db8e58cc2af118bab85042705b6f0cf997a022006429fe8762194100330515341dfdca029e5284ca44f57d50e8c1d8cecdf81e7"}]},"1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:08c2ba593f6e0e80b8fd2bb1da6923135c173094f9cb6ecdea6ea144":{"contractName":{"label":"DeGate Withdrawal","signature":"30440220089127ef62e67a3d075a2c0d645c06ce98e6cd373bca7ac89217b2919d718b9902202b4fc6a5488200db6a51ef2193febf8023770e44d361a5c85907c1f6864e3ae4"},"fields":[{"label":"Owner","path":"owner","signature":"304502210085a5f94d365f90e93bced9bfdea6f3a762abfeec8d77b070905e46368f0db7970220042075c4a50ea30b63308a3d4ef5cd72703c7447d4d296e3fc90e3872aa54259"},{"label":"AccountID","path":"accountID","signature":"30450221008d1561da0d5464ae0173b2a6ab1fb7c9fadec3429b9d068f464062cda6a721840220169a240b04d50866f8250860c82b01e664d4bb1262f7782a454d3341312d7831"},{"label":"TokenID","path":"tokenID","signature":"304402203da24c741ee39f2c353d6e38386af0ad7b38a2568663f562e084247b618410b702205054378fd255b5077310009af3ce2507c29f5c3a8b651b64519982ed502b4090"},{"label":"Amount","path":"amount","signature":"3045022100c2d5d4aeed590ec6bd2116f83eb334023d5bf01374700e49d73af5875059c0c10220286ce6cc46a4d5e9ce71462b9431bb69c55f060a65fbdb2728b526cbecec0046"},{"label":"FeeTokenID","path":"feeTokenID","signature":"3045022100e50a065542008fa67af23b0091e5962e89deca43cc4cfa55fdea4ba86873846d02204d3ef27ca382008596cf584a8169a925a9cc4608ba16fc4673cdc539dd85a29a"},{"label":"MaxFee","path":"maxFee","signature":"3045022100a79503f04eafa7afb97bce7df13dc697d7ad03532be221da27d596ba5c4f9be502205ae99bd27a8f1c92cf78fec9952845342ed93625d07ef878043af48eaaa4b093"},{"label":"To","path":"to","signature":"3045022100c689e1d30113b842b9fc468cc4e26308a6df924818b9fd89431627c8a42c57af02200225d6cef4578c9e4c46c48afe459a7037aedbfda03195ad0252cba5b41b502c"},{"label":"MinGas","path":"minGas","signature":"30440220464c332bf0455c61102f4884218190994094d7c9808411c00fa6fd6ef5763cc002202e3324eaa0bac01d96738a8a9ffcf531ab59aa03911f2031182d8b9de97a4f06"},{"label":"ValidUntil","path":"validUntil","signature":"304402200ec81207eb0079bdd15905bbdd9b98660d705aa08df96e9ef990774d2f1103cf022035926ba6cf460783122664b1a25849638ffe34f42c38177276c3bc7b10ad9cae"},{"label":"StorageID","path":"storageID","signature":"304402206d33f0bdb8b370afb15f212aed98da5ad1d2c41362f9ade1360f86ae9ed15cbb02201204be822aac5c18a09f0baee45c5bc3295c8c085a391355e5ebb8a3242c9cca"}]},"1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:3ff1c601fe26dd56c4fc5d773d7e24b17caf0754a14f5eb033636388":{"contractName":{"label":"DeGate Transfer","signature":"3044022043833156814430e372cc93d7540835c0ba00e298359bd1296425f42b40c477ea02206416e6bc158f72bcb300fa468fedd42394ecdff897494869cf1f9679b6c2769a"},"fields":[{"label":"Owner","path":"owner","signature":"3044022018ba034d2e60f07b388cde680072eca4b0815ee5f479e165626c51b84321c6790220793475c2711d3aeefe5ec4d5ec89be59c840ffb2d51d013c8d86c2b5d7e96a8f"},{"label":"AccountID","path":"accountID","signature":"3045022100aad3a5a7ba18bb2cb73d647bc0a573eadf97b62bc08b7656dbacb982aa341d7002203a4f6e50a3f386b10d0377debe312d5a1462108563e18807fa8d45c4edd7615a"},{"label":"TokenID","path":"tokenID","signature":"3044022002c7d20b128cd4703230f199371f6ccd18f2e3311ff3b431cfdba8ed69b8a9a602203a5be9d165adb244c9c9e0100bfb559fea69b7a91a9c4805d3cab7bbf649e2ba"},{"label":"Amount","path":"amount","signature":"3044022048ed7a7e1860df3c118a9e0bc25ca8085ca4c4981d00d8a4a25bb26ee905d23702206cfe29c63e4da5415b402f1576466f6c629b44c733e3d4a4a46b61cf1f0ecc12"},{"label":"FeeTokenID","path":"feeTokenID","signature":"304502210085ec5b05794e239114ee6dd75453cde566ea74286cfe76122ff69c230f54f3690220668392a6f480c2eff108cdb7cf3aeb287bac88abe59914ccd6932717e14d2758"},{"label":"MaxFee","path":"maxFee","signature":"304502210098019a9ac20d02984196a508ca27d29c2654feb0ad161b1500ec7051c0ccb95c02203920ddf0bf7e17f31dd59994043bb0a21a3f91c9674f164d63df5cbd42e926ce"},{"label":"To","path":"to","signature":"3044022067324800e3b2353a4ccf8faeebc4abfef0cecf550da5afa292dd12820e05602202203fa883cd57d057a3463d149117490ae889173e867b54279c488abba636357029"},{"label":"ValidUntil","path":"validUntil","signature":"3045022100ebd27a8311ce197bf3bbb72856362853081faa55048d186a15017c998b164edb02204bff1cf694d3195d4c82a2c8d6f6b1d4db842e9fc891eeaff2d4ec4d8d64836e"},{"label":"StorageID","path":"storageID","signature":"3044022058b6542b5fd416c8c321eeeca445df10141187fe956363d7053a90debea15abe022039b14b0f608f4b1c8757e5de2bef2f80741df2a85beb559d4ba710af9284e953"}]},"1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:4decdb2662378b6612b240fda08f6d00412f088ccdf3023095323de2":{"contractName":{"label":"DeGate AccountUpdate","signature":"3044022059026d8aa3f81272e4b4b72f0094cd0fd04ac862e3e8ebc3e73ca7b923a45f70022046a1f7323da99a3dac0d4cc603c9db38b64ac3fa7519a1248e111abf926664d1"},"fields":[{"label":"Owner","path":"owner","signature":"304402205f7fae43ba4d7a0e5bed7bd9cecab4f2b55bf6ba6b3e33962ace5fabef269c0b02207bc89e0acf86b7593b18ff9d865820956508bb1dc3d8551dbd9f6745029cfb3e"},{"label":"AccountID","path":"accountID","signature":"3045022100e580811e1e6b2e40fd4cbf4eb1a3f4baa934e6d96e80674431b2a6fe93581dec022010447ecd9023c4a028142d2e34f217b96a65ba030052c20eda6b3f4428ff109d"},{"label":"FeeTokenID","path":"feeTokenID","signature":"30440220387d9f50b9af4dc0c2ff7dc73d513e1d816a55aafe1ffdc88827176907c3a5f0022007d64ad6946f932190bb352b5aa3360b4be0d1b50faee29010f5fbf132cbcc31"},{"label":"MaxFee","path":"maxFee","signature":"30440220395dfa14a44c006079ec38d901b71e839ad10e1f9642b37246e4544302299f1a0220216a9b71a26e1a8ecd87f7f16d7a04aba42a68c18da25e8b608cb4493731ad2a"},{"label":"PublicKey","path":"publicKey","signature":"3045022100db2cd9ef2becd6bd902458e4c3661be2f98db0943ca0b1d074eb249cac7139ee02203d011e51879b69be2ddcbd215242dd9e70f0cfd92c59fbc5089aee56bb51c7dc"},{"label":"ValidUntil","path":"validUntil","signature":"30450221009d4db9f47704967c5fef69f7255e9dfd19abd928adeb7a5a06abe2fb8b3adcde02200ed93b341bc629b132313b1e8c47db096145898b3a741d165b21b653ef14c3b3"},{"label":"Nonce","path":"nonce","signature":"30450221008e187640c09a34fdda18f022ece0f1632315392192876af7df895c6245ee506102205f149a22b0eb3d9bcdc3e65db8a0e1b6494266c721c1bd4248e7de7bb8a4dce6"}]},"1:0x7f268357a8c2552623316e2562d90e642bb538e5:d8e4f2bd77f7562e99ea5df4adb127291a2bfbc225ae55450038f27f":{"contractName":{"label":"OpenSea Listing","signature":"304402205f01e62b2331ecb9f1cb3f49a764d66015937cb20cb4c3af625146905ca4832402205076eeb4a74619b4552278836b548c8e525813faa9008399e43bfed7db016408"},"fields":[{"label":"Contract address","path":"exchange","signature":"3044022069df3b1c82dda9849a3df4cd0dd263d2b6c35e4fb8946865a35f5555830971b802201880d72b3d956867b597a2f5097d7f8799bad6e636d3de4030515634bba47155"},{"label":"Price","path":"basePrice","signature":"3045022100db49dbd8426193b6012781f43c3b445d1cf845d99d738091c1f068951728333402204326a2da5203f25deec049deba760bb31a86507c73fe6828c68e0db2eabfc966"},{"label":"Offer expiration","path":"expirationTime","signature":"3045022100e71a4921740fcdf4e489c517fc82f9b7e83cfbd675dff318acb91fbf8eaf175402203fac43650771c6523dad8d995ef414d035a92d262a9cf95885ef2704337a2382"}]},"1:0xe92b586627cca7a83dc919cc7127196d70f55a06:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3":{"contractName":{"label":"AugustusRFQ ERC20 order","signature":"3044022043fb323d3a064faa38bcabad3a3f797dff60f55b49c19e350a9d0b1f980818e202205c3dc14efcc49adf915f195ff29fa02dfd9d08fca532b76086e501f9e0d133ed"},"fields":[{"label":"Nonce and metadata","path":"nonceAndMeta","signature":"304402205b674138eb50ddbfdd05768f2c641109f6c8f341d27e10ea12d59e083746cb330220521d739a49ee57ff9a41cf00adc631d3dd33e9ce2b23ce50759fb33c0ffce0a5"},{"label":"Expiration time","path":"expiry","signature":"304402203ba8d470649ae7cb5d02764fa48899ec0414075ed85cb9fd95e89ac5b3bb073e02200183233f30de996a8b87417a6febcbb56a544c38fd62b6f7702efa7e0d7b2ee3"},{"label":"Maker asset address","path":"makerAsset","signature":"304402206f3c4055bd431c1ceddce5b147c3b5acec950b267205da655fb3d331b9c070830220570c9cfdcc02b10abbf9a335ab6a4067ab7cae2ae8a443f795225a7c3981cc0a"},{"label":"Taker asset address","path":"takerAsset","signature":"3045022100fb93cbca6ee524729b138319a92316a37c56ae5f89b3d652af7f680c3f160df002203d1fc525b11cd30d2907f844d7774f49995b2be7e3ba2896dcd4a6e73c8a59d5"},{"label":"Maker address","path":"maker","signature":"3044022002e75adf4733bf28d532647c54fb0000415737db37b7e5674f9bb20179d01eea02203834ebcfe81d98e745572349bb0da4ffdc8ec846d35e3812119e9a3491462724"},{"label":"Taker address","path":"taker","signature":"3045022100966a77a69a7e0c060f154a8c7ed36087d8ba7da111d9bacc90b873421fe6a75c02207d92956d938a966cb98ddb6e8b3a56e4d8e7725182cf1bb02f03f67512460485"},{"label":"Maker amount","path":"makerAmount","signature":"304402207ece45c0993fa46316022cffbdf64307cef2caede370f27fdfd78471c3550dd002200da74e8b3b5201e654e7e4674f7471a333a104288fdf8cf80fc3122126113d1b"},{"label":"Taker amount","path":"takerAmount","signature":"3044022014183f10973ddc0ccb12472d2437e33f368f627b99022735044e5c4ebb4e345802203a3f5e8aa5c928981d2dabd0442342c605db1626dcd0d3ad5e3afcd98bb8c673"}]},"1:0xe92b586627cca7a83dc919cc7127196d70f55a06:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623":{"contractName":{"label":"AugustusRFQ NFT order","signature":"304402206dfa1d54ee0a7ab236252618a5fac9c752152304f31838eab4ba4c6d2d3f844b02206658b1e9b2503577619080909be0f4c1d2a899b3d0085ed8c3f2a4309762dd94"},"fields":[{"label":"Nonce and metadata","path":"nonceAndMeta","signature":"3045022100ed9b0b91a8cace4d312f6d1bab076c057e954a9cd33c3dc5c350d030e41edd230220230e3050131157f6fc2fc578df7b1108f69d55d25ab837c661045877b148765b"},{"label":"Expiration time","path":"expiry","signature":"304402205d4913092612fe78d75c181f3ed28ac7808e25ab0131e73bebd91c08aac65e7902203d63f1fd4d5cc11b1f8aa2af0ec6a8440a0ed59d440237bce96ed87874c2a26d"},{"label":"Maker asset encoded","path":"makerAsset","signature":"304402205f9fb08bef206518e5bf48cb7fd968709a0ae317e903d9c87a41c934a0983af3022066264858ae4a1338d4daa1b4f9dc7376335ce9e57d4bed320b0d4c27a0012deb"},{"label":"Maker asset NFT ID","path":"makerAssetId","signature":"3045022100ac653732f2acece7c47588bfff9a1059dc69bd3fa7e387cfef8246eb0ae2a70902204ffd7f89cd7223f8e52b7c44b02ac4fa1d06017015304f1a3a7459b20d54a5e7"},{"label":"Taker asset encoded","path":"takerAsset","signature":"30450221008e59dfbed2dd4d1e2738b829d7a57fa23be737b652c0b01299f3d9482174aea80220138c8e948becda6dc1e7564358e574e7ac8d7016f2a1795059977f401535b27f"},{"label":"Taker asset NFT ID","path":"takerAssetId","signature":"304402203408e2bf0210fa4454baf46374cf876299578df056ddaaf5a907306804ca41cb0220056f910e3c500e4a8f55d5c09dceed9753a2ca7b49a9ade1955a598f4e64d657"},{"label":"Maker address","path":"maker","signature":"3045022100ce5db907819f4f36c77f1e3a849a3a6ac9483970128998d5add5941e1fcf6dc102200e1f26e08a3f48ef6fe1d40a4149cb8603c5e70e076755ddcf76894d31f2adc0"},{"label":"Taker address","path":"taker","signature":"30440220015799beef248e4eb12f95368ef44cfbaf65e43da1a4110623006e46157ab22c022055f962e02e4cbdc05bab79cfbee523da8ff9d16529c4e98755b15d45bb34a16b"},{"label":"Maker amount","path":"makerAmount","signature":"30450221008048cec54417376b3a659e3aeeb349a4352751a099443ea203b59e9d2cd954b702201b32704d89bd028a6794ef315bf2a204b7293f547d14282440f5aea041a27ee1"},{"label":"Taker amount","path":"takerAmount","signature":"3045022100dad584a953b3c56c67913e76f1a6626cb72620e23bd16f41b2817a95ddb0bccb02206189e3b49d9f3475bd52baff2a40c7f026daf1d2dad9cfaa403eb08030836090"}]},"1:0x6b175474e89094c44da98b954eedeac495271d0f:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Dai Stablecoin v2.0 transfers","signature":"30440220692d38bbcbab753738d0c75d87efba7b93a88d4e225e73c7e4d0b54e4e8b548302205000ffda67117043bce94c327837053e2b6bdb888b3d2bac3c1c3b79997c1f90"},"fields":[{"label":"From","path":"owner","signature":"3044022067e97af5110ed4a8a5e8731a04c07192042b5ef4fdc598cb10256363c4bd503302205fc2e4b4dbc178b3bcd8412deb66f4b99b4506197bb046ad618457a1aadd09ad"},{"label":"Approve to spender","path":"spender","signature":"304502210099c45a68aaa7656be36f74fa0831546de4e7b94909143853bf678313b580963902202b01f4e8fa9f6f5621027c1147fc435430f22eae8a91bbd6e27b053e61a69d8e"},{"label":"Amount allowance","path":"value","signature":"304402200bd61453c0b2ba4d132e33928521c8f9aeef41ac38dea457adc578e36b14995402200da4596ef58d8dbef3bed208ebd8436fdf74a392c261a7a0a779525311282060"},{"label":"Approval expire","path":"deadline","signature":"304402202fd903bb26f5f89667c1382b26f64cddcfea77434f75bcbf5a381271b7da027202203baa46ae7d78f4d32af367f430deb738dcd5dfe05b04d56ba4404989d308633f"}]},"1:0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Aave transfers","signature":"3045022100b90cde117f034f5ac3cc1563397a65a88b65814c4eb4757d232b70f1c7731d6f022069394d2683d3230e7549c4763bf10ddaeb2cd9d48661b818605bd318220b9f8f"},"fields":[{"label":"From","path":"owner","signature":"30440220671740c2ec59c9bf30287a9ec559ee15f5f10dbabeb97e4bbb1756ead6efa4fd0220607931e7d5e48150946b5d674831381304a51c756eabed869fbe28d6075cad17"},{"label":"Approve to spender","path":"spender","signature":"3045022100c85534d029bed7daaed9dc5db7677efa56ac772a01b715934c94eec529cff88d02206947c5e45f9b60d76a41c20a2feca0bb06c19fa99863fabdebf842b7a5c088d9"},{"label":"Amount allowance","path":"value","signature":"3045022100bcc7ae5fb36f596f7d2076be3cbae4b87a3c74e331c121bb8ca2a356fd54f89c02207cdfbc183b64be14699f27ea696edd007589dae91c5ddc8bcdadcbb41223ab65"},{"label":"Approval expire","path":"deadline","signature":"3045022100b4b6235742a1b4d41c0177f228ddb7a6720ccb6cbd97da5b013c9c6a8e07ad2402203e274f76ce9d462ad7782380db3cb0cf3e7730a77633e0a534b50f84770d8928"}]},"1:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit USDC transfers","signature":"30440220206a52ce36fb75683481981c6f1f2e1cc405da8b7172b4fe3b465b19139bd66602200d5d2a800a253881fe4d87ebaf57fffbc7fbb8591ebe251ac69d650469b51d16"},"fields":[{"label":"From","path":"owner","signature":"3044022048b3e79d00220b5fb5908cb13264f0a10ab1faa1f9c95702c4dcb91aefa2475a02204096676422035d37f30a9fea09553d5d1751413e5a2cb60d1b9919aa33e166b1"},{"label":"Approve to spender","path":"spender","signature":"3045022100da7a47dbc3c943c29f2211e139c5dc43b6c54d79d4aec205694155a8a2bed5b902202f1a885a2a6de6b705f8cfe87d6994e470c779f8bb8e6e52166c4e41437e605f"},{"label":"Amount allowance","path":"value","signature":"3045022100fc3e850699e3abfcbca2f4258f248573b43c91b2dd8d59d423804518b2e5f79502200868300f4a75b3f77b35e7f45511fdd4e7717604d416841052b9a0a27b1087e1"},{"label":"Approval expire","path":"deadline","signature":"3045022100e809928ed622936a7a8d03141dd7b477ec92243918293e6ea48d32c0f90b70ea022054065681702e458131a18cb8e8eb588618bda83b1a24ff5bddacdfc060ce851d"}]},"1:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b":{"contractName":{"label":"List Order","signature":"3045022100cfd82c26631445df34b327b31ad55ad7f26e0480ea7838ae83274ad83b8f9cd1022044b5a3db6b6052a5b818b1bc6cb28d523115033ca7ab3c4a269ec37e3cde890f"},"fields":[{"label":"Order maker address","path":"maker","signature":"30450221008ab1ef7012cf407a80348d6be16a98d375bf959de72f260cb92520dbb30fc2ce02200d9c0e02c8375d94077ebe16c849df5745654a1c499100286201407be47688f9"},{"label":"Order make asset value","path":"makeAsset.value","signature":"3044022018c3ea3b1768f348094f151f8e28171d1325d5cc1621478b23474f4695acf2d3022040ad4bb4c8c138857e426128488ee5a3df8fa0a7cfaf58e9858765a0f72a8a02"},{"label":"Order taker address","path":"taker","signature":"30440220482e1c1439ea879f243fdd47cf043bd271c7fb73ba095463e920ab34c38076c002207c095ec3307fa3a3ebcd125238caf3f7c50d196db444559d31c79916e514f370"},{"label":"Order take asset value","path":"takeAsset.value","signature":"304402205d33c23ab575fa613d37d7fabaa719f5aa4dacf8de0f299e83dd189eeabfc31d0220535f67346b8ed7d175193929aebead42b92921465c1474f482fce88bfd00323a"},{"label":"Order start time","path":"start","signature":"3045022100c178033effb772f141b46a9d5b5bcfc48468c6e5c499d8865043535947b1bb490220687dc9018a38c62e01c91e90fecf9e18febe995267d1bea27d3368f12f04bc9b"},{"label":"Order end time","path":"end","signature":"3044022074ecdea3c58a28565af3336de33390aa7e592e5108f6d9151dd000a90a5eb60a0220163362373d11f177e41b914dc10c93b76adfa4c27f4662179329e66b32f8f139"}]},"1:0x9757f2d2b135150bbeb65308d4a91804107cd8d6:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b":{"contractName":{"label":"List Order","signature":"3045022100892ab54a425fa1306df530b5ffeab2944133f1fbc68b99b92e61abf5c5051d1002205eff72d6f2c65f7835bcb2c6593b772d0a45e152988b4379cdb52327ce5da382"},"fields":[{"label":"Order maker address","path":"maker","signature":"304402205990b238b291ad1bb3cce7d2acce868761c6a73fa79e87c05530813aac8eba5f02207408c5e30e840195677fa60d411d2c2bc76fbe15a7ad2506a4636f001708bec5"},{"label":"Order make asset value","path":"makeAsset.value","signature":"30440220646b1bd068a229a75f7f0558f03d2fbbe7dd441d318480dc8eb532c3452ed6a00220642fe4f065198bab191c682e55487cd6464a90c9527983dcd672d15a0a083d80"},{"label":"Order taker address","path":"taker","signature":"3044022014dff71fc22c0b53e918ceed99de5aa86cc49fffc22f271a9586a9db1197e413022001125d415ad2eef46353bd8e812248fbf3fc2b60fb5fc7dad3853c9d2c85c6a1"},{"label":"Order take asset value","path":"takeAsset.value","signature":"304402202416cd3b9b1b9b7fc4bd5434f0f8c54638d0f29e87f1f92de7006747f4e856aa02207afb4547d03de6247628f93c5ed49f9122e2780507bc601f5211c89c8905b93e"},{"label":"Order start time","path":"start","signature":"304502210095c5b1927e171ce8f0b74bd311cb0f66bff5e3d23a7eb52e1d6b696378defb2502204114def9ce15f2b698ea00d43bee8e8692568a6394e24c8e0b53c90c29ab7ad0"},{"label":"Order end time","path":"end","signature":"304402203f435338d8130399eaa6939c0cc8f4fc5efc92a34256ac450d6d55b0ac2e816f02204c116eb40b3c07810facd9117572147216fdb175b2ce31c6ef277501dff7f6d1"}]},"1:0xb66a603f4cfe17e3d27b87a8bfcad319856518b8:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9":{"contractName":{"label":"Lazy Mint ERC-1155","signature":"304402206bd24ac8c5cfa2b75e16ea0c315295368a7f780c4ec062555079cfe48d583a8602204300f968037f9ea84919cdc8ad3a22103b04e00b9c4dffe5c34ebf13d1b769cc"},"fields":[{"label":"Token ID","path":"tokenId","signature":"304402206e18eac55b89b17b4706547807a864f6c1b37eee09fff4ccad54e9842eb1abaf02204ef2984f87d6c0ebab26352ce82f8040aae5bd259ae55d9921d609b3936d15dc"},{"label":"Token URI","path":"tokenURI","signature":"3044022067c04bf2be50a7660b11742d10dbcc84655c22a0d359c20b2abb54a4d23f2846022030bded842ae4208854c0d11d655b234465e2c9ee9fe9b1eb5074778ddcfa9426"},{"label":"Token Supply","path":"supply","signature":"3045022100fc4ab75ab184e564ea297da785d4a749b913e58706dff4e6c7ae49f72a7e9701022067bfead2e11a323beca3821a3ba310d705ebb128f45bee1f394dcc7e60af8043"},{"label":"Creator account address","path":"creators.[].account","signature":"304402203e5e5fe4636b283df4e4d027e8ba5e43d912f53125b052e603548fff051b37d702207ceae4257ccc801de3943fb68b1a0e2af546e12d3bc74481b7695a12de7eebd2"},{"label":"Creator value (10000 = 100%)","path":"creators.[].value","signature":"3044022065a51fd2cafd0013215fb703e27052320d35951e5f9d26a3c3d03a050b7088340220193e98ad9282a96e3e7b5e6813bb5989c31cded994fed35d5383e68738905c1e"},{"label":"Royalties account address","path":"royalties.[].account","signature":"304502210092d8aa5743b9fa52cc1d5caf4f83e65cf232b02394dae8e3056d29606377caf902205119918948d39a165950efb998e19aecb3bde611065e92fd5f5c10bafaacda22"},{"label":"Royalties value (10000 = 100%)","path":"royalties.[].value","signature":"3045022100b7cc93e7abfcc00efbfeeb49cef4d2ceb5521e1c97b2bdee882e011292964be902203d7ebd7c328961e1ca66aa16e8c61aeefa3bbbcad419bc65315658cdb425e5b9"}]},"1:0xc9154424b823b10579895ccbe442d41b9abd96ed:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b":{"contractName":{"label":"Lazy Mint ERC-721","signature":"3044022001ca2f9abb569b76bfb8398ba150999d93fc6a02f5e637f4ac3a125b6c48b528022007ab8f1b776d1b2f5a0b44f90214b02f71c3535e468f03b681f133c3bc217946"},"fields":[{"label":"Token ID","path":"tokenId","signature":"3045022100e762ea781d76c81e5f3b28269e03f1cfe7e33b847dbe20a56289841579b0fb4f022033c6249fc155deb94850e6e30fd7fb854f07c63c2b8ffc8b3c7d412c01b8398d"},{"label":"Token URI","path":"tokenURI","signature":"3045022100dc369275a5b2d6a3c934221e9f7483082cd5c52bb1b41a802d260c54757cf29002206dfcd13e32357144ed68b90c2308208bfa699d95d917a97d8bf438aed08269bc"},{"label":"Creator account address","path":"creators.[].account","signature":"304502210089448beccdb19e680a7f8a6dd4f1e0dc8319b3458f0d5a491518bb97af0e1f5002200dc01550cc4d0d3398049938d2a498c142e2e82eb9086c7d6d6a8f1f90d1d25e"},{"label":"Creator value (10000 = 100%)","path":"creators.[].value","signature":"3044022026ebacc1dce44b2815c6e53d9030836a4768ba0019c4b6f9d8eb83d8699ffac3022076b9bc2f89daa7e5e21b294163e64ed25d2bdfe5f2373f6aefba4f6da1d92d3f"},{"label":"Royalties account address","path":"royalties.[].account","signature":"30440220626fdb56db8c34a282917aab1f7fddd36a060eb35f117ded7b675be946acfac002206770d35391e086e1ab31e9fd9cea07e90b09d38f0b882857e394283ecd6575a9"},{"label":"Royalties value (10000 = 100%)","path":"royalties.[].value","signature":"3045022100e22f440fe2bb06d77a0afc50366689ede59570dc91796305ea62e5ca5da5286c022074bdc3dc840c7314abcf6bbaf35fe5e20318c54a911e7508942fecd38b70db9e"}]},"1:0x72e9d9038ce484ee986fea183f8d8df93f9ada13:65b962ff5c94fe989fdc9169a5dbf3662e79747c3932616d9f0a39cc":{"contractName":{"label":"SmartCredit.io","signature":"304402200fbcc50090e799ff0ce08f08ff8085c162210bc9ac9d599aa9dfb7a3bdfd716e0220555ea5626806f7756660657459d15120dec6fc45865f64d653cf850fbbfa1068"},"fields":[{"label":"Collateral address","path":"collateralAddress","signature":"304402207545402a92f3eed973e15d3fb43107e2b241a403796189def24abbb4ab59932b02207d258e006f51f0fa9cdde54dfe7e9145619b7041dc4481e24e125c31754df0a6"},{"label":"Initial Collateral Amount","path":"initialCollateralAmount","signature":"304402206b7167d76ed863ab7d3346b0394518d1b23600aa94224c49c601264180bf5cf602207a712ca9c28e328905b9d6a29f908dd7a8ccda408c8e7c1671926ab0de5a012f"},{"label":"Loan Amount","path":"loanAmount","signature":"3045022100dd03f4bd05938c7a0f5c8a5d4ec36687179f1cc1df63149e5a144d5d54a7de65022063433c2a0103f1afbebd2bf2a9a817d608874532af4a6a23bde475ce2ced6795"},{"label":"Loan ID","path":"loanId","signature":"3045022100ba34308137ad49140a12444f123886eedcf0b56e02c84236f262278cd2de0e9002204e0e0854e50fb5eb297d53274cb4e37c25cca8782bc5b74ed7bc0190dd9777bd"},{"label":"Loan interest rate","path":"loanInterestRate","signature":"3045022100c3194f33a59b71f01f5495e90c876fabc2637cd506706c20813aec5a2f97437b02200cb59271ad955ec23c2c3bcdcad8bb073c887b4331628319d0576a6b23fdaaad"},{"label":"Load Term","path":"loanTerm","signature":"3044022029fca7f97f2a6ba63f9b90aa69fed3627d172b653cc92f58cc60fae16095c4d80220717d03ed8b35c29db91c1c7160cc4dc51b3cd78c70bbcf33238b8c78ee6c2bc7"},{"label":"Underlying Address","path":"underlyingAddress","signature":"3045022100ae88653e0cd0a991b3b85b383770b590c8df16768ae90edfdaac379bd1ccbefe02200129a19bbcfabd47a9c660d3521549e05dead453d62527294ca312ac67b14b0c"}]},"1:0x0cec1a9154ff802e7934fc916ed7ca50bde6844e:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd":{"contractName":{"label":"POOL token","signature":"3045022100cfb4916219e3694b46154274e51034ec625ca0d6473d6f092e2bade002629c8902204be001bf270bf5c1876e953476289439fc2260ff784c412002a395ea4339858d"},"fields":[{"label":"Delegatee","path":"delegatee","signature":"304402207860961035527e594b1ff79e81bdb65fa46787448952110edaf251d56f9f286002201b4830a368cc521e1cb73ed22e5ddb4a926d5d2acaf6d509f35c7fde009d223d"},{"label":"Nonce","path":"nonce","signature":"304402207049e4d2ec11fea46e4f306a65d90a4ee638e8eafdf5bb7e54661275d4899bca0220757516a4ac3098cfdea23e706f84c0c49be17b8bae343bce14cdd9f6c6ff9787"},{"label":"Expiry","path":"expiry","signature":"304402201d635d39c2f3be12d24a7af1e8d7153c95f9c2afbb756c9b9762cfb89cc606d6022006590a2f50273ce004aba41ee48bf35a0ae7ba80e08b0f9b4cce9cc281df60b5"}]},"1:0x1f9840a85d5af5bf1d1762f925bdaddc4201f984:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd":{"contractName":{"label":"UNI token","signature":"30450221009599eb72fde2d45adc2e0beadf055d1f5e8f65090e153ddb6fb02a7343c96268022015e9dc0eb7e7d733edae86bfa10fad3ac3ec38c23b3a9ec67fc82f53c6eaf5ba"},"fields":[{"label":"Delegatee","path":"delegatee","signature":"304402200a22c41784587dfc574c2d12346f16fc5669e3e89d118d021eee3e688c6a3ba10220569497a6447c74db8eac7e7c62ece12b2e604cb5fb0cc7f1ae51a005a9d8c7d9"},{"label":"Nonce","path":"nonce","signature":"304402203a967682891c28f9a24c824326fd48624b24204ff7438a97968fedf2e67ae38b0220066a33eee179bee5b45cef00de03039db1e80ec0590b30057258464ccf5b4b23"},{"label":"Expiry","path":"expiry","signature":"3045022100fb2f59ec83f2a962b990dac7a4823a619ee3a67b72e29bab86e317d36bdbe665022052c113fd0b7e45cee1a428c838be4d38d7110e3eac1f45064c74b721b8b67974"}]},"1:0x323a76393544d5ecca80cd6ef2a560c6a395b7e3:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e":{"contractName":{"label":"ENS Governor","signature":"3045022100e965ef559df040f2880366aa603d75e610261946912a663a5b33e17708da817102202b4d6130c5ba34195663877cf1d9679b811acf9048b9ed8625ed5c2ea65db40d"},"fields":[{"label":"Proposal id","path":"proposalId","signature":"30440220644deea26170aa4a8057c70f769d35ab36522ccb0f6f85564450d46c11061c370220687d778df87c7dff5e3ad58a9e36952a9904e6389c41f4f8e8044c679a224847"},{"label":"Support","path":"support","signature":"3045022100c5109877ecea9a94096b612925e090d1aea128609d7ec466ec589daa3dc2f1e702206b7c8eec5e9351539fc164f576ee4ace65b776c051e0efdad21d51e42447dc87"}]},"1:0x408ed6354d4973f66138c91495f2f2fcbd8724c3:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7":{"contractName":{"label":"Uniswap Governor","signature":"3044022046d278627a7b68020ecda5e20d249bd9d141a404267acb8dec4726f30de5694e022073397f8438fad45b78813a7161eea60dbaaa1b421beea742efc8c07acb63fa63"},"fields":[{"label":"Proposal id","path":"proposalId","signature":"304402205a033bfcd10718388897e99752081c0a4133b3c959b7b75a3568d585041e849a02205e2c1fb537fc0ff8e6b68a636215fbb4741d3df7c8202a83622063c77bc3e587"},{"label":"Support","path":"support","signature":"304402205894cbf601c96ca164ae7e5d0aab17fbbcec4aaa1d032274800d5a46eba8184002204c195d6936a05b162d5bba655f726f08337e23e10bda06b2f0a3f052522bdfbf"}]},"1:0xb3a87172f555ae2a2ab79be60b336d2f7d0187f0:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7":{"contractName":{"label":"Hop Governor","signature":"3045022100f708c71ae38defcaa58de06c664d79f18651aa3df1ecefeb18012a81897c70a10220587d6e2590ab6dfc6e6a563a2460619cd49d73dbe8bef4ed20b6a50f47068c79"},"fields":[{"label":"Proposal id","path":"proposalId","signature":"30440221008a361a02a91db3ec96eebea92c3228c620d21f8004813e35f3b99872da81816e021f27f972bb44cb1a1fa033be2398c80c6d1b4890f0b81d022ef4bf346d61af25"},{"label":"Support","path":"support","signature":"3044022053b84095ce71d0e6ab15af8d979c46dc47ff6a169a88bdf3eab573892785122c02201c6c9d5570a581e42c1341f36edcbbaa173d701e6b93f424493125cc96e83d18"}]},"1:0xc18360217d8f7ab5e7c516566761ea12ce7f9d72:2c3e6b3e91e39ef9bb3c1b1cd2b4d8da76bf433179c8042962671278":{"contractName":{"label":"ENS token","signature":"304402205b42ed5c642f2d98115b1ebdc98fcdd63ee259b14b896af1c1e78c8df480141c0220679cf0ef775ea5543f65f2249df9de807b02c17aa507d9e89dedde00b2852320"},"fields":[{"label":"Delegatee","path":"delegatee","signature":"304402202984c1b8b2c2be40fbb0b197b8666f309d16c10d4a737befcafa5887904462240220177c3d4ea462a56880e46e08ee5f8e8f0eafd87e97d287dee353aa21fb4db8ad"},{"label":"Nonce","path":"nonce","signature":"3044022009e1668b67786c2258d75f93297be950f3812ae757068c5407915fddea878c5c022066b9ef8571d300abee4d18d4cd0d59a5b2cd18bf78f3db80b6d4183e284e2ad2"},{"label":"Expiry","path":"expiry","signature":"3044022070e6d8b8085472782a55f11ebcf9492ecf3a9eb423b37dc6b79ae17588e7da4402200e610027d5fd12d3b32df3ff7d951afed068bc26fb56e541b97a0622555a46ff"}]},"1:0xc5102fe9359fd9a28f877a67e36b0f050d81a3cc:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd":{"contractName":{"label":"HOP token","signature":"3044022072ff099831505d99d7c73d930e720d0a3e28ae8932229289c1f1acc9b92190a9022049d78cce53e621f91cd7a11a1d6ec118b9f0fef6e16059e8f856fdfea8133f3d"},"fields":[{"label":"Delegatee","path":"delegatee","signature":"30450221008418fa1807d28769b22f0243f9e547905cfdfd66b19dca60eb2f3778149e8d3c022064c06eda3c8cd943486f52c064a91e0078a3be9777143a5b5925506554f20c9e"},{"label":"Nonce","path":"nonce","signature":"304402201de5084ebad45b344cacfa987c7b7fedcd438898c2cfeaed83921a9f66c78f7b02201bfe268f95c9d75484117d1439b2e968a5c9894a24c7fd751755a5b5c0da78e9"},{"label":"Expiry","path":"expiry","signature":"304402205d3f2a2d51af5696c6b9905cb6f020fb450e24e2e4b4cb7a15fe1a622267fba202207cb11decd982dab1bd3322311a16264e54e00cc365cbd98b490750a324c0c30b"}]},"1:0xdbd27635a534a3d3169ef0498beb56fb9c937489:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7":{"contractName":{"label":"Gitcoin Governor","signature":"3044022010877c4c71832b3b1e52742ef0702837c162751458cfed684db4f9bf3dd9720f0220650921e5b88bdd0a9626ca7c86eed40c2b3f2e49e024f6cb643a7833367220fb"},"fields":[{"label":"Proposal id","path":"proposalId","signature":"3045022100b608eb5bb848602950e6d1e0bcfc39bb07f465e110c2e6a1dfb0d0423c300bdf022079a4173b66a72e21c0e46e79a5a9a4dfb71af8dcfa181669c7a555733c0f9528"},{"label":"Support","path":"support","signature":"3045022100dfc160c48ba326093acb0a5674d2083c60a3f6db68605e4ddb62b179fd4aada0022070e0d09aac5335705a18abd5e287e8d0ec8ad06e2a8dfd4b24ec2c615407aa69"}]},"1:0xde30da39c46104798bb5aa3fe8b9e0e1f348163f:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd":{"contractName":{"label":"GTK token","signature":"304402205df7c1169cecd36740080c772349d6665bde2a640ba4c2abbe1db07d575ccc0f02204e0be7975f8053e091f79019301e4202b97e611c4a2404e24c462afa3df7257c"},"fields":[{"label":"Delegatee","path":"delegatee","signature":"3045022100c8221f284e448a3c344036f3252eab8fb7e383a25782d38e579cc50e2e996f480220594f34a6c5a86948536be2d0c92315fbe8f812704ce96c405dd223bba18e82f9"},{"label":"Nonce","path":"nonce","signature":"304402204b28da4752953b61b09ba02640eb88d11f906502088ac8460b1764b820edff1b02204e6c5e6a5dfe32658e17f1365ee7d2344aff54140577a5ef1a3f55631c3af576"},{"label":"Expiry","path":"expiry","signature":"304402200c3083a36deb4ae67a6adba07622cb382846e5f61bbc9a24d2d5d2233546083e0220693029f53ea4d6f862e86c0b6b86df7bdcecf9eefcafe0c33671b300b5d64506"}]},"1:0xed8bdb5895b8b7f9fdb3c087628fd8410e853d48:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7":{"contractName":{"label":"Hop Governor","signature":"3045022100e09179a98da340acd99714b47febef674162a2114dccd1e39b11b49b4e1609c5022012a31e4db15edec68ccc64b17ee8f5e7e693fc32c721ffa5169a89243f5d5069"},"fields":[{"label":"Proposal id","path":"proposalId","signature":"3044022065b5f880626a3f9ebf117edfbc5f489d4fb80b9cd53674fefa7632d5c8a0911f022018dcac007b98e8b996b21ca3ab478855e040537beca824a146bec1ea51ed751b"},{"label":"Support","path":"support","signature":"3045022100aed88d7b174625aa5b4a84a5054ed0ae28a2a768eded543130ca80e05fd2234d02204343eb88dd232c5317f73d889554728802f4953ce0c2e794107a8a9c604767ca"}]},"1:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3045022100e3c597d13d28a87a88b0239404c668373cf5063362f2a81d09eed4582941dfe802207669aabb504fd5b95b2734057f6b8bbf51f14a69a5f9bdf658a5952cefbf44d3"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"3045022100c98bae217208d9ba8e3649163d8ee9ed2f69518b4ab7204dba15eda4b3ff32aa02205f03f9a6fac8ae4eceb6b61703bfd7f27f58a83bf21b2f815aec2ad766ba7009"},{"label":"Amount allowance","path":"details.amount","signature":"3045022100bb9bb0c71678a39ba8ed764a67bae0998b992850b7dd1dfefc2fbb7cf6036b170220041568fbd2f58b4cca4012a48ab3b4ddab54fbbc5280fe854ec92ca92dcd9ded"},{"label":"Approve to spender","path":"spender","signature":"3044022033e5713d9cb9bc375b56a9fb53b736c81ea3c4ac5cfb2d3ca7f8b8f0558fe2430220543ca4fef6d6f725f29e343f167fe9dd582aa856ecb5797259050eb990a1befb"},{"label":"Approval expire","path":"details.expiration","signature":"304502210094deb9cc390f9a507ace0c3b32a33c1a3388960f673e8f4fe019b203c3c4918902206363885ee3b37fe441b50a47de18ae2a4feddf001454dbb93a3800565cc11fa9"}]},"1:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3044022052d2511ac923e69b1fb7ce984af1b3ac5dbb6a246d0d13eaf48bb742e46f70d0022075cd607e944328fe34cd20b83be1f29c7d17ff69d6bba3767d10784f68963c47"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3044022059c5ee5b2a73eb5fd8d3559da1d062b7b2487afa8ad7a60e37e61018a03d2bf10220009e228650ddf2355066e14fca9e28cbca3db4f9af69ddd2a446709cdced2660"},{"label":"Amount allowance","path":"permitted.token","signature":"3045022100b77d2c9b4fbe4b04408ebec9a479a75260ab290462de557dc9340528c2115c9702201533234e8bca9ce16baf69e67ed69293ba09d003bf515ffeec9ce934784baa83"},{"label":"Amount allowance","path":"permitted.amount","signature":"304402202ef4a78bb3606a008c2183d22fe28b7dd81eddb09d645a6e153377ff5856244c022003fd992a719826e286adc3f6fc7fd1567305a0dbfc1524afb10330099dc986c5"},{"label":"Send","path":"witness.inputToken","signature":"304402204a889814075abb0af60bfa953b82eaab7f8311381465f239f85b20cc16fd25f2022036252fa9bd004876955f22a24203ec8b07ec2099456690a1383aed4692fb2c73"},{"label":"Send","path":"witness.inputAmount","signature":"304402205a7af025781c1f2134b8f936b0a4a33f0f4f818302d0693ab66e3b5f80fa8352022011c5f68f8d4f688a09b611b8a91c70fcafda1443b5bb833a3b1f3af5ff00ac3c"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100d321fe73987030ee4d72468cafe21845fb97b08dbc7a9b14e3421b050a5c4b810220755232e20dd1684e3a70964f838d7cf2ff458020eaef2736ed0febdecc4a4a10"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"304502210097a2271a3d7d20cd585511473d552b8a84c2b6128bbea3118ebfa1efd102f943022077cb0dce5ba07c69dc44795e2e339aee83a88616b80288172916d686664fd827"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022024f5c03f820b9c52aee938ffe7a5dbd882f45f0826307baeb81af8c6aa0ec07a0220464f90ced2bde27dc8c9cf1eea43ed23553213a784a7ad56cfdf9c92e1902846"},{"label":"Approval expire","path":"deadline","signature":"3044022030cac5a085e8b3685909687a9f1cab44717453429b73d4dbdce4a31fdf969883022056b1949c9a730caf1344841a96fe48ca65dc590da427f44dc9af2a29491dc819"}]},"1:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"304402204571e829b58a2c3d66fdaabb99bcc1b8ecab4941a1f3374a1b29a7c41d5165270220573c71719815aaf0eed481d128cb2a7b77a20de261771149c8b427690a2cd19a"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304302203b64f5975002aeb73db0a392fce0a706bf1a4f7aa062649c685a601e701c5c50021f3631a4a6213f01320ece3576b91b2f244bb127c79f1cb7c1a64eb25a9db377"},{"label":"Approve amount","path":"permitted.token","signature":"3044022028fbb411aafaa7e1a9e9feef8fdadc5a2cded97931f95657e2ce3e2cc52e42cb022011139d7b8f986ef854c067a531c8f180161ec890a7798c9f6108d0f671bdec96"},{"label":"Approve amount","path":"permitted.amount","signature":"304402201eb248f72afa3820c97f4c7252d59e262942b6515af65b72fbe18db658a37b65022000feb48ebf0387a4db6740f81ba10c63e3dfe76aa956a45abefdcb2f9ff3eb98"},{"label":"To swap","path":"witness.inputToken","signature":"30450221009969f0557702433262d12ae6d6b390f4534852e24fd47def97ed9e0977187f7d022006265aab295f3aa5fa10a4ed5f9dc806b20e583a9936f6d30cc60ea97ebb65d4"},{"label":"To swap","path":"witness.inputStartAmount","signature":"3044022010782ddf795c6a3037dd269151a8dff9617291f33b433a41dca3eae5f9eaead1022062444f2d2270f69c0885b6790b26e5fb0035af35213daff30b8d9d34d13ac48d"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022026ad09b7426cb6990ac9814f57f135f9fa34515f4fbbfae23b27973f8acab2c202203f9720e91c8837e04b18431b7bdcd57acc1ccd7b7c62442f0feb791a1dda62eb"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3044022016b38151bd2469157548fb0b681d6e428a527c88f4b36fb862b7623a6b40dbb702201143008909039c6c393e49a99b6efe002b55485be80e663e15aa39513cd074a6"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100c6fdae9d879d2c20c3b7a66f44b2e60d6e781f0b0da2c21c5ca612b0a34ac3860220282196259c1d0bad4695f77a653ba03704785ad7a4d6007ea3055c5c4084a8d5"},{"label":"Approval expire","path":"deadline","signature":"3044022057f7d23d5af40bf3a603f5651282ea39103133118c71199781d3e5879d8ef09d0220488f1b89303b21e25f6e5f66a0de31bf34ed990ea9ad4003958f555d1f4834a1"}]},"1:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3045022100ecc369027c550864d7e27b14045a83b1fb8bd5f617e91fc7cce67fdbcfe23d0102207807e1041516d9af307285b3693c0455e97694463c7ef465c021b5e123e2f9b2"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3044022029821cabe9b7b8ad34e577763e3b3b73e1d46d7745f176c0b197d45ca5120a3902203f6e4d8fb46b08b0f29aca1d7a843384f67f9543c0d6463bd506ed68830975cc"},{"label":"Approve amount","path":"permitted.token","signature":"3045022100ed674ee1a345ea8576b953083dc8c75a2366271a12346dbaf1cd64c3131b02c602200403e9026d6939cd15b4c18de15603825540890050b66f88da924d9c57f672f9"},{"label":"Approve amount","path":"permitted.amount","signature":"3045022100ec94de446b5595e40cc7800452a5ef8fffcaf9986153d6296960ae6b9c50614e022015d8cd577c84cfbd27aaa35b532fd121b7ffbc3ef7a90af80804a16337d22c05"},{"label":"Spend max","path":"witness.inputToken","signature":"304402207787a94a07b570758d8ba07f5c41d5a9a1b3eeb0261cba9407dc0df7e6907a8f02206a5802c457a6f4f6a5c9e85ccfd435d79d7e1148112265c1f7767065dbc41f8c"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"304402204b56e389bcd0d843ac36454d6e698859123624b326f2b4bf95a1f49cbf937df1022064068401dda39780b3617fecbf84eb25ebf07da7c356d7a285963cc98ceadb62"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"30440220760c804178f8c1a084d4af7a91e77efd62eddf8df8c7d0aa2dff467330bb2e50022038f6a01b11e2efb2a4fffc8b9cb6adc8c1514e3cb37e1316a8f26f8d67bc95af"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3044022070e61333c1124c089407305d8e421506543b630cbea8bf51bb470639e99f788502202ad716dbe7b6bb19c7f13853b0808d98c577b835428e4bd69c076982f7af3f01"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"30440220794c4834a6ae2591cf29b65951d07112bfc4644f2a1d287dcf918f7a890b689b0220259892526b885585d613996d8e5caae98dc25e540f46857ce68009e02d419956"},{"label":"Approval expire","path":"deadline","signature":"304402204cd2b4a346f9c1e214768075b97b6ed84acae86f45e2296f2fa35515eeb4496202203f9013404c89d3988f98340b7c53feab587a0c85f9aa783159e3c05a2c6e16fe"}]},"11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"304402206461309dbca9e52a41982a7e552c82bc4c9af6bfaf86eb80075dc6b1ed29280202203bf174d6746f7a0d9c9cb4a1f3c265505168e77a11d6520fc48b564505913590"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"3045022100b0c589164391fec444b7fd850d2a3aaa49ba812dccac35640851a6961e4cfb41022032395cd70225daf677e38ebf61eb360e5ce93cd9389e73ca5c4e7476122a2c18"},{"label":"Amount allowance","path":"details.amount","signature":"3045022100f95d3b874e7ec4c3bb3d9fcc95bd1f174c8d19936f6fa3ec4016d1fe62c11225022037f7ecafa98bc14385354bc8abc93f109e06f88b1ec84998dce6e6d6ef099505"},{"label":"Approve to spender","path":"spender","signature":"3045022100f68b77f9abab174444dd6591cb0b9d27cea7f9ab6b505e18845021632cdfe428022077dd13be21f966ffa667b8d183d9b73b2862948ecaf07758e6296c3a91d19c8c"},{"label":"Approval expire","path":"details.expiration","signature":"30440220758077438cfb447d21774e44b53d90ef4e9c2a9c85583aaae02f2b77f37659280220504e7008c6c729bad72bb8c5d9769a9d913c038cf36bee1309fc56116337b29f"}]},"11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100a295338f63ca379908708d63cb7d42b09ba81deaa7d9c3547018aaaf25a3d06c0220309fc1107c3e64054c70b34bc18f93829378810884dc7b68497fa7a6fa4924df"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304402205b25d1cb7ef6bbb8f6e02879e09117d0b94d527d365574f063dcad1fbd2d31ef0220095b3558bd1950abbdd6b6581a1920327382fe915b2e5a26c471412b670b4560"},{"label":"Amount allowance","path":"permitted.token","signature":"3045022100d30947f51d252ff81d6df67273324c9beb899a210bcd4938b2afdef01bccd63c02205525e11b1edc17cde2657708c642976223cdebe96a519059e583c3d52e2fe185"},{"label":"Amount allowance","path":"permitted.amount","signature":"3045022100e8ba89f6fc3ab418ea417ca412d1ca6fa2b0c7e8c025b657ffcacd4eee2a97850220584d307fa34074f281ce25b2ab90316ae555d63159eff4379f4ce4927560279a"},{"label":"To swap","path":"witness.inputToken","signature":"3045022100a18748b2ea36741801fa9d1b8485c86587e44a0e6410e20eca60cde12813864402202dbf6e4f7b0caae43739f89c741412acf2ecf5619ae69bba423214f9ded5ae43"},{"label":"To swap","path":"witness.inputAmount","signature":"304402203a72fe6e5ac3854f4ff92d9e12e96ee64edc2aac39083a8a2f169badbd11996f02205f2d73771db877787b20368e267a258f29a1f90526c45c5326c88e64c924ba72"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100e8e4429d8ac6399463a70723bc8fe6ee781744051dc90cc7a219d7760c8c42c1022068dc3fc2e0931a72cd4aeacfcf05069c490958ffd8e01445d6dbe777912f8a81"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"30450221008f6e5cf2998edb97928157e4ee6f115735048b4443cb81d663c01d122b385d210220556955bea75a72150add3794231b9d2c09f755e7ca24f3b56b274f90b1986945"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022007fb9c8cc0284496623ac2addf6965f0d3590f6c665750ecc70da2e7d10e3781022021754691d2b82526303d862ac93c6bf430c7ed0de4120d6686651569e0d1949e"},{"label":"Approval expire","path":"deadline","signature":"3045022100ab60ef76e789c924cd522ff99b48852c9185db44fddf3c4817acae9430ca245502202636c7c9835eaec17e39ef11fc132853a8b2800b48225a06e47b77bde065d6ec"}]},"11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3044022063612f2a7eeb596c7cf2342ec096a375b57f199eca9129e25e858049a18d36d9022078780da67893f8cb573a9ae13b06fae73725007ebad1ff8401d5fdb35111d942"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100ba696f054c313316a45f7f7dcc32ee194cd540ba7dda0371923330342f639198022045a95216bbe7f6849de1f9dd239148a1200c3ee1f85680ef9c3c5cbc2f0d0cdc"},{"label":"Amount allowance","path":"permitted.token","signature":"304502210085d1838d8b2a010fe12da82eafd954d6a630218ef1bc56c9a62f410e1a7b58d0022054105e33e15cc6aa42b6241698e6f5d98453517002a7f478331ee69e42f7eac1"},{"label":"Amount allowance","path":"permitted.amount","signature":"3044022021716dd7a5bade40e886760a2ad868e2078bb09f09923b01a7320a0ab9630fe602201e6eb774c26ab374c09b4dfb03693d8dfd1fed7ffcb940e208df8271bed10c20"},{"label":"To swap","path":"witness.inputToken","signature":"304402203af2c86db8d55c4ad7acb531260a73e526c451c7860cbc8874ebf7754cbc50df022072bedc43dbef6be5354ce6f907536a015431782e5c655200c57861125a6688c0"},{"label":"To swap","path":"witness.inputStartAmount","signature":"3045022100f62eed388a9debe6cc702e1ab70e1ac67b6a2625c037cec296d5ada7c6afb7d902205c0e40b074f4abbbe5a18d79eea412564bf80d934410bbc88932321e04a61720"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402207fa6c9184be3a43376dab2dbbea9a4d9bf122204d36952a674f12f2d706c055f02203782f7ac3835e2b27d79ffa86bd9d9fcc74527cd336356f690e3ec6e1f7a41cc"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100db97a1fa941cdc11f36e3c4f52a38a1d1356b05ad54d760f6ec9a6b0d7e1333302207c5a3082ab5efe025b53156bfe331284472f846d6bdf6bef266ffdd8c09fd2e2"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e2ba5f96a043ae4aac90cedf218743089bb91561050987cc58caba9698a439ab022073a4165b051af7b5c554dbb179a66a2bf51fca69b7f08dc59797d1a49c4ba0c6"},{"label":"Approval expire","path":"deadline","signature":"3045022100e77c1f64268d6b8a30bb1f5696611f3007f59b486c9b33e3286a50a65248286b0220299a17c19f9447ed361fafd01605600fe9653f63ca7f16288342d4ab85f22304"}]},"11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"30440220086d1e2bcccc09cef4281b7768b18ef06e90c10f70137b8f8bc4aa3b87705abc022001cff702dd8732f6efd68c24b4f75d6f51a6070064aafb3ae3e497dcdedce5a6"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304502210082d054fe78c4a8c696b8a3304a3f77fefa498c0e28d8dc3ae07dc32917b1bc27022072dd8a83defe29060404e216cce22c0df554962b41d643ff5348134ce6e66811"},{"label":"Amount allowance","path":"permitted.token","signature":"3045022100ba4e0d3801ee7d6f0c31739f6d91f0f3203eb1e046477e74655ea7ff0f9b051f0220205683255968f7c18137492044006d6df6deca76656b20d05d611681140bb213"},{"label":"Amount allowance","path":"permitted.amount","signature":"3045022100f4b6a6fd84f9f6f9c3add959a5855f58e294b39dfc6e0acbe218a5f35f67583902202f1564d9175e125fd0ec139ba00222a896c5035670e8be472e6617b5bd138c61"},{"label":"Spend max","path":"witness.inputToken","signature":"3044022034649ae7b3482e7eeb42546093598f79fa1043e23d73f88df5c9d51626a8b75702207d811ba7a3f823e9f07f1e0acf15936cb7e34b69d77bb2e70fbc9e71f8afa436"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"3045022100a1318c352c41498114a8e280f112a75a4b0193e4abba43047eb821a42939a4cf02202eacc071910fc9b37f5559f9f5520cf828e8a39e68c467a9e0e5a7a98e528931"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022045d7133d3f02e471bb17dba73dcfc0e474f9d35f489f41743d5922cfbfa1d8190220261ebfa97d11ecd8a712a4d027ec8602cb3fec902219eb02d15a978d38c60bd3"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100a79b22e04c565e1772cab5838f0d43ec4fe780b0ece6e3b8179acd226ea23d0f02205dd2aa9bb775a54fb1369691f520f02364213a4b83f6a11b74a570feb6e52e8f"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402207b233cee21d578b71199b88abd481759f9432aaa4e8bff82b95571662810ede402201f80c06b23b4188e5d14a78a27f95a659ab52c58c3571d7b74321c2e579fa09b"},{"label":"Approval expire","path":"deadline","signature":"3045022100ae449947ad952a7908053311f335b11dae3175974a8ef28400343b0e9df34d3b022063849be2d8d4cfb342d602b7078d8681bbda16e430bcd04ee531a85c39ea3186"}]},"250:0x6626c47c00f1d87902fc13eecfac3ed06d5e8d8a:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Wootrade Network transfers","signature":"30450221008cc1354ce071cf6fca73c04ac748e19c8f38059890ca8edd24997fc8eee0d421022075a65c4313296d58b394db560977203f92c4d3257a446b883707857baa701ce0"},"fields":[{"label":"From","path":"owner","signature":"3044022009821ff0b77c78535056f438d07921ce0dbd7fec6803d5d03ee4b01734353f7702207f8217ca8b546664e16641b1ecd2938ce7c13b2479bedd177cbac01ea726ac35"},{"label":"Approve to spender","path":"spender","signature":"3045022100e05871b3c8ea11e281cf51c4a92cfd3d011895d267fe45ad5bae990eb4f6eba902201a3ec731f73bb832b0f4f6a2064736b7665f962b79e78f8f418455653361ead6"},{"label":"Amount allowance","path":"value","signature":"3045022100c0074e8a8faeaa4ee5246c4e33205c4348b1ed41bb66b1c3e065672c26e3c0850220596bad33f89492ae4117691bb70ea3ad71feb75ad363f207a8cd258b0e013eda"},{"label":"Approval expire","path":"deadline","signature":"304402200164c57cf66a929ff53553cecb1ec863027cc1a3527ea5dee45d6b5d8a6c05fb02203baaa316de65ca96652427ba82f74b3d91412e46f7febfd12a21cbc34e0bd04b"}]},"250:0xfb98b335551a418cd0737375a2ea0ded62ea213b:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit miMATIC transfers","signature":"30440220474c475b4d9801f530cec16033b33931942e10e0e6545815887a57ca063a658d02200c5d6424af0cdf3ac6d955306012e3d993d92e0d46ab82a3a20826ab8124a701"},"fields":[{"label":"From","path":"owner","signature":"3045022100d39fb35bcfa51b98602bf4a9c22488fda16b71b5bf65ab813d40c8b0c88be6ee0220034fd5b163764ca381a1380893acb6f20dbda5bcaf39577089ca2ed13df6ea32"},{"label":"Approve to spender","path":"spender","signature":"3044022011499af7bcdcde93c2b01cf992ac4e9b4b27eab58c19880e9ecccdb7ad4783b802207a2577e336ce3bc7f88644a88e7cee2488607f923b36deb2ad3bc23dadc110c8"},{"label":"Amount allowance","path":"value","signature":"304502210086cce3cdf178ae4ba2182822914610eacee96665af8fc87b4588c5067672483402201b5b1080b0a13ccb2a1c0f10cac2992b86504a27e744896a4092bc1ff3a83b07"},{"label":"Approval expire","path":"deadline","signature":"30440220179cabc0034bb1343aa8bb04878517ad2d5468194a9994f40ddfbf57ee7afbdf022039fd330441e62543094b2756b8b87912b09fb8ac4fe751864f0508a498507a49"}]},"10:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c":{"contractName":{"label":"1inch Order","signature":"304402206cedf6d4feb10bd266dcdedb134bfe41bc915a7523af8afea57577115bf6e00e022053d8d852c11d3cd7ac72f8628dbd81176d7d3f3b94022890db40f2bdc623c33e"},"fields":[{"label":"From","path":"maker","signature":"3045022100f73875d13abd7e873e8efb7286e4a6f03d587b62378e4bc9b99f0ab7cf12c61502201f0f83bfe5d3ec2074bab7090869adeb28a4b8ca1708edeaca2ee86917fd1e7c"},{"label":"Send","path":"makerAsset","signature":"30440220589746ecc3b02348741b7b4ebe46c0b7b3464a2628a18b47b965f10030b80a7202200c8ff1f1946d47d0a2401c1e73c589f99e4b2cadb312abea268ab27da6127c09"},{"label":"Send","path":"makingAmount","signature":"304402201a3dc636e6f77dee381997bf763765a3db4be417d74ae6d3cd92e58b638b2629022075ce2812d5baec45f9b638279a62a290dfc2e9c70e0f07d56d45051f38728d45"},{"label":"Receive minimum","path":"takerAsset","signature":"30440220464b8c5a50346b52bda483c96da5413aa030d1c4421fa12d800637ac8674f99a02206f9050b5b8890618062e44a80c1adb61b1b9eb4704c7598193d8902fe85d7bad"},{"label":"Receive minimum","path":"takingAmount","signature":"30440220279a07578078a32d44b8d72eed74cdbf1f36703f1dbecb12253650aa85409bb602200d5f18bed1334b0eb21bc9240a70f48b719d428ef3cface7b8af06830dda5de1"},{"label":"To","path":"receiver","signature":"304402201b262b0175a6f4f614087f27f3470a4864063109f98ff378252e6b3e24c10cc8022032864a549b280ee714e5cdda0c82ed3be1b543f80dfc3482d7ea6f935e4e97b7"}]},"10:0x11431a89893025d2a48dca4eddc396f8c8117187:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337":{"contractName":{"label":"1inch Order","signature":"304402201f04375e9e11c524b30bb0ee376da39b8a3154554c23596381f475fde0d98ecc022003b62ea220df2d9f142f7ed1833027e62c3ae792daf763977ab552f9a897b7e6"},"fields":[{"label":"From","path":"maker","signature":"304402201e7b6591a30d29b73962b253c14ef29237776c7c31c45e628fc0c0c337bd2d85022038742407431502920c210039681c983fd5136c66f7441e60d33e1323a401b672"},{"label":"Send","path":"makerAsset","signature":"3045022100ce131085c5b7c48609feedf3f53fc58f80623050da851eb07f69cc1c518b21c002204e94f1b0ffc08044776ba684346d2ed0ca3381294eb309c51c4a89c2bfeb34a1"},{"label":"Send","path":"makingAmount","signature":"3045022100dae19e5048d68af80b795c9c8d7dcaae40cb1129d9f1208e8a544c3409ba318202201b3f1202d90c014eeef5f5a72bdfad5dd048bd5a045cf59a2c8f3b782fefc38f"},{"label":"Receive minimum","path":"takerAsset","signature":"3045022100ad118c6998aae25ffeb497a3bbcbe587b17d8c3340b45b88e8f57439da96f89f02202d91da60ded4ab977eb3d8c4c8ad4daff6a8eb972c61dc5a549e77a1be692c9b"},{"label":"Receive minimum","path":"takingAmount","signature":"3044022047fc8ebbd31ced62a7ccee4a82a9dce13cecd9a8d95e547fd8fe2deba8a51be202206b4a3d28348b799125bf7329aa7863e2e16404af18dcee02fb882abd51079ff8"},{"label":"To","path":"receiver","signature":"3045022100b100b3d1f922e40319ad9025bce6c60f4393e7651dc3ad3e631e7f53a818b57f022023a50bf850381f9c21bf28b2364b8c8c1e18e90a7cee46a493b46d493796b06a"}]},"10:0x11431a89893025d2a48dca4eddc396f8c8117187:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a":{"contractName":{"label":"1inch Order","signature":"304402204313086063aacc52b9ae3b3ea026e0bb927634dde0d381a1b679789ce5341aa4022000bad10cd082f96999c05eabda4fc3fc3348c8b8a3ff3960078654f26c4fd28a"},"fields":[{"label":"From","path":"maker","signature":"3044022059b5e764e094ebc42cd2acb05a5e6cb86d034cb245e7f3f41c39cc01e33fb0fb02204e0b4899a3685ab3b0e8e47378d3ddeee18f0fe6ea614eb43bfd8288a884b0b0"},{"label":"Send","path":"makerAsset","signature":"30450221009ab45ae04b528bd0571356e6b7fae6d82cda10a66b8d358b907ccc335a140a400220503ee824016fe32e5fbfceb80c37c93da03139721931e5aee2fdcb0f423cd9b4"},{"label":"Send","path":"makingAmount","signature":"3045022100ec81b8819b69107962d71efec8dd11d4c3f64d9cb7f35c151d6bec3abfa7ac60022063096fce59785822f99a8beb9c1c0c7974d859379720557c725391b3e5f6c74b"},{"label":"Receive minimum","path":"takerAsset","signature":"3045022100fb376ff6e22bb4bafc500c7183d2537f54e59e881e73888b273473c22470a0d10220081e92b88d5873229b0adc186c892e8103a83789c50d1c2c6f9c9b9122458307"},{"label":"Receive minimum","path":"takingAmount","signature":"3045022100cd7e4468fb1350ed6d6b8c7c91c61cd933aa7bf3df8dcf48226d49685e4d2efe022056f4bf6218b95b707ea26af1795b614f58c80c958e1c62e4d4bf83663b55a0ca"},{"label":"To","path":"receiver","signature":"3044022026d8378c54aad02a863f9ed4ce8eaf92c62027e9353d47dd11b34ac06f0e27930220374c5f31be01e8a68a71ffb0f61537912f7f1c3f9e117c8b3a2935b6b3f92d2c"}]},"10:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3":{"contractName":{"label":"AugustusRFQ ERC20 order","signature":"3045022100d4bcbf1df97f94d85402caee1799badf5fd6dfd9926981c389436d306dbda5c2022019ad7fe4ca5b2c8e63fd51bf70437b786e0b1cc2c0f3070e3cfdf70e75d6bbdf"},"fields":[{"label":"Nonce and metadata","path":"nonceAndMeta","signature":"3044022009e356dfa8f01c37d5fbcb2ba06e72a2a0ffeb3251055f3c686a0244401aa7e702207e65bafdb36f491931261c08fd583f329c2ea903de28327bfb069e1fe7ab5471"},{"label":"Expiration time","path":"expiry","signature":"3044022025dfd47b46b43125781d1e4b63161eea0eeeaef93af87e95162b2601516cdbe5022060156847137356e6ff66ef5a5d72ce232ffac323be43e71cd2ccc410b55ec047"},{"label":"Maker asset address","path":"makerAsset","signature":"3045022100e2ffc41ce9f722d7381689bd9ca2d0bd4598fdd543e7529d7f0bf2ae28abb3da02206a43996780b13ff0fbf346d7cd5520c759abf58461c42b7bea51d5b6032eb946"},{"label":"Taker asset address","path":"takerAsset","signature":"304502210080af3a8d3c3e683a503975519535ee054af035a7ba136f2e981b01d7c6dc518b022012ca47f1301c7c439180c29e13bae36cacc03bb1c1b9ba8a505b9d035660aa79"},{"label":"Maker address","path":"maker","signature":"304402203600b6973b833d904521bde12b73f52a1f1eb71b45a0174e1e579b33db55d55e02201daac27bb0e1d278dd34fac1be2205f38888c829fba922f7e3f48347e0a98b1a"},{"label":"Taker address","path":"taker","signature":"3045022100e6937b6f434efccde4c4ddb2fa2c577fb9f4fba61bf2fdda3bb27b0b49e7274102205fb3e281767d845b230633092cd17e6b5ab928e341a588d79055602cf3aa29fb"},{"label":"Maker amount","path":"makerAmount","signature":"304402201c1cb8f2cc362d6f10998948ee009df1912550cb4cf059d00447adf321a97f9e022051f2d887cd8a6a6ac26ab2afe8016eaa5a130661da74f7e482940278423b98fb"},{"label":"Taker amount","path":"takerAmount","signature":"304402206b842fc4910a1bdc77ebc9b2523d7b1ead75f9d187c42a80ac87e980112020d702202b4c2b9cb8ce85712afe63a71cb542c5e5d3fdcbe33b9ae746fcfac13fca18aa"}]},"10:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623":{"contractName":{"label":"AugustusRFQ NFT order","signature":"3045022100c66935874c1f07e7ebf05ea2774b4ef970aa431001c655f0d6341e0c4d142af602207083981aa538efdedaf13bae8e04ecf0bf2bf1fb03843bebd8ddd44c4048aa81"},"fields":[{"label":"Nonce and metadata","path":"nonceAndMeta","signature":"30450221009a560c4f10e3b3d91d78d08b69cd2c8bcc48abb9d5a6da1bca1aa5a843d5e82302203cb5df5d1676286617dd169942b42530a422328a358e8b143f62c4c024547e16"},{"label":"Expiration time","path":"expiry","signature":"3045022100ad531d0297f9561bb4077cda4896e1506104fdbefc05d1cfe360cd0e4810a98b022013ecd430ad3773ceca05ccd82794272768be0ceb3f1d30e12d331a73d1e9080a"},{"label":"Maker asset encoded","path":"makerAsset","signature":"3045022100cb9280d868175b9645dd9417790419343e5cfbb481bad8e2d3c826d9b301b261022058010b98a71b91a75804672dd67361ee4f96dd7f5cb938f00e355a3aabcd8f9d"},{"label":"Maker asset NFT ID","path":"makerAssetId","signature":"304402200a7e0a5503d87ca2489dc26cfabbd0fea9b2e2aefec9c6bf4e18fe837c7a6ba00220273c59c30647aa17d4cddfd85c3d360e8659818d05382b3e288b696cf518ae29"},{"label":"Taker asset encoded","path":"takerAsset","signature":"3045022100ce510ba8811ddada61a9695cb85ed202ff9af125f07f2f7995ebf1d1bb33798002204bbb2bee209860fd01a72df16c07e4903164cc2a3c535561437d63970b1ef8d4"},{"label":"Taker asset NFT ID","path":"takerAssetId","signature":"3045022100eb69ad54131f20195cfb2c304804405974123c2eed471c3fb6b3476ee33a904d02206c17f1c4ef4eed0df5c733331579004e3828287c5d22f19b43fd26d09600132d"},{"label":"Maker address","path":"maker","signature":"304402207e358ef75ba3cbe3998df005e03ad4a8c2bdbdfaf9777d737242d1c63f5247f502201c2e916ef67cb4452d1b226faf1a4e38230a052865aeef6437e0a287441d0ad9"},{"label":"Taker address","path":"taker","signature":"304502210081d61e89adc9bdf731e843903c80d4a42236c4fefa4782b912068d3ff12dfd7d02206c2c7569eb61cbdc7b842cd9a8c173cc7d90ad3be3537dab8373da4422adc2fa"},{"label":"Maker amount","path":"makerAmount","signature":"304402205117307916d734323402185a37f2880822dc7cf386903688e57a4904a17891f502200e1061ce50bd198ef722159530c48217b93e2093afd48c1a0fa30aaeaf488ba0"},{"label":"Taker amount","path":"takerAmount","signature":"30440220740a659e7855befa06833ccbd0aa48acfcacdef7c6a1035fbf30263a19576b5802200c46e51e89f469a121a31de0bd32e1ca9f3910413950415548e13d4c7c2a65d3"}]},"10:0x4200000000000000000000000000000000000042:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Optimism transfers","signature":"304502210097b5f9c605c8649a848deefb70692f9df06dae6be89281311c03eaecc6749993022077d04b2d8bd22116067e5751a36b2b5bda5893dc05c701acadbb0a94bf98a3d3"},"fields":[{"label":"From","path":"owner","signature":"3044022068b87a8aafe0ac8591976c69c4e2dfb8ceb78723c8a01ca31893e91c4ee194c30220204c2cb5a401bb34b81a2794db238e522c67e5c9cc4b40a6c5a20a8ea05a7d59"},{"label":"Approve to spender","path":"spender","signature":"304402204bd9534236d84bc4c066e9361ac77527236cd070fa55dff80156394a3cad0b6102203a1db664de0ff29ae87d1dbecef5162df0e85b84b5e7188f892d974849855063"},{"label":"Amount allowance","path":"value","signature":"304402201d24bc3916c564959d8db3e03012f5665110b4bd916bb1012e1f9f572597da8a0220260d5de23a970565b0c5afc485a1ae4d0d9a55d21926d8be300c1cd0f7794110"},{"label":"Approval expire","path":"deadline","signature":"304402202ef609ebdcea759f3c8d6a0586ef1e71e25297baa8dd382c70ee17bf77339e5102207afe0311ec11e87440290734870b294265def0fab7e4b764d0c13fbbd32ddef4"}]},"10:0xb0b195aefa3650a6908f15cdac7d92f8a5791b0b:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit BOB transfers","signature":"3045022100ff23c421cf1e8bcf786a1a7812951b1086ea8e76bc6509415279460f03cd1d260220759b1f0e1d701c8778fd1a856b1c956e389ee2e70b8e5e0a57b56bfec1d31702"},"fields":[{"label":"From","path":"owner","signature":"3045022100921dc162a5bb3196f691a111df75007b16081bd9646baca74dcc70d16e7cb45d02203b6a2cb04c443a0740992b621cd69a6ad8760ec6e41cf433d34bc3abf481d76a"},{"label":"Approve to spender","path":"spender","signature":"3045022100fa0c6662d99d0cc3436d88a9b20e5241e77432a58c1e2dd57de70b4615ac10d2022069c75349a829594ba80774c553d5467f6c911c29e3590552c54cf8514e64581d"},{"label":"Amount allowance","path":"value","signature":"3045022100adfedcade1a854ff121aa5b7097c24dcac624f8ebfcdeae8727ca0b665b096620220053c185999214775db9f9b5a72b22b3c994530b98907ca9f94964ce797ffd696"},{"label":"Approval expire","path":"deadline","signature":"304402202d943c7e03d2413e3114d185ad144f90ef754104b907c647de088544ec7a3347022016996136356a8483b3d0045a9c4ada3aff66c904ab113484794583b6d99d5dee"}]},"10:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"30440220089be7e339efb6b42b8e12dae2aa08f3d510d7a38b52e8d91c4f29053be1d28d0220766f9f63ee8e184a757c926b98e1121b04d34f276ea4d1cffd95d923290b24f3"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"30440220454fe102d49e4f419ce0fdce0d6dcdac0217d6312ef8596d6836c1e0b0d0d2b502207e03426f84eecf21938023e5c6cef0ced72e8a968cab0db1fce7dc6b2cd2056f"},{"label":"Amount allowance","path":"details.amount","signature":"3044022029e81765df506b964b5b858efc45bf8c475ef920396d6d8ead5ff6b0acdaed1a0220756d6ae8fb545869a7a4af6dedd9ef448535a8677c7c928e97e78c9c7f5404d4"},{"label":"Approve to spender","path":"spender","signature":"3045022100ce732c41e83e74cd48b2491e3a2bd1be2b0f090d8a41ff546d252f86b2bd89510220280153a526dac2f1f6e0abf8871e826a3d0a9a1490bf55559f9ad0d4cfc7a9c0"},{"label":"Approval expire","path":"details.expiration","signature":"30450221009c37789c76b1524a3a507532caf4cbbc2130ee4512ac2ba4447afd52593394a002206dc0edca1946405a4b7e28239b5e3d11a42e71004003882c64c72394d116a4a5"}]},"10:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100f607f91959ba77569e1bbc520fd61ebd0cf2c6b0b4bfa449c45e86ac49f048e602200a1f105838d380ef60f765dcb0d3bcfd2eb9af8dee82994a942bf804eb5c144c"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304402203ae7648a1fcc87edd672587dcd9c4222aef9b119eb5573945982eb4763c9c110022072d0a4d1e23db36c3b4852bc61b8500e0a9b4a58d56ed6b71d8491e154e1773d"},{"label":"Approve amount","path":"permitted.token","signature":"304402201b7f2c276feb67d6fc687c04e1d546cd1d3f5c68932e11f094eeea12b7ed90e0022048eebb2d00568a29c93fe3401a43c1b33ff0a6652ace6b9a69c94231e0b1dcc1"},{"label":"Approve amount","path":"permitted.amount","signature":"30450221008c461fb3355c78482d37f2f8176743e10b11eb4955b9825ccd5fb013711db35802207c9ead1f31f276e25510567f44b590265a7be85a2431ba029bde6f85031cc2ff"},{"label":"To swap","path":"witness.inputToken","signature":"3044022064e76b541255e6dabbdec711e1bbd7393c75f4a8441550cb1416fb2f994633f8022073c96adf8a03c62d1425569b395b65f2d520861e617ace808a1bba54fbd34dc5"},{"label":"To swap","path":"witness.inputAmount","signature":"30450221008059602cd190351f330a268264e0c6bf02c43d329fb3ed98a9e812c74b045a2d02205c69e72c2bca12c4aad97b157b1665f0f098f8ba3694b38debc3b491d0f9c116"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022053bc0c1caba1f2a589ced91e416486419aa499e625d8fb4256675a3216bec772022057698f1ed49eb612601479aaa33ab77b635ab38dcce54f8d354e46f08a36a566"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100f1748b0339fccd0dc2e7780d701816b551b92c01c9a582387c9c5f19310c4d48022070a3ab6e0d49b285ca87f58ccb4eeccc979389382ffd6390e0d0398771cd3cff"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100cd701a6cf3d4150d9ac6efd79e72f790772433dbde62cf4b537b5ae2c51e0d44022009372e93db760ff9d6fe88c9a912d1e1595fe0fa85aa53ef759e13ccf95ca87f"},{"label":"Approval expire","path":"deadline","signature":"3044022044d818ed8b91d7b30d213c4b3276bd95e748c773d3da675105600671870554c302207a68b143eb9e3a5a692e5c68196190c270aa1fd36a36626064394ef6e6df1d72"}]},"10:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"304402203e43ecd4ec2084760949aa56b7fafc59c251a4167d23282c143fb656e336ffca0220470c45ce3711bf8de3be65c5dd969cbf3cfb48ac9ccca4570c08dfe331839326"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100ee88e0e7b6a5d06bf2a5cbd4e20e18a7ab32b6a6992855922666fd09b0f7f52a022058ce3cef7ed4d460011cdae06235e6ec5b0198f73488ec079618fecfe96f6820"},{"label":"Approve amount","path":"permitted.token","signature":"3045022100d9116245b4b4bb7872223aeaea356c6b9d632c6ef21b43dbb4558572f7d3f18e02202149a5174d8097814dcbc1222ffee9154ad25e20fbe54ff44f5dd9ce2fae72c0"},{"label":"Approve amount","path":"permitted.amount","signature":"3045022100dd95bbf100f7ec9d490ea5a5cd486df677e675de52c818e719c74a7c1416eb370220313f717fcb8391eae721667a34ab836ffd1d4704ae86aad8af3edf8c4ea34df7"},{"label":"To swap","path":"witness.inputToken","signature":"304402205b4e7dc13e181b49d251713005eae2894a2e47ca2585cef99f69ba08ab850e4d02200adf0b812c7cc6aee7b7ef4a0ce612b7088a01aecad8beeeab1b15b3ec2895e7"},{"label":"To swap","path":"witness.inputStartAmount","signature":"304402205210aa4fc81cfea7eca2b21c2d6945e1a6debed43eddc8347cabbbf49282d09e02200eae68ff8f13bef2bd6d6ef0b96b690dafdafa76409df4baf8c5f277230ecf42"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100d9ebaacf12930a25b5d71a83f4961e6be38a92fdc195c80d1f387a65620a9e48022034528f3903c1750d88f3072a7f370251edc0afae2e3dec64104ab48b8c4c9e05"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402207bc1311206829d507968b3e84dd0dee4ab691d421af49140529529dcb100398c02204dbc969c87e22b6c49d0a4e380a39d4bc0fb38cbfc6d7c1dc7d3e99b205d5770"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402205fa34253eacaa7d0dedc81c750bb6ad845b3963ce55c69284a83e615e9b11451022048df383dbf5d2eeec025da0cdb2bec2f85a3aa71eb6c0304fb04febdc38aa97e"},{"label":"Approval expire","path":"deadline","signature":"304502210097a560ab7165c6f75baa71d48ef2d8aef011d62bcf40804c32c67ef0a0a9dcc10220510694b7e1403c1d401a5c25f02665935f3d65d67e01def0777a3d7b1523ad87"}]},"10:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3045022100cb246a5f272fabec7b7d66d24b5a0daa0965a3eeab2fbb34876d50a88723400e0220561a0b4b024e52b8f385eb06fe5e1b3d473532724e57ce9866d22816c519d422"},"fields":[{"label":"Approve to spender","path":"spender","signature":"30440220057cc51cbcb260461c1142343632ae7b3e0e1203f6e6b2ff65d2db026a05fabb022073aa96aebbc3809efc58222cb3f9699e06d04a593ba971764d8680b4dc02323f"},{"label":"Approve amount","path":"permitted.token","signature":"3045022100dcc452ff04ae777b59477673da3213e68d439f98b514a15826825f1860a5599f02200c6e20a143891f3be65c5c57968c27424be4d612c449ceffb6f0d2271fc64f6c"},{"label":"Approve amount","path":"permitted.amount","signature":"304402206681e14fc01ee3967694130f0c21e809bf96d0e48e6ca250640de0b9a58c69a20220241da7144605af656d24aedcdea5a120d3f290ee3a2762023403423f396dfec6"},{"label":"Spend max","path":"witness.inputToken","signature":"304402200c5b47cb8ce9433c050697b8d897d367e0fe20e9a1cb8e0f0d7630a9740c52fd022029104817d218b4a76c4e9800b615a15b4a703707ebd187a047f8ad35b2450457"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"304402202184fb17a734bbb560979b46759083ae6c7c00ed62aa6ef70976d4a7792942a302200c1b0aac85894fdedf5174d71e0b64be0ad288cdb4d9f9c5d8b1e1cc8980c718"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402205d4f3c21a2ee2533a1738bfa13f5dbfdfea54cb74bec14963f3b98b1a081b39402207e4e6670289f83a4c9c7a34ab7e3ac8c3cfdb3e5a2064194a5591d1f0b378e8f"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402202843f21aae62bba18af01ec031ef1d4a7ec4187d3c111933913bbdbdac36a9a402202ca64ad80ec886752955ab7d8b05f5ae1b8927577da52eeee9ded32133901fa3"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100cd8897444bd4e942309a88278bd980bf04c28ef47d3d5084b09a1239db0d1747022046f871ef50a4b70c350dc07362838df1c82c6900b474b045d2b773e7111c7e99"},{"label":"Approval expire","path":"deadline","signature":"30440220316c2659d1f5da38cd36785a35569e5df3a8a4e37a9c06b36f93e52136e42c6902207f17d8f47c4bad7961ee6e60dbd1320af95151f263e1a1a20ac6f74df994e328"}]},"11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"30450221009bbfbee758402c58c94964a1c05b0025619dbcbba2cbc3f1804194074086932802205cba2cecbad6e4a1e742d8f97a15a9aa267e331d9bca94a3a3a3fee833df5d46"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"3043022070dd8a0435348956f95f5cd0a781acf4d69559963e9bd44c45854d94222ce30c021f74ae458bcc17b1a48a7466f3e042a122d0f6b1afd0b0668c736f6ebedc4450"},{"label":"Amount allowance","path":"details.amount","signature":"30440220641ef248bfaf1195445c4d9a0cddd59ece024080e8a85a4a0193517a5ea06007022013b554c0b9b509040c82815906d4db4a484ea91146eb552ff1a9d20d3b31b955"},{"label":"Approve to spender","path":"spender","signature":"3044022070de1aed086e82cd1074c672da6f345cde3f38b0bc3bb589b79283add3a39f6d02207e19e2e44d856616d47c32f378bc6b53e2115ec183747cd1832a829faefa44fd"},{"label":"Approval expire","path":"details.expiration","signature":"3045022100b9a26cf1367296f188198aa97f39940826205e4a2dee9022325a46476733851a022055e1d8daf451a4d3d165494bd0b9753deaa1545445dfc0c42157586848dbc7cb"}]},"11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"30440220722143608b4d0dacc5ae754eb195202ad6f0a6206cb93eb0b474148c05bfa76902204df25ed00be2c86433cd13313635e8859e7225227fd8d1daa6afce6b57cb01a1"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3044022018ab2bd85743520bac0f1a12ae2e507dc5213a5dae15ab9d4cb96abd75a10c7d02206b111247d5ca66460b80458037dfb1cf94dc419aeb0c893afc111b3e7dcc9f73"},{"label":"Approve amount","path":"permitted.token","signature":"3045022100c63cf7120324a01891c7b325c7d81c896a811a59c23bfdd1a88ff6e5f914006402200fd5150da538848662d981104141323c61ae6bb69c776bb8b22e9f73307535ce"},{"label":"Approve amount","path":"permitted.amount","signature":"3045022100f6d209689d5d1c2d89a25a856ea655c9c7da60a4281df90f3a64a637e58c62560220061a14420473ee9a501d2410b171df7a3dd8bb40e8fa521ab869dc02d6fe4548"},{"label":"To swap","path":"witness.inputToken","signature":"3045022100c57228a0612a39650312cc19f68f0f8cf7b0212e4ee9b26b4968afa7e66737e90220627b20500da23f69a0d30f42fe2c833ccd7f666262b843bb7b3debb3105a49e1"},{"label":"To swap","path":"witness.inputAmount","signature":"3044022063ca9c030a0fabcd188c8060697724c6d37a2daf696e6b1e874429f524f78a3b022046af7cfa2d3d631538fdb107b722466c49fe81e4e9c99d1e58e9bdaeaa44e4bb"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"30440220394e133ce4dbedd8dc671de0efdebf6879db547b75edbdc9f99a3e2a48da803902207721d57f8afac58a41dc46d5a0508cd8de5aaa6abb8911e00895b6838d620420"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"304402204c003890b5df1bb86519ec0a035921b850d50c1b28be2fe6888eec813dd95b8c02205a9915ffd8706ee9ad1dad003b025e5500ebb513b96d3b263805d5c00ee10778"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"30440220206fe6edb38f47699a313c39d450d3e1734dee42f1e80d3bde46b4a328e2842802207dc1b99a14403d2820e4b49a50d74d12d5002c24938c87d9e818579398c3d7d1"},{"label":"Approval expire","path":"deadline","signature":"3044022036cfaea3784982325867c1911653346d8a410c220ff81e839ecab24d8f6b949402204a3e52d96cd31a7a44c673670bc48a8fa788fb049c31d8a2013b495347c4303e"}]},"11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"304402200eae2991ae611a1943fe8abfe04cb2e3e04330628fefc2824cabc48348a72c0c0220174bc06c3d0e197027eb8a760ad9aca3f0df8f77ab910a09ef8390c49b98c2be"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304402205fa727d29151c9830043b6512c61159c1ea8ea8fd44b87c0596b5bdafde82243022017d97ef8e14639e37fe3b613b70504aa43a05c41c8cd5b03229e55036610ecb9"},{"label":"Approve amount","path":"permitted.token","signature":"30440220014302e1492ce418819bb60ba7da423176c6c462fdbc3556280dfb39d56ff75c022017eff4dc5f05ca2a050bdfc76cacea4339576c9df2ecd188034c9813a3b74984"},{"label":"Approve amount","path":"permitted.amount","signature":"3045022100f399baf0da8a4059b20d8edade9dca402efd43b3a2c9593b8a247e14d8b29a550220695480181db8b4f087c18005c1c9a4843ff1070d208d4779cc62ca72f4e860a1"},{"label":"To swap","path":"witness.inputToken","signature":"3044022009a8f1da3ded0fdd317f39850c5f2e1418b01dc9c341b6fe01cdb79ef5e82aca0220108517c15e79334d2099b8cab033e339f8388c9f721e4301a966a6b1d9543f75"},{"label":"To swap","path":"witness.inputStartAmount","signature":"304402200701ea4a00b26d7b1baba23f0c572e5d2812faefb095163c2020cdcd07b299e102205292602812713e325b8878b10929cddb6cd2280700d4330bb9c19a2e4c8d57cd"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100ba06a297e0758ca99a5278e6fc854cd6684183501421de6db85c9b9d7d43fd5202203caadad0392f98b8cd4749ad2e7b47d0a8a25581374109cf33ae4a78c74facfe"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100ed72ddc67dd730a9c06f128b1ea5073a6d78a6c4f4f76ef6e140c5298cbc11d4022037bbd5706a289e0f540c48ebb48bb1dc6037eed5696a65297fff2c0f38813872"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402206357c271bb041a30604462b90dc60ada77d030eeae1fc29a80c4ab02c2644b3b0220514f5ee06a02abfb743eb98f583b679255570908b8193759bde14d39930f944c"},{"label":"Approval expire","path":"deadline","signature":"30440220164ba29159ea4ed916dc85ec92319a7974e0c3a79cef48c7abe2c1d42a4708b102205ed2516c60f680371aba2a2525d1edf9155cfa31de59988c3fe34780963cf2f1"}]},"11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"304402201c8f5b0c36fb939b541b89ce363184880e729a9458421f09474acbe3ddca80af0220418c39c98965751cb693b0f0f85397b824bfaf13552f6f3404d994551a73a1df"},"fields":[{"label":"Approve to spender","path":"spender","signature":"3045022100b9c663e4d3a395b429e0a08d4f72f6667ac0a347a30aec6e190ce92665dddde902203ea26aeb292dcf2f4bc8004d02c125182d5fd2692085e40addbc43c90184f4aa"},{"label":"Approve amount","path":"permitted.token","signature":"304402204e0c6642b71c97d91bdc843a13663329afcbf9df61c1710c51f0df1e631ca3bd022045a5d5e1f806e5cb69c04713cf70f9cbe8b8a468f1314684f09c9a8166d8bd69"},{"label":"Approve amount","path":"permitted.amount","signature":"3044022024226bf9f1ac2d346b3463b2096686f9fdf09c97c3de2d4665d8b470d46aaafd02207d8832c58b6acaca0ad1a32a250df01a1847402432363803afee80fbd5130d55"},{"label":"Spend max","path":"witness.inputToken","signature":"3044022001abdbd0f9d840767a41b6fae15e13e17064320c90f652f68064422370364cf90220700c02b7a534288c49cfc36815543fd75dcd10c23f6493f0a00bf4da9d7cae56"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"3044022056d1d0491ee91c4ec0d43ec210e3cbce8431ba743218a0fadf89a538144daca502203787744cfdf00c4e556d7e1f5cad46562b68669e01851721f1c21b8a07c553bf"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402203ee1f20cafedfcb944ea8c2e0bc7556a718c03929b7d94cf4ecca22d765994b1022079f358095f150c5e4d59ddb036c34e3ab4557561bbe64ab40c6b91567aac9b00"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304502210097f76005925a78c18ecc5df1bfd730963a1988e67009e319a4348afe768986df02206e1b4e5c75b65bbd06ce70fb50d4a54b3bf6af3db8ecf2f29fc8f0b5b538ceb7"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100c975df466b0ca53d729c8631d162b42a65119e0a26a116b2f72fb4e800b282a602202a964d338ad50adc7b66d9a263cc19c8fe662381c029783b622bf081629a9f23"},{"label":"Approval expire","path":"deadline","signature":"30440220565a884d5cba616f4fdf38e1d69f3a9aa226527e1348f230498b971339445011022010f97ace3640a56ada9ace2f48320acd26cfcd40530e9dd850090e225bcb2596"}]},"137:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c":{"contractName":{"label":"1inch Order","signature":"30440220295e0aeb17ca0929b2a94c324d67d0b5528aba268177f3ac297b563141e0002702203ac360d9fd0c9c0c12279d1e73bea5d549a1e8141f454d88fbe1e8ef970e6802"},"fields":[{"label":"From","path":"maker","signature":"3045022100b820e4dfb1a0cde6dc97d9a34eebb1a4eef0b226262e6788118ab3c7fb79fe3502202d426a388b4c3a8096b3f84412a702ea537770e61ee0727ec1b710c1da520c44"},{"label":"Send","path":"makerAsset","signature":"304402201500b44b1eb5b016ebe5bd7d5cc74b011544b357411a608c3a9f14f259ccfd1c0220617cdeaf7b72edc69aa4ce33828b2ae1bf9d80f62af064ed206d348de5ce67dc"},{"label":"Send","path":"makingAmount","signature":"3045022100b1df6581805f596ed6ead231bad279f2f512ed1fffdc2ff082c381b63b5eeb7a02201363fe8f5b9904f338bc1e7d2dc9adece3d33c224c68f2fd669dd943ccd32080"},{"label":"Receive minimum","path":"takerAsset","signature":"304402203329dae6e283d1b00829fd0fdbd4f753ebdf2bd911183af250bacc80341dd3d302205de19c3a200b3e49597a9f02664a262827a64e28d8f24b37808c7c78f727588b"},{"label":"Receive minimum","path":"takingAmount","signature":"3044022019d6a6cd953447adf2cb0202ecfb0282d3d4bee6aec4c1a2a14e1e8a1e7f732b02201dd3a8b47cda33159a331335c5ac1136e36b5d8e4b29edd99f65cdaf5f5e0c4a"},{"label":"To","path":"receiver","signature":"304402205c5b1740d2e74513a9332e3160ebfe5996186c68141055a95d733d51eb51dff402201a1e085dcd9487bdabe9e04426cd8b043c5bf158843fed944affdeef0768ad43"}]},"137:0x94bc2a1c732bcad7343b25af48385fe76e08734f:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337":{"contractName":{"label":"1inch Order","signature":"304402201b1d17eea87fdbb8e54353a452304fd67862441df16d610f532ab06ebaa5ecf802205a18cdb6cb6b6825670f04aa7aa2ebeb26436922898f4d25f8ad4a947417cc00"},"fields":[{"label":"From","path":"maker","signature":"3045022100e1a47b49e860b2be7f7325e5b5c00607e883ee4d167cbd85e5a85ab8e41b1a2602203f2a7442cbb889624d51e4e33bc1b2a4f11aabf495d0dd40fc903148432d9bcc"},{"label":"Send","path":"makerAsset","signature":"3045022100970dc43ad05e879b50f1ccacbf35eb545e208a63be32ffbb670e01f7f051416d022075a7cbed6ac5234f51ee73949ad9d3d01803fdd9cbafe7f3d9954255f8d81b16"},{"label":"Send","path":"makingAmount","signature":"304402202a7459ec0706b2db1bce92953e8bfac39eac0670987c712f964ebdcf2aa6cc1b0220387eef7cfbe5457a46b34f222e760c3cb8d65b00b42fadfd28eb923db53c0b11"},{"label":"Receive minimum","path":"takerAsset","signature":"3045022100f192c16fe51b725eb7dab77c47bb36868eea3a7dff92439e1b05e31c059e5c1902203f14e30626547300c39ed83a2a854f5bb334be36af7aa8402c153716e4989d5c"},{"label":"Receive minimum","path":"takingAmount","signature":"304402200ad790ac99c964ee63527c153c188a87bb3bfc5306d0baf838f8e4cde2cf6b0a02204260214abaadbde3382e0237d0e870880e2b4ccf24639f45af80e0a5dc4551aa"},{"label":"To","path":"receiver","signature":"304402203a2f8cc5b18e596424e3303dac52abbf1becc37f652aad68b1a587d422f4a49d022063bcd24256241623c9ca134c31a2faddb793d85b8f47be34bff3b46dd5576157"}]},"137:0x94bc2a1c732bcad7343b25af48385fe76e08734f:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a":{"contractName":{"label":"1inch Order","signature":"3045022100b2fef9ccda3203d4d711b37b8c21dc777d31a09653ac849a1e16ba669a785895022019501ee864d298c314a0e596b1a3e938d7a8ddf1befdaae0c221e8354729ba5c"},"fields":[{"label":"From","path":"maker","signature":"3045022100cf26f3f40e07db7986b82bc30685023775e69a06d6130f266a231269a418a06902200ca684076d0b8c364e3eccc772e96e28ee09783f3d6962f5a655e26e1d93e4c4"},{"label":"Send","path":"makerAsset","signature":"3044022069fd43233b2e1af4323099021e0d97806ecd67c23b9d4efa0ebef0c387f373ea02202e0492fd4bcb5b6366777d2c2d5207fbddfaa816565564188dc3c355ab329bd7"},{"label":"Send","path":"makingAmount","signature":"3044022029e8a29f75eebb7e934ca0687f4d559503260708cad2bfe72e67c99a193503fc0220679e35dedf372a63abb3da541d69f06f660842f455420ba6944fb414148cf20f"},{"label":"Receive minimum","path":"takerAsset","signature":"3045022100cc30245de3390e8eb898ed8d5f64fd1c177c9b8ec909dbeb7f37646ebf2564520220776e3e5cf4b8cfd32f669ddc0022bff772bd0de18b5693ae4769431d570d9b1c"},{"label":"Receive minimum","path":"takingAmount","signature":"304402205509f05a408197037cd5d224f28886d7f64b0d6598507a737e37a7aae4a135db0220439d033aae7a8896a47313bbad00cfdf52ab2e69fb5734069b8809e146457f9c"},{"label":"To","path":"receiver","signature":"304402202f22d2ebc0588d08c34348ac50a8e7be90dd3eee6b6692c9e4abb5040d119dc9022059039e0abf6973ad32c72a6f333c3f370d7d0b24492444000dbc222e0ad859ea"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:9e97b4d1d211350352bdbb5ef45c4cb52f988d93a2d4a8ec6e675d14":{"contractName":{"label":"Dispatch.xyz Follow Profile","signature":"3044022008ad0a8cfe8c2630848f05e54ab93cfd1f5c301eb52cc74537d67a56751932bc02206dd3e78f5055b6c65a73905f840963b2f696afd04d6d472f4185dce9f6262821"},"fields":[{"label":"Profile Ids","path":"profileIds","signature":"3044022079ab31498b3ef74e744d5414f4c51334e00b20a5ad7c0a0ea6f463462d0a3699022079b29776df1f5243794cc128f19478ba586cd3b9378b5809740e9980763f8d8c"},{"label":"Data","path":"datas","signature":"3045022100c04fb22aecc349de63571095782ea34cde05e576095c980d5c86f054c1a248cc02207f5a41199516bed46221aebed4f0f377508d39d661ef7f6ea7b16877709aa4ce"},{"label":"Nonce","path":"nonce","signature":"304502210090109424df964562737fd1b5ce2f06b427856ae933c37f279af199f64fc530760220290cf4491328fc947f4d73f0032e151aa09caf8e085d0f0306fa355c0624dcac"},{"label":"Expiration Date","path":"deadline","signature":"3044022060825e02b00e4487917d073f701639b1ca812f21f1cf588fa8eb545a59b1fec8022073ca7918a322dfeb966dfe5239cc1a213c14e67a32f5f51e14e53c05f4149783"}]},"137:0x33c6eec1723b12c46732f7ab41398de45641fa42:2a4e40fa701836b6f11303b841424a6f3a47a5313c810b6651517fd1":{"contractName":{"label":"Mint","signature":"30440220513be6e618840924202f319870537e0c1f1eb2e684c0a2c61152fc4c20b41c550220026e22f2cd2e12a6b48f97bbe362600556ce3fe5e8b292c05c89c591ea446e2b"},"fields":[{"label":"Receiver","path":"receiver","signature":"304502210089eeb41d1ba1235fe8319c6a248e1ac66d2598979d265e2d4cf16abc34ba47f302205a59e802e42b3268441980b4708600ab6e05e4c55de7407610987532cf73462e"},{"label":"Quest Type","path":"categoryId","signature":"3045022100bc6cc7ae4c2b3b4d43acea4c513e09d11736275fade4c0bd834d94f6ebd3893302203045ae14bfbaa4ef3bc0d9cf76f29cd4c90859464290632ee72b20f4b5c37f8b"},{"label":"Collection","path":"collectionId","signature":"304402207537d928b803882aac63dadb7fd512f4b959c0e1a737ce7594c9b9e0a0c661170220587298e0e8e2eae94da28564b1bdd7f62273d7e3707665a7966f1b04a15f061b"}]},"137:0xd4f2f33680fccb36748fa9831851643781608844:0b5bbfa7b0d5b8429992c11126083752c3db3fac6030859c390e1ed8":{"contractName":{"label":"unlink","signature":"30450221008beed58a311bd0968844684d3e090349ad8f4c4a203b7d907f17ec9d1dfced03022040304ccd72921e0b13f0b8844cc513a35f8bcdb6d088385a57c29d848b3e1fef"},"fields":[{"label":"handleId","path":"handleId","signature":"3045022100da2826956b2b8863be618eec516387f3ab418181ffdc37a5a196f9effa632a31022040f75d126f4a757e0ce18917b74a9470e23848eb54060981d49efceb281ee3fe"},{"label":"profileId","path":"profileId","signature":"3044022064739575b6ac7bcaf48de8a5d9c260b8ef97dfcbad8309dd1d95196e18c505a302200a334a67c975aff07d285f0ebdbaa5101049e0e331ef0f26a1755709bfdd304b"},{"label":"nonce","path":"uint256","signature":"30440220471ef79574484f61b5e525aeb61f25d06eb997073a34bdcd68e3130c429e81cb02203fb9eed967e176c7029a3aed0ef503c83e61167b91c4507c8ac6304457754398"}]},"137:0xd4f2f33680fccb36748fa9831851643781608844:4103a5bc367237260ab8658d746773f02cb95cb8daaf8d5b54182316":{"contractName":{"label":"unlink_with_sig","signature":"3045022100f1a743e8adbdf6ef1cf1d16eb1017b16b52266b367c53fe2d22483b846f26fbd02203d87aeca769b75b0096cd5bf4bcdb1dc71132516ca79dd86bba57594ef41c686"},"fields":[{"label":"handle_id","path":"handle_id","signature":"3045022100ceb4eb671f78a9cf0e46b3b447224fe23fd92b1f950ba762e53779cc9225cd7702204313ddd62a34e8a6128f3431ad9742ae27771e1b5f9a7f012b792bb7cdf67bea"},{"label":"profile_id","path":"profile_id","signature":"3045022100b7c748f3aa456cdc798b86f5ac3b59af56532278fd3ce0b8f8f7da1d7cd2bf5c0220672445bba4c5d42dc077d79712c344458656dce0a92d28bda1d81272c2410193"},{"label":"signatureDeadline","path":"signatureDeadline","signature":"3045022100b7c86333951cd2371f0d94e39fcb9e349355580fe8fce42221a99bef49c0938e0220197a33b34f029674ff19575918919a28a0848d4328057eeeb633c150b4825113"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:070dde6ec3e5d5e7d8f92290760b7f3ab566049489976120347b7d4e":{"contractName":{"label":"collect","signature":"30440220274cb9f97529180cf59bc0ecba64e9f19f2a18df3df7653138fa5c4c68d5224502206b635afa415cbde57cebdebc2a0b5518be6d426634f09ed89664ac448ee31c37"},"fields":[{"label":"Publication Collected ProfileId","path":"publicationCollectedProfileId","signature":"3045022100f341665ec8c569bf59fa6c6e5dd568a7b5d0e8ed9d7b01268aa1cb9d18cfa9ac02204168045cf639e516096d89d91f9cf53d8b447a27007428a4bf4b0737b1af843c"},{"label":"Publication CollectedId","path":"publicationCollectedId","signature":"3045022100c173358226f9841b57a93d2f7d622dd3f05f819a3e7f99249ae49917724c75d002205d4ccef5f16105c6d11fd2ffdd35b9e8154e404be39fa058e73dd0381b746c8e"},{"label":"collector ProfileId","path":"collectorProfileId","signature":"304402206e73779691817f11b71f50c685075fd03e187a48e2c7f0754746cc61251e4dae0220233691543c3c35e99f83988753b3026beece6e26f13bf1fa197fb53638945242"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:21b483c455b899eb2e03e330261c2968719ee51273fe888f749b4952":{"contractName":{"label":"post_with_sign","signature":"3044022015ed7869eb391191dbded78689682b0cad3c7edd16e7512c868c5caacdfdc8dc0220685602e1c8982b96aae0578cfaca26f006a834c54fd7ca5b76c95a4087881648"},"fields":[{"label":"profile_id","path":"profile_id","signature":"3044022053c07fd41770b4c39a5122296fb110fcb466e42b7339b1f3b16842a6bb78d53e02207e5dfc7aa10aba6110888afc880543065aa5f07e822001d82a896d53c5f51335"},{"label":"signatureDeadline","path":"signatureDeadline","signature":"3045022100b6727e222313381f043a0d83dc273cf2cc86207bfb6f00912da59a46ae3d6caf022022b20251dede2884f32070b53fcbb66617be8a0698f080adefb0331ed66f75bd"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:25313c662aeae5b5367783c654b0b41d2fd819940290fd26da4520c7":{"contractName":{"label":"link_with_sig","signature":"304402207ae80206eacb28604a57c9257543b43028d03535bafc53b965cbe15e6736ad340220474f63f7657f3607be38c4f9c88a95a2331ca168782803a35ae95a44825c281d"},"fields":[{"label":"handle_id","path":"handle_id","signature":"304402203066a8e761ae5459bd8d07a2d85e012cc6db178e00c47a75a43d081ecd43c45c0220387ebdb7c0f44df75cb5b2b9da79f2cd356c73f6b2e92b9eb037d87c12d16c05"},{"label":"profile_id","path":"profile_id","signature":"30450221009c4b4d4399f2d315aa5651f4fd2dfa7313c949f493774dabf1be9fcf89b99cc702204dfe454f6ff07ce87f0825066b7b31ac2987576c107c7583e07fbc045153811c"},{"label":"signatureDeadline","path":"signatureDeadline","signature":"304402203c0fc15b249263368185e82d4385909a63f8094217c147627965b558069d730802200d2d416f4a73be0429e1184328529a1fa60863259b708e70c0640fc6fee1afbd"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:2c4da863a51b4bcbcc6c55ccf1f22685c5bfc5d9fdc2b091a4979c57":{"contractName":{"label":"mirror_with_sig","signature":"3045022100eb0a2dff271a17bb6d79da946637bc29a660d601191d70e1d32bf1d4a2cd34e302207833823dfbef232f9af68c6fb63ed4e7f3d359a2258baee90b9d5fb43879b819"},"fields":[{"label":"profile_id","path":"profile_id","signature":"3045022100e1b2f2be8ed230b81f373bdec95e5ad9301f62ef08f98eb67e43defde27f52ea0220442c2bfbfb88286e11b43fa43e72e2f3734e282c8742ca7d49cfde026fd70508"},{"label":"profile_id_pointed","path":"profile_id_pointed","signature":"3044022072f532eaba3a90bd4eeedbee606bc7bf9d30f9c320a3d8c222156810fcac113d02202837a1063dacb5af39ff3371cec6f38dfa8be419fb96424fe393e98962355732"},{"label":"pubid_pointed","path":"pubid_pointed","signature":"3044022076def7f6c5c9b4d18d388894cb177717baab28ef0694f7aca6b8d01ab6e005a402207c30ceb8b83363069d6020cb203716a08596d2c21373ff334ba3d99225613295"},{"label":"signatureDeadline","path":"signatureDeadline","signature":"30450221008d476b24f0f3f7559979397b6145f42fcd68d4ac285b1ad20ffdb0f85b5b65ae02204f68b4b385c5121585f7c0cd9d83c0a8e7a97a4c867e2ea14f327f732d2e7745"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:34bcec6283bd50c6742687fbe45ca3b54007977acd70504fd3a664b7":{"contractName":{"label":"set_block_status_with_sig","signature":"3045022100b15db144c953121c0291aee97a12cc9fd3fb78de8f2827dfd1fc72f130f7117c02203d756ddd8bf1a21b99e20e0c8508f95c425eb10ccd224381715cbc7fb22c01cd"},"fields":[{"label":"byProfileId","path":"byProfileId","signature":"3045022100a6f5390228f0d665487302ffb088c50e91220f018a5e3834fe921440594663aa02202e37d859ac67fdca45182a59ac1c888c799135fb7bbf96dc0f0dafe8d69a81fe"},{"label":"signatureDeadline","path":"signatureDeadline","signature":"30440220701fa22235fbaf8e58711d8162de37e37b9ae416e607e4f191744c4d0064ec1d0220502da2bee6317d330323a0c979e9bf0cf74fb070ea67a4f17981c40664c21a39"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:3e5cf36b8ef5bdfbdb5645a7ac102ff44c1ece4e4027578f82a35e5c":{"contractName":{"label":"mirror","signature":"3045022100d75b35ba1454fe2acc30b447afad603caa5e112262015fbd840d32314926560e02207b0e765cd1fec69eecba2aee14d6e613beac19183c807e3b3eb21bd96b818b58"},"fields":[{"label":"profileId","path":"profileId","signature":"3044022026aac4b7c09b4b20c3144e2e9fc59a8384f4f6539cbdc567e2dff46dd0b1f40f02204c9c1de93a68b0b44da0f44d91d60d804de70934e3847b548379faf2eaee6685"},{"label":"metadataURI","path":"metadataURI","signature":"3045022100e19e723f2d64afa383c89674c04ebb7208d6584106ecc2ddb4d76aec5e16c2df02202e5a8fa79792908de5804d15bf8b8baad74e43262f6fba18dd77286b5d9cf6d0"},{"label":"pointedProfileId","path":"pointedProfileId","signature":"304402200e5b144cbf64182aa82802662e9589ccee6f8b6514f8ff40b2918d47438b586602207cf688e2b60bdcaff0fb4bac630949fb1ed8534688c294218c880f4a31ee0b7f"},{"label":"nonce","path":"nonce","signature":"3045022100d7579329ab85e0924f5cf656b1810b2106c9773baa9e5032c78af8b2a273fa53022018f030b62fe33bae8f0218453ebc09ded25e2a459f833cc395c61f559730ab30"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:47c475ce8bb65720c4f1e1719d21bd6c0f89d0e424318caef9473886":{"contractName":{"label":"link","signature":"3045022100beff5d608bab21dae867915578745515773ff2ac555848d7b5e5b21a3c7b67aa02200eb85429369afc29d8eb3b26f2290662af490bcae00216f50a98317a1e2512b4"},"fields":[{"label":"handle_id","path":"handle_id","signature":"3045022100be71019383ed910e9069478219c1c0e594b8abf1488502b1f01d697ae8a75f1402207809eedde5955c65362cf68dc7dc8d6dee11016a75d15278eb2d943c8414efb3"},{"label":"profile_id","path":"profile_id","signature":"30450221008301a955b2e48d0b7b795cf86afe07fa52d01b7eeae95bec4c0a86776c40d00e02206578edb54793f5d68ad5c77282c7abb5951b6cdf0597db3f02adc96682e61fdc"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:487bd6f6e6253dea7aec4388c9c9a59a6cee6cbc9865eb72511cbedf":{"contractName":{"label":"comment_with_sign","signature":"3045022100966e8fbcd85a94d0347d75e2f63f8f6523941f954795d77908110f9995446c5a02201b133f6025d7b9c8a7aa6e9f6cbb9c29384a3fe5c7cc2d7e245aaf8a811f07a7"},"fields":[{"label":"profile_id","path":"profile_id","signature":"3045022100feb57572c991ec538ead71637af3e9c20fc0f8ff55ae96db111970626362031c02202f69b09a4c298ef8360283429b4ceeeaea31b4e59a7be465b72b125803fb5f28"},{"label":"profile_id_pointed","path":"profile_id_pointed","signature":"304502210092c92442c3bf2111477ef3f5f004fb9bfe5b65aead802cd0130edb3b2b8fbd65022042280fddd1138e474543dcfc4cd49adf3e382946dfe9dae46bf23125aa274763"},{"label":"pubid_pointed","path":"pubid_pointed","signature":"304402203f100d6fe2a7ab17727ba751589902c47a5492d5e60b0eea4c762fca9de7a828022031f803a7acdc380d6b3e844e0df3119922555567d16116430b1c743500c68ec4"},{"label":"signatureDeadline","path":"signatureDeadline","signature":"30450221009c02cc897c262a2749a5a2c61fc8751c55139c4a17758ec70b0728849d73c1250220029b6d4901fdcc1a1840a735943651c224b8df47caab536b6938616168116ee5"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:62759482010064bf87244ddf3f52f851af87304da45274e8ffbdb099":{"contractName":{"label":"burn","signature":"304402206cb91707bf94bc392806cdb14d85877353fd647485fce098f041e5ade6134ce10220683811ec5809e15d419909322f03ed1b6ec5b68c38717ad06c6b0385ee3c3b96"},"fields":[{"label":"tokenId","path":"tokenId","signature":"304402205d18ec3a8003bc0fbb26de752b163e0bbbd77f8fb0b9017bea4619cb87de39190220743a256a6c6ded87db1b01894de3f2608e3553a96a327313047485ef965b18d9"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:62aa4609df2dcd990bacc19b61fa8cf0744b18d1dc85ceeea0ac5649":{"contractName":{"label":"act","signature":"3045022100d9ff204caa00262cbdad544c05c86426ae116fc7386e88380bdf49c259ae89ea02201bb18df1cc680a5ed73c084eab591438ec2477e4a7bd9894681bf797e09acba2"},"fields":[{"label":"pubprofileId","path":"pubprofileId","signature":"30450221009b4332e63f5199d668ec9303f97670628d6b122af5043ebf45d717b1184b6e5f022020ea22e28394812a4cbb1cf48a1d614fb8020fa777066145f5ddf98d057668a4"},{"label":"publicationId","path":"publicationId","signature":"304402203669ca8c2cdabd36876e5ed39b3d5295148191035974d0f228176b0aeabac7d30220384ab6461fac2d5fb1e44012c7cd74f038e01d08f71c1fdd460e0c3bd9ad36ab"},{"label":"actorprofileId","path":"actorprofileId","signature":"304402206bf788d79bf178cda6601da33912bebab43ad0329a4d765500ac6668a89679ce02203fcc328d872791cde23e53b485d4631ad4efa36bedf262abb3a3bad89e4b7199"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:64e0600665b7d148b3f8c7cac3c67c06a40c23a92b92b64d43ed854b":{"contractName":{"label":"Quote","signature":"30440220562b1faf7c3a9ab9b9093ad3f5cf25086049cbb3b5e382e728da1543f3fb3f5c022073e9e798bd8281bef4ab6f4e007519d63ab763c915f499e5be79eaff7c873e41"},"fields":[{"label":"profileId","path":"profileId","signature":"3044022057b03e53c61af58368ef1dc6d1d8d4db64482a06e5e64583912ab83dab7d7fe9022028bd197ff13afa320eef95074cb704d82d06b2415cb847258706d156e26ed63e"},{"label":"contentURI","path":"contentURI","signature":"30450221008637c2745ef73d773bff78cda34c82edd7c1cb08487e3923fa2f7e116a95687a022059fb08b50ac82f6e550c07a7192bc537c444ec2ab95d45d35c033a5c1640f5dc"},{"label":"pointedProfileId","path":"pointedProfileId","signature":"304402204203d284d8cd55980f1b1c7fb5a38f27a8382c521ae3091d1e3bdb5d3be4b097022023f637143703c499b166ef74303263ce777b46730e7dece60fbb4700b530617a"},{"label":"pointedPubId","path":"pointedPubId","signature":"3045022100a125fc5a7f1a4537eb3f87e13328af81ea70003ffc3328058cd2526eb70561a40220476f098654315e370e33bab8bebd2b69abdae6a1c7aff30a13a0858c4909b462"},{"label":"nonce","path":"nonce","signature":"3045022100ca3fb45ffe7eae84ac9e8205e35ec97bf88dbbca94956d69aa68e81d953fbcf002207ad391a23e30a161a7e35799863157b85bdb55d14be61889a04e932f5c9b118a"},{"label":"deadline","path":"deadline","signature":"304502210080a56b342258c626275ef0c372739414e8b59d4e7ae0ca8e7dd4df791469cf4d0220710a46b65970278bad1958cc65f7f1304986c2146e89053b906f25c6b666efc6"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:75a2ca238fb86566fe4ba12d8fef0a9852f577baee3fc9bfbaf678ea":{"contractName":{"label":"set_block_status","signature":"304402201a047f27b7afb027556821085b651f952d731bda71209c7857cc60d836836d0d02204c47493d1df372a9dfb0c6af5c4502181834a61cc46b0a85010eb740221b3727"},"fields":[{"label":"byProfileId","path":"byProfileId","signature":"3045022100a7d9e701ec6f27a56e9a32e988f08ca2bdd1e0e0649b6370eafa5b73727d6e690220490bd16ea293448fc7c2e9c8e7d4c3732a61793fed6e57bfb10fd69136483c44"},{"label":"signatureDeadline","path":"signatureDeadline","signature":"3045022100ddab91289c73a6fcff65cce812acd56edf5bbb8b9b3d4490a474e36ceee04f600220279ce728d12cad2cef6d51524d0ee2bf6fd77533ea5c22f52c4eb906b433f1ab"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:7e13093933733b6e355959c0f05dcdf096291225677986f58b855f92":{"contractName":{"label":"Follow","signature":"304402203d05d3af2857144d7d6719a434209fb86b4e31a23a972a30b48a63012b859aad02203a1c9fd6e77bf01ee54e523545c0b534d956529d8b500adda5ac84cb53adba07"},"fields":[{"label":"follower ProfileId","path":"followerProfileId","signature":"304502210086ce10d201f2bcd07ce0696d09fb0edb6c310976c590728779b215c3b06e350902202b9abe2522e9587c6c80f18bc05d3b55aa24b78a6b512ca52eef73b320807c50"},{"label":"ids Of Profiles To Follow","path":"idsOfProfilesToFollow.[]","signature":"304402203ba6e0b34e003918518babd31d60b67b9bd4b056fb061fbbe9787b7b35572d1b0220790db643b94787886311042444c4ee3a6dd0bf45739127f601633a81305aab68"},{"label":"follow TokenIds","path":"followTokenIds.[]","signature":"3045022100d4d6baf19d62a115ff05056915f5854862bc9b4953faa70dbb89dd8af2d3b58a0220560d12216c5bd899338b7423966274476914b2a46735fc5a461423a11d522436"},{"label":"datas","path":"datas","signature":"3045022100a3a40f4c17b37186d4fb96502fea483c0837d89dba2d86e950959142b19403d1022018bcb3029746d4fc0467d7f5c0d261ebe5d0bae6f502a74013dd096acfdad373"},{"label":"nonce","path":"nonce","signature":"304402200666208fca07d5cb575ba6343820aa555a57ce43facce4830f92908813d974e5022023167cbcec528a72e296336613e5354678fe3f2cd00f7e2a8bf574a6d8a486a0"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:80c176be42decedd0ce1d10963034b678ce2c9a781ef457be4eeaaea":{"contractName":{"label":"Unfollow","signature":"30440220138ca52d637f7c86067c5fffa161f3903f24d778cca96a30c4548be8776c5c81022033aeae1247a4b5e38d1cae7797fd38b0abddd02e8dbca3b67f4cd1976c996563"},"fields":[{"label":"Unfollower ProfileId","path":"unfollowerProfileId","signature":"304402201694f3f51d449d10d120fb31e2711c486ba1e664821d8f074ccd3a1f4c28fc6102207a8e7a137973e64929ee4356dae0040ed71691cd7ab6d05e2da8b7a19e6302d6"},{"label":"ids Of Profiles To Unfollow","path":"idsOfProfilesToUnfollow.[]","signature":"304402206cc14f7124cc54c692569b1e0e6ceeb54d565cd900b91efeb97790bfc8d3727602203e69a94df5c1ac37fe304aec1b0ce7f319ff09466c57a19b64d878c9ad6d84d2"},{"label":"nonce","path":"nonce","signature":"304402205eb026dbe9c4e370c950cbfb1f5eca8008a85b0530626d18d032a5e039f95344022000c5c9fcc8552dea7353b7665a09591767e277bfba7c3481b16e2ae5b17edb76"},{"label":"deadline","path":"deadline","signature":"30450221008fd2f449dd33406c1808e3fb316b6c821ecd28f53a424d9aec648424bd7914e20220247a46d5452c33e0a5b75925ee8ea77596020f21ad033201411f4204e597770e"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:8af86ea269c2fa5628d4e7c2ddf1e62bf6f5bd5a07f17856db0aa8ee":{"contractName":{"label":"quote_with_sign","signature":"3044022066ce14f394f03dc964c40540c4497e8beb0ccb9e23fd425671c61539aca6ed52022029933a6b4ebe3ddaa601c41a48e3836353f98564c4aa6007188f74aca2e1b98b"},"fields":[{"label":"profile_id","path":"profile_id","signature":"3044022033d729504a577e04d98d13b6d84c86d25d88a236557cd2effbe65be55aba7e9802204c62ab51a7bbb6603323c72f3e24b94544d936107deb2c343928d4e60ddefe58"},{"label":"profile_id_pointed","path":"profile_id_pointed","signature":"304402201326f878e1d9148d07b9801afd2d8b61ec6af1867aa6bdbb0eb359593548e9ed0220320c96fb026447f1af62fbeaff9e4ecf117bf8e58dde2c14e2714bfe8c1b9a32"},{"label":"pubid_pointed","path":"pubid_pointed","signature":"304502210089373f933d7951c60b47da9e709ec0fc28c50366dad2cd5b3e588b6a00ab207d02203f4ec2b735cdee2b6c06bcedbd4ac221356bd21d9e41b0992328b7c1d1258273"},{"label":"signatureDeadline","path":"signatureDeadline","signature":"3045022100a076dec0c7feb81cc9669b3130d6ab6a98948ccd9566b9aaf1a6a63f86848631022072cf9a4d6b96a163b4262dc58e46405b5234d730c14646f19a272d8454616b19"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:9909de3ee56263be0d231b3590af5ea9616f13ff9ad1ff2889b375b1":{"contractName":{"label":"Comment","signature":"3045022100ed2c4aa6c95f02f9235c25a4ffa22bd7b17b94491ed6ae515d051060a16148d0022056d2002a24999109d2828685bb5808cfa8f24325c232611ed7813139b9c2e404"},"fields":[{"label":"Profile Id","path":"profileId","signature":"3044022012bb9c82d1778ba93755cad0ef5ae60d16cd031e4518a977ac52bbfbfcda5c2a02204ae859e24c8f72ea90b175462bad13377537cdd06ecb2c918c26487bceb8776f"},{"label":"content URI","path":"contentURI","signature":"3045022100a6cced0672cd5e3f71c8acbbbb7fbbde9af46d38855b3c084007e466ebcc1da30220585c60120da86a91a475a7c77043d254368a3336538a518ede750313cc573b9d"},{"label":"Pointed Profile Id","path":"pointedProfileId","signature":"30450221008bf5103548be1e4dfb70302d55600f1630f2a71440a32c1679309f729a90f2230220463b62310d865628eeaf8339ca0249306b0a58c05057a1bbbed32c6f96533e83"},{"label":"Pointed Pub Id","path":"pointedPubId","signature":"304402203080c0a486bf69aa5e6c0b5242187f05b0c331510c50cca02e4721663923916102204e5c8ac70425ff2a3addb437cd0302b09fd769cf31b38b9914c6be2a00e0f3eb"},{"label":"nonce","path":"nonce","signature":"3044022021ec722852ebc53bdff303a327ac9fb8ca85d3c1b7331f3a74e36224a03f26a302200754e591c0e4c2420f4045d9f72b86829cb374572dfea7ebf9c2b02d1cb18720"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:a99363f790ad883fe3bb241d3de4b3afcdcb29d04018e7f3b858e123":{"contractName":{"label":"unfollow_with_sign","signature":"304402200e0488184cf4faf9d7942148e518530f3777676ac0c32ec9500e1def858c42fd0220716264c7be429bea5acf111c58c4fe7836933f13a1a87a8581fac110ff7ec52e"},"fields":[{"label":"unfollowerProfileId","path":"unfollowerProfileId","signature":"3045022100a01ea12793326480182402c1742d526592eb7c3605704488568c8a5bc6b879ac02206f8d48159f83c9acee651473315be799cf0a8d945685fd4cf80ef7815e94d101"},{"label":"signatureDeadline","path":"signatureDeadline","signature":"304402204a2f85d72695d14300907aad0cdf2fef138ecece23e2284b32af8dfb456e5d47022003a31e07c9104a9302f52b7e5896f8e4988a96f8fdb4b6ae8463125c2a711a4f"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:bb16dbc5aec39ac7140b2be7560b53dc69091ac405d0dc9c9944cf43":{"contractName":{"label":"create_profile","signature":"3045022100c8bc13779d4affa2535364c67fd0fdfdcfdcb91bfda2ee29645df5b10c0ce021022043679732fba8f9a4f2195bde7f9cc3008de2c3f5e5969e7a198b3765a013d92f"},"fields":[{"label":"to","path":"to","signature":"3045022100e29d5ee58e92a1f8640b0a87b9e148f9d1f453c5825bd98a6a3efb21569f8ba002203a3efee9b6a581135cbf2e02fab5297bfe84124c7b53c9a6c490e67902d99ab2"},{"label":"followModule","path":"followModule","signature":"3045022100ccefa65f301b19a11738d62082ab7717df57ce9ae834c85654324c2e96d0688402200c035b906f30b68be520a180de42313ad174e25ecda1a5f6953975ce824a39ad"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:c4318961bcd5f60585b391b40af279843ef5987b4de1c021a1099852":{"contractName":{"label":"set_profile_metadata_with_sign","signature":"304402205cbd8d6179fe4f3b58e89fdcb235973be3d43bf38c48b227212e50fab2ebad8002205bf98bdd1aae44d31d4e7d11cad5c5355796efca410a4079eb9a5fd79eac4b7c"},"fields":[{"label":"profileId","path":"profileId","signature":"304402206d3dc1a9ce664aabc49b5a9da69c973de34aa2a910965387948134155d5cb7fe0220057ce81243f25e6286f790cca12db07a27ebc83fcbb0878b6f9ddd44cd6d7122"},{"label":"signatureDeadline","path":"signatureDeadline","signature":"3044022069389e62eeeb0ded581ce91e752fb61b3db7c05d28ce95ea944b0b671987242c02202ec474a18cd966d8d9e20c9634fbe3e372478c5a5381efd369e14e1fbccadf7e"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:c9c7f3c34b7e22b2e08c9df904034aa7a66d2805bbb76ed439b35990":{"contractName":{"label":"follow_with_sign","signature":"304402202ee99ddeae71395ed85a710f1bde875a69d110d48d9942be8bfe5e1884199feb02206a230978387b6026ee9c97d0ce4b1c6f5ce40c7d44d57eafdf9a75718d432c84"},"fields":[{"label":"followerProfileId","path":"followerProfileId","signature":"3044022066e3535230da7c373f2913e833146befe76247d65db282385065e9023aa2ac8302202516f12f249c3739027b5d9ba43c5059da13773346197d7953c92340014e324a"},{"label":"signatureDeadline","path":"signatureDeadline","signature":"304402201c9d931d8a0333ccde8d4545f4561e2716576197d825f03c71979d9da51f3db70220546538fe354c9309dbdc1e86cc87a5f2b57f15d04a2909a99b1d1000151df3c6"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:d071f8811ba8d8972da7e2982b8796f9ef8623acd4d9efb47ea517b3":{"contractName":{"label":"collect_with_sign","signature":"3045022100ffc5e96ea59fcd16c7baa3dfe1cc1d6692d6c96e26cb2459df3dd91b6e861247022075fcff9df082a3a6976411144a96bf1020ef21355a83e7958399d52cf0ed6974"},"fields":[{"label":"publicationCollectedProfileId","path":"publicationCollectedProfileId","signature":"304502210099436784574bf76acbc0fc0545e906e8aa926602e885065783c2707812070e5c0220072ea4073ce3a6ae2a5a233482cf4d44825bc2cd194b1b4953ad9e508ba669e0"},{"label":"publicationCollectedId","path":"publicationCollectedId","signature":"3045022100bb04f580b5db9b6a4e52b6204dfa292339d89f22dba32519ca67b9defe20d96502201e7754b257580e553cd1ab13df0efb76356430d4867d820d76ad24addfb577bd"},{"label":"collectorProfileId","path":"collectorProfileId","signature":"304402205146b54e4c4e1f177f7eb14f2c3aea4d85099047a570685a106cc107ce9ad8d30220748afed65ae98795ff8d1c4421d003afb45920a52f3959dd86b70aea25f89f27"},{"label":"signatureDeadline","path":"signatureDeadline","signature":"3044022074f936c0bb1dd1ebc38eb6dc4bfd965a12eb3a76aff1d010d7f0852d1e3b04bc0220095f7dcc6a816fa38f4292618ab991a0eea1b69c9825f7d926621a79b8126fb8"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:e16be30e76d1fe7d10df971f8669e616e11b70590ef4002bb58f7d86":{"contractName":{"label":"ChangeDelegatedExecutorsConfig","signature":"3045022100ccb92e84fee211f1e1fd47abee3a39fad87e97988d15c468dd074b32629cec9302205f52145220b3285e3f9528be1797511f56ced0d2a22704ccc2dd4bfa7fb9b767"},"fields":[{"label":"Delegator ProfileId","path":"delegatorProfileId","signature":"304502210098f9f759088ad8ce5383a15004c738d8c3a39bf5418b0b65cd0e93ff4e5c86ed0220746604eb87ccfaf0877b531cbc296b50037718b57aa13f0201c14cc883f2dee1"},{"label":"Delegated Executors","path":"delegatedExecutors.[]","signature":"3044022020865f47450696ae64a2c628e35ed54ce4d8f13de1aed2065c87d5c9658f5a5e022008e511f727828e94a5709365389f20cc9d4378233767d639445cc17a46a87581"},{"label":"Approvals","path":"approvals.[]","signature":"3045022100ddf33e1b7793dca98a966cdbb83d0ca6d191708125a6c50bc52cd388f51c57ed02206ad81605cc962b0626b37bbe3ddc2023f22d8097ed828d395c31106063acfd15"},{"label":"configNumber","path":"configNumber","signature":"304402200b6e2d9ca322469d0d866a1d22a2b6fa23ae0d2dec7f8d5a51022163f2d0987902201d1e02f30cc9798115d5e2704165bee82afe69f2bb9af3ed626268803ee6517a"},{"label":"switchToGivenConfig","path":"switchToGivenConfig","signature":"3045022100b2157446fb6c5205c8fc6b97ea444083531b40fc95059d298829bb96e4d7ba8502207aa09aa16328195ad1e11cf5ed775c4bce5ded678157ae0ae47ee976e00daa30"},{"label":"nonce","path":"nonce","signature":"3045022100c7836dd3d52c1940889ebd8e377616fa52834f0822b7ea3c75bb6e01c2b4657a02207c4bba14de8df6a291ba01a76ac58ff13ef077ffe04481703ad189740bb9db63"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f0cf3d3b7ed7ba54e5dfe70cd7822ec56431596fa9d1c3e2cd2b4e6d":{"contractName":{"label":"mint","signature":"304402206639bbb45b91a9c309742451e2bf73a29bc75fd32c428ee60d58fb001353da8002200b4aef1c912feaf73e3a45323a7df3b8b2df44afdbd0237a64b3723c7053f72d"},"fields":[{"label":"to","path":"to","signature":"3045022100af1ae8906e120f6783c5fb2518696ca60332ae1128de9b2478ab45c789bb05650220417ec699e96bab47c26d8d37b2feabac7810946d5de7987dcf5af3c95e04ec73"},{"label":"profile_id","path":"profile_id","signature":"3045022100d339951d42fd3c3b90c389dc703af3093bd3fd16dee7f9f4239192f2b44f5cfe022054426b5ca70bc65e1703026c12b5dbf8d2e79928c9aa478f693388eaae1edb26"},{"label":"profile_id_pointed","path":"profile_id_pointed","signature":"304402204eeccfddfa2f9bf4dd9b9e1db1a9c91cc2f7bf22115c6b74676f2bfc53d820c802200bf3068effc45575b8b08fb809329a9c14769b23acb0b55012dd83df19533ec5"},{"label":"pubid_pointed","path":"pubid_pointed","signature":"3044022010452fa9f43371405fd88f66eeb50ddd95dbef93180ad5b147f9b368866d4034022012e23a825920c903a5fcb18db53c664a943e442cf79258536bcb576d4c839416"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f2d2c19e66c050722ce388552dc6bed2ed5487f7cf4128054d3d4b7f":{"contractName":{"label":"SetProfileMetadataURI","signature":"3044022037f24dc90ef82099d00622929b8ed180ff73cc92998160d234060f5e74f76cf6022068bff3003c656eec1aa2c5f7719e9d42993f64e46b72663257ecba783673182b"},"fields":[{"label":"profileId","path":"profileId","signature":"30450221008ed21c3944a3ef93c8cf1db94deec88844a51d6404933fbad3b72f0dc8f4e5e902200f5fe8234ae704a754ca5f90cd54329bb808b5f4e85cf37e0c7bae2c1965763d"},{"label":"metadataURI","path":"metadataURI","signature":"304402205ac0d9389e90ccdba173fd9b5bc206ff7afe5f94aa97e6be83542e74c1883030022072ca6572f6b91d65f00976c46aa9ab24cfb87773da72c6bd5df007c34adac3d6"},{"label":"nonce","path":"nonce","signature":"3045022100cb681a895a6b4fc2e0fb4648ee3fb398134b4cc8dfa8387e04616bf87261ee270220067b327a33ab2c24efd989d15694e6066597c6070179fb33199dd9d203b28a30"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f48d14ae14ca8663b397fafc56d53833a2eea3e8a6450961e58f274a":{"contractName":{"label":"Post","signature":"304402204c6f0130681c8166f9f89c73ec30aa48d5cbea6d3f65e222d1c27feaf3f303a202200f138d210c299d234c527eff77064b37883f57ef8263942c871101b49ffe136c"},"fields":[{"label":"Profile Id","path":"profileId","signature":"3045022100ef075942ff80ffd16ab5aee79178e68d453573937830cb309649d5bcbe07ee61022055d84b6b081ce5aa88d5f89db163b87e617d181ae6f8b859d70f06026bb19954"},{"label":"Post URI","path":"contentURI","signature":"3045022100aa09a0f04edac5f9241f187dfde4b0370091b3ba0bbbba37daec73246ee1b7ed0220265d8c8242e9cfb645ce0a18217ddab8b1c312aa513c9af1662c8b91b72920e3"},{"label":"nonce","path":"nonce","signature":"3045022100ac7a9acf7f5008efc137f632f5603e36541f1347a8cf2aeeafee7ce98f4f32e302202cbd3fbf86bdd772bb646febd6b5fa426dead4a840ff24e77d5fed9a7ea26d4b"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:fa764abeb889b33c2dd4e1396f1316d8cf49e87d0b5b341ced7b7f04":{"contractName":{"label":"Set Follow Module","signature":"30450221008d7d0ecaa7ae3d5c4d6ab9119e14ed55962722252addf490298fe3be29c8fc95022056f88897d6a0da3b495275071b8ca3a32f6d9b47b4f420d9bd2a1c2229b807a0"},"fields":[{"label":"profileId","path":"profileId","signature":"304402200a819ea2e5f20eeee5787138f2a7b32f3f237b48a014d049be742b52967c2d5902204cc6a95c24c2436b4e22a34ae5d3ad68d995ca9998f3a073056af98e8fb6dd0b"},{"label":"followModule","path":"followModule","signature":"3044022050576104c1505e117d9acb5e71cdb28c26b34b1cf2bd91cf617a47a838a4d4a60220034626740cf27f0a9c2d4f3e6ce53e0d612cc2c8e48cd5999616e2817cb57022"},{"label":"nonce","path":"nonce","signature":"3045022100946b8bcb1606ecaa3786b80c7dcf08f8c0343ec2a756c48408d617f4b341fd9402200375a2e3c3be53320ffddf1caaed5fd4c12b61cb25e35afc94cdc29c253dc316"}]},"137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3":{"contractName":{"label":"AugustusRFQ ERC20 order","signature":"3045022100a887a8b2f40695509ac6e040feb1a4a088fee459fd7e76cb137ea7c06b0a0b930220617b514271c05679e7ce04860ffca703ad2a21f4a45cce34b40e38624cf7ec13"},"fields":[{"label":"Nonce and metadata","path":"nonceAndMeta","signature":"30450221009fcaf300fef36d00f64c3d5e92991e67fd93862f8eddba0b8472568b5c66e38d02203a26f3aad1c0cf6638dea961f8f5e4ba5f72272bc7f1e33afac897a3b5b51604"},{"label":"Expiration time","path":"expiry","signature":"3045022100984f166ee1744b4b69e24ed1e49fbaf43a24e82dd5b7d2103cf8ca854ff49e0a0220326ab17879b902521fa032a89c5c984e52bf3e31c8336cd67a1ce198d7c36e2d"},{"label":"Maker asset address","path":"makerAsset","signature":"3045022100f4ec14863e0512804fc69d82fe17bf576340ae8005d0c48520cefb3254b102f702205fea57ba3919071157ff3ee0c93472e936f1dc079bcb0c447bb87ad86e505ea2"},{"label":"Taker asset address","path":"takerAsset","signature":"3045022100957771ad2eced04af9750c1df10cc5b5b913fd3f9fe83408baa766573ed34221022055a1ba30b3a8895a011719ac54adaf7bfd24fe2c5041a90348097f719bed0dc7"},{"label":"Maker address","path":"maker","signature":"3045022100f25edb42b652d5c645de567c201a1e6a64b0d6b23274cde08046d955cd2573860220129bbded4e33150cc38b93033b2d70d5fa141066f1ed7c603b5515ab8cdb2fca"},{"label":"Taker address","path":"taker","signature":"3045022100c8790938f88557986c769102d31603849dc8c560cc03a45db99ddc90d69306690220295950348fffc22fbb898d75e768edb1edcb1c8772cc3518ff9687e957a87e50"},{"label":"Maker amount","path":"makerAmount","signature":"3045022100b5e1dc4e5f69fd80611a4f5c7d306ac6aca4a2a2103515d761557e532884ca8702204b86dd5c323345242f1c1b263ba035932a10a5b0eeaddbc79fa10db27aa9d7d4"},{"label":"Taker amount","path":"takerAmount","signature":"3045022100bd1de29559311612a7d0bca3c61b10d9ddf0753be7c372ebb95e0b69b674c01102207d685aa2b0a2309ad094a5fc8e09210681781f9a4294e4c7973d0ecf1adabcbd"}]},"137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623":{"contractName":{"label":"AugustusRFQ NFT order","signature":"3045022100b9798555ab901ed3cefcdec4aabd9418f3561fba299833ceadbf9d3043a996a7022037388e3956ce02764088733d92384fb4e669754b037e8a913995d761ac0d5cdf"},"fields":[{"label":"Nonce and metadata","path":"nonceAndMeta","signature":"3045022100b57c5877ce124196316dde0e2fb0f18258521cc2c7c27405bde78008bca27d8d02202053d4696b28b40fd1a16e7a179020c7d633e4548da0bd92f9442c24da12d510"},{"label":"Expiration time","path":"expiry","signature":"3045022100b35db3057953f7b747d4423f688d8a3fb3101729f37af65c4ac4fc9a7ee8fb8d022033f4d70422b437593f00af75828ff067f914f825bd3075f8462080bf4e0f9ae0"},{"label":"Maker asset encoded","path":"makerAsset","signature":"3045022100e2e0f280d333692a776343669d6f17dac3ded8935d5875964d5ac6b05bb093f80220589afeaf7a7baf3b5964b439111d07deafe25be8a32b43640a2cc073a7257aa6"},{"label":"Maker asset NFT ID","path":"makerAssetId","signature":"304302201e35015cc3bbd6ca28bd57eb970cf1eb05826a4988c1238e951574f8804f28c2021f0cae62ed8199b725a39e714e60c92fe522ac7992c3dc1a27866f749547de89"},{"label":"Taker asset encoded","path":"takerAsset","signature":"304502210094d2c3de8a61bf940dc5c8132070ee0566ab6d0059f1eff5aec3ba1ec04740a202200fb41470f2693427466a9ce580d5c9ff12243f848351c7aa2ac070c1618896e2"},{"label":"Taker asset NFT ID","path":"takerAssetId","signature":"3045022100f9b55eafa8d519298960b040f36a7479ace9d43b677d243d22c3194147dfa033022025f7a2962e342ee1572f814cd8b8cba1382deb20054475ba9df9dd321bc9fcc7"},{"label":"Maker address","path":"maker","signature":"304402201aa4061287e14289ff1c4fdffe8ddd811775aae4bb6577970ebb87735102a5ba02207d9c89254e9698a7aff849a87c2a163ce9793212a5fe3745e446393c6a71ec46"},{"label":"Taker address","path":"taker","signature":"304402207ca92ed4b465b4fe1d4b2dd65561165a70b54c8dd132dcf15031c799c8ab22fe022041d7bd664003c62e949cdb0ed09a744ac6adce7d6e676e4de22437a830edcf74"},{"label":"Maker amount","path":"makerAmount","signature":"3044022038901c22513acf13bac39f553c763d26ee32c3e6e215ca3cb69da0274ca901c702204fce716fc91f3cb7ac7da446bd3432020d002c5a62c48d199d7b4379fe93c9f1"},{"label":"Taker amount","path":"takerAmount","signature":"304402203361ee1439f545c9664035be586925b2fb4878de9dbcdc7a519b5eb95a44ca6e02205f905942febcf5342577b5af149ea4deea5e6d0e1ae17356bb1d0628d8ccf8ff"}]},"137:0x27f8d03b3a2196956ed754badc28d73be8830a6e:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Aave Matic Market DAI transfers","signature":"304402200ac5ab94c126dde729e0159a1eed721dc3caa04f908312aa74c66af16004fc7602201aea814d65a8fa0554432cde24c032faac6a773fc00cd4c9db5a0e7f22d7c99c"},"fields":[{"label":"From","path":"owner","signature":"3045022100aee488b860fd511c87449f2a833590a501850564f4613eb5cf03466303653f4002204c4ed53c89bb8fcc4a065a3bebc2c70c3fbca495edfa74c7f76b4e7297229713"},{"label":"Approve to spender","path":"spender","signature":"30450221009514d69c48b51d1524fcdd437abf7db5144750ea606f48e9577a2d578bf4fb1f022020f9ef88c2ef73eb31bc05e4082030473ffb7b466770fc853736bfc82fb44aae"},{"label":"Amount allowance","path":"value","signature":"3045022100ff632293010430e41ab30acdb0be9cbf9aee0c4d59003d9bb0fedfc0b06ea47902203a60c5f8db639d26dc283b6923ece5d24e040e905da0ac89c748b445ceacfdd5"},{"label":"Approval expire","path":"deadline","signature":"304402202ea95fb0d6207919da555251ee616125da07e64d71c2052d719be012f0b18d90022047344eb1821ee042ada2007ebfe04c8cec9e695305a3153b8be8748ba34a0126"}]},"137:0x28424507fefb6f7f8e9d3860f56504e4e5f5f390:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Aave Matic Market WETH transfers","signature":"3045022100d82c58e57d3d4040972e93cd45dfde23f59291603f0f6e77911f4d25210e532102200f1500ebf2516f1051190a05641219627ff2ac78aaeea2f67d723990089a0890"},"fields":[{"label":"From","path":"owner","signature":"304402200fd95d9d23b7f6e91d3bdeba89da05b66391f8883b9f7f66b30cf645b6baf5c802202ca600bd52e3ed1cd580713ee3d6f0b96d47e09d195979ac4b023ad8d06bf16a"},{"label":"Approve to spender","path":"spender","signature":"30440220720a40e847932e9d428749631d4086ab7b3986473c98ec54e09bd116717d3ee502200c4f39dee8066fa918f4e364d3e3c7331fb2ef495bc01cd24138b8df6b49bd44"},{"label":"Amount allowance","path":"value","signature":"3044022070173b1f7dcbee008689dc5cfc54e227fb2ace5a728c3a769f9a27dd7ffebf94022045e91c91f9479da1fd55dcf68aef25df49c13281c73d8e7cd8b9f1a0c37528f3"},{"label":"Approval expire","path":"deadline","signature":"3045022100926af4150d1cf51f5f890be5c14f0ecc5d0a15032c0db4185fe864352c5b83040220021281e74f3a9a0701686a5ab97ef3fd547d25a41d83e00936b630dacf461c57"}]},"137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b":{"contractName":{"label":"Lazy Mint ERC-721","signature":"3045022100977ad189fb3f8c809caef784ca6c66fcda1c98274d92219b07416e43f43187af022051b069af307aef8d7b3b3aaf815eaf0e7e91c55f994616f3ea88293dd69f217c"},"fields":[{"label":"Token ID","path":"tokenId","signature":"30440220403fc14ad30f3f3ea597f75d88371c83ef2e10130a5143faeda87dc507fb9aa2022056202bc01b283e0f625b82c73db84ca3f17eef6d9eea89709aa0a88eae17096c"},{"label":"Token URI","path":"tokenURI","signature":"3045022100ce280997a6b39acd5dc3522401c205eb4719b4b43e7e673958f1c7b7b97a8f59022042eb6a70f1f45c771a697eb85b71ba58acc8074ac436d27840ec1325423d7e0c"},{"label":"Creator account address","path":"creators.[].account","signature":"3045022100f072042cace3b6ce605bbf0db7c3941928cb1ac5b6011bf47e04d76f57bbf392022054eb24e12319d88144a5e4d15a22271f2f1285d51f1b7f48bfc46ff1724c1741"},{"label":"Creator value (10000 = 100%)","path":"creators.[].value","signature":"3045022100b5517383a1f9f7281859e1e3ebcc588770ac08fe7961d83ebff3ff922674fa3302204c490c86d4d987875aa55c089a6c8bab4414a742bc7df19f67261a319d4d8c17"},{"label":"Royalties account address","path":"royalties.[].account","signature":"304402203660c0f0da24c89206e992e46c399d75d4e0981dd86bc145f4ed0d0ef469b47402200948f415f220225eaa67fb03749b2d5ea1ca8dfa76eda34d15c8f95746e30bd4"},{"label":"Royalties value (10000 = 100%)","path":"royalties.[].value","signature":"30440220747d86766a08b5bf78182dadf5ace3813cb8190266e5d1a72f2d94a387fd6ba5022006c69b8171a47fa15ef906fac4546856dd9467a8e1036d89e323614e64d29715"}]},"137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8":{"contractName":{"label":"Meta Transaction","signature":"304402203e256b1407f82dbe395bee10e34bf5b995c3fa91737172b58fb41bcf8e006eea0220046543fdb21b8f65e050b57081915c083fab2abc1cdd663ce53b1c792dbfdfb2"},"fields":[{"label":"User Address","path":"from","signature":"304402204576c4999dd6a70df131dfd032667a42695d333a07b3599ec6d72843c54b48b502202cf424d057bffceadbbcd9023b2241bab6d2faf8b7324fbdf87f5daa9789fe38"},{"label":"Meta Transaction Nonce","path":"nonce","signature":"3045022100e094b23ebe8102c3c1aa5f802c33ed56f48bc94f6446b289ce358ea60ac375c0022013255aba7dc03fcfe30c7eacdf7a14ad0c51f389ddd51f7c4ba6e8d9bbf3dbb7"}]},"137:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b":{"contractName":{"label":"List Order","signature":"30450221008b4ee6f1b492d19243afc4715d1f0cd9bf79a1aeb61fbf58f0e1323bce9dbc99022001a8a548f081eba23f33f03e20f478c33bd264efb3d8bfa16ce96e0b69ad5428"},"fields":[{"label":"Order maker address","path":"maker","signature":"3045022100f9851e9dfd9706740307e7829705b3e049390755e36b26a059f28d6bb47ac949022029a4efc35a2264fbe8f88eee1f83c430fb5e96bbf55e6deb31a60826cb0203b3"},{"label":"Order make asset value","path":"makeAsset.value","signature":"304402203bf13f37325f60973b02d5433857676ce135f94011047bbfdd2b97c30db1a069022029f409c7689891c222cdec4e63d143938ff73a4f6cffb0c5d56228d572d25fc2"},{"label":"Order taker address","path":"taker","signature":"3045022100bcdc72ba9f16a3ac3b73ad04f445a60958a7ea644511d9b917c5ae52be52c76b02206a68b66cc24c79e45687c07a201f7e910444a66a657c615c5854ac7065b0c6fc"},{"label":"Order take asset value","path":"takeAsset.value","signature":"3045022100c23622dc64172dfedc8fae04d5fa24e25f598bea659e703839dccf19736ba13a02207554a945d0e9c2816860ec7a6c4aab9088fb58f5316c1007d82f0add61693954"},{"label":"Order start time","path":"start","signature":"304402200cfe7613b90190a2c4dafaa661e5778a7756444e593a8e16105da315231df264022025e1daecd1752763decb7c51389a5eb97037536ecea3781e70ab428d75e1278b"},{"label":"Order end time","path":"end","signature":"3045022100d0047bfc769190c5a173c8bdf79a2fdef008f0674ac04f3a7fe100553f41dafc022030e7ef0a1dd8f6f4131da237f6c33a331add85dd747f7f9749806759767d0880"}]},"137:0x7f19564c35c681099c0c857a7141836cf7edaa53:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8":{"contractName":{"label":"Meta Transaction","signature":"3045022100a2f95042a915f8ae76b54b1f012271a44356484ea6d4963b81e6806ed6fe80500220564155498a275d3fe5eec595fad3858cb2d7fa85178b98208d09a886a1485257"},"fields":[{"label":"User Address","path":"from","signature":"3044022051a39f6c809110faf6aa95fde98315c0c2b2cac34c31d927c058a2c0ebc158cd02206ccfac20b0327ac6e2ca08d5d53aef189b2bbe8bc010ae9002b25edcf43c2f06"},{"label":"Meta Transaction Nonce","path":"nonce","signature":"3045022100c1e15f064b9cf3d8cb2c6b297318c543066a12868419121c7062ccb7fb2f619b02202c3079f47124d6a25178d4b8431acd0bb08f44e9a0ec302e71bb4cc9b49a05a9"}]},"137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9":{"contractName":{"label":"Lazy Mint ERC-1155","signature":"3045022100b85f48fd591345542f9e2271b4f33e71287a703eda9f9f7b54458dea60fb59fa0220661f4281eff16352e5e8db92a254b6b74ac0f20e3d41c9042a3c7c9f7397bd08"},"fields":[{"label":"Token ID","path":"tokenId","signature":"304402203dfd604170efb9379c36e17439f15f441b437aecf2d9abd0dc8b0c757c15d1fa022007fde07992c2b3797e7aacb7309cb60d494856d7a9d5866981a8948abf4d6a9c"},{"label":"Token URI","path":"tokenURI","signature":"3045022100a334814c15bfe1474472e56201aa83aa7016648b2a92aa2ae7c4d86b8a412eaf0220416654d59af289a253a96cbe4f5c9b75c2129d603d94cb3c7966cbea682f542a"},{"label":"Token Supply","path":"supply","signature":"3045022100a180585fc34f26b83b50c1d7609a0623b85b76267e393bf2871f41790487bf5902206c296108c56f2a1557a66a04f05bbcd7f0e0e0cd7a7a9764783673c0cda21d1f"},{"label":"Creator account address","path":"creators.[].account","signature":"304402200a32f52a36f61e3b62af734ceea6e02ebf44e9bbafccb92b2570b7ae9666638e02205e8a0ee1634919bab75369b611257e17c12cf379a4b83e3da2089de13863baa0"},{"label":"Creator value (10000 = 100%)","path":"creators.[].value","signature":"304502210092c988b7806250d99ca2760167a0c72f4c7e20f8f9174c519421bba8adc03c0a022032f33a3843e31b8ad17991e8eb3e3b922c5c2b9570d930fa9456b6f59b8974d3"},{"label":"Royalties account address","path":"royalties.[].account","signature":"304502210081e5ed5701d2bb497c4b1cadd0ca61220b1078357f7e3ace908c01fcfcd3abad02203b03cb75eeabcd49777362466e3af9a461ad39059238748ed7d902f988db3318"},{"label":"Royalties value (10000 = 100%)","path":"royalties.[].value","signature":"3045022100cc555652ef532386da9ad2405536aaa7adbe4cdac73ae9b2a8d4b0659eb4013a0220030799c1a813bef66c6395c7305a1f98e3bfc0bd045917d63bf7bd24e09fbebf"}]},"137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8":{"contractName":{"label":"Meta Transaction","signature":"304402202e2b7810798bb8d8094ff46e47ae09c820b374420984f5c9845139f7995b5266022050244aa907e45d7ff4ffc0b383262c4425d32aee4190bfc09fff359163268b73"},"fields":[{"label":"User Address","path":"from","signature":"3045022100da2c6c45ce4014375aec27ce7dfc470a066a53a3ba812da7f4fac641fc48334502202ce049c05a76e19fc4195a323464383f3eca62f33a435ad5807716af1a83af4e"},{"label":"Meta Transaction Nonce","path":"nonce","signature":"304402207b53dc30da4e7360a2deb22ab0ee2ddca9dda1c807095a57751dc395d7d503c602200f464f277a17558cab3b891fe8d4fb232b5783f26f6813da77ceeba527bbe1c5"}]},"137:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3045022100d259cbf0306cda1fbd842725394b29020aaa05159884cdff8c256ad87e6d55ea02205e5c7bbbbc030c2e1362e41185312aa8140802495fed2325031da2af79dde7a4"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"3045022100b0c62b0c9e085b87332b8a32a7106ca20027f41501abf28f2ef6eddcfee70cb2022048fc3ff7d0e8840f4f6581f0026d2099034011b572a9b87804e2e5b4559a708e"},{"label":"Amount allowance","path":"details.amount","signature":"304402206f542985fa2aa16417942f0daceb72b951c2c485088cb8dfa79cba7358f1cc0a02202d31f11b13df2f15c143c727dafc2aee2c34d6df8eba28e8c44d9a5d16493c49"},{"label":"Approve to spender","path":"spender","signature":"304402207d9c68450fd568c07e5b5ecffe29747c64d247cc1ccc8cce83d4112d029317d202206c631ddb8ea90ad75aa1339f2e966b72193758615f303af6c8f94c733f6e877c"},{"label":"Approval expire","path":"details.expiration","signature":"304402206a2fffb754431f7c4bccf3e9e4d0685d90717e995e4c719dcf56fa55d0601dad022021f53e18abaa4ac5ecbccbe2e87d16acae1883e78ff6de3427ba0c2a306bae81"}]},"137:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3044022056450131868b314ca4a0644588bbef0223365b771c7d530c5d522216c3f6acaa0220648f89fca96da29e3049ab69fc3d5a97e42a749c60b1cb78daa3acfacbe577f3"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304402203502b372181142404d4f77015f2fdffda0a4696039b5b7a8120e7692878a9fa902201d5731834b8dcdb805a1201caeadcf284117cc5613db44c401475641263dcbfb"},{"label":"Amount allowance","path":"permitted.token","signature":"3044022002082a79a98c769ab699fcbf16a2dbe466ad07de8da7e85142f22fa2e9d4f6cd02205f3456700eb673aa0d3576ff086886dbe6d46a2bc47a383e5f25eab8495f64b5"},{"label":"Amount allowance","path":"permitted.amount","signature":"304402202b2fbb0d1a344c360125ec9403fc6ce42148824d86fd939138c1ce28d6a1fbc1022015542187af47278a9bcef98772eed3f5dc305cf53828e27e82358cd55da30e9d"},{"label":"To swap","path":"witness.inputToken","signature":"30440220088a0461f791327b18760ce42ea1ce6074f35412aa5fcdd940125bf36b283cff022051c26c42f6e2339a502b7a0234f5d1ffaa065e11c282d5c2355b22796266e987"},{"label":"To swap","path":"witness.inputAmount","signature":"30440220273fd834432c1375ad939115e8964c7324d1011136ff8ef68372b21b9d8e85cf022037a9e00b0ce34c74ea89c647ae68cbb80c9fb6ebf93326c1b6bfc167758503c4"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"30440220431f8d9a182a7d233d23b6c7279c86032a0f67ca12a3e60e8dd1fee0dcfc896202205af02a1dcd72dc193e87e73bf35dcc5aea1adf4c05da0404dd287951188bf193"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100c5f09dbe6709756a1fda5e5f2829cd4c88c2a8a12112ecb2db1a6fd69b48941102202d1a58cf6b072a8b75527f2e7f1bf3b6500d2cd22c44eb09516eebbd4b5bbbfb"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e8ad0d17420a31ede8ea9a1bcf1b4a74602016fce59f1d2f448268356bca1102022035f7a6e24c73611965e3a9424403c3c56f65bce994761d130f0205ddaf859ab0"},{"label":"Approval expire","path":"deadline","signature":"3045022100fa254d017be4d4c433d49975bd9f9b2e3af9728b2d53810bf281ba5c1505fd7b022078afe919327a763738314b447afa91cf42c2c186961ae12d56a8fdab14b57ca9"}]},"137:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3045022100f3a91aadffab51d26e5dded9b00d0a447eb3efefc3aaeff52805b3f42636de5502202766d3e6a86eaf5a28968bdcc71ae55f35bc4a88d816223094397976a6f23cdd"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304402207518cd346517944c31b81019f3af5dab9945c074a0b1ecff4af822a5d9e7f98b0220053975c4e589dd3594f4e584306b7f3f6f79a356af1eb6c740d1cd3b880125a5"},{"label":"Amount allowance","path":"permitted.token","signature":"304402206a31980f0bbe30ed5768e8c2761560879cd1a9a840d22edd869e727bf2239ef802204d278590f5ff29cb9282e14d4ee198c3b7ed9f72ba5daf5747a5fc7e01b9d721"},{"label":"Amount allowance","path":"permitted.amount","signature":"3044022026b69ac92550360282aed1e73826cec75e42c5137c893bbb1ce3f9e2bd88bbe402203af214d3c3dc91dcee4fd1d919805193462ddcd411459d413beb4aecd10858b0"},{"label":"To swap","path":"witness.inputToken","signature":"304402204a9980955247fa0f2ce62be0862f70881a74ade55439e511d612c4acaba1d5830220048602d5b17ddf377366110267c7f994ce4bd9280f871ce6037d22ef9a8a390c"},{"label":"To swap","path":"witness.inputStartAmount","signature":"304402201dd26b80be7890a44ce323c4c98c2978d96f4d25fc6465be7c4a079af701694102203b5097e5d1f1f58600ca14c052f7c686ade4579650ba15008faf094bba528e9d"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402206eb54ec964fa667fb6a130710c6770e84fda83078c2a877ede8d817d00329ea8022030970ebe404e2f4739359e44a1581ab89b391122a91e58b225b007235454c173"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3044022009cf5c5c08e8e8022a7ff466218156653ae123dba81277b5e6c1bc7f0615dc5e022053a53758115bbec371aeaf5b1ed209d9c013299cc81227a76c926c5a84c46c7c"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e3970afb8a471b9fc6834332077fae22791cc45451da4180f48ec29f97eb259102201c57886609f9763e18a3de24e3a310dd0616f2333c47bc8ccc5dd35923e677ff"},{"label":"Approval expire","path":"deadline","signature":"3045022100c68f181ca5d964a86c20914162f894b55651013505341de7724608533a9e08e902200a4f7e1b5eb98dee87830a821922427d30aaa1ec7c7368f1f894a43912a60365"}]},"137:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3044022074d08efc6e2defb1cdd7dbbf0ce076cad0fdadff5f64cf9ee03b2a601cc1564d022057d1c94befc8cae1c631e601b7079a473e0a0d5e65b7967018caead0bda47d14"},"fields":[{"label":"Approve to spender","path":"spender","signature":"30440220214343c3d61640d1060c8c77e87a4f1c2049a42608ac27e1677aafc959f2683c02207d097d9336cd21cf842e1105dbfe19f10e15089cb2b43e456a7812e742435be1"},{"label":"Amount allowance","path":"permitted.token","signature":"304402207ca78ff2071f4ac7747b8c38add54a53fe94f36dc7f47c7012a32386e4e56024022024408cd0187979768428be8aca20016a30af8fa1f64c8d90b1aa1bb4ce455c76"},{"label":"Amount allowance","path":"permitted.amount","signature":"30440220303ea2dfd29482368d0416da1a5941ed0bd57c4728d0ff6bfb7f3586e757243e0220669e8db841cbe6e49634362711a05cf6ebd855aab48f66e12bb8b11d387d5a18"},{"label":"Spend max","path":"witness.inputToken","signature":"304402201088939cde93435e30a6ba67e4ada48886748003acf304b535a6980cd7e273c902202f1f4d56f577e0f0eaa13a2208c4a85bbab9de77c08f7f3bceefa35a27ebf752"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"304402206f6100efbf09c7cace10a0cb2d283741e090c0c5bf2410b36c7d5dfc7b394d3702204bf09d2c6e6d728fa8451f553f9d4678d004dc00bdc05510f33c6c9a0412f144"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022043c32d3e1b5b644799aa8c8a5813cecb40956c282c227c87b6d692a1cef5e7f00220077a6e81cece0f12a9309918028060eb03842d3742ce65e8b364819bd1051650"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402203b079692e3c22218c0db1e14bfb3158901d89d466716f42aecd1737cd7857221022016ad9291aaf0a3388e4f21f6068d6610d560905175826e5b6fddd34b5b06e40c"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022079391bb740cf2e4a878e31cbf4c41940c5b312985245079aa3ea2ada4cb2862c022032c106c5981577447738eefa31216c734fb0c908a817b545aa7be529b1c29734"},{"label":"Approval expire","path":"deadline","signature":"30440220106d3b46029248c9f503a22050f4535f38c4287a426305c73b8651b1bca6baaa022015ec4e929e24353c13015118255deba0e1f38b012f16f6b7de4c375cc5da8da9"}]},"80001:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3044022015e91522c1c70a6d7f7b6fba1585ed3822af2f245f54805669d5897f8e8804c302204ac0b96383ec1fa0157be86de551cb9972600d6f58774af45194b708d61cc4b0"},"fields":[{"label":"Amount allowance","path":"details.token","signature":"304402206a011e76441d5f7894469c9dc6c06ab8c4ceac6589a822aee7f9aebf32bab0880220566573f29f38b1ec187d94d502f588643c0a90f4d8ea1cb0dd187d7be2954106"},{"label":"Amount allowance","path":"details.amount","signature":"3045022100fb61f9c489e4d2128d4d0d438e29af17816400ac86087469ea7b30dc6202afc202206c2db87231d177800d7dfd3acb22e4a085953ff8d1ff42b6413c1aeaa1151c1e"},{"label":"Approve to spender","path":"spender","signature":"3045022100c19dd8af5d23240c2437f7eb3a082fc1c8ae9195c178bdafa119d370ff33499802201d67589fae70268a7080f09c162bb1777bba7281523d34c37dfcb496e3cda151"},{"label":"Approval expire","path":"details.expiration","signature":"3045022100905b18f59d5eef6ca650a587e6bd6e97832107013424fd2be585e364cdf12106022078d776b0480fe4fdc4e3b64e7b9a38a951c4ea3d7afb105ec76a66f08d1590e0"}]},"80001:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"30450221009d336e41e39830bc5fb01567468404ca6371f13c75e8102647a77fcd7e1327a10220696e5f853b1fa5a19d6caf30859cd4e17981f2e0b34755e1e1e588c440998f38"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304402205cbae5501a5041672f937fccf36d87d19ba998b90a61ae26d3c4b4282551414e022037bcc80671ada5e3076281ebc6de328331846968571146f002708245da890a81"},{"label":"Amount allowance","path":"permitted.token","signature":"304402206c49952615651455531d71250c7e51dc8a04d4799a343ac3bdd732399cba586e02203b8777e4fba7d0e153f3a2d0e80da3f8c6d861c2d3c724550937297e78efd72b"},{"label":"Amount allowance","path":"permitted.amount","signature":"304402202bc9b18aacc8d3b7acdd87659aa556e872ddbfbf18ec1646a5f479fe4f9e22db02203ab72937ceb9235bfda2442102295b7f6fb8852e91782cc746ddc556be81e2bd"},{"label":"To swap","path":"witness.inputToken","signature":"3045022100a41526ffd13f1555151ab6b470df7fccd306944eb22296bfdaf42a2f8866c34702202fb75b9ae194092f7771f19f89d01cd6d5368c8cfe9215a28469d8ddc3a350c2"},{"label":"To swap","path":"witness.inputAmount","signature":"3045022100ee6ac2814e535771cb8ae42632470946b3aeb5dad23c81df803d6a3ccb53b5af0220431f9b18c425ad88ba8d5df656c90faabbdc57b15f47922b8e0732727643194d"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402204a899d971e708e9f4be3e7044b3ccc0407babbdf35dbadd6d912a6bd691656df02201e4a7d528901ff5dc58a812f8e6c8b1ad08aa16e42336a2e682111be13d5b47d"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100c77b95a129d17f1c163a54db3260cc6aee8d9a686b9c9686d615a7e23390d7cd02203bc102e5e05182501adfde070fd6caf75cb26292c242846131512314f2a49219"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"30440220428d1a58e563f844783b7ccd1ad5e5fde891c7df3c68a9462c16c2473cccf6f502203102a61a14c3cff284054fe2c0be781b5a1fd94fb41a27fb0f4d22c940a4f166"},{"label":"Approval expire","path":"deadline","signature":"3045022100e5e48a7d1971032330a12639260ddfeac1a691e5bb595f0d69ad82929cfa757f02206ad372e4fb67f0261ddf69732e7552dfbf987acb64862bc7e68ff594eee85497"}]},"80001:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"30450221008e02c726bf26cf868c71259a42b689a44f9831959d0ddcc5ac383c84bb0bbff10220703c3f4703639b9419171a58e089c7e51ee700aac154b160991b2085a90f2170"},"fields":[{"label":"Approve to spender","path":"spender","signature":"30450221008129174f55689c87a4ab3bc85460c2ad3ba932bcd17c320c838f49ecbc356bcf02200fbfa2cd5d7cf2adc1d4fe510915ca868c0a561b4eb998f353e055638c424add"},{"label":"Amount allowance","path":"permitted.token","signature":"304402202a0bf116d4154b33114b0be1c7aa85d252905fecb5be1c489e7668bf82dfea58022036cf082026a3996873d42437aaa9c1fbf19f700aec2ebc4a6ac5a00970661b4c"},{"label":"Amount allowance","path":"permitted.amount","signature":"304402200c2673c6b42993111017fc5833201c80379c9bc28f881a3a38ca28be39853f31022077121421678b7ecaedfcb48fdae63cc1ecb466197fd7ed4175a42c922ddfa8d7"},{"label":"To swap","path":"witness.inputToken","signature":"304402205f32f17f74c43a1e9c8aa74ac1cb89de40635b4d889741640312811d55cfb7740220367e54d0f0a6bc2a700bf2225a6bbaf1f4f513a434fe051c4b4813214ea08c96"},{"label":"To swap","path":"witness.inputStartAmount","signature":"304402207a64c86f6486e36798a3f4b8bff7150c4557e3053cb7be62a631b59d9f92bc8202200747e18e9d61ea9b5fc5a71634ad0dfd945b7250f99a2743c1cd467f4038955b"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402206e2786d2a7c562a6827a8592815e65d9d05361a1ec93960ec551567fed92a63b0220453ed621d94f50995f5dcf643b43c5578bc7113ef6de28a3a6b0a339b5fb7820"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100f325ca8bdb8cde9ab52819c8a42cbf4a56fc7c76c1ce360fce9a9cec9dabbc6f02201ebfec336a311bc0c048563dbb7f6ab4813c74dcd6e523adcf7daa36f960e3da"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100f9ea4f723651a6330c8d7b0f86b576eaf5361f3195399f2a4ac4c491f57af19302202d568abd40baba609d09770725cc8082aff931e4479c088c5fe4a8955a7bf0f7"},{"label":"Approval expire","path":"deadline","signature":"304402200086597e47c7904b3c09b0c56b9ceb6fb4dca06a15be4403dd49453c72bcce1002207fdf13e03f995d979b3267ba54811b37f4581c8589b5b42077a7134f4ddf4385"}]},"80001:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3045022100aaf3d94f2a63c782c0c1363827ad6516e5c5ed77350bde5d1dbdde75a302fb1c02201fe0dbafcd6fe5d4207c5db5b9e9d5e6e9022fcd8ac2d4d0c5c94d95923b692d"},"fields":[{"label":"Approve to spender","path":"spender","signature":"304502210097c9fc26409515773823ebbace587b2c040f78db00869eae59edd5f56a88e72802207eec9db2e4a0833ffe59a7844315e17fbd61f0eb8765fc8d949f0ec6ae6b396b"},{"label":"Amount allowance","path":"permitted.token","signature":"3045022100d58d63c10f6511ccbdc33b8cb8488781058a1bdf3928e64bb36bccbfd44a4e96022021a4100d03e77be004257b8f1b4c33d9f9b69ae412c7775172839ee2230dd686"},{"label":"Amount allowance","path":"permitted.amount","signature":"304402204a0694f24bdeab3eed5ffca98067732394adb6481f5f2dd06f5a56d1b77e46d0022012bd7ade8fcc824119d4503f9b8a8957bb1b60780824463a200200a7fc9e53c6"},{"label":"Spend max","path":"witness.inputToken","signature":"3045022100d4d1199abb383ca579c0716cb3367f0ce1d05a2adcee57a3e48c74a0de0ab98502203ea437971339956bc78b05ef230ece1e092aff7ba9a1c3a3d0724fdf022b6d39"},{"label":"Spend max","path":"witness.inputStartAmount","signature":"30440220258a912e86b9a3e73ec551693b63fc37e1bcce2a37a297744922d0446403b2fa022068429c027867e879e7696cb0303aa497dcc75d24673eb5a4fcbccb8a9652462b"},{"label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100ae64e162a06dae806c8d9d3bab0b4db4414adcb9319d7c619c5a39dfbb705f44022038f88abc2a18f8dcf58708a0818df060b27c35484185100068e0b1c579ceebea"},{"label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"30440220682d1d814608a2d680aad01bd2b7b7a02a413617339488f2607333cbc1978af0022028412797455cb32181b5e29e9b4f7680b4334f8a7c02aa0f18de0b48d139ceac"},{"label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022031fb26b688bdf77b431d294f406f7a2895354ce5ee8276d85a1f12e05234d0bd022021f6f9c04c05da8aca0fd552278384a2f87b16166028dad951e6c281c5cfca0c"},{"label":"Approval expire","path":"deadline","signature":"3044022003dfa8b8d04150e6a11de1e7f4453cf9abcb7efac92b0e900ebaba9ee5db31a202206a3608beb43d3a86b0cf66fb711acc3d27d61cbdbe47b7085e91b8f5fb9cb75d"}]}}');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/eip712-hash.json
var eip712_hash_namespaceObject = "\"68f08e330f8180377038a7c3623c9dd0\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/eip712.js


/* harmony default export */ var eip712 = (eip712_namespaceObject);
//# sourceMappingURL=eip712.js.map
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/eip712_v2.json
var eip712_v2_namespaceObject = /*#__PURE__*/JSON.parse('{"42161:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c":{"contractName":{"label":"1inch Order","signature":"3044022020da162d81217220a0ae92baec05c5e99cbb391469186e27b2609740980c7dff0220285603f10f261ae8a02779cb97033906c5a7901c9e3acae041c2385d17182290"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"3044022060df9e42841cef20df24776b08774abf84cdeac36925b5c5817b02a57138718702200b8d4d0c56f01cbbee2334c9b62d05324382acc3e6ee0b5426871ee1117d921e"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"3045022100c72efd4fb5d926b6ccd016f43b77da6a4de3c7632b45f3f24ecc63bbe4a16af60220068812c772486ca2637242dbadad9f8f205a86aed091812bcff79d93bc4f35dd"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"30440220717854aba5ba0b46dc63c80f47958976f3a947eefd6cde16cb929caf3ad09e7302205e6bf8d1cc989de5c016caddbc068bb48664e258af1f9ca5a87d756efe6fb967"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"30440220531b40393dad97352a420de7d6018fceb014d5065c415e92981cce45e0ad553102205d6ea2ca4c7f6b6d77cc06882507aaf76fac6b5bcfb5d53325a54be1273bbbd6"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"3045022100df54d3f147f984f8065804e4d549bcd65660e627d1a7022f4893ee0c4a9c51e202206b468260ccf25d84294a6f20691a982701f7e290d71b46ee5464e13e4adaf41d"},{"format":"raw","label":"To","path":"receiver","signature":"3044022050a705227d3b7b1ae5fb8bb170171b47ba7f54243df6b417f669bec5c6ae072902206d293823929e946f2207efea226dfa0e0e6f153729d5351e664da007bc75a6a1"}]},"42161:0x7f069df72b7a39bce9806e3afaf579e54d8cf2b9:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337":{"contractName":{"label":"1inch Order","signature":"304502210086b3dfc9a254c1bedf6f227a6ba373df5830ed15c8cd076ab81ccdfa1d9704ea02201a322596fd79104092cfdf1bb50e625de21a5ae6621d324893533b5fd09bdf73"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"304402207836e75bba70bff3ac5c36cea8bba78c5ce37aeedaddee4d96f23ebdab274e2a022036076d9f85a3c5fab437e72dd64d12f12507ff34ee73828d5639a848dbac1f85"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"30440220571888fe4f3506e4b1bc43275c554155d341920de4a278a0800f549b2aa6a255022068966b9c660a49b2c716fed81456c86f44fe35c3d3754935276cb068f16df5c2"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"304402205f609a2961506951faad4dc13aec38d58d5080db8a27ee1c1952c3f1214ba98b02202dc979a8570e5de74eaaea90a5ee6fdf5b53cd6595fdec01d5abf0f0a07c18df"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"3045022100901ba5eb97a5605c0df7679c786fdce430c77609f99d659d77ed7531e219052d022032c7a24f21c267cb59bc06a5185249c446a728cfd9986ea8e3b3c1be565a7dd8"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"304402201c104d5b690224cfa88a5850e36da4fb4a6505f573eeae7243d42d5e8034e35c022064905c462daa8ef7288401420f293404196eade3878eb79f974276ac65fdaf7a"},{"format":"raw","label":"To","path":"receiver","signature":"3045022100cd448518044c4bfd4a0773c00d700b62a35fe208d27771caaa4239743736f09102204064886c6f5272ea4545977fa1c9d075e3abba0655de494cc81bf969ade063bf"}]},"42161:0x7f069df72b7a39bce9806e3afaf579e54d8cf2b9:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a":{"contractName":{"label":"1inch Order","signature":"3044022017457b1725fc3af0932818d7f2e727510326094bebf470c313c726104201f4160220233662309328ebf5acf57c1a23384beb8d29b6c026c3084113b3d42e16ad3094"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"3045022100f26083b8baa79070fe0424f6b6f0cbe1a6c49a6f7aa00c322f1de5bc6634144202205f49700d5f3360654764353c9ef75a6bcb9940c2cc7a8d0fa3bca82c40ce96c3"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"30450221009645af0129c1eef48fe493097a53d65edfd0c5ae98d629c0df620cf614be733b0220678b62c889c3fd0f603c649ff14dcb73aaf35e9fb1a83f6973dce08124d83f6a"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"3045022100f125cd7411d56490993a59761dde9ca23059e0c58b9377002eadfd6c9d43d06302200c897ba6b5b1117fef1b1ffac8a6bdfa7757708d807c57e7e33399da7e26d6e7"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"304402200184ccb2ea4401e0270aacd1e86c8b4f9202b810d75394b8edbcf9e2c132ec4502200095fca182cc6b43493ab19dea133a18196dbdcdf88b7d0bec1a4c44b724dc41"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"3045022100f5201cd05e1cb877d50b357038c53a2d214ec4c696fd0bcfebb004870ecef389022061fc6a4d236df3ccb6c1296f8583296e54db8e73310178a265b1c65b3b932b41"},{"format":"raw","label":"To","path":"receiver","signature":"304402203bdfeec857a64ca1eafba51d77d090936bed9dafc09ba461ced6c058b02758d402202546dd5ab8a003490c5fdc4a789ffeedb9656622ed2ac867d2c712c68ccab104"}]},"42161:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3":{"contractName":{"label":"AugustusRFQ ERC20 order","signature":"304502210085c3d02e3f1d2d9dc6bb9975e46e8b90e514d578d9e6974b10b3cc1bf4a2fe7f02205d2257c30412b9067a707f8cfa8da92b0336faa39a2bd7099d2b55e0a085b8cc"},"fields":[{"format":"raw","label":"Nonce and metadata","path":"nonceAndMeta","signature":"3045022100ff187b0adc9b9e2b9aea716d4047d2ac92c44cd0d0f2b6ac09ec4b52d89e9dcb02200b18d913b72125c7a2d6083e2097f786979c04056b881e44957242982a81931f"},{"format":"raw","label":"Expiration time","path":"expiry","signature":"3044022038ca4d34df27f672a40cea96f4397c70148e07a29662601ad765e01c71a5aaf502203c88823e913193f5eff4b8f5eee72463b660b6d146f589151af2164de4d6bb28"},{"format":"raw","label":"Maker asset address","path":"makerAsset","signature":"3044022058de4c432c785035fe20e160f7a98a9ebfb1152df0c61d679b0bf8cf838a3412022006447e72822301ca0fdd56cfeedd0ca04cdf018bb600df3f9b28d633e90b65a4"},{"format":"raw","label":"Taker asset address","path":"takerAsset","signature":"3045022100dd48da4bd40c2ae4e389462e9792c67bf699749fcabf954e0121c7759a499ba4022011b3c12c7d356a8ec62a57643eea50fed6d831b9fe95f94a7b31c4d1ba8fd887"},{"format":"raw","label":"Maker address","path":"maker","signature":"3044022074fb2c7f1569c685e740015a91deb0cfaf771d71ba0fffcd14c24d59023878fd02202488ff10efbf225f1750ba334dd885f7966b3be7d57b87bce966aa3aec7fc3b4"},{"format":"raw","label":"Taker address","path":"taker","signature":"3045022100ec75b1e6c770ab39c3dec4c827af340b13750d55436002504e8d27872284749d022048dde24cfa5b564e04c3880febbe40650687ea0e85fc634d27f18b95c14f8e59"},{"format":"raw","label":"Maker amount","path":"makerAmount","signature":"304402205ee3c0ebf4735b3e7209237a2c4a745ecaa8e0310a7e0b33651aaff4baadd10102205aab92e8cc4444f900e368502e8424d5d05d1216a71e8b4dfa1a30d7ecf29e01"},{"format":"raw","label":"Taker amount","path":"takerAmount","signature":"304402202da05529a3b7efb5120658b02f7de224887517b67c26f6cae85c3b4a52d9dcdd022071ecb8acf9bb2ec27d3ef5564394a48192692c1214e3c98f87e651c7c6353994"}]},"42161:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623":{"contractName":{"label":"AugustusRFQ NFT order","signature":"304402205aa1d43c376b38e68d4cf0d9fa51da49572de9a7d5c8e2fa6f0bb1430b522abf02201e8c73865ecd95e36d106a2fd58e3eaa7a73d6181879aab9254d66e45dfbf16c"},"fields":[{"format":"raw","label":"Nonce and metadata","path":"nonceAndMeta","signature":"304402205cc7b36d3b1cf49f956486ba56c571474b1c2dc74776f3d73d1720f402578c9a0220781edc10e5ee70a56a65881b9a4510f2dc0227899664d6ff3c5ca0465ca4b6ef"},{"format":"raw","label":"Expiration time","path":"expiry","signature":"3045022100d3d524282bcacd494cd6b72b148033f17fe05789032f5da58944863d24259ecc0220228df613f5d2d2f3662c3c35ad3316ba5a231d95b9fe95cfc39d433b9e0201d7"},{"format":"raw","label":"Maker asset encoded","path":"makerAsset","signature":"3045022100c8e4bc97eabdd4b267c6733652b735c011cb353bcb14b61ca8b2c732a701db9302204f35ce83dc85008afd0a93608b531f0ea5d680472c077d8dc2a32cc5ccf581c4"},{"format":"raw","label":"Maker asset NFT ID","path":"makerAssetId","signature":"3045022100aeadd32775d3d63a1dde73c23fab6d7fef0375d5210728fd8f2ed56adbee5b220220462f3c126c78dd0fc9499005b5ce3b81c995f11c55e9cdaf55d19fb1686f853e"},{"format":"raw","label":"Taker asset encoded","path":"takerAsset","signature":"3045022100f6ee6ab28521c9f282fcc897f165e780ec9b0fe9268f2a18beeb3c67922ca679022055a2d60bbc05145e3b55483b502c576066469c6d6fbb9ee3336a16b7b5df4900"},{"format":"raw","label":"Taker asset NFT ID","path":"takerAssetId","signature":"304402203c84ee7655fd53fbe7eefb9e7522eeceb29bb7f03559d5e0a92b1ee55e711dcb02200c99dd941f9e58b6b0f28e592c089dbcb245f73ebeddbab9e2e88defacd186df"},{"format":"raw","label":"Maker address","path":"maker","signature":"30440220109b530322d864a1e29d431a00f0dcde1cd165a2ad11b021eef605074d4c9758022052f04b7e2a2cd70cae54a881c7f783fcc2058d5b2791b24bc557e4e231cc2dff"},{"format":"raw","label":"Taker address","path":"taker","signature":"3045022100f85a6ad793151886d7b4fe8902f55b81e4db1ee73589e1ed180a3f9b2285288b022023d061e2f9694a086229fff173f351c630e907806e8e7f80e9fc154a510962ee"},{"format":"raw","label":"Maker amount","path":"makerAmount","signature":"3045022100d97b6d8cadff2e066b43c0bf3cc363741dd3227c9989ead29a51466f2f1d9cf302205b76c51c2e2d2e75855acf5416be5e3a066b2e671884ae81343cedf9eb42b7c7"},{"format":"raw","label":"Taker amount","path":"takerAmount","signature":"30440220249407bacec2053557a7360ec596daf931fd002c31f77acd94b151a035728bb7022050769d692217e817efb3f6845dfa293cfbeaa39f93b97dac2d063a4be7c44cf6"}]},"42161:0x912ce59144191c1204e64559fe8253a0e49e6548:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Arbitrum transfers","signature":"304402200f7f97c35bb60e6f4052b2a129740c55e716fef26eb0a83a834bbe03d7d82c9e022047b2d37e4149990d28cf1b1b1f9caf803259cae2a343ff72000eddfa319de15f"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"3045022100db5520b82af16dd2ac45775fe3db20db5c9829b47b847616b39fa1744685d13202202d1a2c60d5c500eb1119ea52951983c686327f81a0f08d06e58e18ee84486883"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"30440220556ec93aa29917934f4a3626de9b9a2e9ec589446201981a05a860696d33e97d02207792c8caa52e5bc7236d81d11e71bdf9d2845a3b2d7b3a3e99e7371736152374"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"3045022100b93ece9ecc26af9239403bf579b2e522e68b44b384258e1d8f50b7a8a229f93402205a619e93f65ede98eb3b9319e0ce7fe417a789bee3263c244ebcd7e9f83d10f5"},{"format":"datetime","label":"Aproval expire","path":"deadline","signature":"3045022100e975f5f3542c32803c99b5ee32a5778e3a519efeaaf39c73aa5ec05c6d17725902203db48f7cc8b78d76fb83bed5cc158427193632557621914d8b1f8d4d48098e68"}]},"42161:0xff970a61a04b1ca14834a43f5de4533ebddb5cc8:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit USDC","signature":"3044022028314adc36ce0808ecb88517feae3291408503877c3bd9abcdb8b4b24de83f5102207a92d8ea367676eccba14c0aff75efd66b141debac865dd7749013cc306645de"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"3045022100d2b596afa0df5133f55d692928734bd15d46fdab388a6f4f69df43420bc99a64022066c087594da4c6d57c24e2bb7c333e78290a1f7f8f9f8262aa4da0812bea1f60"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100834772d8adc519f3a5bd4a6ef33e45c8ef3dfd2c9290afe8e33cc57aa56c4dd802200d7306bf364284118da4710e9a9fae3a0e7e3579206cde4543158e85c3ff4b5b"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"304402205fca3403098b44021edd93cb6d5ed5d89bd19a4f49f72a97de154097c66df3cf022070d298dd840764be6e50ecf7e1d264ce9c8c791af5ecc18512a0d26ad5b38e80"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100e24a48144599316d7b8f05801c5f28951c67eac9a0ce594ef6b835796a775e260220624f84246321314053e0756f638d2ae46ca54bc1f6e07c24685d7c301a8d496d"}]},"42161:0x789fc99093b09ad01c34dc7251d0c89ce743e5a4:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e":{"contractName":{"label":"Arbitrum Foundation: Treasury Governor","signature":"304402200fa08b5ce686eaf6bb708211bd4bbfe2d4e278f6966ad2e481be73a472bb4b46022067481a8a0d0357e42592498b0e099f8b1313003c423595972bfbf19add008e58"},"fields":[{"format":"raw","label":"Proposal id","path":"proposalId","signature":"3045022100a464daba1b2a7a35336e03fe0c68977597df0917dd14d40b5b794dc12dd1696a0220594ce98bf0fffd98a6717c26465b1c67f14955cd0013f0b9817d85d771ec0acc"},{"format":"raw","label":"Support","path":"support","signature":"3044022051f41d12c90d0e82d9724f7fe43d5b9d035ba46c160fed7a9d6026b8317f80f7022057f325aaae71c60bdaa9bc371a5af9a1d4a5354a7f7dd6865c36faaa4ecf929d"}]},"42161:0x912ce59144191c1204e64559fe8253a0e49e6548:2c3e6b3e91e39ef9bb3c1b1cd2b4d8da76bf433179c8042962671278":{"contractName":{"label":"ARB token","signature":"3045022100d083aa12bc96ed7568942bad291c90fa0710b984b6d8693021be961d99df15b702200d29db9c738e3fbd7dc3d21612833e32b5e2f197f8273662ce16e20058276a47"},"fields":[{"format":"raw","label":"Delegatee","path":"delegatee","signature":"304402205274148210b7cc92e2714d33d5c7c280ace94b9d09b41539af5056ddcb588b9b02204b104de75d5fb03f4ec1b455b9785a3c6f41a897142c40f88bd0e27a51ac940d"},{"format":"raw","label":"Nonce","path":"nonce","signature":"3045022100fdab6f7a16e999d0b0bd2fd4be92682a0c65cd5ae928ed3cd071b11ebe5fbc7702207cf139627f6e2aeee8b0b22fde9c1025cb847b2ba3b4d27a4726e596c284d62e"},{"format":"raw","label":"Expiry","path":"expiry","signature":"30450221009d00f19bd6bc9f14502c0ab2ff54f372f00c6a153083898505f1b9fea585b70002205c1b4afbc7efc4fd027528917d107a95b5f24caba816806fd393d4e419dbdcde"}]},"42161:0xf07ded9dc292157749b6fd268e37df6ea38395b9:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e":{"contractName":{"label":"Arbitrum Foundation: Core Governor","signature":"3045022100e328451e523340c7f0c6229d69a9196703d33a9aa4920cc775ef4c254eba08b402204d3c4a0be0a1aa383c6895db61ff07623fb000773713a62e56bf107fa8a852d4"},"fields":[{"format":"raw","label":"Proposal id","path":"proposalId","signature":"304502210087d449414d2e9d6466e5b9fc5a2a4c0f93e13b6674fb6f3b5673ad3fcc8780f802204b9e8b83c62042f4f4326d975b0f7e9ac8490d19a2d04f2e26568c3433444783"},{"format":"raw","label":"Support","path":"support","signature":"3044022023b69aa0f439df05ae5be7d03df5fd69ce8a01fce764bc1c8455d2c92106bc85022027866dbb7c5e09eb70f90329dcb59c90a87da90f2b77d17c1f74a9c2e0f663db"}]},"42161:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"30440220699737c39cd9763b66d094ef1d30d3985c4f11bc77007df7fdfe3fd5f3d80ec8022003eca58128646ba5cc121bb97c12ab5c9bf36bb9c5f9146377edd55845d4aff2"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"304402203b28bb137a21a6f08903489c6b158fd54280367d6bb72f87bf3e2f287a92440f02207ecc609b12b363cd0e8cbef7079776dfb363cef2fc11da39750598ee4cda4877"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"30440220574f7322c9cd212d295c15d92a48aeb6b490978cb87d61fe8afb71b97053ceb7022016489970af3ff80903a45a966ea07dd9ca1435f6b6da9124e03f3087485d1c5b"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"30450221008eecd0e1f432daf722fd00c54038a4cd4d96624cc117ddfb12c7ed10a59b260d02203d34c811a5918c2654e301a071b624088aa9a0813f19dbfa1c803f3dcec64557"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"3044022028b138c9282bf40e9e0bed34748c90d44b35708658a5fe4f896ba1420fdb62af022026e992a5bc05b455771c7c3706960b271de08ac063561936f2b2a2e90cccbf27"}]},"42161:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100e322fbcf244d817c6af9e807d36f5a0eb2db21309c07963e826ab5d20c7dc278022068ecb28b65f9844d40ef09e7b141bb220d30d25a42f6ba4a648110901a79c191"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100b9f0229134290af4cfeb549204eb02bf34f084b1d0a7c8f161e6beace10dcf1b02203ef40e4c9e88b83a85f0af47b54fa142741bb52ef26302c8aa46b0b274d02fd2"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"30440220499a5568fc3fcfbddd904caef7ed16253e147d5382c0181246f9412f965c802c02200d9ed682e53b5d2f85afc84b74a842618f72840837f352afde4c1a73266f96a8"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3045022100f0b0c01c84bc6139867685ef53afc3c2f16824a3549130b97e2d274c83a5aad80220780ed890bd5542e2d22478e6e51bfff578627dc39e82aa2539d904f67fbcb444"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3045022100e54a786bfce193e6dc5235ab0822b3c59e6bb43ee0cb380d9fcea28e7e304d26022027ac09ac82735d20cf536a1913e385a30c57b1aea7aa681474423ee84af4d00e"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"30440220151f7cf9eec316456b5c37ead9c2bb01ef02a55cf801a79d69cd185c8214531902203e30972666c6bbd4786daf27a73a05191cf8d08e2c4e0ae7b30b93ffccb2988c"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402202b9e93d841f3f81b63f31cc974d7204bd9c7c00ff57e7021ce3296225b605f04022026293bf2777b6b1971b5fee2c6aeb5e07623f6acd715f39de88796774d931dab"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100b927a3639c291f1c5f5a4459ee6e9eeb172e4fff2639cf2417a0ee22668ee785022016f22532a98ce38d2fec2956118eb67b80c748e012e2e9cc119a84618fd356c3"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022070df47bd9af9e8f70ba486b5188cd24ff2a6a7b7963a628608936986713eb108022023440cee1a31e3d73489a849ec925a85da16d1c096b3029d4337eeaf46a26d4a"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100aa75f292c3029cc67e36c91233b1f3a968b487fdebff9b179f0cf80dda60e274022065e8cbbaa2a25c73477c76edfba684fb3ece14a390ed05fc6d07e258ef777def"}]},"42161:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"304502210087b5fd4ca85d8d902459aabf0cfb97c676809c967b84c8a8301838f54d2f144602200d268e03f892d81b35ac1bd493310f4fb65a202c2ad2ebec3f427978756b3106"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100b5e936abd5df8c51ae2ee04b8f06e58162c5702083fddce3494b19c9bc9c2e01022032e9c8fdfd04c78d70d0f1e03e1fe716afc7bb2d2f643cb4586316e87a7c2150"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"30440220125f3c8832b05bc42e224f0607516500d37871d13a417b5726995fcc2d046370022072bb072b344a1b426a8d2d80572e95bba4e3113f73e32d5da63243847068dced"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"30450221008b6d55b1299546ce1c95f1c2aa9ac5587a565f8972d16af11d0818a42ab01f2e02200120350300078049199f8429ac0dcd326f17aa76890c4e5b033ec976cfab1819"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"304402205298d4af21719f53590aece55ed00ddead2c2d779e07543100d7444e3633088402205e956e92d57fb05cf467c331c59cbb067ed1f5bbf75eeaa9b1875a0970c14354"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"3044022070db1a59aa095548e0c834d7e9181d3df598f01432ce1fac9dd92f6d09d8954c022003f24e083a744c767f7b693b2f05988d57b8746750013eb4bba5071a1bf75f1e"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402205cb992ba630452b43cc31c19df9a6dd6287a31fe3e8b67ca27880acfd89cce65022009b13c4746edad9a5bd39b82911a68b0be7f772c51df6617f7cfd2ffe0645bc1"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402205d4def0d4820dec59e1705730f3a18a5ca3ddb6b8580265420049c7a522ba0cd0220737132ba1352c7b8dd8463d871cabf53a5dedf5aee68c7b1172e833806aea572"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100eb5d8a309b9b9865377f4b430acc4ac5845c6b4339ce2bb9228fc76947904e3b02207530da05e41c522a6385d0cb586cb459305e98b45d32d0decc078081781986ae"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"30450221009f9fcc4fd4ede454b777009af42cbf3ef775c25093569172de07e54cf5adab82022032c15d56b5d2168a5412645f45af3b1cfb37afe499798561e4269ff4be8db15e"}]},"42161:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3045022100b3750d69ba1ceb422b418946d10e3cb101b19c28040300628622cfaf2e3984c5022003f355a155850073b1511f6109fe1d2d0d178f81f229659b5b4277a1a322c06e"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100b7d9aaad264938c68c358c81da5a0bfece07b718b547b82a421ec2958dfe8cce02201a58b6f6cec2a232cb9f974b0186ffb7d2ebedd2899c81c8774cb4be9358a289"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"304402202b0d437ee057d72d44355f2dc3a7deacda38e0a2ced71991518fbea9b90960f70220391ddb375c73d69fe9ab7813ed053321692d7a299d8915775a60ea0119f0dcd1"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"304402206bdc4e0b58904700da7ac3efc8ac7184fc9440cf8a0ef2d2b32575b15e76ac1c022022d242877ae28521223cb3c1af1ee1bfdec437767c0ad0dad507299d22a35d4f"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"304402200bedd78431804f42108d7b7d234d738674eeeeeb31f937cc38db1385d9da037802207067059d63c01a8f8fa45eca2fa533cecf8fd3553c7893f72348859a5b91decf"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"3045022100c95b822cbb4c7a80faadd150e5f8e88ae01f25330e70a0f28671ea495ae8f7ca02207221c33dd32e571c0c192a5a7789ddea2bb776f7c6080ddfb54d3dbc022034a5"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100cbc2390f81a6af67d5225c34c51b2289d0aba65ccfff6cb03acf3b54f2334cc5022010fdebe0e5a601ba1ec521391805bf13dbaced0c707475b05ccaadaa82acce61"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100ebb9f99820a07f27860036adb3ba27eb37bcc0024e79e38c0f39066f1973fb0c022054873d3322dd59dc5ef11e252ee2e6f9d9bcbf9aad645732cd601a3a74145181"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022023711cac25abd661c6078cb2efd72795ccfc94da57c136c11569369c381be82c02206a616167025ddbab91ab5796ff5be6745b1929772597bab447e57baca50d411d"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304502210083434620c922f238354ebccb1c9805bfd819e3d4d53a392dc669ca5d4dc2e22002204df1126d105ca0c904cd6b3a0fb824f7c8a04583a1320cc240b312258b387a08"}]},"421614:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3045022100963447dd2d0e26370bfc88c42fa2b3cb1b2220c985d281aaed627a14732cf4b802207fd61acb22cace24228c1bb89143f2ae6d9b0f0bd1cf28e64b6bcd37b45bd4c3"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"3045022100a53643cdf02e0ea5b8e3af8e95c4886aadc58b301a6998a534ffc4c6f46a6e3502201a9cbe45b27e22b5ed7e407a18e1e7ae1eb8fb71bd8b41376120af9959f10af7"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"304402200eb64f6891a2eb7ae9ada0e270a390542e799ab13f943017c13f3ce20c05e289022006cf2e8be17e5a26692ae4523e275b9b9aac7cd2b188cf8805af1ea74b67d477"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100a13f58bb5a24056fe745a8e8d395ae68f0cb4df88faefc2e5e06f94aba87dafe022039f1ca74ab9d53ab274dd45a53aaaf54f84bdd3502ee862a9e9641b256476a5d"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"304402203be58e94aff13fc37521246358d270ff53594d304787de4cec5806523c8dac26022033b0db55a67a345f6db243a9c47cb10c257ccc987878f0f9c211dc904f29c4bc"}]},"421614:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3044022056ddb8be9857a616ac0fd8d07ef87ba9585adfa5f8a70e39de39e9421e3158d4022063f5d63bab0252445849a2ff57c17060f14028e0b6e4752ce0ee3c38cc3606d1"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100e52d8026ec5618bf67ad9286db3003b7c86c2c133ee353b9abe45382a87509dd02203a6be936b97685161a61684d3a21cb5e722aca7df0fdb0832a6eb8579631f77b"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100a7240ad705d52a8b36aebba31b7a44f825de1f2745314fdd780862aa79fa0bad0220696c3dd360f0c87b7cbffe881e42aeb61df839a24f174d2a063464c27df8c2e1"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3044022017106c59ebe8949c98ad66509aa8410fcb3431c1bed7318ab38ce23370e9276702205d886c5dacb52a6f06ac0053c057af671a0a115f79fd8c0d39696a994968322c"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3044022037f20f92910e9f73f6b14c8cd48d3d0d163fe9b3deb87357ec331cb2355e43e6022050cd5fb2cfd7dc71457a10ad2af04dcac63f519d0ebe3d42b3fa0dd4447d4328"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"30440220336b7e6ff73fbc946df332da5d3e3869bce84aaec26842e81b7660af428f11b902202ecee1b791fe077938dbff76472bbfdc772dd5c1dad754ba4427a1758074d565"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100c653dac1de42e9a06e91982e7395670fc31213804fdad1aab5f80b48a3878bc502204a13ccfb0442383bc6e5a8848a14a8fc403f18d673581f0987562483d756adda"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100d6b3200366bc308fa9f51f9d11e987a7893fff7e74e1b74be9560398e3de143c02201530b59f0fe68b61d730e139e536f8006289ce785fa5336bcf36f80cced7c1f4"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"30440220467adf22e4e7c7429f91bebc3f472e55239faf3e2416351c832c122781faaa9402201015d31677212841b284d59f4f5e79666bbdc72965d01021a2560097752355c0"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304402203d27cb836e2e16e6024713e81c08ec1749c572ccfdfa21f99b02b8463f859fd802203892cf579d167486d9b301969fa4c536c7114423bdb187384c1bc250ce3b7b22"}]},"421614:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3044022037ab41e91701a005e4370b9e4d08cd48ad6b7ad2370c05fe2a1e91442b98ca00022053b91091753675a3521d6dd3bb862ea75d41f0737bf256ddae9abc1f82b9d381"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3044022050fd436716794cbe59d75015a7b1ae8f831807df2c6d91723bf433e8262ee50002204edfbd14add2c0794529359430e5b1cae049212f473742c06a78f968ed01323f"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3044022011a4f43a11fc810627c39495ae0a2a791f3d047a6bc5abfcc5a6ce899c57c61202202e83c6d913a02856d4469be71df1010d296b12e3c7850b424fbb5ac133af3538"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3045022100bbf71a0c481ccb366e823afc0af92f27c9e34b490b69c3a8b2081758ccfbac26022062bcd16bc0be5d18ed125822850766b8b3471fa6a590df3fabaaab75d5d85c0b"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3044022031e68245c40678d1dfe779872ab40e7fee3847c97a4f9b8d7a3d3209f0beaaa9022064a085cb28aaefe6f7aff7ca7a3ba5fb6795ccb319c82068ef554aa840c7b0bc"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"3044022016106c023503e6971830501b7917170aba46d752c5dcab2c03e8001558d70ba602203b84f821c301d8c76808ecd28125880d2b67fd18f8c9789f59a254b71f1103b6"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022025d4c29f2bf3190ac638a8c44252881f9fd7c119d9792a186a993beda543979102202e553a2ff762e0b4421b5b94f6a09b39bd80b51ccca621bde18c1d020295e1e7"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402206bc4e8a63d673119b11c62367dc9f91d7cac4750b11a18a49910fc8c8dabe9da02202e5b2724e6f09ae4d1c6bb768217ee0b4b433e4d0f8c10c899cd59f2f0d6ab5e"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e4b0447e17f8405fa5dcce533203a1b261d85e4303feba4cc6172f431b4fca1f02203901d0cf8198bffb13f60fb63a1b7ec29b436ad0e074aa9336e2a53a725a1c85"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100c16340dca02b248381232632fcd37b3f8a340d6beec7bd221c7ed3e6f404960d02205750f4090748bcf7f1e3d62a76a65d0f5692cb76857c65aec98bd88ea8db29f5"}]},"421614:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3045022100a006282860410afbee02a5635a7ef399e6f68359c6d6519b4d16f907e9abd8a802204b50d873637823d10544ab286a96a763e747c206b538e46c8b03f752a38f1474"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100ed0d3d08389c58dca517c3e7b354562deac1988cc4e76c09e5bd092571c99d91022034a9b44485220f2c7c35d8e35e050ac1bd16c12277825a97449ce0405d5b240a"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100bda885efe70df34180641b40119b4c1ecb6ab2f6eb0f0901c0cf51340b5a848f02201b81df5ed60d4646a7ffcc6b9c7d73a7dfa85b7de94bc4d0d6b28a9b343489d3"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3044022041c2f6e90562da84da84f478686678bb363ebcde969642b0159242b6bbf9083802201f386947f02f5e0eb2c9b752f3684c7ce58a3789c20e1e1605a6c7a8cfdd75e4"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"3045022100dda0afd4b606832d1dd6c0b689a01c12e137bc79b2302a9acad05934f517d6b402202e0eb8bc26a499dae5ddbe6c7f0f170b6b69e1ae32a509fc03c5a027e58d74ec"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"3044022070d4a142665ab0e7305d09d83e8146593079cf9422e2fabb33a3172545d920c702207511c07b12af5e886b5cce631bf42f1315d6e5a01905075c8fb4654d947a837f"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100c1d34447ee07cbb18e09cab3912af57a37ce1f11f00787bf46d7484b806c7aef022033754a8fe682a62e78a60c0a469d29a9a5bcaaaef08b8def7af28a55a8628d2a"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100868a44e4c25b04b725a176b8f7b4eef46901da86f06b415cffaab28a3ab0b20602205a81621e8257c061154daea2240faf2d17841b9dc60bee6b4f258d5bf8b69d42"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402201a965cff40403691f6a160869a7771ca1cf0d1070ab7f3b7205487bc1629ddd70220522c0135a82d8f0a0ee789d5c779e44e81558525e8df54e1777acff5d328e451"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"30440220582ce1fb28d598b1192c1e11828ec9c26628db5de0a98ddc18d91d56749e7d32022027f8d90ca2461274278ac866a85d67ddcc662c5bf61de2d8e076b752c66fd9f5"}]},"43114:0x488f73cddda1de3664775ffd91623637383d6404:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit YetiSwap transfers","signature":"3044022061c93c53b0c2335ca5f757d908f74a4905721eb250673a29c69a698860552f1402203f2650df17b5efebd1a11f4de73f8a87031f60736b6dcd64b148785f1bc07452"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"304402201eae20831519d5af947c9a5396ea2836827fc0a5fa00a2a0839c975e853c1bbd0220719b5eea76f03cb0391341dbf77a3d093b8a625a109d5770ead2b72a8d72e49f"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402203bf42146dd0e211e081696f99e8f4a6b9df06b29f5ca420ac2d16a23067b538f022016987f7351bfa2c43d0aecef6e9ad11cb48ac6719131238c0fef62e26852f7f6"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"3045022100c7ccfa8f7fa06c02f18d0a5c063dd172e680615f9104c2e3206183f21b023a4d0220040cd55acbb6d3f2ae1702d424ce8fb4705350607754d703dfa5c4704ba4d205"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304502210096139847197e938bda1c4bd88d6510eafd7ab42cb044a4673896ac75d5761d32022035eb28f156f09a7c34882a1e25460b0da17862be9cfd2ce108f8621b89ba118b"}]},"43114:0x60781c2586d68229fde47564546784ab3faca982:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Pangolin transfers","signature":"30440220770892c4d4e2e277b8121044cb7b5756d5406aabbbc7a50056da06aa6df68f470220689a5eaa6da11691510377fbb6b7e03350b219ca0365fdec23af1b10e301f918"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"304402204e1a437dd77b3ffa34ee991ca19e17661de82c458923a42d75875df82e360ccb0220719ad40a493290ab6c009a5e88e1da06f4aa1d0ce625a8d4c573f7730673e56a"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100ceb969e775648a8ce730b42ca117980836855ddcc8d251d0fddb9763e520ba9302205020f115396bb7acd2d6358dff6c3637841fabd08aa5bf191bb83ff727aff5c3"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"304402204b53d3376b699e1244683eae305344b7c76b282478a75d0916724f7fdab4bc0e0220072220dab9922d81cc6a8fa70efc40a4a7b386e7abc689da518f6cd672b66445"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304402201dae53c93870f56d7eb5d8305b3c2b89fe6136329b231dfda2decc43a4bdeaca0220540303a29a72454ff8b1b722066a8c3fc99cb31ac30d44a8d3bdc36e8566edca"}]},"43114:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3044022003ee948f9c65d57cdd893fb060db8dba8e4d13a8625b3f3e57095d2f8d42faa602207e7e8772cdfc984d9bedd1ddbd47147414e66de635a8e3bb8ac820a8a9246e52"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"304402202b820062c9fba51c9a9630b10822b9090ded1f20132469cfd8b86ef6b5ff9b180220188b061a1f10f42a2a109349e03f6c3072a45c7317d5cc8ba4804161bd3f5120"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"3045022100b90156b74860fd63dc360370809fa291ef7e9c677f4aa976bec3883c1ee6d28d022060135ef6601583db8f4b8fd13ed8d1da98215a065522d5353051d88481c12956"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3044022017022e5bf63fb42f68c6c46ebc2f3335b928070017b6d5ffd58cf7bfa713a22502202850975f985f4668029660914d07452c01b3017e29f419f99f691a7091fa7468"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"3045022100f6ba2fc3decaa942f8f43ada10f1118073086e1c779e97ee36f98258038bf92902200f49748a1efdd15468efa51118ba3720bc637325bcd56bc10f00ebd9da88dd40"}]},"43114:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"30440220349868288837e7a698727e0f563945ed4cb2dd1dd4cd5d481f17014413337e1a02204c56f13d6c0e0d7e656ada6ea92ec7acb1cd0b01194eb5622c63afef19b53952"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402204d1b1637dfbac199b25c1185a3b7f0320c339b0e870db4229090e7078f96a04e02207a255306bd55d54b6ed1f4e392e12cb943077748f76d987c7bb9e52f3e17fc77"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"304402203d62c40f7dc97bcf1094b63ea42dfdf6d93fa810fe4135b68c98d4bbf008355702207763186f22961cdf6f6edaf54870e1712bcef9004d8a70523516c47df2708379"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3045022100feb5120846a35764c0bcd0af55b69518b85714e840de5f03682c6a19142ce8ea02204a87c60b01b2952b149a8505fc3e553db35cdb3d92695dd87259972afdaf650d"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3045022100fdcf2d06ac3900c78d1c84b54a2eb40da3b9d8db95d107420fe21e13406607d002207f38c6496e5b8def6fe8c24823c3ed0b039883c239b7ef3d043b58c2293b1453"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"3045022100d852355928712d8815b47acdec2a1fda631c3a828e7342603930de3827cdc92a022048598eb4e6d90897824683ee56bb123dc754972501ce07fd5149c29623f94ff8"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"30440220608f164bb66487e40b58a0c04d9d44d8d183bf7f972f17b5447a6fc904521c35022058e107a79d22481cd94cc0478af4073acedad872b3392543af29ce89173d4944"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"30440220568ff6fb360044e769d02905ae3ee24278d160a5ca91b6060eeb188c6af2273502201cc668921cb26cef253aca531ecc5d46c3af788bbac3a97e751bf811963f2465"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e1ad96f1bfee5a1818087b61a8a1a6ff99a0a2065407f405dc935d0b7bdeae370220785d8713228cab5c9bc24bf0f2c3289fc9c12cdda65c179ce2a46c7f8f54ae95"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100957fc7ea168a383e55b7a745f75419a98644158ad71cdaae10f43736a784f73302206352c5734b77888768ce264c76dc634f4c64be9594b73c440887d1dfdec98979"}]},"43114:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"304402205e6eb8bb7f353c47228734fe6a5b6903cc9a1acb617ce5133c679520a88f996b0220651328d2ffc2f36284dd1bf69557b960c6d5135eccd6fda600f87dd563b891fb"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304302205662abd6f6ff0f413a45994d310c3d657bac78a1fb70f73e82da358ca6c5ba45021f7f607412527bb58d4a61fc38affadcff12dda584bfe5a8431a86a7fc627b08"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100b8845159c26ab28de85d9fe3fe391600c377f412d477b88cc040ae36ed5e78e702205b3aed13fb48a7650e64b5d64160aa17d350ad502367d83260418399a45a00d7"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3044022077aa118280341537b155dc7e268b0210afeac4c3b9600b9102d86d5c159da2c502205c39a3993d139369799351ab11ace33d15437f690fe99f6fd4bb82374b06bc23"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"30450221009941627074ff9edf200f0831e7a1138c76e400ce5d81c52677a405362e5b9056022007f9a8392f0290e765e12e8cd665f20c1e262c6e24a37a8b298b5944e94399e5"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"3045022100b8b16e09f965ca6f58a5d4ac427a7c9d8a5aa2ccbb727d3895ffa651bdf478f602202a8ecccea26c7068ce240649b89ca9c87f5404ad3bd9d45162532b218580e7a1"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022014b946f532fc2b94334e2bfae4033b880ce7337534a1317e7e37a35a337efd4f02206c586e8866dc274cbf05c87cb99f7ca4cfa024f22af333de7bbcbf6555171734"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402201372c5ad1476c5ea685e6c446e0f59fc4840b26477f1c33ffd3ce61ffe81707002201488c5197d6f6496fa2cee35c00b684d1d0b1b2560c4d997a52dd2c1973325c4"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100867601927ebe4188c3bf88b0832be2d08336c7619d32ccd838ff4a2dc856b052022033092c29c3ba304313f0bee2c0a056eb26187aa2bf3c10c8023642e59a4cbf0a"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100ed2f0756080edd6b85b0f997eecc6bc2b0d88aac533023b69b9a00e1b317011602205b5459d0bbe244562169419af54c91ab14c88dfa320ae58c6709a8394e3e2751"}]},"43114:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3044022007e15ad9f225b84f7e0e45ebe2d39389fc20a334164506260e0276e18b6e756902205da894ed8cf30d8b018e03f69b67463f46cbd7575c4bef0f8529e51db0f86bd9"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402201f900fb0163542f7311ebfe33b4269caab8e0315a66d3e48116a5f94a96e2b10022050c31c3e77efa383eeb843462e6d3f95ab62d0ad594bf19f572205eed60f254e"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100b8486763a7a95769ab096313bc39933c24717f18b39ffacd28e253c4c049104e02201211b21a5fd4d46f58dd3755f8924331089be53220a41e267f9431d8fd7e644c"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"304402204f35fe499aac945224dfe015ccf35eda3cac70196bc7979b200ca54a931483b4022057bd20fe5883f841f54510a622a00d8143d09dcb9e215fd264ba053b978b346e"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"304402206b25ac471491dff8af71c0b5d8da387bb94a5a85dd2395b369453b1198131d7c022025030238778b83451dea398875ff90b08b4d378cacfc1be7910af7bfeb3eccfc"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"3045022100ef2114b94bb44835f588e4eb84dd82d658c4b599f481b94707215408f356cf8502200bb3a79e2c7b0131ec5b48914401834aa0b93424c17e9c90dac6455af58c6599"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022060b25a3b2ce80ec450c3da93b4f355d0631373c1059013347419338a74e764e6022054e30b696f317bb323d1ab2565e998a9476cbdcd8b67db8a57ca9f45de294368"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100c6df0535500f31424657e310c37a60157319609aeee74e073b2609fd6b1c134202204f7039c1bb76f0de7e1c448e01135010d436a6e2573a780eea3c896f88ea0b52"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022057e68f6b4693885fcce2e68333fe9d1f9d9ddcf8b1c342ce27c04d396a8e798102201b5e9656718840318e7fea4fed2774f549d74c0897ac249cc8c74d7d78f6df6a"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100c0dd968f27305b74f7bc7bb0bde9ec7f32812a87d513d728b68e635ed07c693a02205189d56f91761765cc4d514efcdcd8d7ce5a37bd374e596c945bf1c598d5db2f"}]},"8453:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"304402204b1c78db814ee83d9d87e88f7ef89f0f1074690fa6327f4d445634b24448beb4022030ae3f55cf0530aa104eb394e444b95c87777e798ec1e1550c668cd0e0e41749"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"3045022100b51ee5a33e2e0d77d027e8e20b6d681c79c7942eaa9a6299bc67a03156b1ad4402206597d3a6bf9043b71e0225998638bd7d00c9259da941ef3bb55d4f813d75cd75"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"304402200c6baa9d3c3fa94044ce4350f41440ac54f2895d689470e9ae1336884b39320902201a8c2763a5d9ae2fd8ce410b0541ff707e05e179620573805d188f38bd74fa67"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"30440220237184fbd16a92abb8b733794db859ac5544164221f476352d86e952e1433f00022045d9a3f360452425093e746cba27b6c5952749d3fa83e8595cc5d92cb9b0cd12"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"3045022100972811f2bb581f2e08482dd766627d1b318050fd3019dbc4807b7e0c02b2875002206a2760fc74f9f6195a287702debe4f88452d2be08d5098a5d25eb92be01750ca"}]},"8453:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100d8b5c3c8fe2f7acdcdf905da6c7001e0cd6487ec062135c15b85cd933c556ed402200a399ed01b57b97d2b19b4daccb52f272c7bde9014b7d41d79b8a085f3a79d73"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100ec153713441eaf40cd0204e9cbbc33cd3d7c59fb3b1477c3b53220f40119dd63022069991f07b246ea82b63414e08fe59ca35099f8785b878b1edddaebb6324554c4"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100faed02db54b862fe8e7370b228452f7f3305a1cf680915f4641f5dffd0c936f6022037931d474b10a28e0b903bc7a78973c39dace44e85ead65d9417e38c91747385"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"304402204a384401296a49a2b2c297353ced3bebc66bc71f0810e4145d12a153f54c947202200e137e37904c9c2b7d9c691fa7fdda1d1882f184c85772fc5667fbd7a98346c6"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3044022012b12f665b396623211dbf67cb78e202147da7650ec856b128d6846f41f9709c022040de446130b2ca804e07775d46cef613b6c1cb902c003c624653add94cf151e5"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"3044022036df0a56d9b4661d5c9b5f5e5167c63f212029889d963a05977cca0d2a62cda80220154f8b750cd48e3277846d7775ef03d825a46e9b51cb7ddd0543dda717fd8e35"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022028a31a24e9634d9f73b8cd7b66293a8ff55d169231a4b99cf5e31104053c2b5502202b13da42fa9fda0300276deeb8201e8c7f32e8e9e91b3017da2a09a92961a26f"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3044022004ececb7a100d7bdd4496978fbc6b6b1ea2dc7500c2aaf7ebac524c4b6063c9f0220345c604f3cae26c08fd309dd92df5f82cb433e30bd8af93b50d10a9b9e3bb4dc"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402206245a83c1e904563c959f5313917e62d3c6981c908267d1ebec3fad50304dd7b02204d7e70b181c829848cfec91404ab34d78818e5b20e3f952da118114864ae1943"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3044022008c3624caac3a314fa907d2158a43f6214ce4bb9b7b55f1e33bca712923b6d150220455cb39c594ac5b88fcdde86c12e34db4c3e4f1fb04b654b7083416782d94697"}]},"8453:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3044022025de3dc4a6c31c0ff18772802c4701dd23ea7e7cba9edd8ddbf96cca3a3938c60220472b2c75a6ee54201f9214d99fd9cf184bca8136129e00e4361017eb5c451f1a"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100b9fd6e4e25d4c9fc61d82e0aff4b84323160151e9adb3016a1289e496b20aa8a02202366d365fe6fcd63e3d9d4d4523e16e6495dddc98f5ca5ce8cd2e87626ea282e"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100d2fc1aea5326038a4f9ff655e45c113415b1623802894e2161dfb1b3c6b95fa002203149ec3cb392fb8f211f24886099d0dfad20c2f7a16b132df47d701509f4248b"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"30440220374554b6d767d5c64556091b7cd0bd46b2102c4fcf0e06b7f40cc35ffb22f31302201ef02778110e2feff3e91f7735974fe853e5647c62c5931aca90734ae0f0e88f"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"304502210088dcc9377339158f7d85b323e11192080669616d4ec6a91bd2d540cdd37265a70220091f6e5ba2a02f111dfaa5ddc90016bfa10fd19e35e9ccc42a9c43b42abc16f5"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"3045022100850b00604daf1e1ca872b2c64a04f0f2f09596e724d42ff637d91ae783ed08fa02202db8c9294adb852171ea28f1465e3d3f02d30ba685c1184c4ebe6508e0348e08"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022048fa80368d01103c90e027729b47294bc7dde4e8bccf29289300e2dd6586b5a102206af70d016afb13480ba6d3b14d89557e2a7f486e2d98d1e7d09fca047c853e26"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100d6356531f31daceb8e3b2793c2e6dd0e529768d13c8ecc9ff4d6f89cf574c26102203760bb9f2fc5fc4db772fbcf233923e262f00aeb25849bbc0fc4b999466f0b0a"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022044001f5a950e400513e1b6a9f20832e37417397bbcfc41af622be5e977be9a3f022014c711ebe6b30afb347cedcef5e1f738ce4a4d4840e6ea1ed2e425ec9e602869"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3044022007d462a64487301f91fd5ebfbe5bf3d24029f29879fdb42718db10dae8dfee700220305d315a145198911a5a2a429736764ca4dd736b56af78830afcbc70c06ef171"}]},"8453:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3045022100be418fe8d24c526cbeb610530571ca02ae8c6eb0199af96858ac3db97d3ce0e5022036fc1acec0f0a679ca891d0fbfe88582750566c081006bba515b6fcfc77c48f2"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"30450221008fed313823073739177e4c13f2fad99e6b47de5d1f1c3a36cb1da35658ff852302202f9293fe1b8cefaf55fc5ce08e3bc1592b37ed7de44a749e1ac0d698190f2dbb"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100d540310dec64783745a7693f0d32b2fdb8e202c62bb8acf4ace75dceb52cfb880220297e7fecb90d317c7ed889ab493724cce2e4c4a8e8421b0a0feb9cbce1552717"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"304502210080a86d196d7ea9c8c574dcc6daa011fbb9c567894de698ca90bbbe28b82de52a022041d38d51313bc3ad1836b980ce0d214c0aa66d23255a01322d749b4de4ba61ce"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"304402204399b477c60f7948d3982bf2b7c42df9e23605108122f44c25b48ee5f6b3ca2e0220648f9d2981d5b0d972089924979dd6a910854b3c0034a3a66adeef389e40383c"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"304402205513dc9c790760a5bcc74c713551bfcade50022c5184cb349a82bb2ffe738d02022005e7f7534178dee24e1de10c1c5e3f25c834b6f191f64fae88c9c1c83afb875b"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402203d08277d359d1b89035442b8b2fdac96ffcef1d566be51a76f45ef9a5dbdb206022033fcbabcf6b64633c9dc7ea75eaea489cf0b20aae2bbbbed4feac5d930d58060"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"30440220573094a76824fbcf48f9590e4a83f1aa10898aae9e1e7143073a46a1cebc7db2022043976e109401e2a9aa383094cb3cb660550c4bebf796122001d8df044ab8dadc"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"30440220757cccccc2037820c96d861ba58033cf5fc2a9b97fe19340006d7b3a165203a2022055f505404c8219bbf366bd2263cae3ef8327a015ec78f7ef5113ed15ee1e6434"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100e4ae2632a3823a10f2566feadd22f14e5e4796bd26e28c94cd4b9507ed4365c60220253cf59daa93ef54494c825e806a81e65b378fd1d6e2a68c8caed6bfd98daad5"}]},"84532:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"304402201b8930a6d2fd3e52b70112e18b18f05707b39d5a6775cd95933d93f205c869e50220597a310ea8d5afd889151db8093b62785488aedbd46fc748c46c41496800fb1d"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"304402203e35e0f1829818a96e3dbd401b584e2cc5bdffd969c656dcb267c4f7c9b8f12502204dc13a4e2d2cabd25a9402ec16d4926bf97099689f06656d72767c7c70d888d0"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"304402207e2cb39eb8e627f8c9c49c5e381b54ced6e48c334ded09289d4ccbb074e49bb502204eacb755085a06e98cf0a0ad19ffa60d08d28e67fa40e757b7f9dee9b38388fb"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"304502210084c37d4b27a48d2c3fc4cc3692c0997a495437662c15e82a62cb6837280e6ec802207e76e35c206bad884c042e3203eb77a94e26dacd64c85554adcb4cab130c7d46"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"3045022100a2c66711ed6d50c95738914d407acb2aa84018681a683fbc8bee0eeb9d19c3b4022078295cd42089a77f02249f9338a13057b903db52090751a5dd3eab37c16f05a5"}]},"84532:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100ae27a2ce7c21ab6b878fa87199ff74b9c280e0f71f6be84f32becd012a672aa802204f35357cc1bf66e81369288298d1aa8003bed3814ea971fe93a18b16d1955981"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100f196398d9bfa19c49c4d805abeb4a165da4d1a6fc3299ba0f4af2b8434a8d84202203a3ecaf227a071afada4a8c039d2cd333724542a29f89713ab1d48e848fe4dc6"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"30440220394bc4e7cefd2dd37757980985b361626a4fcb2a1e03971996b19d6eed614ada022011ef0e43538e186ab4d722cccaf17e50f32f2c45a28e528b11f28560f9bace6c"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3045022100df993534e5c45156ffa0b3d3b0f214c3b264db44999c344fdc8f34e67fd95071022012d3adc36ed86aa3b5f744e9480fb35d33eb659b3ff59d978d1aa32981102042"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3044022078e6e92d8413c4ed406e6b538028d7a6f85d27f465937d64f38347b62d6df5b5022008d79e9bfd916b7e887e83b3864ffc5c8ce3a3bc13ce42ed371e0afbb3392d91"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"30440220060a155452e73ac0241d5931bac0883c1ba77a84840574c1a555d5a6cdfdcead02201d6e1f24586cc19db79218ce75b107d0c3f2f5936d41fd7c7601cc13c7557366"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022019697b8585ce1a047cd67b57a248e254f44c2d19fd5146c0f6f6b8cb0e7c63af02207140315222c9d8ee1fc10cb69ec22c47ec1d8c6e26c6c38064896dc13c8c0256"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"30440220297f11265bc8c5d7f88159f8e35d8ca67af5a7bc553ecc045949f76643588a360220280e3235460b4d7aa70e01543b5700bc35232cff797d4ea947cc62f1b75e5a99"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022063d1ad0bee9c6c242ce49b69aa92428397b347b3557a09758f122765109cb5230220342cc9110766eaca071721220290aa635ef71d61b742e92423e086af0fb04b59"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100d264a4e03b4278e1eb9977d811493982e10812da43eb048a95ccda01aa6c9bd102200431883689e428558ceaacdf4abfae77578087957a89c955373c04c2a28f96bc"}]},"84532:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3044022049e302c1b6b56751508711de1040ec01f1d7937de6d49fbd23be661686b19b290220245d58ae8f7fe389b9b1e138ce044114f4684df84770089f2879b27c6b8b7f6d"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402203aed848b5b759f22593f9b12aa74d7f81027aff827feb3849397b62f3c4cd84b0220468ce42a6e53043d5e112d4b51f3c9c4ba3d87b5004af872d279231da7d06f88"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"30440220580f5858797da94ae48dc32d6f8fe6b1fdf2d32a7f84438f2ff5025cda315b9402205b4f8fb5b961c20eb5d57469e0798659767caf70f7f6e38dbe9f806005693621"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"30440220399a992df76e19aea56bf24de660f5f3920d536c3641715074c84c22bc04511902206766d299dd2e92f03175caae8a7573f92646dde7a63abbffd3effbbc0f171773"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3045022100ba43e270b1e163f5e608e0963e01902025c15d7916b1b0e15f2efde559e89ac1022040ea3a3b2cba9bebc15ba767d43a0ea440ef9b7ae4992fd3e68dffb1f25acc9f"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"3045022100c9439cde390fbcc46cb9cad5d7abc04f7ca52cf2706185a2ed900880e7ee1cc60220785c4777b57d12ee5fc28ebd7fe19ce618031d2e0aead01452a94d83a4c4201c"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402201d58deac9bac044520c912ab926d05e399391b4adffb1a79a6eaddca7174c2a20220180b25d9491de0e732a27617f3377b30283ac0a242e2fbbabb177b3d5f417962"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402206978d529c025061fff4af0a6a8c6c5200d419c89cf77fcc1a8b567f4f49cb7a1022061b5a74e8923b8d74ebc14d8787c8f8f41984d0ffb8d3bb80a42ce4931c03992"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100fc9227cd0cf747b5ce1229cdc61a2fd2eee6c92537b9f712b3704ec51564a4fb02207f4652444666c529860464b0f022ec754ea69f7d7e157406121b7ca9a664a943"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100fcfe1848c74306e4c8ff5db66930f714b5759b71f72cc1043327a282c56bb70b022064c091ad6179bb74c1ea4427ac0b6860c8e734eaa322542d4011d24f95e22e98"}]},"84532:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"304402205ceb238ae7d7e5924567075726e458a1721cb87fa860e8b93a33d20ffb5fe5c10220077f45136c66450212ae888654bfe5b88e05dcf294939601674bbed2533129a6"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"30440220348a323febb87cb3e2e8dbee6c9126ef332e5bf9f0d246e7ff5f7f6240c44905022075b4d2e20ecb372334239b3904dceb30e8f911cc9b17223f917dbcc86b7d8cfa"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100d3f21c084be69d3527ffbdfce6a3d977a89763697304e01b47d59f4d7d5841ae022042ebb0f0568f447e2a80358b6fa660994dbd6d754d0c58ada978c5b718d928d4"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3045022100e2c01258e261b0c9c74d85742082f91451bd17dc317355c9fb6c38b57e49747f022011636cd171697b4f740e920f8763fa71838b5ee1f1559120231f089078685574"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"3044022067e895b4ee5712000744ec80ae15ef156d0de8bb30225a9bd4896aaf1d5e6e9f022000c2919ff68c37a70b2fafe5dee50f10003536cc4ab0fff5a4443ca6bfedcb3f"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"304402204f94d7be664f87af6673d3809fbb96e63211fe5d8024a0fda0e8cb9aba00792d02203ed221855d1a88b6da3e002ab592bb3b052f54cf428f365426ceda073b7d7f1a"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100bb95fc54481be412c9dbcc591208a41a26ba817eb4335bd3717ef7c6850752db02202758a350b0a20fa0131c30916c994eea456869be69e205b7c9c3360104cb28d8"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100a092009d45e163fffb0b444c6e3d6fb65e713e215556f58fca3c2aefa4fb90ab02207f806681a01844d5b8a71adb7c4916c6328e6d3031f9452df0448b5ee89563c0"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402205e9660746916629f22d2ee192f12e3fdbe0843b4d92f7ba0c590835ba42e6adb022044493521b43807c7a788edd0d9f4eb21ca1d67838aa3f5d245806fdbdb5e372b"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304402203db9e6af77b0a77eea1d33213e5f8c81b4e48b48bf68ddf6e826ece8f0768ddb02204fb60a890c19abbad6b626317143a86222d0bb74164038dd1d6bb12544e8092d"}]},"81457:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"304402202db28b94aa0c8cb8669f39c1a9a5cfb34c1701cf37d1c2d3b9560a54965e55ca02202a06eff39eb12ad39f9fb6283dfa9c57e169f241bf87a52be30364a445b6c298"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"3044022057d3a43498085f51999d96878364d8c98ea1259ae9e6edfd6821260efdc7626b022001ec41c69a779b54bd8870d9c80a23ee595a1fcaaf543f6dd31cd29380bdb935"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"3045022100efb329c8b90d59c714cd41077d690ae119c5a3b5b0716e528b1bf3149655371c022070222653eb2377b2e26bba4ba406dca3df4d0c43877ee7d74149e2f25acc2c1f"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3044022079acd9fcec5d59d470ae58b7d8245483569c5ed36fab7f3f74cf69bba748434d0220794de13f70511156246b5cc41a2492ebc49274254d49d4f68abea2344cfdd445"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"304402206d21319b7250470b8be9b72548fddda88e4f1f891353dab51d676286d08c6dae0220348602ca01ddba360ca752290e425288d5b04c6cd3b7f6b6d83558dfce037124"}]},"81457:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100be55a55fd64c0e1fc95855798e76f3f74cae6508ec2437092e0b1c6a717114470220153cdb7d3b5e12e3afe39ca006815c7bd7915f664968e4991973eff1f7f7d621"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100c47c6aee9caeded33210b25e03722d98dd03f1919eb8ee70e1e2f08807ed1efe02204e0f7409a7782d00e7654cb2e497e486c5396688121e76b0e47dd6d6873de48c"},{"coin_ref":0,"format":"token","label":"Approve amount","path":"permitted.token","signature":"304402207590816c354826f7ebf5749125f7aca9192ed6c8670b7e60378af81902e0de7a0220268d35abdb69e7fdab961b8ea8663bfc86a1febed3df38ef6fb002fa8cd2ce65"},{"coin_ref":0,"format":"amount","label":"Approve amount","path":"permitted.amount","signature":"30440220124279da6b7983508beceff29ed465c77b4cb4cdcddbf3974598a91652f75d95022024ac9d2608d40c5b402ff84bb9d0cc691d793ee2b827147369985cc731cace16"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"30440220209e7237f3d5a4f8f67e9cc867fda32bed54bd25dcdaccd82c0c536e8c547dfd02207cf83ff175de6b879f532bde94513a0b03d5401e3626831e5b189c2406b1fe4e"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"3044022020032693679d4cf6cfff7dfe3d9d771713306506f525cb480bfbbb7294c2f87402201fa3cf8f0cae0c7910a9b5f7da64d1c9d1eb2e4a96f92725fb6a82167d0cab14"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100cf95d21cda04d030f6a9565329c4c21131ab144c4c5362fb007ccd4a0ca68e040220572707e5372d45663617204bfff56dbd45e19030d9edca7f6e165e2df9732c58"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100f9e1ded6051392c91d9ebd96c7088984d60b52b9ca5ef649ea9fa7fcfeca69f302207f9c0e5fe03b60beea467b98045e183b38e08d6105079eda81c73412f7f7afb4"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402200e852f3a10a27da0959c7838ffa13918d8c040fffb004a4895176dae562becdd02207744ead3b3867520352d373089a5a2e9133e2b6cf80e73bc6a3018e3cb97b66a"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100ba75b21282dd297449500011966a4cba3dd9f7b926a0698fee629020e31bd3490220194957aa0772ca3ca64098660464eab3453a3e1fa5da928fd5c38eb0f9fe4d3a"}]},"81457:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"304402206682ca8cdd3919bde89591adf3b3557a0d2250ca14090302577621262119cc180220032e6be3a31385955cbc7fd92c272918ce3837856ca861111cdae4aaa891693e"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"30440220551ff5382c4dd8a6ff94d019b7d8ca4c4699da5256a8f8d88ccc3172e12e288202201b3e157cbda19d1faacf0786e03db74e378e29de36bdbdcb9f93c1af9a1cd167"},{"coin_ref":0,"format":"token","label":"Approve amount","path":"permitted.token","signature":"3045022100923f90d7ff51a58b6078831dd51b6e1b9f558819bc4b758af0d980caa9889ee50220697637d27c55a588c60c2bd99091020836644f02731921e3dbaab04c6961f598"},{"coin_ref":0,"format":"amount","label":"Approve amount","path":"permitted.amount","signature":"3045022100a84092287cf5a984a0e0acdd56bad30b2c2b1e0b4e2ff5ae186948753c6a0529022053ead81120cc017e09028d118854ef00ff3b7d8dfe3e478d0683847e1c2944c0"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"304502210097cafe24a7eaf4c8c1a728016c463d7cd20e8e1144b065802eb6251d9520401002202951dfcb61f707b01713dff6cc28145acbc0b5c23c88c014c0f6dc63812fc9f8"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"3044022037d7aa6dbb8a53451ecb4c6041dfa62bc627adc7ba42edc69ea33179a8254ea30220776f044efc7af128bbb0090439619a14af9e9ea968cb761a66dc98845a346f19"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100cb198982728a85c9fe6212f49568246b3305b2f75dc2a5745d63947d6413caf702200f27d60a13425e3455693a46f165dd6b3dc2c31f19b99a5a9e1fa80f67df72cd"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"30440220067fb9fd3ac8659a9696e7db4bf1232cb151b56bc8bd2290e108547277b0f4ce022053181ba8521cdf59ae0d9aeb3de4f67c6d4d3848c42cc3d2656ae32c5552c125"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e22603eeebcd353c5997deb30bd1a9849ea98a2e8f1a34502664e2cf304eeb5c022058425fded67ef3020e33235fcc2cfe4d9fb54bcdf821af4982cc84d9eee3e439"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304402202225ececce8f631113f04854e0190d549c0f00a8745b4e4c88a91c46bdd12a7102205ecde00332f3b3988f4a00709d4197466b8f3c9b1f621854668138b7d2d280c7"}]},"81457:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3044022059de8867f4c71cbd68942d33a0815c687a34559b401c8f9ea536f7636da7594f022044a0265b452c56d59ac1766e491f3af5ccedba92d7050bd5b26361690c57b604"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"30440220267966c2680bb8bc4e11e5f36cce971f3705df698a358bc1157424d360e9c5fe02207be8dc337f700c574910190327bb22454ed5ea505b344689745ab9915b2e3b99"},{"coin_ref":0,"format":"token","label":"Approve amount","path":"permitted.token","signature":"3045022100af237dbe194dd606eb4c4ea0ba3081c08987dfd20d020f31d5d82f9b3fb8726d022036a351110c01e3f70436d5b24e9dc037cc1c15a90fecc7cba7450c5e3c2d1500"},{"coin_ref":0,"format":"amount","label":"Approve amount","path":"permitted.amount","signature":"3044022058568c47e51e32af71f615409221cf4ea59f777173c0c07de6c0f3a78f376ef50220481841dac91e7570f86de6f50b92bfe4202d0fd1471881c4e440095723769121"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"304402200f0956ea594297744f4172c187a937c97f8616a07b2f90a450968aac091c805e0220290cd844be0bda0f5b89c6bf4c36ab045570c6fb3dfd7e3d53c863ff585c9dee"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"3045022100d28d3090040571c6ebb43f3c2004947ebc93ff5b2570e11cec9aa929cab1bd59022038bf48bada25145de3a20d31559e356096954b49b3d95c61539f4191b0f3895f"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022038f3afd661023a0ad536236314f045447c0562bf2b5c9c91e3276fb86603114802201d55a2b564f0309fbea9ee54751e0d3545ecb78c4c60c130e34b0ad3e22d6331"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402202c9b4beea5271aed5353b41fe5656887577bea31fd9f50585ae38afafdfd8ddf02207325fc56931c91863bb862708de2c1d03b4ef870874b8d5ae0bb96c257d6051e"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402205ff928098d8370cd6a22c178ca0e671e594d9e2bf2bd96da1ac03c5d4b9697c50220243871ca02532d058f0a754e8cc255bdb4cbfb383360fc23a14597dc8bbde47b"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100a5ac59efdf76cd8aee6d58e43053f39ee93c07b546067428ce4cc7eac6b7fea002200c8afd7bfca738f32adfa5f4b599bc079cf326e372202d6b5117784ca45b7f49"}]},"56:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c":{"contractName":{"label":"1inch Order","signature":"30450221008ca7069d4bfe28e696182e615d80653533684c3a60a47cb9866fd00dafa0698102202758b4b80484f73584345367167cab655aad8be09051ca695f2a07c7900b6e1e"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"304402200ec2c38d3bf7fbb9bceca392237e6c681670f4d244cc2a07aef68b8ff8520bd202205a09e80f9fc667a0e20430a6eb426a63797ccb4fb6daf9e339b8dc91d7cd840d"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"3045022100ed35d6e643ef1337e5b0358fe25f1a176aec125880d2f11a3779f0ce2be421f2022075e6cae27a4d1ab55aeb3e2f95e1e1964615775ea63c4cce72ca6a2996efe3f4"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"3045022100c9a3bacd0653f35ccfd8483dda1be1f240ef3829af195fd978c2cb78fe8d224f0220303db61d77bc3e632e2c8a8529177091c58bb7376658a3ee8f73df7e0bab2134"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"3045022100d4d84a41e55f141acdfbc5ba7169bc96eb48b4323ad3f302259d4bc102caf3270220024e701e69719a3fb143411db1a59e64441318042235251552ae394d086f9d47"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"3045022100af6dc540129745fc4a5f5d37d7a2ee8185aa8bab4e9500b91a6ead4f8b7e11e1022055ced07e0790c1595d3929b10cf0850d0b3721c4f6c016f1d4c6d84dc6d479cf"},{"format":"raw","label":"To","path":"receiver","signature":"304502210087b92858f43caebadf20ed8741da081c0ffcf34676eb81ae4338ea2328fb26fd022035c215d867684139a6720b4fe15d2e77272a0873074823bf7cd48a07ec9550b6"}]},"56:0x1e38eff998df9d3669e32f4ff400031385bf6362:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337":{"contractName":{"label":"1inch Order","signature":"30440220461a9ba62577bf43ea41d862cec0764de9389c0a601bfd69940565b19b2bbc3502202d7e2b88f2e6ae6cdabec4de8ef587bcbcadbb3ce0f6904f15accd9be866d3fa"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"3045022100faa5b3f2b1b0a7f74d4500ee44479ed1d91124afaf33ff35311ad0e6624276ce0220304b5380d2b3f47be9da6a3296f5c18b4dccc8b161997610aaee3b4357f5c5d3"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"304502210090eaf9ebbe2b2cde688ad73ba2d63257fcc44b3771fe61258157b0f3ab6a6f00022062e74ac8a640cba37062e88bf00b5f612039bc74aa5e3fc3f69ea2f5e412686e"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"30440220012c3602f5dade51c41c326c551858f4dab6ecfc2428920e20322e60c6706de10220320494116238f04ab59ee7117222c50905acaa0683d842829062e8b1fd3e6b69"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"3045022100c50e5a8d24dd9e2ea4186d810818b5c23cb3c26230481da4429cc18e335938a502200f889440fa8f18e3121027d270de1d5fe60c5c607607dc05bf5552972d684ca8"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"3045022100c84761e0f0df83ca931cea77a4336fc93e6265918da34f78bf948381aeb901da022021b63fe2bc8cadcd36928b2f8f15ce0fb4fc13e101cae749102b603203241dee"},{"format":"raw","label":"To","path":"receiver","signature":"304402203737e60321ad30f5a865ab29494545893c6339629cc2aca3f0d4042f9a0ad87c022062bbcb34c0210e5c1cdc6a08791b73fbfda35a516dd94967fae3dc5482e6e0cc"}]},"56:0x1e38eff998df9d3669e32f4ff400031385bf6362:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a":{"contractName":{"label":"1inch Order","signature":"3045022100d6bc531ec620b3a2464dd2a78bf13fec64c39e9577cc7dacdc09869fdff447490220032a6299809fc13be25d6778c365dfe8a2441f78c6d9dc0a349f2f9ebc57c141"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"3045022100d10b34ea91dfc4ee22ffe5337bc8131a7f3eb21851317cd1a4f0f4499e0b7590022023b39908f6fd615b88ce59fb335fcc78c1aa1dfc784657128593aff716328c54"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"3045022100a319971b510f9dfd4d39a67df0b184e7842096829eea2bde03f4d137831903bc02202a1f8343a2ce5498cad84d2fab95e6f75b72670376f74050583460edcd5e9f53"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"30440220261e47b2e8933c6331e77fd0f3c1554d8011c749ee955c0bf1f8dd09fab53a910220190ee7f88fb52067d77b6201dcd0af870803dc540e45f98189a5c46307e5d7ae"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"30440220407b148dbcb9d491e1403abd308b35189debec6017959558ff1997f39d9b466e02203b7d2ff8a48fe63e411d4b01b4039d2d524f4406c77634a0d0d107f2434c46cc"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"304502210092cf643a2dc0ef137b257f2927bda814c4ea41e674c6e92a9348c94ea5cdd38402200e87cf68a0c454c5dca5cafb49cbfe3057afec77676a646a8e8d545d5b5aac94"},{"format":"raw","label":"To","path":"receiver","signature":"3045022100b126627250c5a18b36529103d398f5f5f86bd07f97979d481486ae0bb7bc87ea02207664b33b6f13a7614bd821a76cb19dc2c8f21e4ae00575917b3d7892a4da00f3"}]},"56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3":{"contractName":{"label":"AugustusRFQ ERC20 order","signature":"3045022100cdd6ed9272614ffdedb2b2aa22418386928f1174a6214451d67b82c06b637d4102205ee814ca52cfbdab011e337727cfe91fa272b98246ecbfb1683bfc0de3086efc"},"fields":[{"format":"raw","label":"Nonce and metadata","path":"nonceAndMeta","signature":"3044022056e3fdb59c9ece3d411d03963edfcb9a186ccb753b4e984366e7ca6baa99b38902206a7267e31543659ba3bf8b796edec2d1c6f174a810b89862e43541f94b191eca"},{"format":"raw","label":"Expiration time","path":"expiry","signature":"3045022100a4cc77374944e947748dd36408f48f43a94e67436231fad62191554d1ea5ff0e022001baa4fc0587af310bebe1c0044d7b4280bb5537192736fa3805584c735a6710"},{"format":"raw","label":"Maker asset address","path":"makerAsset","signature":"30440220770b731ffb6091493ce2fcdb4163ad872add409a9c66e88e29b0d7a82b0ee79c02201e0130c1841c484e816b9f9ff3694eea3601e1569c1ddb87319b08d86e9823d5"},{"format":"raw","label":"Taker asset address","path":"takerAsset","signature":"304502210094b700c3383bf0d8740e09d23dac120addc1c21029746f672d8f8c8b3a2a2995022008b5d3af862f7fb0510321cd9ae4f7172ab3b347f6556b3da79e2a95950ff34b"},{"format":"raw","label":"Maker address","path":"maker","signature":"304402202dafdefb2181e5bbdf5816fc710400bae0846bc08dfc389ef8008048228e2fd0022002b89786ea578488cf6c6b751dac0c13dd6c2c57c8d6bb0fcb47a28d2b07b1b6"},{"format":"raw","label":"Taker address","path":"taker","signature":"304402204c27aac1c07e8bde8a998bf06acd5eaf40e874a9b128a4f19ee8c39ce45c9cbe0220380d9438d10ce81f7545f3de8530a19c1eda78e4683fc2145b9715eb260f1d66"},{"format":"raw","label":"Maker amount","path":"makerAmount","signature":"3045022100e7f19c15b49e6f40eddd2c8a24d8c55e9224262aa0b856a413f842fc5c0fc7d00220341e5eaf45d8335bb6143768b1c961b6c7e97897bda5ef485457020661ac3ae3"},{"format":"raw","label":"Taker amount","path":"takerAmount","signature":"3045022100e36cd43f82fc0f99ec2770a26b245f6af13623cee69670d68dd696ff76d4630e02202057a0dd1faee909037429ba7489ccf3891a38d29a4da04648441105c1e89048"}]},"56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623":{"contractName":{"label":"AugustusRFQ NFT order","signature":"3044022045bb3ce0d61f428537754555a0d69cfc5554de2dd58c1c5cc7ae81abe073b1df022039ba8d7e1230c3851fc08db58cda6222c420dce4b8cf96725891906fc5f7539b"},"fields":[{"format":"raw","label":"Nonce and metadata","path":"nonceAndMeta","signature":"3044022020d30ebe13aa1235ea25dcc247a1c494a6aa2ac4f121aadc3beb874b9de4b75e022078efc82c2343d6165960fc252d10313550b6d9d1faeb6f2ff611c288fb53f364"},{"format":"raw","label":"Expiration time","path":"expiry","signature":"3045022100ee126c98d8ad5b000090d6c16131709618d803878a72ceb1f58f2b11b2e52324022076403ce3d181511afc9b59b3f4a0ce4de9ee76dd60c78eb61660d623294d4070"},{"format":"raw","label":"Maker asset encoded","path":"makerAsset","signature":"3045022100ed1f432fe0c33307e397f846970f7de0fc18098f3d5b4cc1a25844f75dbbfb9902204075ef8e6d6dae438dac2a7e3aace3e27bc7c67fe22728395f92888e68361f20"},{"format":"raw","label":"Maker asset NFT ID","path":"makerAssetId","signature":"3044022022be34e598b158445f7ff6a5565b04627b61789339aa956b03f5c8dcb81e0ca102201b970d57742618204906414d7d23dc42e9e566776e7bda9060bcde335817a8ce"},{"format":"raw","label":"Taker asset encoded","path":"takerAsset","signature":"304402203ec8a77927b84388d5a0ba1bb0bfa38fcb862b8c43d988bbbbccbd547a4ae38e022002f2f736d3cfbf42829b750af704323f29b1eedcbde789c49052521ec47bafee"},{"format":"raw","label":"Taker asset NFT ID","path":"takerAssetId","signature":"304402205defad5bc1514f254cece6e8dfbfe3b68c3818bef6d4268b40c59858a6a2187502206767bb96c040e523dfd88724a0ce4b4f6bde73c02a286772f2a73c973dab0bab"},{"format":"raw","label":"Maker address","path":"maker","signature":"3045022100a273a21625a130728e0448f53a047d50867a9ba5e4a285d7e06d98fb3bd655c2022061e93ce13cedef0ebe9bc9340b988d0fc7353e99e2ec28b77102a14b3a129479"},{"format":"raw","label":"Taker address","path":"taker","signature":"3045022100b74529d5cab0055f80732bcf7864f03db98bb9f779fa56171f3faafdfee2719e0220757505e2ba5df6184002e921f678f9f5bb073197652a45d86c6edf003067ce2c"},{"format":"raw","label":"Maker amount","path":"makerAmount","signature":"3045022100c14e1f90619be9cc92da927b1c908a18133b043e138d908bf81117e1fc73fe000220503047ae5e75ee53c0ed60601644ec09f430c613edc6ec72cdae4021d29438ce"},{"format":"raw","label":"Taker amount","path":"takerAmount","signature":"304402201096ca9ff9b886a77fcbc7fdc8ddfc0f42a9c8e7fccb783581ca3abc75ba61dd0220191d21eed8b4eed56975b580832a8b1891a5b674fe1a0e5d7314b7b6486d7104"}]},"56:0x111111111117dc0aa78b770fa6a738034120c302:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit 1INCH Token transfers","signature":"3045022100aa4cd645694179ca07ae32f7b9e940ef3268cab34bb2a67d4c4f31d0ccac76be02201a98adc704ff642bae02e8566470b83e98f95a70ece9a4589d1e7c865ffbe06a"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"30440220379cbc9fde04d67f3bb79f0559aa097ac10cc5f3581ad5ee7b2d32babc95298202207e0fd82eef66dec1f39ebff087ef36affa96e6d70c15a3ed57f820d08a11111c"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402204a8c834e5fcbc352bddfc02f932f2a068d3fdb134caa710ea472a37f1e8e3a1d022064452eb834e0ef14bdcb574c68c120d950a04af9062a4333d886ec6919dadbea"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"3045022100fc0a3ef2dd46f2c4dd31fce3f40facc37740a38f2c1f65bfa408afe3e07a78d502202b9ef22926fc5f3999eadfd1beac7bf36a00b3d18e13939c3a97a8be8e282823"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304402204279a86f4d8a7268e5ef69cbf3f15294837288c32b64e03170b13d85812cde85022020e79e9afdeac2bd931bedd8c1eddc45a6e38659e04eb53b91c3c68b141d2de6"}]},"56:0x7e624fa0e1c4abfd309cc15719b7e2580887f570:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit PolkastarterToken transfers","signature":"3044022070d11eddf5a69c484c2db1d472abcaf3a4a3c5c9bb821b7b5adcf24ca658110a0220227670ef7ced8b0f603bc997967b67b12ba6a1d8022b29e4292d8b6aad14cf05"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"304402207f0fe68dc0d1b965726ed17a6f4eeb8a5643387dae6afd4d64a10ec1e5dafbda02200d4ea50dc2c96a73d8e2b868414ee83d8003c21fa5399279704756803e1ede10"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402202bba41fde065250b92e68333ca0abf62e596be683f777a70e68ede89bb72ea2c02202a8c58eeb203db1c42559234a8a6f271fa36c1a14762ae84d88721d741978bf8"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"30440220377b86bf7e220a1885ba2599ac279d3c446cbc83f41576c4740ed1222adb59a10220121cdec7b08c496dc2843a91834fd50e21efef40c81f0a718edfb602cd411ad3"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100d8cca3767efec9db06d52a0aca60f4847c451d5d78e3711679422c6d9e089d52022048fe050ffa74d1be563edab0989a9d56722276e177e7be6b7cb44d95bd0eea51"}]},"56:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3044022039764daffb73a12d21ffa77c263d071d00bc1dc310ce4cc9060c5330730709820220123a0e20ffc1cbcbc9537556ad29c04ec8e19dde7e7eea47afdee360fe09d242"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"304402205581571cf4a3136222263b4f00b4d4c055a100b63bd1f7f04d09a0133ec9b38002203a7c8947be3075a7990173d5ca0ecd5daea6f8ecad5cdb23d1fdaec8c3648e6d"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"30450221008304191a0fda5fd9496075030b7ec7d0140b3fc5f6428dbfa08bc0b0b99a8b0102206e2b72f9fb1ad69797b27b49353aad994a3cf4078877731cb7edbe7bba805fd0"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402204cc4c139386164490893d3d2f2933effed82ed5daa0e0ee4d23ce9176705441202202ba382b1639ae0826ee0bff9cce3ef2c7943f32c45ff4584bd55b3a49b0f4c95"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"3045022100d0a789a3e81551d55a580658635422970c89e1dc1d50c2e3e3eede6c8f592bfa02201b0d335aba72fdaf137a8ca9eb49eb7782f7bc0992ea269fc19dc890d66435b0"}]},"56:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"304402206be53d7a3bdafd6e4bdb86e3d1b3767900986bdd6a10d6075963c21b4ab0992e02201220cd9023788f36704f3b62fca65de422605ba68b833964c0792ec719ba837e"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3044022026ab43885c98f433ad1424f572718fbd548d56b2c02354d512a0b5e4466f4c750220677b8d7ee647b4b483a66274adf2afdae3bff55edbfcb5d005d20a5ae3026228"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100bf7fb026be19e1f6392dad6dedd5f324aeb03e14d9caaddc86a977c231b3f90b022008310450a6b7229c1ecf0a688bcd43b588a471a69e4056798c444b9d98935b38"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"304402207bb62be1ddff68705f7fbe6c622ba79fdc608b10f02a157ae4c7c2623c696d1d02201b6ee7553588ddec6c02690ecf2f246de293db422510d662521f9b24ea806e16"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3044022018cd297b191edc23f55cf6a993288ffdb3b67502bcfd06ece8fb71e88cf5dbe702201e53c252a6584834c51c96cd7c571048ce54a4699e0d8cfc9b81fb43a533a532"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"30450221008a60ed50f831e181cefb6130f916f614bebcd37418de1836c20f9ef7dc21038c0220623287297f9149ffa69dd2462ecebc0197ad90b8e0895a9430f1573334c2bc17"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100feee7fef4693c181917b5aaebcd8d8933c9f7522ac5eebb13a8612c4eefae23b0220498b1180915442e73ac2770f63df86a781c645356b5218241a265770501ed4a1"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100a951f388b18ed053e69fea412e90e01c12bb5e1e4c20beaa29c2a94e871d667202204702861a2921c92a11f60a6e7ea6a82d1f67a254ef8ae89aa80376ea0a1c7d63"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100dd21a591bf52a2fcd8a87e63e1f920455b87e71b124cd2613371b2421cc64d4d02202ab80b9b2cb4c647123fd967e133b33eef3eb685d6d9a8028427501fa2db4a32"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"30440220132d2faae56a13f79026572cb9e11e8dabcd3168a09912b63c50c0e1cbfdb13602203f570c5a92ab0a7dd4ed570b2abaf0fc03fde1156a44f1a94b8b8ff4a759dba6"}]},"56:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3045022100960422217afa9fdd640240ce7e5be69848669bc6d63e92615f7dee6c0a4a42be02205abdfaf049823bb5c97bae109f73987713cbedcfd7019ee5a930106df816b900"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3044022051c30857bcbd3f70280d7c896a016da0ad49dff1722d25ca0cf3f0acd0703bd20220105ef2f7e1710d0f89e2e5117c28a305923127435c12b5ea1f30277ce7b230bd"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"304402207d066e3aed9d224ed6bf1e6c117ce57f8304dd482bd195cb0c9b0f523bbee2e20220302301f56651a11a23e9fe700b15accef9d6bb62705e996b27f1c834d8bfff25"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"304402207b334b72b4bfb2fa0f2e8f25cb8e135ad053ff9ef6b4ae346c9a04d8d87b0f70022035894d7ce9f94163b555891f830c97c33df6d460a105809d7d6258cac611a753"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"304402204713b5837980a38dcae6653c7428873511595be0ec8783fb7c73f45e55d358b7022000b2d46830038f826435903e6599a8240f8387a7c2d2c48a7e953f8ad95d9035"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"3045022100cb26252dfeff8e4ebbdb94bb011231ef72866cdfeb42190bc5f0886e4103b1f702202bc251b7a6aa3ff433d0704e65f42d7abd75ef23df6d2369126e0f2476b2b670"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100dce11b4a8cfc9847bdfaa3e0f38ef3632f57e5188177f4c17dd8a531bff652e50220050c59b5f67c0d4f59ba37b2e0f578915a44ef055693d92aca43c0c2570d79cd"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3044022001fedbc154eed1d9a1628dfa85eeddd9abb91b18d49a59e8c7fb3c4cc55f1ba4022042ba188fe844feb40d5bccce05c1296fc9acb19f92331f592413bec294926940"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402201bc1cfe7677b63fe456cb3a78ff032122d9353af812c68a07052dd8b63a62a73022079c4a25e1a1d3a3d3630490174a9adbed8351488c98b7e6e1b055a4600d38df6"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100d3e01837488659951622a0b8edeeb4d7571dd05e47e8c771f95fd07381dfd1d4022054a0469a833d71c17a02b68f08b77b84f2c957b0556a56c4af5810ce61388851"}]},"56:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"304402203d2fd78eec8d725bfb69586e5d588174860d2e962b0659440d8c6f2a0cef6611022059dc7fe99f8fd6f89a15b5534c71e7571c485fe9f3d21d0a5d2b0437f92186c2"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100edef138680959b2ea2ba9c336988fe47c4e6078b19a94e64d53a80cc654bf3c002205a9a78c89421cd27eaba1b07c9beb47eac621396c19d79ba02c5d6be277a0401"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100a545dc35ecd2edd288aa9446f760bbde00722a546a5e6b966532d01711dd97e202204daddd8b0c7502ff95fad0d99655ace2d946d47f322fe2baabf789c718de1f68"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3045022100c809271f4717f853c03f6fc3ce796d046fc330bfedccc3e90200741b00fcc3dd022002ec64e734acde7d811b528c750ac8ad7d44e4161e6eb5524318c643941378ed"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"3045022100dc22632e95c660cff99bc1d6b21ab87ac471a323c2036b7ac7c01326b426add102207770c2e0b4985609d554af42b89f0579547cb6225d2e5ef0ed2eedb6cabadcc3"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"304402201bdfb08bdfcfb3587de64c57981f6970d7eb2aba5ac2680282a154dfe8a2b7ee0220145fe0ddc50ef7754a82c469899ac70e07ef9b3fe5b076b29fed2a0c6b07ebf8"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100c62059c35d7644eaa5fde91b0e7e110273229d01dcb8aec96afc13d01f404f220220674b885b86399f953f824185d70df46e92142518a8f4950ed2d7ed54af34f677"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100e5bf376e10e5f64a253d43489f38b8eb4fb2135c04078709e90c8ca49e20b9a7022078e48814760f2df95dc8d45d3c7a438674db223f6b727828c2784fc2bb2eaf29"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e62d51d254f6d76c0333cef9ed6af8dff443b4879ece411f18b408e24c65b40302207cf8df390dbfa6a0997047d97fd57eab184210e0819addff6a3e91fab8f7922a"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304402201978d2f31b9d02c7f067168c42ba32cfa1cf8cce4eb588b5d1053b99be9548920220536e7ece1883045319cdd13eb7e7ca27306972c1657186ae8d85f3d3d2100a20"}]},"42220:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3044022026254c5b6903c27b62b2f0678ba4d99e853842af501bce7d6cce9e01448d76bf0220517550421f2c67d7486fafbcba486513287cc3797d45cca7cf0c3d904c598f7c"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"30440220486dac6101905d78433c0ae31566e65cda9e603f0cbe06f8d6cb86f0ac402d3f0220769a9107e0c963f0d22222ba7ff46c39137f533f66e79723c7cba1fcfd0c2983"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"3045022100b51b1b32763a66fe56cccc1f01ec9a197b67aa29ca2a6cfc41689cf041c049370220224e9117db58c6aabe79f9b1d0b5239da6ee82a2c273d22526cdb15d26f3be56"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402203ce7919144ad501982f67d07e5f14ac966643ebd85306bfd2ed01a0b195bee6b02207ec812a2d0bab9ed1b9a83f669a291ee0571249950a8f0be1164af9da79780a3"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"3045022100923483245a9d17b8143664ad01773c26b7b72cc9b04c5e7f452c8a84995b4e6302203d49025be372f1d0b456e3ffdee962f398feec6f9e241cb1378fc0a4ed88eeb6"}]},"42220:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100e72714fb3004f389173e1e396dfb953163ebd1f8427e390e6b6787cfd02ef54902207d4ea7e366753356e0c4d9ef1c124f20636c0b76a2040d51abe29aca5781611d"},"fields":[{"format":"raw","label":"Spender","path":"spender","signature":"3044022066ee1bb3c08d1c38278427508027778ab802d61f09023c8549977282d884a5bb022048bb50f5631e49354a7bf63f5801c1402eefed99d2b74e775854c64a77b2283f"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3044022052dcf2e649e98b1725820985c6bd6719104de0819eb65d3920d250932ef760160220699566255cfe8070e9462c15b78f6913f51ba3d8dcd653c848df9af8f21e0c9b"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3045022100a0789ec1c91a3566adc242405d7ddfb2ae006c33d31a76021236e37d0fd52fb6022010e844f0badd27df3772c8318c66d76ee58474064d348c72b75c159739a3eba4"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3045022100ab855bf0749b4448a1e203f8ca8318c29e6095ee95be36f5de695e0e24c04c3302203863023f13aaae6bfae39bd1993bc058be037a4e1b9ecaef91754365360512d8"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"304502210094cb4047f854cc88fc265ba3d928340a51e09551555869ed813879b731752849022056966f3ed375253d7994005290014be01033e032e3e6d37ed3b34bd2be7cbca5"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100bd5ce8b79974823bdb9a7188b2d300ab5ac346578b0c73b10fdb0ee98d68a14302207f405deda89efed5b9aef4d2911a90481770e48db7a4ef02a209da55bb750f85"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3044022069e268580149f3806e0fbe3cd09b54fddf16805ca901de001a115ad2330eeab9022051e808755f106f96ced721d1e510cf6dedd341759a0e362b18e747ff54982c69"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402204a9c020d1fdee5156097f946327eb4977e5d2e9208b25dcb90e7b383fbdce26402204378adef26d05e8287c328ef2d09651b9b4c1b26cdebbcf776286847ee2f4913"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304402202f047262a9e84adb2bb2f6fb828cc167dd592deace7d8c9385ddb64597802b9a0220590e85daa61a809716195347e1a29298a1bc6de391929af407024d45aae2e33c"}]},"42220:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3044022020a162731ec93ee7f98027a5feb5e03807818be464b00affa750a4558a99f98102202578eb63dadc6b18743a96ee393384ef40fdae8029941931a84b039c19c933c8"},"fields":[{"format":"raw","label":"Spender","path":"spender","signature":"3044022070bcfabeb93910982344547495147294072e624f0134a0eaa195e73f0a1b7268022030ac8cdac2076a43b304ba29cedf90674147000b3b37ed9b28ca1348d679e92d"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"304402204fe219dbaa70e9555537f1c6f9f24419290753c997f9d7cc499bbfc06e90b072022050bc100f4244a05d7ea3e8a6f17e47532593bc562bd3130223b71ad57b8b7359"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"30440220606aee893e8cf3e24354bcb78c6f310a8f5fc39fe6f2d725cccc9a915859caa302200f78ca9fbd05ac11c6aa1fecdcb255c9ece8155aa54157fbe014170b5accf2a2"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3044022042283598f742fa814e03f3ca05ec7c7eb7142de7617c51bae5b6fdbf61b4fcb3022057f93761c10ee4c30fe121617f5c788058a654419bb9bfe3f48e22cb95d1ba3c"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"3044022019e7e56c524b99c53f1607b101b86c4f935b3e9fa133c523e431c308846e7456022069900dc4f34e164c100f9c052f082139cf6d918b72f503d93b99381d676e0ffe"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100d45ba12fa943bc8c48a5085d4241c964a1f65823ed3b5f7a288c6885fc0b12e402207b5310e046215438da64cb370514f642d097030575a9497cb7cb82ef393d09c3"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100da37ad4b694bc7ee59f0dfe9f37ce8100b2fbd1d22fe866ab90fcb5a75c9071a02203927e28b4df2e583c70f6e15272ca813ffe4d3971afab27ef3f403730aa48c59"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022020be4365768b961d019a3bd11f3c72b52b093252d8b0c692ef03dcfd9f8d648102203a793e8cae971cf3fbd53518d0c2b77b15417657ca2c3b0bb24754c70c372574"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"30440220502f2785c8304a83367412fdc3344b29aa1f19aec18ae946c6d5da3b4752b6b902202a672effe830db5af3817536582af5e4937806e58bacf1730c26476a5c08e332"}]},"42220:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"304402206a03800c227fead9cf18053d5cd9f282f1c86122c257075589094526f02adea00220193bd64c8d0c04045f8cb3367da07adc0121c9b35a30895b62333e1ff58d00a2"},"fields":[{"format":"raw","label":"Spender","path":"spender","signature":"30440220731aff0ad876d81442c75102cb83fff4139d74cd9cbed9f31850a7f1a0fc643602201fd344d75222883622706ea73e0d2c9067cd1f744f17ba716cf37e04bf5eed28"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"30440220272032cf8eec500a5f25890861d4c513fb19a5384622628c4cd5e26442bb0df702206dbe3ecc9f908eafb027658f9e11d8b87e7b67ed50b30f4c314f076385e8f1c9"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"30440220689a2b7d34b81d7ec33df240731ac7a98ceca867180d10d6358b33c8ea8eccc8022039ca9f9bdaf22b15eb562b78ac723327c7639d6bd7dfab22c6b9acd906776f67"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"304502210086eea834b3ae54fa55939fabcacbabe0d0a623bc4d8b9c31a76cd964c8ff8a6b02207e4c5e453385952e9441ed6a9eb562d10f7b255f7ac5485ff05a39e6997a1b50"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"3044022001ed942f8764c396a2a72be95e1ede5e2a4d9ca30ff6a46b9ebcf2cce6760f3c022036b39587979d6bb05ebfcc8f6c61c4af383a0b6b9067b6e43622f60e33308260"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100f4707993b6c3ad2702ca775cade1ff69bd4f6dac7ee3e6cfee9eef71f9088f900220189696a9ae7371fd16cda5147d6f282d416d2956651ac0361ca1fc0d60504d6e"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100c3b0891248431134809b5e5383aacf261eb56018fff48dcbbd043e5551888ee702207b1b8ce28cba1aefa9a6c95821346422b466b05ad4784b5461afb874dc0fbd9b"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402203640de985c876c17d297a73ba553aa55e517ea36838d9fd235c1b94f9a805c3302204e1e64b95f27416bb1dc4c823ecf9f1bc4e25791b6c7338035f58ab8fae59170"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100df2481af3d60f76831590012186282dec18c40ef18c25c47c60767d9c1b560a602206d48e4ebfba892c333a289cf2ab49db38fc30304240578e79a54981d8dbb0ee5"}]},"1:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c":{"contractName":{"label":"1inch Order","signature":"3045022100e1f7e1db3081ebad48f85b6443892986b2048bde4dcc8e7be4c926923ef6de0a02203d042c0caf4ba241f1a9715ab2e18bd6d581d8383a5ac41b9e29e2fa247ea21e"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"304502210084df0994694c4f28ce49b11ca4d04c961e50a723393e1e62e7fa62f3460649340220489ea716160dadd85eeca97e8dd42945c95e5d5b02e6b1abc0d6292049783e72"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"304402207f1bad60a614c6a36c31aabfa5d86ef58ec1e5e055e78577972fff4254a59e3f02202261833b5799c72693ff6084e5f9a39f491eba89cd755a6c348ddba26e2e4f51"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"3045022100a59f82153d54ee2635c15adcc070f2d32be5ca8e1724442fcf9385aa1350a14402203030da0cc46b5ce7f71de8b52b8965fa90c795b39dda58d7291ac653b92389ee"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"30450221008683bd04cbf3b1f992a57fb1fdb3be96fb932ddf3a86db8b873dd4716d6d02b7022055c2f80fd063f33c958676eb4c8c7e915d6e0538dcd05d6cd94cafe05c229adb"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"3045022100d3bca016cc8776987b71a08359baf39378703f92e443e657a058fddcdcea100d02207621b441d4c79236a666f4ebd163e9f4f34a6ce33f5ae14ae468a311e81584a2"},{"format":"raw","label":"To","path":"receiver","signature":"3045022100c23f20e9c3cea7e06b6642635884b11ba3653805327413f0e779dd2148faae3b02206c613e4f4470527b6ef0304b09396ec915045116607901d1c2337b5f04b87634"}]},"1:0x119c71d3bbac22029622cbaec24854d3d32d2828:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337":{"contractName":{"label":"1inch Order","signature":"3045022100ea11ec08e4ee7178eb6121d603d00e6c6e62d0d94e6d4098abc22d709c47b5d7022041c0c9a56c14a783c02a8ff358b0162ac1f743c3f8fbfe8726d125d041a55a04"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"3044022062d5d76cb58f4b20f6516df1154c983610b57fa7a2d65be91915012075ccf19902201b5b86649fceb99cab590143133b535ac0455505fd70e94ccc5d6712bf1cc963"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"30450221009ae13c9db1fab6622b474e80366dea12be8f03bcca320f0b9ab29bc8d4afe0c902205edfa3683c639e6989dd4b00a3c37fa91495ce95155b65edce43a15ef9d6fe79"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"3045022100b281ebbc426a329301a9b2962bc5ad0a09b4d7fa585763a1ed876b689246e23802203ca2a7452d2b410b4fb67caaaa1d4ab70a7073b34c2334352acaadc5e3da3d09"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"3044022009e7512395741e5e54f9c6d9086585deecf1b993f1309b67cb40c4fbf172412702205324dbe94ef03a58972eff71df312723ad8364fe42a226b24931561d6c95dbcb"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"30440220721c35ae89f778131dfe9e1ea71e5d553f90009113e39ec379b16e910521df1402207fd8dc0be2cc10e8f2e95cf080df6cbbe57388b0921931d0edcc25a01ba08db6"},{"format":"raw","label":"To","path":"receiver","signature":"3045022100a372339b731529e6315864744dae1826fc136eb899925e46826faeaf6ad5b10f022062ced218ac80dbb3bf8d25203de72c7d06ee20e39115bde37de3f3a50e9f1868"}]},"1:0x119c71d3bbac22029622cbaec24854d3d32d2828:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a":{"contractName":{"label":"1inch Order","signature":"3045022100f2bc7298d431b6f742100623febe6824eea30e37b2d89093c9cfa933a053878102207332846b67bfdde820103d7d775c51a1c2b0fcaf48f2a9a19cad9364e12fde13"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"304402202c13c39d9be77721727b3920ecf3e856503d952caf07a74496984b6bac252567022057cbbabfff5bf7a00ca18d4ff9ecb0c5215d779a4750daa96fd3a257838d7907"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"3044022062acb004a7d9308bdd0cfb127fecd2f39410c87470753a872bfb3b3e4514486702200952fa8a3152414ec408413352fa03600d089c8a88f541930abb9d97a6e534ae"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"304502210097eb2d5a8cd54748c6f228ace568ff742bc4d87bf01b601580c342fe5ec1763902206ff4c683bf4cf5f6a92b9663e341a1bc5d06ff91b4ba963f4df534aaf249be04"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"3045022100ff758c9dae36b78fefa634bc720c78f0ab38f5f38cdd2db5d40c6fa98640ca5a02201768ccd8e22e396f0c0022bab161158b8ef679782fb9eda7c2ee966c23856b3b"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"3044022022b529a549bba76a32946faab986a40af90c92e355ce9600db325d3ca37bb03902200118dac2a9a9d7504870d210fdc4a3993c438467bc0d17e02348dcec18e13151"},{"format":"raw","label":"To","path":"receiver","signature":"3045022100d116efa90828b9a139cb8b54c3665db8e58cc2af118bab85042705b6f0cf997a022006429fe8762194100330515341dfdca029e5284ca44f57d50e8c1d8cecdf81e7"}]},"1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:08c2ba593f6e0e80b8fd2bb1da6923135c173094f9cb6ecdea6ea144":{"contractName":{"label":"DeGate Withdrawal","signature":"30440220089127ef62e67a3d075a2c0d645c06ce98e6cd373bca7ac89217b2919d718b9902202b4fc6a5488200db6a51ef2193febf8023770e44d361a5c85907c1f6864e3ae4"},"fields":[{"format":"raw","label":"Owner","path":"owner","signature":"304502210085a5f94d365f90e93bced9bfdea6f3a762abfeec8d77b070905e46368f0db7970220042075c4a50ea30b63308a3d4ef5cd72703c7447d4d296e3fc90e3872aa54259"},{"format":"raw","label":"AccountID","path":"accountID","signature":"30450221008d1561da0d5464ae0173b2a6ab1fb7c9fadec3429b9d068f464062cda6a721840220169a240b04d50866f8250860c82b01e664d4bb1262f7782a454d3341312d7831"},{"format":"raw","label":"TokenID","path":"tokenID","signature":"304402203da24c741ee39f2c353d6e38386af0ad7b38a2568663f562e084247b618410b702205054378fd255b5077310009af3ce2507c29f5c3a8b651b64519982ed502b4090"},{"format":"raw","label":"Amount","path":"amount","signature":"3045022100c2d5d4aeed590ec6bd2116f83eb334023d5bf01374700e49d73af5875059c0c10220286ce6cc46a4d5e9ce71462b9431bb69c55f060a65fbdb2728b526cbecec0046"},{"format":"raw","label":"FeeTokenID","path":"feeTokenID","signature":"3045022100e50a065542008fa67af23b0091e5962e89deca43cc4cfa55fdea4ba86873846d02204d3ef27ca382008596cf584a8169a925a9cc4608ba16fc4673cdc539dd85a29a"},{"format":"raw","label":"MaxFee","path":"maxFee","signature":"3045022100a79503f04eafa7afb97bce7df13dc697d7ad03532be221da27d596ba5c4f9be502205ae99bd27a8f1c92cf78fec9952845342ed93625d07ef878043af48eaaa4b093"},{"format":"raw","label":"To","path":"to","signature":"3045022100c689e1d30113b842b9fc468cc4e26308a6df924818b9fd89431627c8a42c57af02200225d6cef4578c9e4c46c48afe459a7037aedbfda03195ad0252cba5b41b502c"},{"format":"raw","label":"MinGas","path":"minGas","signature":"30440220464c332bf0455c61102f4884218190994094d7c9808411c00fa6fd6ef5763cc002202e3324eaa0bac01d96738a8a9ffcf531ab59aa03911f2031182d8b9de97a4f06"},{"format":"raw","label":"ValidUntil","path":"validUntil","signature":"304402200ec81207eb0079bdd15905bbdd9b98660d705aa08df96e9ef990774d2f1103cf022035926ba6cf460783122664b1a25849638ffe34f42c38177276c3bc7b10ad9cae"},{"format":"raw","label":"StorageID","path":"storageID","signature":"304402206d33f0bdb8b370afb15f212aed98da5ad1d2c41362f9ade1360f86ae9ed15cbb02201204be822aac5c18a09f0baee45c5bc3295c8c085a391355e5ebb8a3242c9cca"}]},"1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:3ff1c601fe26dd56c4fc5d773d7e24b17caf0754a14f5eb033636388":{"contractName":{"label":"DeGate Transfer","signature":"3044022043833156814430e372cc93d7540835c0ba00e298359bd1296425f42b40c477ea02206416e6bc158f72bcb300fa468fedd42394ecdff897494869cf1f9679b6c2769a"},"fields":[{"format":"raw","label":"Owner","path":"owner","signature":"3044022018ba034d2e60f07b388cde680072eca4b0815ee5f479e165626c51b84321c6790220793475c2711d3aeefe5ec4d5ec89be59c840ffb2d51d013c8d86c2b5d7e96a8f"},{"format":"raw","label":"AccountID","path":"accountID","signature":"3045022100aad3a5a7ba18bb2cb73d647bc0a573eadf97b62bc08b7656dbacb982aa341d7002203a4f6e50a3f386b10d0377debe312d5a1462108563e18807fa8d45c4edd7615a"},{"format":"raw","label":"TokenID","path":"tokenID","signature":"3044022002c7d20b128cd4703230f199371f6ccd18f2e3311ff3b431cfdba8ed69b8a9a602203a5be9d165adb244c9c9e0100bfb559fea69b7a91a9c4805d3cab7bbf649e2ba"},{"format":"raw","label":"Amount","path":"amount","signature":"3044022048ed7a7e1860df3c118a9e0bc25ca8085ca4c4981d00d8a4a25bb26ee905d23702206cfe29c63e4da5415b402f1576466f6c629b44c733e3d4a4a46b61cf1f0ecc12"},{"format":"raw","label":"FeeTokenID","path":"feeTokenID","signature":"304502210085ec5b05794e239114ee6dd75453cde566ea74286cfe76122ff69c230f54f3690220668392a6f480c2eff108cdb7cf3aeb287bac88abe59914ccd6932717e14d2758"},{"format":"raw","label":"MaxFee","path":"maxFee","signature":"304502210098019a9ac20d02984196a508ca27d29c2654feb0ad161b1500ec7051c0ccb95c02203920ddf0bf7e17f31dd59994043bb0a21a3f91c9674f164d63df5cbd42e926ce"},{"format":"raw","label":"To","path":"to","signature":"3044022067324800e3b2353a4ccf8faeebc4abfef0cecf550da5afa292dd12820e05602202203fa883cd57d057a3463d149117490ae889173e867b54279c488abba636357029"},{"format":"raw","label":"ValidUntil","path":"validUntil","signature":"3045022100ebd27a8311ce197bf3bbb72856362853081faa55048d186a15017c998b164edb02204bff1cf694d3195d4c82a2c8d6f6b1d4db842e9fc891eeaff2d4ec4d8d64836e"},{"format":"raw","label":"StorageID","path":"storageID","signature":"3044022058b6542b5fd416c8c321eeeca445df10141187fe956363d7053a90debea15abe022039b14b0f608f4b1c8757e5de2bef2f80741df2a85beb559d4ba710af9284e953"}]},"1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:4decdb2662378b6612b240fda08f6d00412f088ccdf3023095323de2":{"contractName":{"label":"DeGate AccountUpdate","signature":"3044022059026d8aa3f81272e4b4b72f0094cd0fd04ac862e3e8ebc3e73ca7b923a45f70022046a1f7323da99a3dac0d4cc603c9db38b64ac3fa7519a1248e111abf926664d1"},"fields":[{"format":"raw","label":"Owner","path":"owner","signature":"304402205f7fae43ba4d7a0e5bed7bd9cecab4f2b55bf6ba6b3e33962ace5fabef269c0b02207bc89e0acf86b7593b18ff9d865820956508bb1dc3d8551dbd9f6745029cfb3e"},{"format":"raw","label":"AccountID","path":"accountID","signature":"3045022100e580811e1e6b2e40fd4cbf4eb1a3f4baa934e6d96e80674431b2a6fe93581dec022010447ecd9023c4a028142d2e34f217b96a65ba030052c20eda6b3f4428ff109d"},{"format":"raw","label":"FeeTokenID","path":"feeTokenID","signature":"30440220387d9f50b9af4dc0c2ff7dc73d513e1d816a55aafe1ffdc88827176907c3a5f0022007d64ad6946f932190bb352b5aa3360b4be0d1b50faee29010f5fbf132cbcc31"},{"format":"raw","label":"MaxFee","path":"maxFee","signature":"30440220395dfa14a44c006079ec38d901b71e839ad10e1f9642b37246e4544302299f1a0220216a9b71a26e1a8ecd87f7f16d7a04aba42a68c18da25e8b608cb4493731ad2a"},{"format":"raw","label":"PublicKey","path":"publicKey","signature":"3045022100db2cd9ef2becd6bd902458e4c3661be2f98db0943ca0b1d074eb249cac7139ee02203d011e51879b69be2ddcbd215242dd9e70f0cfd92c59fbc5089aee56bb51c7dc"},{"format":"raw","label":"ValidUntil","path":"validUntil","signature":"30450221009d4db9f47704967c5fef69f7255e9dfd19abd928adeb7a5a06abe2fb8b3adcde02200ed93b341bc629b132313b1e8c47db096145898b3a741d165b21b653ef14c3b3"},{"format":"raw","label":"Nonce","path":"nonce","signature":"30450221008e187640c09a34fdda18f022ece0f1632315392192876af7df895c6245ee506102205f149a22b0eb3d9bcdc3e65db8a0e1b6494266c721c1bd4248e7de7bb8a4dce6"}]},"1:0x7f268357a8c2552623316e2562d90e642bb538e5:d8e4f2bd77f7562e99ea5df4adb127291a2bfbc225ae55450038f27f":{"contractName":{"label":"OpenSea Listing","signature":"304402205f01e62b2331ecb9f1cb3f49a764d66015937cb20cb4c3af625146905ca4832402205076eeb4a74619b4552278836b548c8e525813faa9008399e43bfed7db016408"},"fields":[{"format":"raw","label":"Contract address","path":"exchange","signature":"3044022069df3b1c82dda9849a3df4cd0dd263d2b6c35e4fb8946865a35f5555830971b802201880d72b3d956867b597a2f5097d7f8799bad6e636d3de4030515634bba47155"},{"format":"raw","label":"Price","path":"basePrice","signature":"3045022100db49dbd8426193b6012781f43c3b445d1cf845d99d738091c1f068951728333402204326a2da5203f25deec049deba760bb31a86507c73fe6828c68e0db2eabfc966"},{"format":"raw","label":"Offer expiration","path":"expirationTime","signature":"3045022100e71a4921740fcdf4e489c517fc82f9b7e83cfbd675dff318acb91fbf8eaf175402203fac43650771c6523dad8d995ef414d035a92d262a9cf95885ef2704337a2382"}]},"1:0xe92b586627cca7a83dc919cc7127196d70f55a06:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3":{"contractName":{"label":"AugustusRFQ ERC20 order","signature":"3044022043fb323d3a064faa38bcabad3a3f797dff60f55b49c19e350a9d0b1f980818e202205c3dc14efcc49adf915f195ff29fa02dfd9d08fca532b76086e501f9e0d133ed"},"fields":[{"format":"raw","label":"Nonce and metadata","path":"nonceAndMeta","signature":"304402205b674138eb50ddbfdd05768f2c641109f6c8f341d27e10ea12d59e083746cb330220521d739a49ee57ff9a41cf00adc631d3dd33e9ce2b23ce50759fb33c0ffce0a5"},{"format":"raw","label":"Expiration time","path":"expiry","signature":"304402203ba8d470649ae7cb5d02764fa48899ec0414075ed85cb9fd95e89ac5b3bb073e02200183233f30de996a8b87417a6febcbb56a544c38fd62b6f7702efa7e0d7b2ee3"},{"format":"raw","label":"Maker asset address","path":"makerAsset","signature":"304402206f3c4055bd431c1ceddce5b147c3b5acec950b267205da655fb3d331b9c070830220570c9cfdcc02b10abbf9a335ab6a4067ab7cae2ae8a443f795225a7c3981cc0a"},{"format":"raw","label":"Taker asset address","path":"takerAsset","signature":"3045022100fb93cbca6ee524729b138319a92316a37c56ae5f89b3d652af7f680c3f160df002203d1fc525b11cd30d2907f844d7774f49995b2be7e3ba2896dcd4a6e73c8a59d5"},{"format":"raw","label":"Maker address","path":"maker","signature":"3044022002e75adf4733bf28d532647c54fb0000415737db37b7e5674f9bb20179d01eea02203834ebcfe81d98e745572349bb0da4ffdc8ec846d35e3812119e9a3491462724"},{"format":"raw","label":"Taker address","path":"taker","signature":"3045022100966a77a69a7e0c060f154a8c7ed36087d8ba7da111d9bacc90b873421fe6a75c02207d92956d938a966cb98ddb6e8b3a56e4d8e7725182cf1bb02f03f67512460485"},{"format":"raw","label":"Maker amount","path":"makerAmount","signature":"304402207ece45c0993fa46316022cffbdf64307cef2caede370f27fdfd78471c3550dd002200da74e8b3b5201e654e7e4674f7471a333a104288fdf8cf80fc3122126113d1b"},{"format":"raw","label":"Taker amount","path":"takerAmount","signature":"3044022014183f10973ddc0ccb12472d2437e33f368f627b99022735044e5c4ebb4e345802203a3f5e8aa5c928981d2dabd0442342c605db1626dcd0d3ad5e3afcd98bb8c673"}]},"1:0xe92b586627cca7a83dc919cc7127196d70f55a06:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623":{"contractName":{"label":"AugustusRFQ NFT order","signature":"304402206dfa1d54ee0a7ab236252618a5fac9c752152304f31838eab4ba4c6d2d3f844b02206658b1e9b2503577619080909be0f4c1d2a899b3d0085ed8c3f2a4309762dd94"},"fields":[{"format":"raw","label":"Nonce and metadata","path":"nonceAndMeta","signature":"3045022100ed9b0b91a8cace4d312f6d1bab076c057e954a9cd33c3dc5c350d030e41edd230220230e3050131157f6fc2fc578df7b1108f69d55d25ab837c661045877b148765b"},{"format":"raw","label":"Expiration time","path":"expiry","signature":"304402205d4913092612fe78d75c181f3ed28ac7808e25ab0131e73bebd91c08aac65e7902203d63f1fd4d5cc11b1f8aa2af0ec6a8440a0ed59d440237bce96ed87874c2a26d"},{"format":"raw","label":"Maker asset encoded","path":"makerAsset","signature":"304402205f9fb08bef206518e5bf48cb7fd968709a0ae317e903d9c87a41c934a0983af3022066264858ae4a1338d4daa1b4f9dc7376335ce9e57d4bed320b0d4c27a0012deb"},{"format":"raw","label":"Maker asset NFT ID","path":"makerAssetId","signature":"3045022100ac653732f2acece7c47588bfff9a1059dc69bd3fa7e387cfef8246eb0ae2a70902204ffd7f89cd7223f8e52b7c44b02ac4fa1d06017015304f1a3a7459b20d54a5e7"},{"format":"raw","label":"Taker asset encoded","path":"takerAsset","signature":"30450221008e59dfbed2dd4d1e2738b829d7a57fa23be737b652c0b01299f3d9482174aea80220138c8e948becda6dc1e7564358e574e7ac8d7016f2a1795059977f401535b27f"},{"format":"raw","label":"Taker asset NFT ID","path":"takerAssetId","signature":"304402203408e2bf0210fa4454baf46374cf876299578df056ddaaf5a907306804ca41cb0220056f910e3c500e4a8f55d5c09dceed9753a2ca7b49a9ade1955a598f4e64d657"},{"format":"raw","label":"Maker address","path":"maker","signature":"3045022100ce5db907819f4f36c77f1e3a849a3a6ac9483970128998d5add5941e1fcf6dc102200e1f26e08a3f48ef6fe1d40a4149cb8603c5e70e076755ddcf76894d31f2adc0"},{"format":"raw","label":"Taker address","path":"taker","signature":"30440220015799beef248e4eb12f95368ef44cfbaf65e43da1a4110623006e46157ab22c022055f962e02e4cbdc05bab79cfbee523da8ff9d16529c4e98755b15d45bb34a16b"},{"format":"raw","label":"Maker amount","path":"makerAmount","signature":"30450221008048cec54417376b3a659e3aeeb349a4352751a099443ea203b59e9d2cd954b702201b32704d89bd028a6794ef315bf2a204b7293f547d14282440f5aea041a27ee1"},{"format":"raw","label":"Taker amount","path":"takerAmount","signature":"3045022100dad584a953b3c56c67913e76f1a6626cb72620e23bd16f41b2817a95ddb0bccb02206189e3b49d9f3475bd52baff2a40c7f026daf1d2dad9cfaa403eb08030836090"}]},"1:0x6b175474e89094c44da98b954eedeac495271d0f:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Dai Stablecoin v2.0 transfers","signature":"30440220692d38bbcbab753738d0c75d87efba7b93a88d4e225e73c7e4d0b54e4e8b548302205000ffda67117043bce94c327837053e2b6bdb888b3d2bac3c1c3b79997c1f90"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"3044022067e97af5110ed4a8a5e8731a04c07192042b5ef4fdc598cb10256363c4bd503302205fc2e4b4dbc178b3bcd8412deb66f4b99b4506197bb046ad618457a1aadd09ad"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"304502210099c45a68aaa7656be36f74fa0831546de4e7b94909143853bf678313b580963902202b01f4e8fa9f6f5621027c1147fc435430f22eae8a91bbd6e27b053e61a69d8e"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"3045022100a14d33c52e05746bb401190223a9056922671bc57298c50d58e4353dc72c598e022027dc8ae70e8e304f8436fabe626c2e39be4f2f03af71badcb273b32909a55daa"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100b6228fc8fec28b708fd63809e6ba0f950086a60729acaa7e3bfb33789e798e9502200e6f2a82c69edf0ee2f532081fe8692b88536d7cf6a7800579d87e6333b98e2a"}]},"1:0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Aave transfers","signature":"3045022100b90cde117f034f5ac3cc1563397a65a88b65814c4eb4757d232b70f1c7731d6f022069394d2683d3230e7549c4763bf10ddaeb2cd9d48661b818605bd318220b9f8f"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"30440220671740c2ec59c9bf30287a9ec559ee15f5f10dbabeb97e4bbb1756ead6efa4fd0220607931e7d5e48150946b5d674831381304a51c756eabed869fbe28d6075cad17"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100c85534d029bed7daaed9dc5db7677efa56ac772a01b715934c94eec529cff88d02206947c5e45f9b60d76a41c20a2feca0bb06c19fa99863fabdebf842b7a5c088d9"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"3045022100d0e0d997bdf8103b8e7be6cc25e42477939692e3dc7dee410483303f3cecc01302207afdd633bfc842e19606a56968bd89cf556c7d01a8d50f07a1dce59c394c2b41"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304402201d9e37c5e86e26acadba91ccae71bbc7cc582768323dd00542e579bdd9bbe6dd022069d5f52d008457fcad8ebceb4a31871f601626323d064326d258043e5170216c"}]},"1:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit USDC transfers","signature":"30440220206a52ce36fb75683481981c6f1f2e1cc405da8b7172b4fe3b465b19139bd66602200d5d2a800a253881fe4d87ebaf57fffbc7fbb8591ebe251ac69d650469b51d16"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"3044022048b3e79d00220b5fb5908cb13264f0a10ab1faa1f9c95702c4dcb91aefa2475a02204096676422035d37f30a9fea09553d5d1751413e5a2cb60d1b9919aa33e166b1"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100da7a47dbc3c943c29f2211e139c5dc43b6c54d79d4aec205694155a8a2bed5b902202f1a885a2a6de6b705f8cfe87d6994e470c779f8bb8e6e52166c4e41437e605f"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"304402204051e74e9df5f2f42d4f41e3753ceed3cd98a7061c64caf7d6042de668e6b26e02204a277db67a39a5db5aee910a4086482c76e13fe39793049c40514be6dcde27b0"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304402204c15b30fec2f9f4724326abaa390a08ec626b4ada487d0ed3c6adb32a54da73f02205c6484d3e5ebb3d5a05d5286bc1443c69960771e44d392a16f6cf029325adc62"}]},"1:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b":{"contractName":{"label":"List Order","signature":"3045022100cfd82c26631445df34b327b31ad55ad7f26e0480ea7838ae83274ad83b8f9cd1022044b5a3db6b6052a5b818b1bc6cb28d523115033ca7ab3c4a269ec37e3cde890f"},"fields":[{"format":"raw","label":"Order maker address","path":"maker","signature":"30450221008ab1ef7012cf407a80348d6be16a98d375bf959de72f260cb92520dbb30fc2ce02200d9c0e02c8375d94077ebe16c849df5745654a1c499100286201407be47688f9"},{"format":"raw","label":"Order make asset value","path":"makeAsset.value","signature":"3044022018c3ea3b1768f348094f151f8e28171d1325d5cc1621478b23474f4695acf2d3022040ad4bb4c8c138857e426128488ee5a3df8fa0a7cfaf58e9858765a0f72a8a02"},{"format":"raw","label":"Order taker address","path":"taker","signature":"30440220482e1c1439ea879f243fdd47cf043bd271c7fb73ba095463e920ab34c38076c002207c095ec3307fa3a3ebcd125238caf3f7c50d196db444559d31c79916e514f370"},{"format":"raw","label":"Order take asset value","path":"takeAsset.value","signature":"304402205d33c23ab575fa613d37d7fabaa719f5aa4dacf8de0f299e83dd189eeabfc31d0220535f67346b8ed7d175193929aebead42b92921465c1474f482fce88bfd00323a"},{"format":"raw","label":"Order start time","path":"start","signature":"3045022100c178033effb772f141b46a9d5b5bcfc48468c6e5c499d8865043535947b1bb490220687dc9018a38c62e01c91e90fecf9e18febe995267d1bea27d3368f12f04bc9b"},{"format":"raw","label":"Order end time","path":"end","signature":"3044022074ecdea3c58a28565af3336de33390aa7e592e5108f6d9151dd000a90a5eb60a0220163362373d11f177e41b914dc10c93b76adfa4c27f4662179329e66b32f8f139"}]},"1:0x9757f2d2b135150bbeb65308d4a91804107cd8d6:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b":{"contractName":{"label":"List Order","signature":"3045022100892ab54a425fa1306df530b5ffeab2944133f1fbc68b99b92e61abf5c5051d1002205eff72d6f2c65f7835bcb2c6593b772d0a45e152988b4379cdb52327ce5da382"},"fields":[{"format":"raw","label":"Order maker address","path":"maker","signature":"304402205990b238b291ad1bb3cce7d2acce868761c6a73fa79e87c05530813aac8eba5f02207408c5e30e840195677fa60d411d2c2bc76fbe15a7ad2506a4636f001708bec5"},{"format":"raw","label":"Order make asset value","path":"makeAsset.value","signature":"30440220646b1bd068a229a75f7f0558f03d2fbbe7dd441d318480dc8eb532c3452ed6a00220642fe4f065198bab191c682e55487cd6464a90c9527983dcd672d15a0a083d80"},{"format":"raw","label":"Order taker address","path":"taker","signature":"3044022014dff71fc22c0b53e918ceed99de5aa86cc49fffc22f271a9586a9db1197e413022001125d415ad2eef46353bd8e812248fbf3fc2b60fb5fc7dad3853c9d2c85c6a1"},{"format":"raw","label":"Order take asset value","path":"takeAsset.value","signature":"304402202416cd3b9b1b9b7fc4bd5434f0f8c54638d0f29e87f1f92de7006747f4e856aa02207afb4547d03de6247628f93c5ed49f9122e2780507bc601f5211c89c8905b93e"},{"format":"raw","label":"Order start time","path":"start","signature":"304502210095c5b1927e171ce8f0b74bd311cb0f66bff5e3d23a7eb52e1d6b696378defb2502204114def9ce15f2b698ea00d43bee8e8692568a6394e24c8e0b53c90c29ab7ad0"},{"format":"raw","label":"Order end time","path":"end","signature":"304402203f435338d8130399eaa6939c0cc8f4fc5efc92a34256ac450d6d55b0ac2e816f02204c116eb40b3c07810facd9117572147216fdb175b2ce31c6ef277501dff7f6d1"}]},"1:0xb66a603f4cfe17e3d27b87a8bfcad319856518b8:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9":{"contractName":{"label":"Lazy Mint ERC-1155","signature":"304402206bd24ac8c5cfa2b75e16ea0c315295368a7f780c4ec062555079cfe48d583a8602204300f968037f9ea84919cdc8ad3a22103b04e00b9c4dffe5c34ebf13d1b769cc"},"fields":[{"format":"raw","label":"Token ID","path":"tokenId","signature":"304402206e18eac55b89b17b4706547807a864f6c1b37eee09fff4ccad54e9842eb1abaf02204ef2984f87d6c0ebab26352ce82f8040aae5bd259ae55d9921d609b3936d15dc"},{"format":"raw","label":"Token URI","path":"tokenURI","signature":"3044022067c04bf2be50a7660b11742d10dbcc84655c22a0d359c20b2abb54a4d23f2846022030bded842ae4208854c0d11d655b234465e2c9ee9fe9b1eb5074778ddcfa9426"},{"format":"raw","label":"Token Supply","path":"supply","signature":"3045022100fc4ab75ab184e564ea297da785d4a749b913e58706dff4e6c7ae49f72a7e9701022067bfead2e11a323beca3821a3ba310d705ebb128f45bee1f394dcc7e60af8043"},{"format":"raw","label":"Creator account address","path":"creators.[].account","signature":"304402203e5e5fe4636b283df4e4d027e8ba5e43d912f53125b052e603548fff051b37d702207ceae4257ccc801de3943fb68b1a0e2af546e12d3bc74481b7695a12de7eebd2"},{"format":"raw","label":"Creator value (10000 = 100%)","path":"creators.[].value","signature":"3044022065a51fd2cafd0013215fb703e27052320d35951e5f9d26a3c3d03a050b7088340220193e98ad9282a96e3e7b5e6813bb5989c31cded994fed35d5383e68738905c1e"},{"format":"raw","label":"Royalties account address","path":"royalties.[].account","signature":"304502210092d8aa5743b9fa52cc1d5caf4f83e65cf232b02394dae8e3056d29606377caf902205119918948d39a165950efb998e19aecb3bde611065e92fd5f5c10bafaacda22"},{"format":"raw","label":"Royalties value (10000 = 100%)","path":"royalties.[].value","signature":"3045022100b7cc93e7abfcc00efbfeeb49cef4d2ceb5521e1c97b2bdee882e011292964be902203d7ebd7c328961e1ca66aa16e8c61aeefa3bbbcad419bc65315658cdb425e5b9"}]},"1:0xc9154424b823b10579895ccbe442d41b9abd96ed:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b":{"contractName":{"label":"Lazy Mint ERC-721","signature":"3044022001ca2f9abb569b76bfb8398ba150999d93fc6a02f5e637f4ac3a125b6c48b528022007ab8f1b776d1b2f5a0b44f90214b02f71c3535e468f03b681f133c3bc217946"},"fields":[{"format":"raw","label":"Token ID","path":"tokenId","signature":"3045022100e762ea781d76c81e5f3b28269e03f1cfe7e33b847dbe20a56289841579b0fb4f022033c6249fc155deb94850e6e30fd7fb854f07c63c2b8ffc8b3c7d412c01b8398d"},{"format":"raw","label":"Token URI","path":"tokenURI","signature":"3045022100dc369275a5b2d6a3c934221e9f7483082cd5c52bb1b41a802d260c54757cf29002206dfcd13e32357144ed68b90c2308208bfa699d95d917a97d8bf438aed08269bc"},{"format":"raw","label":"Creator account address","path":"creators.[].account","signature":"304502210089448beccdb19e680a7f8a6dd4f1e0dc8319b3458f0d5a491518bb97af0e1f5002200dc01550cc4d0d3398049938d2a498c142e2e82eb9086c7d6d6a8f1f90d1d25e"},{"format":"raw","label":"Creator value (10000 = 100%)","path":"creators.[].value","signature":"3044022026ebacc1dce44b2815c6e53d9030836a4768ba0019c4b6f9d8eb83d8699ffac3022076b9bc2f89daa7e5e21b294163e64ed25d2bdfe5f2373f6aefba4f6da1d92d3f"},{"format":"raw","label":"Royalties account address","path":"royalties.[].account","signature":"30440220626fdb56db8c34a282917aab1f7fddd36a060eb35f117ded7b675be946acfac002206770d35391e086e1ab31e9fd9cea07e90b09d38f0b882857e394283ecd6575a9"},{"format":"raw","label":"Royalties value (10000 = 100%)","path":"royalties.[].value","signature":"3045022100e22f440fe2bb06d77a0afc50366689ede59570dc91796305ea62e5ca5da5286c022074bdc3dc840c7314abcf6bbaf35fe5e20318c54a911e7508942fecd38b70db9e"}]},"1:0x72e9d9038ce484ee986fea183f8d8df93f9ada13:65b962ff5c94fe989fdc9169a5dbf3662e79747c3932616d9f0a39cc":{"contractName":{"label":"SmartCredit.io","signature":"304402200fbcc50090e799ff0ce08f08ff8085c162210bc9ac9d599aa9dfb7a3bdfd716e0220555ea5626806f7756660657459d15120dec6fc45865f64d653cf850fbbfa1068"},"fields":[{"format":"raw","label":"Collateral address","path":"collateralAddress","signature":"304402207545402a92f3eed973e15d3fb43107e2b241a403796189def24abbb4ab59932b02207d258e006f51f0fa9cdde54dfe7e9145619b7041dc4481e24e125c31754df0a6"},{"format":"raw","label":"Initial Collateral Amount","path":"initialCollateralAmount","signature":"304402206b7167d76ed863ab7d3346b0394518d1b23600aa94224c49c601264180bf5cf602207a712ca9c28e328905b9d6a29f908dd7a8ccda408c8e7c1671926ab0de5a012f"},{"format":"raw","label":"Loan Amount","path":"loanAmount","signature":"3045022100dd03f4bd05938c7a0f5c8a5d4ec36687179f1cc1df63149e5a144d5d54a7de65022063433c2a0103f1afbebd2bf2a9a817d608874532af4a6a23bde475ce2ced6795"},{"format":"raw","label":"Loan ID","path":"loanId","signature":"3045022100ba34308137ad49140a12444f123886eedcf0b56e02c84236f262278cd2de0e9002204e0e0854e50fb5eb297d53274cb4e37c25cca8782bc5b74ed7bc0190dd9777bd"},{"format":"raw","label":"Loan interest rate","path":"loanInterestRate","signature":"3045022100c3194f33a59b71f01f5495e90c876fabc2637cd506706c20813aec5a2f97437b02200cb59271ad955ec23c2c3bcdcad8bb073c887b4331628319d0576a6b23fdaaad"},{"format":"raw","label":"Load Term","path":"loanTerm","signature":"3044022029fca7f97f2a6ba63f9b90aa69fed3627d172b653cc92f58cc60fae16095c4d80220717d03ed8b35c29db91c1c7160cc4dc51b3cd78c70bbcf33238b8c78ee6c2bc7"},{"format":"raw","label":"Underlying Address","path":"underlyingAddress","signature":"3045022100ae88653e0cd0a991b3b85b383770b590c8df16768ae90edfdaac379bd1ccbefe02200129a19bbcfabd47a9c660d3521549e05dead453d62527294ca312ac67b14b0c"}]},"1:0x0cec1a9154ff802e7934fc916ed7ca50bde6844e:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd":{"contractName":{"label":"POOL token","signature":"3045022100cfb4916219e3694b46154274e51034ec625ca0d6473d6f092e2bade002629c8902204be001bf270bf5c1876e953476289439fc2260ff784c412002a395ea4339858d"},"fields":[{"format":"raw","label":"Delegatee","path":"delegatee","signature":"304402207860961035527e594b1ff79e81bdb65fa46787448952110edaf251d56f9f286002201b4830a368cc521e1cb73ed22e5ddb4a926d5d2acaf6d509f35c7fde009d223d"},{"format":"raw","label":"Nonce","path":"nonce","signature":"304402207049e4d2ec11fea46e4f306a65d90a4ee638e8eafdf5bb7e54661275d4899bca0220757516a4ac3098cfdea23e706f84c0c49be17b8bae343bce14cdd9f6c6ff9787"},{"format":"raw","label":"Expiry","path":"expiry","signature":"304402201d635d39c2f3be12d24a7af1e8d7153c95f9c2afbb756c9b9762cfb89cc606d6022006590a2f50273ce004aba41ee48bf35a0ae7ba80e08b0f9b4cce9cc281df60b5"}]},"1:0x1f9840a85d5af5bf1d1762f925bdaddc4201f984:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd":{"contractName":{"label":"UNI token","signature":"30450221009599eb72fde2d45adc2e0beadf055d1f5e8f65090e153ddb6fb02a7343c96268022015e9dc0eb7e7d733edae86bfa10fad3ac3ec38c23b3a9ec67fc82f53c6eaf5ba"},"fields":[{"format":"raw","label":"Delegatee","path":"delegatee","signature":"304402200a22c41784587dfc574c2d12346f16fc5669e3e89d118d021eee3e688c6a3ba10220569497a6447c74db8eac7e7c62ece12b2e604cb5fb0cc7f1ae51a005a9d8c7d9"},{"format":"raw","label":"Nonce","path":"nonce","signature":"304402203a967682891c28f9a24c824326fd48624b24204ff7438a97968fedf2e67ae38b0220066a33eee179bee5b45cef00de03039db1e80ec0590b30057258464ccf5b4b23"},{"format":"raw","label":"Expiry","path":"expiry","signature":"3045022100fb2f59ec83f2a962b990dac7a4823a619ee3a67b72e29bab86e317d36bdbe665022052c113fd0b7e45cee1a428c838be4d38d7110e3eac1f45064c74b721b8b67974"}]},"1:0x323a76393544d5ecca80cd6ef2a560c6a395b7e3:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e":{"contractName":{"label":"ENS Governor","signature":"3045022100e965ef559df040f2880366aa603d75e610261946912a663a5b33e17708da817102202b4d6130c5ba34195663877cf1d9679b811acf9048b9ed8625ed5c2ea65db40d"},"fields":[{"format":"raw","label":"Proposal id","path":"proposalId","signature":"30440220644deea26170aa4a8057c70f769d35ab36522ccb0f6f85564450d46c11061c370220687d778df87c7dff5e3ad58a9e36952a9904e6389c41f4f8e8044c679a224847"},{"format":"raw","label":"Support","path":"support","signature":"3045022100c5109877ecea9a94096b612925e090d1aea128609d7ec466ec589daa3dc2f1e702206b7c8eec5e9351539fc164f576ee4ace65b776c051e0efdad21d51e42447dc87"}]},"1:0x408ed6354d4973f66138c91495f2f2fcbd8724c3:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7":{"contractName":{"label":"Uniswap Governor","signature":"3044022046d278627a7b68020ecda5e20d249bd9d141a404267acb8dec4726f30de5694e022073397f8438fad45b78813a7161eea60dbaaa1b421beea742efc8c07acb63fa63"},"fields":[{"format":"raw","label":"Proposal id","path":"proposalId","signature":"304402205a033bfcd10718388897e99752081c0a4133b3c959b7b75a3568d585041e849a02205e2c1fb537fc0ff8e6b68a636215fbb4741d3df7c8202a83622063c77bc3e587"},{"format":"raw","label":"Support","path":"support","signature":"304402205894cbf601c96ca164ae7e5d0aab17fbbcec4aaa1d032274800d5a46eba8184002204c195d6936a05b162d5bba655f726f08337e23e10bda06b2f0a3f052522bdfbf"}]},"1:0xb3a87172f555ae2a2ab79be60b336d2f7d0187f0:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7":{"contractName":{"label":"Hop Governor","signature":"3045022100f708c71ae38defcaa58de06c664d79f18651aa3df1ecefeb18012a81897c70a10220587d6e2590ab6dfc6e6a563a2460619cd49d73dbe8bef4ed20b6a50f47068c79"},"fields":[{"format":"raw","label":"Proposal id","path":"proposalId","signature":"30440221008a361a02a91db3ec96eebea92c3228c620d21f8004813e35f3b99872da81816e021f27f972bb44cb1a1fa033be2398c80c6d1b4890f0b81d022ef4bf346d61af25"},{"format":"raw","label":"Support","path":"support","signature":"3044022053b84095ce71d0e6ab15af8d979c46dc47ff6a169a88bdf3eab573892785122c02201c6c9d5570a581e42c1341f36edcbbaa173d701e6b93f424493125cc96e83d18"}]},"1:0xc18360217d8f7ab5e7c516566761ea12ce7f9d72:2c3e6b3e91e39ef9bb3c1b1cd2b4d8da76bf433179c8042962671278":{"contractName":{"label":"ENS token","signature":"304402205b42ed5c642f2d98115b1ebdc98fcdd63ee259b14b896af1c1e78c8df480141c0220679cf0ef775ea5543f65f2249df9de807b02c17aa507d9e89dedde00b2852320"},"fields":[{"format":"raw","label":"Delegatee","path":"delegatee","signature":"304402202984c1b8b2c2be40fbb0b197b8666f309d16c10d4a737befcafa5887904462240220177c3d4ea462a56880e46e08ee5f8e8f0eafd87e97d287dee353aa21fb4db8ad"},{"format":"raw","label":"Nonce","path":"nonce","signature":"3044022009e1668b67786c2258d75f93297be950f3812ae757068c5407915fddea878c5c022066b9ef8571d300abee4d18d4cd0d59a5b2cd18bf78f3db80b6d4183e284e2ad2"},{"format":"raw","label":"Expiry","path":"expiry","signature":"3044022070e6d8b8085472782a55f11ebcf9492ecf3a9eb423b37dc6b79ae17588e7da4402200e610027d5fd12d3b32df3ff7d951afed068bc26fb56e541b97a0622555a46ff"}]},"1:0xc5102fe9359fd9a28f877a67e36b0f050d81a3cc:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd":{"contractName":{"label":"HOP token","signature":"3044022072ff099831505d99d7c73d930e720d0a3e28ae8932229289c1f1acc9b92190a9022049d78cce53e621f91cd7a11a1d6ec118b9f0fef6e16059e8f856fdfea8133f3d"},"fields":[{"format":"raw","label":"Delegatee","path":"delegatee","signature":"30450221008418fa1807d28769b22f0243f9e547905cfdfd66b19dca60eb2f3778149e8d3c022064c06eda3c8cd943486f52c064a91e0078a3be9777143a5b5925506554f20c9e"},{"format":"raw","label":"Nonce","path":"nonce","signature":"304402201de5084ebad45b344cacfa987c7b7fedcd438898c2cfeaed83921a9f66c78f7b02201bfe268f95c9d75484117d1439b2e968a5c9894a24c7fd751755a5b5c0da78e9"},{"format":"raw","label":"Expiry","path":"expiry","signature":"304402205d3f2a2d51af5696c6b9905cb6f020fb450e24e2e4b4cb7a15fe1a622267fba202207cb11decd982dab1bd3322311a16264e54e00cc365cbd98b490750a324c0c30b"}]},"1:0xdbd27635a534a3d3169ef0498beb56fb9c937489:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7":{"contractName":{"label":"Gitcoin Governor","signature":"3044022010877c4c71832b3b1e52742ef0702837c162751458cfed684db4f9bf3dd9720f0220650921e5b88bdd0a9626ca7c86eed40c2b3f2e49e024f6cb643a7833367220fb"},"fields":[{"format":"raw","label":"Proposal id","path":"proposalId","signature":"3045022100b608eb5bb848602950e6d1e0bcfc39bb07f465e110c2e6a1dfb0d0423c300bdf022079a4173b66a72e21c0e46e79a5a9a4dfb71af8dcfa181669c7a555733c0f9528"},{"format":"raw","label":"Support","path":"support","signature":"3045022100dfc160c48ba326093acb0a5674d2083c60a3f6db68605e4ddb62b179fd4aada0022070e0d09aac5335705a18abd5e287e8d0ec8ad06e2a8dfd4b24ec2c615407aa69"}]},"1:0xde30da39c46104798bb5aa3fe8b9e0e1f348163f:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd":{"contractName":{"label":"GTK token","signature":"304402205df7c1169cecd36740080c772349d6665bde2a640ba4c2abbe1db07d575ccc0f02204e0be7975f8053e091f79019301e4202b97e611c4a2404e24c462afa3df7257c"},"fields":[{"format":"raw","label":"Delegatee","path":"delegatee","signature":"3045022100c8221f284e448a3c344036f3252eab8fb7e383a25782d38e579cc50e2e996f480220594f34a6c5a86948536be2d0c92315fbe8f812704ce96c405dd223bba18e82f9"},{"format":"raw","label":"Nonce","path":"nonce","signature":"304402204b28da4752953b61b09ba02640eb88d11f906502088ac8460b1764b820edff1b02204e6c5e6a5dfe32658e17f1365ee7d2344aff54140577a5ef1a3f55631c3af576"},{"format":"raw","label":"Expiry","path":"expiry","signature":"304402200c3083a36deb4ae67a6adba07622cb382846e5f61bbc9a24d2d5d2233546083e0220693029f53ea4d6f862e86c0b6b86df7bdcecf9eefcafe0c33671b300b5d64506"}]},"1:0xed8bdb5895b8b7f9fdb3c087628fd8410e853d48:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7":{"contractName":{"label":"Hop Governor","signature":"3045022100e09179a98da340acd99714b47febef674162a2114dccd1e39b11b49b4e1609c5022012a31e4db15edec68ccc64b17ee8f5e7e693fc32c721ffa5169a89243f5d5069"},"fields":[{"format":"raw","label":"Proposal id","path":"proposalId","signature":"3044022065b5f880626a3f9ebf117edfbc5f489d4fb80b9cd53674fefa7632d5c8a0911f022018dcac007b98e8b996b21ca3ab478855e040537beca824a146bec1ea51ed751b"},{"format":"raw","label":"Support","path":"support","signature":"3045022100aed88d7b174625aa5b4a84a5054ed0ae28a2a768eded543130ca80e05fd2234d02204343eb88dd232c5317f73d889554728802f4953ce0c2e794107a8a9c604767ca"}]},"1:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3045022100e3c597d13d28a87a88b0239404c668373cf5063362f2a81d09eed4582941dfe802207669aabb504fd5b95b2734057f6b8bbf51f14a69a5f9bdf658a5952cefbf44d3"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"3044022075103b38995e031d1ebbfe38ac6603bec32854b5146a664e49b4cc4f460c1da6022029f4b0fd1f3b7995ffff1627d4b57f27888a2dcc9b3a4e85c37c67571092c733"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"304402201a46e6b4ef89eaf9fcf4945d053bfc5616a826400fd758312fbbe976bafc07ec022025a9b408722baf983ee053f90179c75b0c55bb0668f437d55493e36069bbd5a3"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3044022033e5713d9cb9bc375b56a9fb53b736c81ea3c4ac5cfb2d3ca7f8b8f0558fe2430220543ca4fef6d6f725f29e343f167fe9dd582aa856ecb5797259050eb990a1befb"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"3044022056b3381e4540629ad73bc434ec49d80523234b82f62340fbb77157fb0eb21a680220459fe9cf6ca309f9c7dfc6d4711fea1848dba661563c57f77b3c2dc480b3a63b"}]},"1:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3044022052d2511ac923e69b1fb7ce984af1b3ac5dbb6a246d0d13eaf48bb742e46f70d0022075cd607e944328fe34cd20b83be1f29c7d17ff69d6bba3767d10784f68963c47"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3044022059c5ee5b2a73eb5fd8d3559da1d062b7b2487afa8ad7a60e37e61018a03d2bf10220009e228650ddf2355066e14fca9e28cbca3db4f9af69ddd2a446709cdced2660"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"30440220421d172d59ddff6548b533c18d4e91f86d5393a198f8222665fa38ad406fe61e0220217abd89dd61d64c69e277ba40e3d887cd93a56383216b4d7d09f384a9731370"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"304402200a25c2a63dac7d3276335258dd789fb03f6d24616a573b214544a6c882509e4f0220324d55c052a954c227823adfac05b15acaa03f7e8c9f7513e5c6d106ecb7373f"},{"coin_ref":1,"format":"token","label":"Send","path":"witness.inputToken","signature":"30440220092b302bddc40f340de94719e3614157f3eb857d28a5c512eb92a942f21e7f5502207555a1348617c5bdc05a26bb7d1bd214eaf688c33e56df6a8c928c9f05065068"},{"coin_ref":1,"format":"amount","label":"Send","path":"witness.inputAmount","signature":"3044022004d584ed92d09f60093cdd30ed1af730df8fcb239974eb7f56f03f3869090ffe02205fa25b2ab0fdaa0cd0bce684e7668c703d18caf7791c11f2870b75a054d76bf8"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100d321fe73987030ee4d72468cafe21845fb97b08dbc7a9b14e3421b050a5c4b810220755232e20dd1684e3a70964f838d7cf2ff458020eaef2736ed0febdecc4a4a10"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"304502210097a2271a3d7d20cd585511473d552b8a84c2b6128bbea3118ebfa1efd102f943022077cb0dce5ba07c69dc44795e2e339aee83a88616b80288172916d686664fd827"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022024f5c03f820b9c52aee938ffe7a5dbd882f45f0826307baeb81af8c6aa0ec07a0220464f90ced2bde27dc8c9cf1eea43ed23553213a784a7ad56cfdf9c92e1902846"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100c3b617095422e717beb605b1609898693f8e464c700549fcb4f4a1c58d4e621002205f658e57367adf7fa51cc12f122d49b0b982d50c1f526000cae39cdb39f9ebc9"}]},"1:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"304402204571e829b58a2c3d66fdaabb99bcc1b8ecab4941a1f3374a1b29a7c41d5165270220573c71719815aaf0eed481d128cb2a7b77a20de261771149c8b427690a2cd19a"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304302203b64f5975002aeb73db0a392fce0a706bf1a4f7aa062649c685a601e701c5c50021f3631a4a6213f01320ece3576b91b2f244bb127c79f1cb7c1a64eb25a9db377"},{"coin_ref":0,"format":"token","label":"Approve amount","path":"permitted.token","signature":"3044022078be69309b8d5ea01982db35d2086bd6aff04515c51fe928ea29fd7e251c46de022059b937f71c84b06bb89d0f7fcd7283134ff56cdd0edd76585239b20b9cd58a82"},{"coin_ref":0,"format":"amount","label":"Approve amount","path":"permitted.amount","signature":"3045022100c8ec16930a238fcee437e2e941c5723de4ed9eda5e8a209a622148fe7ae7ff7c0220639cfbbaa66ba10d28e9a50c257d25cb60e808d1f4e6eb4dfcb8ee62d96f3627"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3045022100d3c21c3942b5dda1ff2d2a7ac05cfd432d12f1b155717ba0f7b4e0a04ef37c030220432cb15f7aee6d18bf058f30167464412ff9b9496bf9901424ea096106a5c20b"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"304402203a5258f4e4180c34a370f6fa58f3783986b637c5cc4606e0f0d1d9116d3050a5022070f724195bf7780b3f41670c93125d6a2e55b0d58d2128bad0db1925dad34f6c"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022026ad09b7426cb6990ac9814f57f135f9fa34515f4fbbfae23b27973f8acab2c202203f9720e91c8837e04b18431b7bdcd57acc1ccd7b7c62442f0feb791a1dda62eb"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3044022016b38151bd2469157548fb0b681d6e428a527c88f4b36fb862b7623a6b40dbb702201143008909039c6c393e49a99b6efe002b55485be80e663e15aa39513cd074a6"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100c6fdae9d879d2c20c3b7a66f44b2e60d6e781f0b0da2c21c5ca612b0a34ac3860220282196259c1d0bad4695f77a653ba03704785ad7a4d6007ea3055c5c4084a8d5"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3044022049575f4a12e8dc579430758de767a339d5b6a04de5665015cbf0ba01d79bb34a022010416cecc632d6c4e91613c5d341e93ffee3564a20d5b390910e01876ff41827"}]},"1:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3045022100ecc369027c550864d7e27b14045a83b1fb8bd5f617e91fc7cce67fdbcfe23d0102207807e1041516d9af307285b3693c0455e97694463c7ef465c021b5e123e2f9b2"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3044022029821cabe9b7b8ad34e577763e3b3b73e1d46d7745f176c0b197d45ca5120a3902203f6e4d8fb46b08b0f29aca1d7a843384f67f9543c0d6463bd506ed68830975cc"},{"coin_ref":0,"format":"token","label":"Approve amount","path":"permitted.token","signature":"30440220567f6afaa8b18ee1310021b01d7a52bb73ee39b63279df7f6acb7c670ef03cf302202a6a04dbfd0bd1329b25fa9c0aad3bd23ea75b0609ed806c1a0f89af9c257a50"},{"coin_ref":0,"format":"amount","label":"Approve amount","path":"permitted.amount","signature":"3044022059972380988a37639191db993ec97fc3cc3fca337349656be22584c7bf4a457b022038c4b0cfc9ce6ac6811f95151ba19aa1fc6bd5d62633d521b9487bcbac10729d"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"3045022100891252011593de624e816a4bde65d392c6a95e7136d25e1c3df87f55da4a6a9c022004c6662d8bb31800802e9e41b0f27e1b93ced79910f9200bffeea663f53e4e6b"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"3044022018dac6574c89aa9a8b92bc4d8af9fe022eadad860baf6316497543e48e1bbced02203bb2cd4ed0d4f201be35d760bcbc598e42946c4eca3d3e9acc9f8ff7ee04313d"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"30440220760c804178f8c1a084d4af7a91e77efd62eddf8df8c7d0aa2dff467330bb2e50022038f6a01b11e2efb2a4fffc8b9cb6adc8c1514e3cb37e1316a8f26f8d67bc95af"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3044022070e61333c1124c089407305d8e421506543b630cbea8bf51bb470639e99f788502202ad716dbe7b6bb19c7f13853b0808d98c577b835428e4bd69c076982f7af3f01"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"30440220794c4834a6ae2591cf29b65951d07112bfc4644f2a1d287dcf918f7a890b689b0220259892526b885585d613996d8e5caae98dc25e540f46857ce68009e02d419956"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100cc930d8969fbe6470b35346155c0644392639277a5871362631ae64b92b8fa52022048ec82d4db747311e466bc159222ac9dd5da36f6506014dbd730a118309b0f55"}]},"11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"304402206461309dbca9e52a41982a7e552c82bc4c9af6bfaf86eb80075dc6b1ed29280202203bf174d6746f7a0d9c9cb4a1f3c265505168e77a11d6520fc48b564505913590"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"304402206e9f01cf0e6fb5654079111f36e15151a6f5ed5a74523872f7c3f30049062f3d0220486fc213a2a0b5639f9bc73d9af2c8d72cd825f5065d07dbd674b39280811188"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"3044022072438d8ae8025fcb564b12922c23fa98f45a322befc9a4afc0bdc29a3f0b01bd02206c5d50c28cd89f889d60624af5a6e620b7e032b9ae8912c33d215f8d67a25d9b"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100f68b77f9abab174444dd6591cb0b9d27cea7f9ab6b505e18845021632cdfe428022077dd13be21f966ffa667b8d183d9b73b2862948ecaf07758e6296c3a91d19c8c"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"30440220337707d6704b19715b59259671fe9295f2f1de28f6fc30f88e241a9bdb0d5ede022065ccd490c400b259c24b28beab139a5b5353e1428a9f22a28665e3a2ee087067"}]},"11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100a295338f63ca379908708d63cb7d42b09ba81deaa7d9c3547018aaaf25a3d06c0220309fc1107c3e64054c70b34bc18f93829378810884dc7b68497fa7a6fa4924df"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402205b25d1cb7ef6bbb8f6e02879e09117d0b94d527d365574f063dcad1fbd2d31ef0220095b3558bd1950abbdd6b6581a1920327382fe915b2e5a26c471412b670b4560"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100ab9c842aa2610538bc795232dad25e8a50e81d25650a906397add87b789e74e402203878fc6ecccd42a32ee6ca8cc012f809a46fa37f759bfb4fc76910468f672ee7"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3045022100c7d481734cac976e96e751e52c797cf86d5a2fafa3ad1678247d912b7691f1bc022002f4706da4bd6dffd5fd944d29306b78f84db5df29b3bd9b8841ff53c8c23cad"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3045022100b686e535824ea78c8da511c9f5578a692c8c564f800de448069cb00285bf53ff02204ac10ce2bcd4426d44f8e406d6afb253d4ac4b7d446920053b6d40a599b29732"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"3045022100eeddebb6f2d36b37e692baddfb08a1266c19a0b3d1818431790b82804e78e2e202205f649491e27d9519d9cbae1cdccaf1823bc7c0f72c2a8be7370ac1284678d81f"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100e8e4429d8ac6399463a70723bc8fe6ee781744051dc90cc7a219d7760c8c42c1022068dc3fc2e0931a72cd4aeacfcf05069c490958ffd8e01445d6dbe777912f8a81"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"30450221008f6e5cf2998edb97928157e4ee6f115735048b4443cb81d663c01d122b385d210220556955bea75a72150add3794231b9d2c09f755e7ca24f3b56b274f90b1986945"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022007fb9c8cc0284496623ac2addf6965f0d3590f6c665750ecc70da2e7d10e3781022021754691d2b82526303d862ac93c6bf430c7ed0de4120d6686651569e0d1949e"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3044022021dd2b1670aa3cfdabdc236deb284a4926735e44c944da5a0a91e28230d266ec0220792d3e213c04b24e9a8b6bd80a0b0282d195e5f610595887d38f1a5e06eed0f6"}]},"11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3044022063612f2a7eeb596c7cf2342ec096a375b57f199eca9129e25e858049a18d36d9022078780da67893f8cb573a9ae13b06fae73725007ebad1ff8401d5fdb35111d942"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100ba696f054c313316a45f7f7dcc32ee194cd540ba7dda0371923330342f639198022045a95216bbe7f6849de1f9dd239148a1200c3ee1f85680ef9c3c5cbc2f0d0cdc"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3044022071d58b918b46dcc87b2273564cb316c44445f4bcfdb40d960e621f9c8a7339d30220300b372353d940d195c9df948a21eabdc2dd8fda94a1bae4b68b1279aa67be9e"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3045022100c2613428600e40453eaa16dc64b32cbc28e834fd1026a488b8111901e8a4ec4c02203efaf697edfb8c0c2a47b13de079cf3ac6144bafd828561d318d6c0936f28ded"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3044022007c87fe236c47368268c43a9c717cbae14be1c54ec437017bfec0e82a159056b0220618cbb3076a30cc37e94d7581b18794fd984dcc7ef80b115ff4caa937ce5fc2b"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"3044022042b4a58ebd0437496554c7f55d8d3c4e3860d6f11584fe5d223dd8e7daf8996c02203eaa72b507522813bc2309f3aaff7554d93c101f61c64725828dd296f208cdae"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402207fa6c9184be3a43376dab2dbbea9a4d9bf122204d36952a674f12f2d706c055f02203782f7ac3835e2b27d79ffa86bd9d9fcc74527cd336356f690e3ec6e1f7a41cc"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100db97a1fa941cdc11f36e3c4f52a38a1d1356b05ad54d760f6ec9a6b0d7e1333302207c5a3082ab5efe025b53156bfe331284472f846d6bdf6bef266ffdd8c09fd2e2"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e2ba5f96a043ae4aac90cedf218743089bb91561050987cc58caba9698a439ab022073a4165b051af7b5c554dbb179a66a2bf51fca69b7f08dc59797d1a49c4ba0c6"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3044022007d216df344831690e2cc2b59a96e7caceb7d2f6e8a057915e155d40949b30900220286c5f55248fec292c0683181bb7711707a881cb59a4e87d81aadb79400536f7"}]},"11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"30440220086d1e2bcccc09cef4281b7768b18ef06e90c10f70137b8f8bc4aa3b87705abc022001cff702dd8732f6efd68c24b4f75d6f51a6070064aafb3ae3e497dcdedce5a6"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304502210082d054fe78c4a8c696b8a3304a3f77fefa498c0e28d8dc3ae07dc32917b1bc27022072dd8a83defe29060404e216cce22c0df554962b41d643ff5348134ce6e66811"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3044022030abb7cea24e748d101452a614108fe3748581f2edbf27999c4a30295824ab0a0220504f8caa915c09ee5cd762011307b98d097bb0bbc424109626e8a5c703a33790"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3044022008d53dd46c36b54011aa4e64e9f494643d7ce8b3d3bd26eebb9bf9f8fd8555d902202e065f02d647ab179156422b08f76e2557ff7ca04ec0adc8f45bacbab383649e"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"304402206d89382c1e48d7d01e24dbf57bbf5dadfc4d8ac61dae5d4453530f570a89b223022035cd63f5c5db22152ce8cfa69a48aa64cea37974c842e83789118cf06e522cbe"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"3044022050598cd1748cf0b03fc05b50c8d9cee36bd4566c5176d0729e2fa97dc462b64302205f9edf0306bd9d9e63aa5f53a4dcc2095693a7d0525f04a89516f3507c7245ff"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022045d7133d3f02e471bb17dba73dcfc0e474f9d35f489f41743d5922cfbfa1d8190220261ebfa97d11ecd8a712a4d027ec8602cb3fec902219eb02d15a978d38c60bd3"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100a79b22e04c565e1772cab5838f0d43ec4fe780b0ece6e3b8179acd226ea23d0f02205dd2aa9bb775a54fb1369691f520f02364213a4b83f6a11b74a570feb6e52e8f"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402207b233cee21d578b71199b88abd481759f9432aaa4e8bff82b95571662810ede402201f80c06b23b4188e5d14a78a27f95a659ab52c58c3571d7b74321c2e579fa09b"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3044022060213c390bf1f9cc56486f91555127b4dd77fdcae79a6e2a99f53cbe26298a8b02203f9e5a825bb511ed924c8016b5e425cce4eff08a5462a9b658e0dee1d3196c01"}]},"250:0x6626c47c00f1d87902fc13eecfac3ed06d5e8d8a:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Wootrade Network transfers","signature":"30450221008cc1354ce071cf6fca73c04ac748e19c8f38059890ca8edd24997fc8eee0d421022075a65c4313296d58b394db560977203f92c4d3257a446b883707857baa701ce0"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"3044022009821ff0b77c78535056f438d07921ce0dbd7fec6803d5d03ee4b01734353f7702207f8217ca8b546664e16641b1ecd2938ce7c13b2479bedd177cbac01ea726ac35"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100e05871b3c8ea11e281cf51c4a92cfd3d011895d267fe45ad5bae990eb4f6eba902201a3ec731f73bb832b0f4f6a2064736b7665f962b79e78f8f418455653361ead6"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"304402201375ae2beae14ffa25183ec12e04a513639acf93753bab04439c6341228de186022037d3b4e6d1f3949dc59aa97b007a9d10fa15c35a97e75093b4d193d75d11ba17"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304402207d328335130376daec05993f90d29ff1f096c973e886f1780e4c5a37f597c8bd022021d50fb46839f197a5743f8d1a7cf5e19a68c84a4489f8000c3aa69d970f5289"}]},"250:0xfb98b335551a418cd0737375a2ea0ded62ea213b:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit miMATIC transfers","signature":"30440220474c475b4d9801f530cec16033b33931942e10e0e6545815887a57ca063a658d02200c5d6424af0cdf3ac6d955306012e3d993d92e0d46ab82a3a20826ab8124a701"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"3045022100d39fb35bcfa51b98602bf4a9c22488fda16b71b5bf65ab813d40c8b0c88be6ee0220034fd5b163764ca381a1380893acb6f20dbda5bcaf39577089ca2ed13df6ea32"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3044022011499af7bcdcde93c2b01cf992ac4e9b4b27eab58c19880e9ecccdb7ad4783b802207a2577e336ce3bc7f88644a88e7cee2488607f923b36deb2ad3bc23dadc110c8"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"3045022100afa43483cc8ed2a05c90d4849fe4b91bb39e903c0e6be17b35a558b8547f44510220698165919ed9d7bbde4bd68c361b89b63f327aa7b7b80eea0c04e6b55d33a44f"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3044022077cfc487e7ee97d654e8d8e697c9b5c601010abbe5da6d038323585a7d3230b602204138716322f1b5dac6ae5be3171fe93968b64be46185241202e241f77aaf04f7"}]},"10:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c":{"contractName":{"label":"1inch Order","signature":"304402206cedf6d4feb10bd266dcdedb134bfe41bc915a7523af8afea57577115bf6e00e022053d8d852c11d3cd7ac72f8628dbd81176d7d3f3b94022890db40f2bdc623c33e"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"3045022100f73875d13abd7e873e8efb7286e4a6f03d587b62378e4bc9b99f0ab7cf12c61502201f0f83bfe5d3ec2074bab7090869adeb28a4b8ca1708edeaca2ee86917fd1e7c"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"3045022100d7a83bfc855d3663d06e71424144b765d33958d85286feb6e9892a4ce42aa6d502204d971f633f88ebac3fad39eae7ec9c0c2bc2c975567bc36fac6fd44ed6533642"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"304402204a3c4482f8eeb6d6b98b3dd419f460e44f36fe56bb51f785935033c55d269b37022077615aab2a89b767decf2c8586cdef0e0b6d5cf0cdd33e82f6f9af80e8c86345"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"304402204941ba080321fc011c2f4c925169621bb460fbf19a3aa210d8e2bd2ba64442d502200ce5ed6381f6558075e2575628d4c7cc07eb874f88882149865693bc75747283"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"304502210082bed37a903d6ad37e596f2ceb5f07aaf8385e0cf8d8b9725fb955282583fd20022045afbefec5627f323b28e9bf985b53a38d2f9d85a14e2c6aa788832da09d01f2"},{"format":"raw","label":"To","path":"receiver","signature":"304402201b262b0175a6f4f614087f27f3470a4864063109f98ff378252e6b3e24c10cc8022032864a549b280ee714e5cdda0c82ed3be1b543f80dfc3482d7ea6f935e4e97b7"}]},"10:0x11431a89893025d2a48dca4eddc396f8c8117187:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337":{"contractName":{"label":"1inch Order","signature":"304402201f04375e9e11c524b30bb0ee376da39b8a3154554c23596381f475fde0d98ecc022003b62ea220df2d9f142f7ed1833027e62c3ae792daf763977ab552f9a897b7e6"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"304402201e7b6591a30d29b73962b253c14ef29237776c7c31c45e628fc0c0c337bd2d85022038742407431502920c210039681c983fd5136c66f7441e60d33e1323a401b672"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"3045022100eeaefdffbddb5feed8d5cb865db495f0e64f7e64ffc2b9b1ccc250b6980f560e02205554301581d882dc07d0d3b68fd32bc97c3fcef797df752beffaf4e57e00c52c"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"3044022073a7ea82edd6d37a1334bc84c2c1fd4f48a4439d61dae6b4e03e97403b6e75cc02202e52dc3c1e7fc55edd4b26735b315d722da906c33bd3e80cd56a10818f26217b"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"3045022100b97bf5d69391af6c1a807abb1c82ff6fd1cb7f8f8a38ece7989e1fb5cb66efdf0220491ee3aafd22725cc9f5ef8e707b09b4b3e8694fbc7c8f565eb083e6e9258e56"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"304402200bf15c7b36aa7c139f6aa655e2cd70e65e74d55b6eccf86d4031ce1adaee10220220147bd4e0a9388376244c229b02c92088e09676ac1149807efacddbfe05e2fa29"},{"format":"raw","label":"To","path":"receiver","signature":"3045022100b100b3d1f922e40319ad9025bce6c60f4393e7651dc3ad3e631e7f53a818b57f022023a50bf850381f9c21bf28b2364b8c8c1e18e90a7cee46a493b46d493796b06a"}]},"10:0x11431a89893025d2a48dca4eddc396f8c8117187:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a":{"contractName":{"label":"1inch Order","signature":"304402204313086063aacc52b9ae3b3ea026e0bb927634dde0d381a1b679789ce5341aa4022000bad10cd082f96999c05eabda4fc3fc3348c8b8a3ff3960078654f26c4fd28a"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"3044022059b5e764e094ebc42cd2acb05a5e6cb86d034cb245e7f3f41c39cc01e33fb0fb02204e0b4899a3685ab3b0e8e47378d3ddeee18f0fe6ea614eb43bfd8288a884b0b0"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"304402200900105da60b5d82721921c1b17679eedb2d5a446dbd1edafb3c4d539ecb3dab02201362f40c349ae46158c6fd535dc05c7c2253b57429ef84a927a481cbd2e1c9a2"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"304402204e0170fa8d9d08f2cd04274c5bc49af2956e44de671fa19771c9467bbee136de022072bee28c1f03437b514a5c206c9c0ad6974e2bc20680ccf966185d0b9b89b1f8"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"30450221008723f27fdaeaa2e369d6855b2fdd17a681ccaa7a84bf729ebfc5864d4274e7b502204e85473bfc996354e3e14bad17c5ca194c125dfbadd1bfc4bcf501fb26585634"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"3045022100be252761d5c2661c5e0695f8657bd120264583ed6563f17b0f5439540b2bb0ef02205e36630bd5a62becfca9fc37a5a6d83fede8ec2244cfc7b54446a7441b3e27fd"},{"format":"raw","label":"To","path":"receiver","signature":"3044022026d8378c54aad02a863f9ed4ce8eaf92c62027e9353d47dd11b34ac06f0e27930220374c5f31be01e8a68a71ffb0f61537912f7f1c3f9e117c8b3a2935b6b3f92d2c"}]},"10:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3":{"contractName":{"label":"AugustusRFQ ERC20 order","signature":"3045022100d4bcbf1df97f94d85402caee1799badf5fd6dfd9926981c389436d306dbda5c2022019ad7fe4ca5b2c8e63fd51bf70437b786e0b1cc2c0f3070e3cfdf70e75d6bbdf"},"fields":[{"format":"raw","label":"Nonce and metadata","path":"nonceAndMeta","signature":"3044022009e356dfa8f01c37d5fbcb2ba06e72a2a0ffeb3251055f3c686a0244401aa7e702207e65bafdb36f491931261c08fd583f329c2ea903de28327bfb069e1fe7ab5471"},{"format":"raw","label":"Expiration time","path":"expiry","signature":"3044022025dfd47b46b43125781d1e4b63161eea0eeeaef93af87e95162b2601516cdbe5022060156847137356e6ff66ef5a5d72ce232ffac323be43e71cd2ccc410b55ec047"},{"format":"raw","label":"Maker asset address","path":"makerAsset","signature":"3045022100e2ffc41ce9f722d7381689bd9ca2d0bd4598fdd543e7529d7f0bf2ae28abb3da02206a43996780b13ff0fbf346d7cd5520c759abf58461c42b7bea51d5b6032eb946"},{"format":"raw","label":"Taker asset address","path":"takerAsset","signature":"304502210080af3a8d3c3e683a503975519535ee054af035a7ba136f2e981b01d7c6dc518b022012ca47f1301c7c439180c29e13bae36cacc03bb1c1b9ba8a505b9d035660aa79"},{"format":"raw","label":"Maker address","path":"maker","signature":"304402203600b6973b833d904521bde12b73f52a1f1eb71b45a0174e1e579b33db55d55e02201daac27bb0e1d278dd34fac1be2205f38888c829fba922f7e3f48347e0a98b1a"},{"format":"raw","label":"Taker address","path":"taker","signature":"3045022100e6937b6f434efccde4c4ddb2fa2c577fb9f4fba61bf2fdda3bb27b0b49e7274102205fb3e281767d845b230633092cd17e6b5ab928e341a588d79055602cf3aa29fb"},{"format":"raw","label":"Maker amount","path":"makerAmount","signature":"304402201c1cb8f2cc362d6f10998948ee009df1912550cb4cf059d00447adf321a97f9e022051f2d887cd8a6a6ac26ab2afe8016eaa5a130661da74f7e482940278423b98fb"},{"format":"raw","label":"Taker amount","path":"takerAmount","signature":"304402206b842fc4910a1bdc77ebc9b2523d7b1ead75f9d187c42a80ac87e980112020d702202b4c2b9cb8ce85712afe63a71cb542c5e5d3fdcbe33b9ae746fcfac13fca18aa"}]},"10:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623":{"contractName":{"label":"AugustusRFQ NFT order","signature":"3045022100c66935874c1f07e7ebf05ea2774b4ef970aa431001c655f0d6341e0c4d142af602207083981aa538efdedaf13bae8e04ecf0bf2bf1fb03843bebd8ddd44c4048aa81"},"fields":[{"format":"raw","label":"Nonce and metadata","path":"nonceAndMeta","signature":"30450221009a560c4f10e3b3d91d78d08b69cd2c8bcc48abb9d5a6da1bca1aa5a843d5e82302203cb5df5d1676286617dd169942b42530a422328a358e8b143f62c4c024547e16"},{"format":"raw","label":"Expiration time","path":"expiry","signature":"3045022100ad531d0297f9561bb4077cda4896e1506104fdbefc05d1cfe360cd0e4810a98b022013ecd430ad3773ceca05ccd82794272768be0ceb3f1d30e12d331a73d1e9080a"},{"format":"raw","label":"Maker asset encoded","path":"makerAsset","signature":"3045022100cb9280d868175b9645dd9417790419343e5cfbb481bad8e2d3c826d9b301b261022058010b98a71b91a75804672dd67361ee4f96dd7f5cb938f00e355a3aabcd8f9d"},{"format":"raw","label":"Maker asset NFT ID","path":"makerAssetId","signature":"304402200a7e0a5503d87ca2489dc26cfabbd0fea9b2e2aefec9c6bf4e18fe837c7a6ba00220273c59c30647aa17d4cddfd85c3d360e8659818d05382b3e288b696cf518ae29"},{"format":"raw","label":"Taker asset encoded","path":"takerAsset","signature":"3045022100ce510ba8811ddada61a9695cb85ed202ff9af125f07f2f7995ebf1d1bb33798002204bbb2bee209860fd01a72df16c07e4903164cc2a3c535561437d63970b1ef8d4"},{"format":"raw","label":"Taker asset NFT ID","path":"takerAssetId","signature":"3045022100eb69ad54131f20195cfb2c304804405974123c2eed471c3fb6b3476ee33a904d02206c17f1c4ef4eed0df5c733331579004e3828287c5d22f19b43fd26d09600132d"},{"format":"raw","label":"Maker address","path":"maker","signature":"304402207e358ef75ba3cbe3998df005e03ad4a8c2bdbdfaf9777d737242d1c63f5247f502201c2e916ef67cb4452d1b226faf1a4e38230a052865aeef6437e0a287441d0ad9"},{"format":"raw","label":"Taker address","path":"taker","signature":"304502210081d61e89adc9bdf731e843903c80d4a42236c4fefa4782b912068d3ff12dfd7d02206c2c7569eb61cbdc7b842cd9a8c173cc7d90ad3be3537dab8373da4422adc2fa"},{"format":"raw","label":"Maker amount","path":"makerAmount","signature":"304402205117307916d734323402185a37f2880822dc7cf386903688e57a4904a17891f502200e1061ce50bd198ef722159530c48217b93e2093afd48c1a0fa30aaeaf488ba0"},{"format":"raw","label":"Taker amount","path":"takerAmount","signature":"30440220740a659e7855befa06833ccbd0aa48acfcacdef7c6a1035fbf30263a19576b5802200c46e51e89f469a121a31de0bd32e1ca9f3910413950415548e13d4c7c2a65d3"}]},"10:0x4200000000000000000000000000000000000042:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Optimism transfers","signature":"304502210097b5f9c605c8649a848deefb70692f9df06dae6be89281311c03eaecc6749993022077d04b2d8bd22116067e5751a36b2b5bda5893dc05c701acadbb0a94bf98a3d3"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"3044022068b87a8aafe0ac8591976c69c4e2dfb8ceb78723c8a01ca31893e91c4ee194c30220204c2cb5a401bb34b81a2794db238e522c67e5c9cc4b40a6c5a20a8ea05a7d59"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402204bd9534236d84bc4c066e9361ac77527236cd070fa55dff80156394a3cad0b6102203a1db664de0ff29ae87d1dbecef5162df0e85b84b5e7188f892d974849855063"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"304402207d83d323106f83abeacadec8ea807ba78fdf69d8abf2090fe8cf007054122a78022030f7164813aa07384cd4a9db4d60448eac0a2cdd0b79253a04f15ec81feff8bf"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304502210099472ce1f606977f91b20cddf79832490b1eb144876a583cd38d59cd210e78f502206bf56a5b295d4b5b7bd7332554440142eec32aa8660df237033c89ebf3b92d29"}]},"10:0xb0b195aefa3650a6908f15cdac7d92f8a5791b0b:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit BOB transfers","signature":"3045022100ff23c421cf1e8bcf786a1a7812951b1086ea8e76bc6509415279460f03cd1d260220759b1f0e1d701c8778fd1a856b1c956e389ee2e70b8e5e0a57b56bfec1d31702"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"3045022100921dc162a5bb3196f691a111df75007b16081bd9646baca74dcc70d16e7cb45d02203b6a2cb04c443a0740992b621cd69a6ad8760ec6e41cf433d34bc3abf481d76a"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100fa0c6662d99d0cc3436d88a9b20e5241e77432a58c1e2dd57de70b4615ac10d2022069c75349a829594ba80774c553d5467f6c911c29e3590552c54cf8514e64581d"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"3045022100b02b901503f4711fb216c354ac9de7c7b62e4f1a9f06f207a981fa0dec7e40e5022013e2d17c8d4cb31a30799a55fb6a8c691da57a457727135db1b5f8f685593e90"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100fd19c73e1627ed8b2708e48646535f03ee5422bc2bbfd08481986ee4db242e690220577e995fa6fc4bff088356e1b2153d58345cc54f6f4ffac912db862a767bad59"}]},"10:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"30440220089be7e339efb6b42b8e12dae2aa08f3d510d7a38b52e8d91c4f29053be1d28d0220766f9f63ee8e184a757c926b98e1121b04d34f276ea4d1cffd95d923290b24f3"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"3045022100f62470b201a4ea7a930f13173c4472c2a2e9bfa38b46a03f6279b170196daf010220033025c21c1e863fe76c40415c5e6219ab9f6f546b2c8c9c940a5b133999767c"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"304402205a98548b5322b602c94a3e01bbc36b80dd359468a1a366e26621498b098b631102201ea771630e801681fca25818d1c82dacf698d4e27cb7e172ec0c8686261ff2f9"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100ce732c41e83e74cd48b2491e3a2bd1be2b0f090d8a41ff546d252f86b2bd89510220280153a526dac2f1f6e0abf8871e826a3d0a9a1490bf55559f9ad0d4cfc7a9c0"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"30440220245bb4193057384913be0a1ea556e478b1932bdf09bb9d4b895f0e1a32203f8e02200cec94f0bb732d8bf01b2a6d2503580794a33370157ccb408f66078f313e2253"}]},"10:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3045022100f607f91959ba77569e1bbc520fd61ebd0cf2c6b0b4bfa449c45e86ac49f048e602200a1f105838d380ef60f765dcb0d3bcfd2eb9af8dee82994a942bf804eb5c144c"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402203ae7648a1fcc87edd672587dcd9c4222aef9b119eb5573945982eb4763c9c110022072d0a4d1e23db36c3b4852bc61b8500e0a9b4a58d56ed6b71d8491e154e1773d"},{"coin_ref":0,"format":"token","label":"Approve amount","path":"permitted.token","signature":"3045022100d89ed36285b1474f6caac45467ccf5ded7e63218542cb36cbbc25970416479370220296bb6d4643dd43d842c0f52227fc3497c23f8402404a50537e8e6e76a0406a0"},{"coin_ref":0,"format":"amount","label":"Approve amount","path":"permitted.amount","signature":"304402201e0da0f02cca490ca1c231089ef95664fa830ffa1225e1d66aa217034f988d7b02202fb83a698424fb3434ec61cfeb6db7ac565ea318145450544b6a3d509682f96b"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"304502210090e29b4ae8364ce6fdf0a1162a381baf1db0d9654e4098e98aea191bf5dda392022014e87bb5261fb8ab9d1d1694ed928fbadfa81810fafffe5b684d255c4570ee1d"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"3044022075f4050f8ccd04f0832ac81a5c73d12ddd78baad003e81f5931ce2f43303f14402203ac51a3456ce84ad7c934fe30a469b6874d47510e4b097b386aff5faa214b975"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022053bc0c1caba1f2a589ced91e416486419aa499e625d8fb4256675a3216bec772022057698f1ed49eb612601479aaa33ab77b635ab38dcce54f8d354e46f08a36a566"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100f1748b0339fccd0dc2e7780d701816b551b92c01c9a582387c9c5f19310c4d48022070a3ab6e0d49b285ca87f58ccb4eeccc979389382ffd6390e0d0398771cd3cff"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100cd701a6cf3d4150d9ac6efd79e72f790772433dbde62cf4b537b5ae2c51e0d44022009372e93db760ff9d6fe88c9a912d1e1595fe0fa85aa53ef759e13ccf95ca87f"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3044022018740d5b88a5a9245b59148cfb26c2728af523a4ffe23329646c6f07454721c90220426efe50d47b3f6f051ff70a132d93d3d549dd2b9823725bc2fd8e8affaf1dc7"}]},"10:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"304402203e43ecd4ec2084760949aa56b7fafc59c251a4167d23282c143fb656e336ffca0220470c45ce3711bf8de3be65c5dd969cbf3cfb48ac9ccca4570c08dfe331839326"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100ee88e0e7b6a5d06bf2a5cbd4e20e18a7ab32b6a6992855922666fd09b0f7f52a022058ce3cef7ed4d460011cdae06235e6ec5b0198f73488ec079618fecfe96f6820"},{"coin_ref":0,"format":"token","label":"Approve amount","path":"permitted.token","signature":"3044022074b7ba8d84ae723b378d96840f67e34e42a7cc8235f92809cbd38acfd8e81e3102206a4035bc4ac05033a505511fc81fb16ec4b7afad149036e96e209e2c88c52ec2"},{"coin_ref":0,"format":"amount","label":"Approve amount","path":"permitted.amount","signature":"30450221009320153329cc8967b12adc5fdfa61fde2c57807a552ee970878071da50cfaf0c022016d4cde8ee6a8c630def520bf7a9c06101d6029bb0aebf5709f839a824d7fb65"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"30440220025edd135cae9420525f4002438e9186f0d829924275245feabcebd650df9c50022061c4e20eb3a08b73c659e6a9f90fa9de0d5f878b2391dd4a4025bd8412cbef38"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"3045022100cac79398284dff0750489589096821ca509c7cab28d7c559fbec188a2c5260a40220138e9660edf332876e210fd0f078763398b9f3b974e2929343a52c41280bf1e5"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100d9ebaacf12930a25b5d71a83f4961e6be38a92fdc195c80d1f387a65620a9e48022034528f3903c1750d88f3072a7f370251edc0afae2e3dec64104ab48b8c4c9e05"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402207bc1311206829d507968b3e84dd0dee4ab691d421af49140529529dcb100398c02204dbc969c87e22b6c49d0a4e380a39d4bc0fb38cbfc6d7c1dc7d3e99b205d5770"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402205fa34253eacaa7d0dedc81c750bb6ad845b3963ce55c69284a83e615e9b11451022048df383dbf5d2eeec025da0cdb2bec2f85a3aa71eb6c0304fb04febdc38aa97e"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304402202879f7e0045e9f386a952c7c11afae1b4468c8b2109827b73b70e4146175512d02201230b61a655e972e44c2cff0dacafc125c65c12fdb609baa25f308c8b5666d18"}]},"10:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3045022100cb246a5f272fabec7b7d66d24b5a0daa0965a3eeab2fbb34876d50a88723400e0220561a0b4b024e52b8f385eb06fe5e1b3d473532724e57ce9866d22816c519d422"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"30440220057cc51cbcb260461c1142343632ae7b3e0e1203f6e6b2ff65d2db026a05fabb022073aa96aebbc3809efc58222cb3f9699e06d04a593ba971764d8680b4dc02323f"},{"coin_ref":0,"format":"token","label":"Approve amount","path":"permitted.token","signature":"3044022075fa48e4ee1908f3986eabb7194c1de692d3e9735cd91cf1bcb942fa4a1f4ae6022018417afb2bf9a4c046712f2066a19261dd56ced9f6e5ae15c271fce34ec88733"},{"coin_ref":0,"format":"amount","label":"Approve amount","path":"permitted.amount","signature":"304402204984d52189220650b0f90cf625dbbf721f10b86e3ad28075940bb17b94613be90220141f11d66a174f04322abd6c43732c8a57c0f16cb29cda848f62b33c6b139cdb"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"3044022036447c0b1ac58fbe76a276241c6ab1d4f2734bdbdf7cbeb2e3730f3c069c96d502205ee198eff3b8d27c4354f037acc6810208c8d81a670ec781ad4732954ea2c247"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"3045022100b91c95b1169023fd3cc684864a0d3d9ec5e4aaf7a5d668782550a101112936ae02200103f3c7328456f37999b24b17da7226941f55473a2bd39ebc642433b7b0ead8"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402205d4f3c21a2ee2533a1738bfa13f5dbfdfea54cb74bec14963f3b98b1a081b39402207e4e6670289f83a4c9c7a34ab7e3ac8c3cfdb3e5a2064194a5591d1f0b378e8f"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402202843f21aae62bba18af01ec031ef1d4a7ec4187d3c111933913bbdbdac36a9a402202ca64ad80ec886752955ab7d8b05f5ae1b8927577da52eeee9ded32133901fa3"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100cd8897444bd4e942309a88278bd980bf04c28ef47d3d5084b09a1239db0d1747022046f871ef50a4b70c350dc07362838df1c82c6900b474b045d2b773e7111c7e99"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100c2038564accb20c9518d4d9b870bab149ba12830e4f8cfa6d847ad02218c60d20220152b9808da32ee0096db0159935bd0ffc46fdc53ea6537cee8edb694059b516f"}]},"11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"30450221009bbfbee758402c58c94964a1c05b0025619dbcbba2cbc3f1804194074086932802205cba2cecbad6e4a1e742d8f97a15a9aa267e331d9bca94a3a3a3fee833df5d46"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"3045022100fed3b2d3a7ee749282fc0a5104e291f01e04e9322d2ba0e0b0d03ca57822005e02204df5d4d58fb7b6b2bb8beeeea085abf11cf1dd8864c9bdb01332d9e36f1b30cf"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"304402200c6d07634727994865a05e31e3010e4c00f17d8411dad17f6661895375bea71e022010dd22ec3a25677911b3cd6028e2e8e970b52c6c6bea366a7282ed136ef16f3c"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3044022070de1aed086e82cd1074c672da6f345cde3f38b0bc3bb589b79283add3a39f6d02207e19e2e44d856616d47c32f378bc6b53e2115ec183747cd1832a829faefa44fd"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"3045022100e8b938aa9e95b022f36d2915d4c4b8c1d5731352b2d8b6f950c7f5a7656137c10220063daffadea8558fa61a654c3f266a4893d43f3aee2c8ddfb82311a0ae4eaa98"}]},"11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"30440220722143608b4d0dacc5ae754eb195202ad6f0a6206cb93eb0b474148c05bfa76902204df25ed00be2c86433cd13313635e8859e7225227fd8d1daa6afce6b57cb01a1"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3044022018ab2bd85743520bac0f1a12ae2e507dc5213a5dae15ab9d4cb96abd75a10c7d02206b111247d5ca66460b80458037dfb1cf94dc419aeb0c893afc111b3e7dcc9f73"},{"coin_ref":0,"format":"token","label":"Approve amount","path":"permitted.token","signature":"30450221009f1e977ffe41b7dca2b2a90b638049b4e6ce9718a0742625bbd250f585700b690220046b21b0365d5f0f0c24379659645dc3ae0bb3172a6786e6f470277a3c400ef0"},{"coin_ref":0,"format":"amount","label":"Approve amount","path":"permitted.amount","signature":"304402203dcf69efc767b5f912e48a09c797997426908b39948d79398d59f5cb03ee52d302207f0ec591d4ffb181ac91f5642f9399b30c705edad68d8cdc87e9f2cfa9ed3854"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"304402204e33179c2e3addf72fe73ba226a6a66579affd5c5729a7f7ab974330e7ca49ce02207cfe99ecb72b3da4500630c511da1c13b292ae6fa947a9f4abe57e491e4dc359"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"304402203919fd713c44c77eefbca735fb4183adbb5623ab06f179adc3c507171aa8d20902200822358aa225bdd0c0f53aa54e8b72d04faca88f24911cc2f45d68bb1e700de2"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"30440220394e133ce4dbedd8dc671de0efdebf6879db547b75edbdc9f99a3e2a48da803902207721d57f8afac58a41dc46d5a0508cd8de5aaa6abb8911e00895b6838d620420"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"304402204c003890b5df1bb86519ec0a035921b850d50c1b28be2fe6888eec813dd95b8c02205a9915ffd8706ee9ad1dad003b025e5500ebb513b96d3b263805d5c00ee10778"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"30440220206fe6edb38f47699a313c39d450d3e1734dee42f1e80d3bde46b4a328e2842802207dc1b99a14403d2820e4b49a50d74d12d5002c24938c87d9e818579398c3d7d1"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100d256adae757c57dc2171712a501fc5a747591189c5f566b53619e0ee734f6b9d0220357cc60df215a1a0656786dae9a4f8c0538848773eef6d49d5d343674b02d312"}]},"11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"304402200eae2991ae611a1943fe8abfe04cb2e3e04330628fefc2824cabc48348a72c0c0220174bc06c3d0e197027eb8a760ad9aca3f0df8f77ab910a09ef8390c49b98c2be"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402205fa727d29151c9830043b6512c61159c1ea8ea8fd44b87c0596b5bdafde82243022017d97ef8e14639e37fe3b613b70504aa43a05c41c8cd5b03229e55036610ecb9"},{"coin_ref":0,"format":"token","label":"Approve amount","path":"permitted.token","signature":"30450221009413e0559f0cf7aa12bd40386be3cf068c8a8e402b861eb48ab9f6a9c4042556022065012bcf4d724f70e07869976adac4871dad5d73434b939b0ee4d517d3a9eb35"},{"coin_ref":0,"format":"amount","label":"Approve amount","path":"permitted.amount","signature":"3045022100d04b0df120f2fa8cca6a0c30a2a85fd0aafc505fb4280e2e5855ef6ae2d5c9a70220650cee78dfbcaf675bd0f48cb09853351f81329b56f7862a5e8d9739f6a59e67"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3044022070160446ea33705aeaffbf59f8d0d30e001a60c84827fc3bc0ece39c66ea80b0022053355499c0f8c0c560e028afd38034d4fc72e86967cc93a71a88bbe7a8a36cdb"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"30450221009574f7898eda64c90a4b41d0c1406be84e60a555a1703fb23a37074996cfeaf902200ae43416c2999421e912e23d392dbdd168bf9d5dfcb04324094cb1a0c7118976"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100ba06a297e0758ca99a5278e6fc854cd6684183501421de6db85c9b9d7d43fd5202203caadad0392f98b8cd4749ad2e7b47d0a8a25581374109cf33ae4a78c74facfe"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100ed72ddc67dd730a9c06f128b1ea5073a6d78a6c4f4f76ef6e140c5298cbc11d4022037bbd5706a289e0f540c48ebb48bb1dc6037eed5696a65297fff2c0f38813872"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"304402206357c271bb041a30604462b90dc60ada77d030eeae1fc29a80c4ab02c2644b3b0220514f5ee06a02abfb743eb98f583b679255570908b8193759bde14d39930f944c"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"304402203cd767b5c18ef0ce48a835308749aeb6b43727b08f6dc33c366ac4985393396f02207af2aab094bc0955447596ef6880447c448593b29a6596de51f7a95dbee8b2cf"}]},"11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"304402201c8f5b0c36fb939b541b89ce363184880e729a9458421f09474acbe3ddca80af0220418c39c98965751cb693b0f0f85397b824bfaf13552f6f3404d994551a73a1df"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100b9c663e4d3a395b429e0a08d4f72f6667ac0a347a30aec6e190ce92665dddde902203ea26aeb292dcf2f4bc8004d02c125182d5fd2692085e40addbc43c90184f4aa"},{"coin_ref":0,"format":"token","label":"Approve amount","path":"permitted.token","signature":"304502210083135dd29dc57fdfb7d556f2292fdaa43196ded176f3c87ffe79634b9768eb430220646aee87d4f143ced44632d4d8b54e5f9f44433d50b7691f20bd656e07910b20"},{"coin_ref":0,"format":"amount","label":"Approve amount","path":"permitted.amount","signature":"30440220744407f34dbe7e4f8bd89c055fb352da5e823529678f4af8398f109425cfbb84022011c50a670596e7daa4eaa94bb5649cffd8b400ef991800a268df4dcae1b675a1"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"3044022021a552c1a12877b1278524ae08f176aecfb4d26c84d2ee543b683f956d989d3e02202bf706324685ffef89db50dddab34384280bd71bf09cd11f4f78e1bfc5a0053f"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"304402204556e8ed2abf2bd85b6d0073c05192a99d0d4015bf3ea13294001fc4db754dd202202c18a8259eea4e1374d567295d4ec58ce6b0fcef2004474bf22bf438312ed7df"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402203ee1f20cafedfcb944ea8c2e0bc7556a718c03929b7d94cf4ecca22d765994b1022079f358095f150c5e4d59ddb036c34e3ab4557561bbe64ab40c6b91567aac9b00"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304502210097f76005925a78c18ecc5df1bfd730963a1988e67009e319a4348afe768986df02206e1b4e5c75b65bbd06ce70fb50d4a54b3bf6af3db8ecf2f29fc8f0b5b538ceb7"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100c975df466b0ca53d729c8631d162b42a65119e0a26a116b2f72fb4e800b282a602202a964d338ad50adc7b66d9a263cc19c8fe662381c029783b622bf081629a9f23"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"30440220519c4f06f9d6dd3e085dc6d0a6de23064fa602f3dbcd27721eefa7903b17fc8f02202525070f0c4eec3eb3506cd98fe0709b90e13afdb21d1cc64b66e98057fe8234"}]},"137:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c":{"contractName":{"label":"1inch Order","signature":"30440220295e0aeb17ca0929b2a94c324d67d0b5528aba268177f3ac297b563141e0002702203ac360d9fd0c9c0c12279d1e73bea5d549a1e8141f454d88fbe1e8ef970e6802"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"3045022100b820e4dfb1a0cde6dc97d9a34eebb1a4eef0b226262e6788118ab3c7fb79fe3502202d426a388b4c3a8096b3f84412a702ea537770e61ee0727ec1b710c1da520c44"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"30440220015921d09f25c9affdb99c858b4ed07cab1a8c81674094bbc35720303a676d7b02201fc7c60bacf6d32d89d3196801d5c8bed45156d6a012f222deee6aa4d9e37d8f"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"3045022100caf1b5544825ee057566f9adc1c9ce4c4063936114c89b2a003ae42b2df0ed6f022059c98d1dfd79b83f325cf2e787d66b18c28413c66e8d805463e077ec534f7609"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"3045022100ff727847445431e571cd2a0d9db42a7eb62e37877b9bf20e6a96584255347e1902200a6e95b7f8e63b2fab0bef88c747de6a387d06351be5bdc34b2c1f9aea6fdd28"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"3045022100a59dc479a838a813909c140a15e6b65bc58c5633284bf973c436de5a592634e202201e038fc7995d939fccd546e4c85e793c0ad451216e36a4edfc7bce5be27808cb"},{"format":"raw","label":"To","path":"receiver","signature":"304402205c5b1740d2e74513a9332e3160ebfe5996186c68141055a95d733d51eb51dff402201a1e085dcd9487bdabe9e04426cd8b043c5bf158843fed944affdeef0768ad43"}]},"137:0x94bc2a1c732bcad7343b25af48385fe76e08734f:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337":{"contractName":{"label":"1inch Order","signature":"304402201b1d17eea87fdbb8e54353a452304fd67862441df16d610f532ab06ebaa5ecf802205a18cdb6cb6b6825670f04aa7aa2ebeb26436922898f4d25f8ad4a947417cc00"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"3045022100e1a47b49e860b2be7f7325e5b5c00607e883ee4d167cbd85e5a85ab8e41b1a2602203f2a7442cbb889624d51e4e33bc1b2a4f11aabf495d0dd40fc903148432d9bcc"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"304402204eefc9722671796aab570e69e65cd0ad67bc251b14418ba10895e740b6fb4c45022020084e7a21b3c3e0357250c390085d80284cd71179d2b1dd7474cdc6a036b37a"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"3045022100d3413cab0ad7042603051fa589405300b3d4278351a84ef2e673a0c99ff61a0d02202701a4c7a207d569b04df933663e1f82f7b688ca51fe9802b9181613a8361991"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"304402204959de15d7a52cafe0126c83455e1c5cc957add7347be1e180cbf28619d29d34022066bad83af5f8f67332f3c1dd9d60fe376b9bd581e414a093db1a2597c4c35439"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"3045022100daa96644ec41ef53489dd7c96a25d3efbaf6465f66eb9260e5a7e5fb26ea10cd022076103253bca5791a2eb47a57c1c471688f0ec285186cdcb764aac38d34190ec4"},{"format":"raw","label":"To","path":"receiver","signature":"304402203a2f8cc5b18e596424e3303dac52abbf1becc37f652aad68b1a587d422f4a49d022063bcd24256241623c9ca134c31a2faddb793d85b8f47be34bff3b46dd5576157"}]},"137:0x94bc2a1c732bcad7343b25af48385fe76e08734f:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a":{"contractName":{"label":"1inch Order","signature":"3045022100b2fef9ccda3203d4d711b37b8c21dc777d31a09653ac849a1e16ba669a785895022019501ee864d298c314a0e596b1a3e938d7a8ddf1befdaae0c221e8354729ba5c"},"fields":[{"format":"raw","label":"From","path":"maker","signature":"3045022100cf26f3f40e07db7986b82bc30685023775e69a06d6130f266a231269a418a06902200ca684076d0b8c364e3eccc772e96e28ee09783f3d6962f5a655e26e1d93e4c4"},{"coin_ref":0,"format":"token","label":"Send","path":"makerAsset","signature":"30450221008bfa64f4309976abc3bf834d5cca387bf2e6d7b735e249b4c893b636e1b8233b0220653ac8945d7647a62059e50be7ae720e99d6f0df96c88327e4fde25b2a036229"},{"coin_ref":0,"format":"amount","label":"Send","path":"makingAmount","signature":"304402200ac929f206d584e7d83882e95da6eabae4c2498b5d5941e31341d572d82b11f002200f9812ff92d534e0df81bceb413c249177779ed0f8fa3f5b6259e304d87ce5be"},{"coin_ref":1,"format":"token","label":"Receive minimum","path":"takerAsset","signature":"30450221009ce6551822a67ffb7d4d152b091d1a9bc67c47748a6e6d5a5d2c969a31d2492b022010b02868c85e42dbd46f053f01763b66f444feeac962fc4e49caa1c60541e7b8"},{"coin_ref":1,"format":"amount","label":"Receive minimum","path":"takingAmount","signature":"3044022028d210f6cec67f371c32b377ff8fdb2cbc71652a9d594e6cef91190a90cfa93602205edc2b7edfc4c1367a90fac0c3f3a869e9ae07e290aca6d38a430aaaf51d6fae"},{"format":"raw","label":"To","path":"receiver","signature":"304402202f22d2ebc0588d08c34348ac50a8e7be90dd3eee6b6692c9e4abb5040d119dc9022059039e0abf6973ad32c72a6f333c3f370d7d0b24492444000dbc222e0ad859ea"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:9e97b4d1d211350352bdbb5ef45c4cb52f988d93a2d4a8ec6e675d14":{"contractName":{"label":"Dispatch.xyz Follow Profile","signature":"3044022008ad0a8cfe8c2630848f05e54ab93cfd1f5c301eb52cc74537d67a56751932bc02206dd3e78f5055b6c65a73905f840963b2f696afd04d6d472f4185dce9f6262821"},"fields":[{"format":"raw","label":"Profile Ids","path":"profileIds","signature":"3044022079ab31498b3ef74e744d5414f4c51334e00b20a5ad7c0a0ea6f463462d0a3699022079b29776df1f5243794cc128f19478ba586cd3b9378b5809740e9980763f8d8c"},{"format":"raw","label":"Data","path":"datas","signature":"3045022100c04fb22aecc349de63571095782ea34cde05e576095c980d5c86f054c1a248cc02207f5a41199516bed46221aebed4f0f377508d39d661ef7f6ea7b16877709aa4ce"},{"format":"raw","label":"Nonce","path":"nonce","signature":"304502210090109424df964562737fd1b5ce2f06b427856ae933c37f279af199f64fc530760220290cf4491328fc947f4d73f0032e151aa09caf8e085d0f0306fa355c0624dcac"},{"format":"raw","label":"Expiration Date","path":"deadline","signature":"3044022060825e02b00e4487917d073f701639b1ca812f21f1cf588fa8eb545a59b1fec8022073ca7918a322dfeb966dfe5239cc1a213c14e67a32f5f51e14e53c05f4149783"}]},"137:0x33c6eec1723b12c46732f7ab41398de45641fa42:2a4e40fa701836b6f11303b841424a6f3a47a5313c810b6651517fd1":{"contractName":{"label":"Mint","signature":"30440220513be6e618840924202f319870537e0c1f1eb2e684c0a2c61152fc4c20b41c550220026e22f2cd2e12a6b48f97bbe362600556ce3fe5e8b292c05c89c591ea446e2b"},"fields":[{"format":"raw","label":"Receiver","path":"receiver","signature":"304502210089eeb41d1ba1235fe8319c6a248e1ac66d2598979d265e2d4cf16abc34ba47f302205a59e802e42b3268441980b4708600ab6e05e4c55de7407610987532cf73462e"},{"format":"raw","label":"Quest Type","path":"categoryId","signature":"3045022100bc6cc7ae4c2b3b4d43acea4c513e09d11736275fade4c0bd834d94f6ebd3893302203045ae14bfbaa4ef3bc0d9cf76f29cd4c90859464290632ee72b20f4b5c37f8b"},{"format":"raw","label":"Collection","path":"collectionId","signature":"304402207537d928b803882aac63dadb7fd512f4b959c0e1a737ce7594c9b9e0a0c661170220587298e0e8e2eae94da28564b1bdd7f62273d7e3707665a7966f1b04a15f061b"}]},"137:0xd4f2f33680fccb36748fa9831851643781608844:0b5bbfa7b0d5b8429992c11126083752c3db3fac6030859c390e1ed8":{"contractName":{"label":"unlink","signature":"30450221008beed58a311bd0968844684d3e090349ad8f4c4a203b7d907f17ec9d1dfced03022040304ccd72921e0b13f0b8844cc513a35f8bcdb6d088385a57c29d848b3e1fef"},"fields":[{"format":"raw","label":"handleId","path":"handleId","signature":"3045022100da2826956b2b8863be618eec516387f3ab418181ffdc37a5a196f9effa632a31022040f75d126f4a757e0ce18917b74a9470e23848eb54060981d49efceb281ee3fe"},{"format":"raw","label":"profileId","path":"profileId","signature":"3044022064739575b6ac7bcaf48de8a5d9c260b8ef97dfcbad8309dd1d95196e18c505a302200a334a67c975aff07d285f0ebdbaa5101049e0e331ef0f26a1755709bfdd304b"},{"format":"raw","label":"nonce","path":"uint256","signature":"30440220471ef79574484f61b5e525aeb61f25d06eb997073a34bdcd68e3130c429e81cb02203fb9eed967e176c7029a3aed0ef503c83e61167b91c4507c8ac6304457754398"}]},"137:0xd4f2f33680fccb36748fa9831851643781608844:4103a5bc367237260ab8658d746773f02cb95cb8daaf8d5b54182316":{"contractName":{"label":"unlink_with_sig","signature":"3045022100f1a743e8adbdf6ef1cf1d16eb1017b16b52266b367c53fe2d22483b846f26fbd02203d87aeca769b75b0096cd5bf4bcdb1dc71132516ca79dd86bba57594ef41c686"},"fields":[{"format":"raw","label":"handle_id","path":"handle_id","signature":"3045022100ceb4eb671f78a9cf0e46b3b447224fe23fd92b1f950ba762e53779cc9225cd7702204313ddd62a34e8a6128f3431ad9742ae27771e1b5f9a7f012b792bb7cdf67bea"},{"format":"raw","label":"profile_id","path":"profile_id","signature":"3045022100b7c748f3aa456cdc798b86f5ac3b59af56532278fd3ce0b8f8f7da1d7cd2bf5c0220672445bba4c5d42dc077d79712c344458656dce0a92d28bda1d81272c2410193"},{"format":"raw","label":"signatureDeadline","path":"signatureDeadline","signature":"3045022100b7c86333951cd2371f0d94e39fcb9e349355580fe8fce42221a99bef49c0938e0220197a33b34f029674ff19575918919a28a0848d4328057eeeb633c150b4825113"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:070dde6ec3e5d5e7d8f92290760b7f3ab566049489976120347b7d4e":{"contractName":{"label":"collect","signature":"30440220274cb9f97529180cf59bc0ecba64e9f19f2a18df3df7653138fa5c4c68d5224502206b635afa415cbde57cebdebc2a0b5518be6d426634f09ed89664ac448ee31c37"},"fields":[{"format":"raw","label":"Publication Collected ProfileId","path":"publicationCollectedProfileId","signature":"3045022100f341665ec8c569bf59fa6c6e5dd568a7b5d0e8ed9d7b01268aa1cb9d18cfa9ac02204168045cf639e516096d89d91f9cf53d8b447a27007428a4bf4b0737b1af843c"},{"format":"raw","label":"Publication CollectedId","path":"publicationCollectedId","signature":"3045022100c173358226f9841b57a93d2f7d622dd3f05f819a3e7f99249ae49917724c75d002205d4ccef5f16105c6d11fd2ffdd35b9e8154e404be39fa058e73dd0381b746c8e"},{"format":"raw","label":"collector ProfileId","path":"collectorProfileId","signature":"304402206e73779691817f11b71f50c685075fd03e187a48e2c7f0754746cc61251e4dae0220233691543c3c35e99f83988753b3026beece6e26f13bf1fa197fb53638945242"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:21b483c455b899eb2e03e330261c2968719ee51273fe888f749b4952":{"contractName":{"label":"post_with_sign","signature":"3044022015ed7869eb391191dbded78689682b0cad3c7edd16e7512c868c5caacdfdc8dc0220685602e1c8982b96aae0578cfaca26f006a834c54fd7ca5b76c95a4087881648"},"fields":[{"format":"raw","label":"profile_id","path":"profile_id","signature":"3044022053c07fd41770b4c39a5122296fb110fcb466e42b7339b1f3b16842a6bb78d53e02207e5dfc7aa10aba6110888afc880543065aa5f07e822001d82a896d53c5f51335"},{"format":"raw","label":"signatureDeadline","path":"signatureDeadline","signature":"3045022100b6727e222313381f043a0d83dc273cf2cc86207bfb6f00912da59a46ae3d6caf022022b20251dede2884f32070b53fcbb66617be8a0698f080adefb0331ed66f75bd"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:25313c662aeae5b5367783c654b0b41d2fd819940290fd26da4520c7":{"contractName":{"label":"link_with_sig","signature":"304402207ae80206eacb28604a57c9257543b43028d03535bafc53b965cbe15e6736ad340220474f63f7657f3607be38c4f9c88a95a2331ca168782803a35ae95a44825c281d"},"fields":[{"format":"raw","label":"handle_id","path":"handle_id","signature":"304402203066a8e761ae5459bd8d07a2d85e012cc6db178e00c47a75a43d081ecd43c45c0220387ebdb7c0f44df75cb5b2b9da79f2cd356c73f6b2e92b9eb037d87c12d16c05"},{"format":"raw","label":"profile_id","path":"profile_id","signature":"30450221009c4b4d4399f2d315aa5651f4fd2dfa7313c949f493774dabf1be9fcf89b99cc702204dfe454f6ff07ce87f0825066b7b31ac2987576c107c7583e07fbc045153811c"},{"format":"raw","label":"signatureDeadline","path":"signatureDeadline","signature":"304402203c0fc15b249263368185e82d4385909a63f8094217c147627965b558069d730802200d2d416f4a73be0429e1184328529a1fa60863259b708e70c0640fc6fee1afbd"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:2c4da863a51b4bcbcc6c55ccf1f22685c5bfc5d9fdc2b091a4979c57":{"contractName":{"label":"mirror_with_sig","signature":"3045022100eb0a2dff271a17bb6d79da946637bc29a660d601191d70e1d32bf1d4a2cd34e302207833823dfbef232f9af68c6fb63ed4e7f3d359a2258baee90b9d5fb43879b819"},"fields":[{"format":"raw","label":"profile_id","path":"profile_id","signature":"3045022100e1b2f2be8ed230b81f373bdec95e5ad9301f62ef08f98eb67e43defde27f52ea0220442c2bfbfb88286e11b43fa43e72e2f3734e282c8742ca7d49cfde026fd70508"},{"format":"raw","label":"profile_id_pointed","path":"profile_id_pointed","signature":"3044022072f532eaba3a90bd4eeedbee606bc7bf9d30f9c320a3d8c222156810fcac113d02202837a1063dacb5af39ff3371cec6f38dfa8be419fb96424fe393e98962355732"},{"format":"raw","label":"pubid_pointed","path":"pubid_pointed","signature":"3044022076def7f6c5c9b4d18d388894cb177717baab28ef0694f7aca6b8d01ab6e005a402207c30ceb8b83363069d6020cb203716a08596d2c21373ff334ba3d99225613295"},{"format":"raw","label":"signatureDeadline","path":"signatureDeadline","signature":"30450221008d476b24f0f3f7559979397b6145f42fcd68d4ac285b1ad20ffdb0f85b5b65ae02204f68b4b385c5121585f7c0cd9d83c0a8e7a97a4c867e2ea14f327f732d2e7745"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:34bcec6283bd50c6742687fbe45ca3b54007977acd70504fd3a664b7":{"contractName":{"label":"set_block_status_with_sig","signature":"3045022100b15db144c953121c0291aee97a12cc9fd3fb78de8f2827dfd1fc72f130f7117c02203d756ddd8bf1a21b99e20e0c8508f95c425eb10ccd224381715cbc7fb22c01cd"},"fields":[{"format":"raw","label":"byProfileId","path":"byProfileId","signature":"3045022100a6f5390228f0d665487302ffb088c50e91220f018a5e3834fe921440594663aa02202e37d859ac67fdca45182a59ac1c888c799135fb7bbf96dc0f0dafe8d69a81fe"},{"format":"raw","label":"signatureDeadline","path":"signatureDeadline","signature":"30440220701fa22235fbaf8e58711d8162de37e37b9ae416e607e4f191744c4d0064ec1d0220502da2bee6317d330323a0c979e9bf0cf74fb070ea67a4f17981c40664c21a39"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:3e5cf36b8ef5bdfbdb5645a7ac102ff44c1ece4e4027578f82a35e5c":{"contractName":{"label":"mirror","signature":"3045022100d75b35ba1454fe2acc30b447afad603caa5e112262015fbd840d32314926560e02207b0e765cd1fec69eecba2aee14d6e613beac19183c807e3b3eb21bd96b818b58"},"fields":[{"format":"raw","label":"profileId","path":"profileId","signature":"3044022026aac4b7c09b4b20c3144e2e9fc59a8384f4f6539cbdc567e2dff46dd0b1f40f02204c9c1de93a68b0b44da0f44d91d60d804de70934e3847b548379faf2eaee6685"},{"format":"raw","label":"metadataURI","path":"metadataURI","signature":"3045022100e19e723f2d64afa383c89674c04ebb7208d6584106ecc2ddb4d76aec5e16c2df02202e5a8fa79792908de5804d15bf8b8baad74e43262f6fba18dd77286b5d9cf6d0"},{"format":"raw","label":"pointedProfileId","path":"pointedProfileId","signature":"304402200e5b144cbf64182aa82802662e9589ccee6f8b6514f8ff40b2918d47438b586602207cf688e2b60bdcaff0fb4bac630949fb1ed8534688c294218c880f4a31ee0b7f"},{"format":"raw","label":"nonce","path":"nonce","signature":"3045022100d7579329ab85e0924f5cf656b1810b2106c9773baa9e5032c78af8b2a273fa53022018f030b62fe33bae8f0218453ebc09ded25e2a459f833cc395c61f559730ab30"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:47c475ce8bb65720c4f1e1719d21bd6c0f89d0e424318caef9473886":{"contractName":{"label":"link","signature":"3045022100beff5d608bab21dae867915578745515773ff2ac555848d7b5e5b21a3c7b67aa02200eb85429369afc29d8eb3b26f2290662af490bcae00216f50a98317a1e2512b4"},"fields":[{"format":"raw","label":"handle_id","path":"handle_id","signature":"3045022100be71019383ed910e9069478219c1c0e594b8abf1488502b1f01d697ae8a75f1402207809eedde5955c65362cf68dc7dc8d6dee11016a75d15278eb2d943c8414efb3"},{"format":"raw","label":"profile_id","path":"profile_id","signature":"30450221008301a955b2e48d0b7b795cf86afe07fa52d01b7eeae95bec4c0a86776c40d00e02206578edb54793f5d68ad5c77282c7abb5951b6cdf0597db3f02adc96682e61fdc"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:487bd6f6e6253dea7aec4388c9c9a59a6cee6cbc9865eb72511cbedf":{"contractName":{"label":"comment_with_sign","signature":"3045022100966e8fbcd85a94d0347d75e2f63f8f6523941f954795d77908110f9995446c5a02201b133f6025d7b9c8a7aa6e9f6cbb9c29384a3fe5c7cc2d7e245aaf8a811f07a7"},"fields":[{"format":"raw","label":"profile_id","path":"profile_id","signature":"3045022100feb57572c991ec538ead71637af3e9c20fc0f8ff55ae96db111970626362031c02202f69b09a4c298ef8360283429b4ceeeaea31b4e59a7be465b72b125803fb5f28"},{"format":"raw","label":"profile_id_pointed","path":"profile_id_pointed","signature":"304502210092c92442c3bf2111477ef3f5f004fb9bfe5b65aead802cd0130edb3b2b8fbd65022042280fddd1138e474543dcfc4cd49adf3e382946dfe9dae46bf23125aa274763"},{"format":"raw","label":"pubid_pointed","path":"pubid_pointed","signature":"304402203f100d6fe2a7ab17727ba751589902c47a5492d5e60b0eea4c762fca9de7a828022031f803a7acdc380d6b3e844e0df3119922555567d16116430b1c743500c68ec4"},{"format":"raw","label":"signatureDeadline","path":"signatureDeadline","signature":"30450221009c02cc897c262a2749a5a2c61fc8751c55139c4a17758ec70b0728849d73c1250220029b6d4901fdcc1a1840a735943651c224b8df47caab536b6938616168116ee5"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:62759482010064bf87244ddf3f52f851af87304da45274e8ffbdb099":{"contractName":{"label":"burn","signature":"304402206cb91707bf94bc392806cdb14d85877353fd647485fce098f041e5ade6134ce10220683811ec5809e15d419909322f03ed1b6ec5b68c38717ad06c6b0385ee3c3b96"},"fields":[{"format":"raw","label":"tokenId","path":"tokenId","signature":"304402205d18ec3a8003bc0fbb26de752b163e0bbbd77f8fb0b9017bea4619cb87de39190220743a256a6c6ded87db1b01894de3f2608e3553a96a327313047485ef965b18d9"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:62aa4609df2dcd990bacc19b61fa8cf0744b18d1dc85ceeea0ac5649":{"contractName":{"label":"act","signature":"3045022100d9ff204caa00262cbdad544c05c86426ae116fc7386e88380bdf49c259ae89ea02201bb18df1cc680a5ed73c084eab591438ec2477e4a7bd9894681bf797e09acba2"},"fields":[{"format":"raw","label":"pubprofileId","path":"pubprofileId","signature":"30450221009b4332e63f5199d668ec9303f97670628d6b122af5043ebf45d717b1184b6e5f022020ea22e28394812a4cbb1cf48a1d614fb8020fa777066145f5ddf98d057668a4"},{"format":"raw","label":"publicationId","path":"publicationId","signature":"304402203669ca8c2cdabd36876e5ed39b3d5295148191035974d0f228176b0aeabac7d30220384ab6461fac2d5fb1e44012c7cd74f038e01d08f71c1fdd460e0c3bd9ad36ab"},{"format":"raw","label":"actorprofileId","path":"actorprofileId","signature":"304402206bf788d79bf178cda6601da33912bebab43ad0329a4d765500ac6668a89679ce02203fcc328d872791cde23e53b485d4631ad4efa36bedf262abb3a3bad89e4b7199"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:64e0600665b7d148b3f8c7cac3c67c06a40c23a92b92b64d43ed854b":{"contractName":{"label":"Quote","signature":"30440220562b1faf7c3a9ab9b9093ad3f5cf25086049cbb3b5e382e728da1543f3fb3f5c022073e9e798bd8281bef4ab6f4e007519d63ab763c915f499e5be79eaff7c873e41"},"fields":[{"format":"raw","label":"profileId","path":"profileId","signature":"3044022057b03e53c61af58368ef1dc6d1d8d4db64482a06e5e64583912ab83dab7d7fe9022028bd197ff13afa320eef95074cb704d82d06b2415cb847258706d156e26ed63e"},{"format":"raw","label":"contentURI","path":"contentURI","signature":"30450221008637c2745ef73d773bff78cda34c82edd7c1cb08487e3923fa2f7e116a95687a022059fb08b50ac82f6e550c07a7192bc537c444ec2ab95d45d35c033a5c1640f5dc"},{"format":"raw","label":"pointedProfileId","path":"pointedProfileId","signature":"304402204203d284d8cd55980f1b1c7fb5a38f27a8382c521ae3091d1e3bdb5d3be4b097022023f637143703c499b166ef74303263ce777b46730e7dece60fbb4700b530617a"},{"format":"raw","label":"pointedPubId","path":"pointedPubId","signature":"3045022100a125fc5a7f1a4537eb3f87e13328af81ea70003ffc3328058cd2526eb70561a40220476f098654315e370e33bab8bebd2b69abdae6a1c7aff30a13a0858c4909b462"},{"format":"raw","label":"nonce","path":"nonce","signature":"3045022100ca3fb45ffe7eae84ac9e8205e35ec97bf88dbbca94956d69aa68e81d953fbcf002207ad391a23e30a161a7e35799863157b85bdb55d14be61889a04e932f5c9b118a"},{"format":"raw","label":"deadline","path":"deadline","signature":"304502210080a56b342258c626275ef0c372739414e8b59d4e7ae0ca8e7dd4df791469cf4d0220710a46b65970278bad1958cc65f7f1304986c2146e89053b906f25c6b666efc6"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:75a2ca238fb86566fe4ba12d8fef0a9852f577baee3fc9bfbaf678ea":{"contractName":{"label":"set_block_status","signature":"304402201a047f27b7afb027556821085b651f952d731bda71209c7857cc60d836836d0d02204c47493d1df372a9dfb0c6af5c4502181834a61cc46b0a85010eb740221b3727"},"fields":[{"format":"raw","label":"byProfileId","path":"byProfileId","signature":"3045022100a7d9e701ec6f27a56e9a32e988f08ca2bdd1e0e0649b6370eafa5b73727d6e690220490bd16ea293448fc7c2e9c8e7d4c3732a61793fed6e57bfb10fd69136483c44"},{"format":"raw","label":"signatureDeadline","path":"signatureDeadline","signature":"3045022100ddab91289c73a6fcff65cce812acd56edf5bbb8b9b3d4490a474e36ceee04f600220279ce728d12cad2cef6d51524d0ee2bf6fd77533ea5c22f52c4eb906b433f1ab"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:7e13093933733b6e355959c0f05dcdf096291225677986f58b855f92":{"contractName":{"label":"Follow","signature":"304402203d05d3af2857144d7d6719a434209fb86b4e31a23a972a30b48a63012b859aad02203a1c9fd6e77bf01ee54e523545c0b534d956529d8b500adda5ac84cb53adba07"},"fields":[{"format":"raw","label":"follower ProfileId","path":"followerProfileId","signature":"304502210086ce10d201f2bcd07ce0696d09fb0edb6c310976c590728779b215c3b06e350902202b9abe2522e9587c6c80f18bc05d3b55aa24b78a6b512ca52eef73b320807c50"},{"format":"raw","label":"ids Of Profiles To Follow","path":"idsOfProfilesToFollow.[]","signature":"304402203ba6e0b34e003918518babd31d60b67b9bd4b056fb061fbbe9787b7b35572d1b0220790db643b94787886311042444c4ee3a6dd0bf45739127f601633a81305aab68"},{"format":"raw","label":"follow TokenIds","path":"followTokenIds.[]","signature":"3045022100d4d6baf19d62a115ff05056915f5854862bc9b4953faa70dbb89dd8af2d3b58a0220560d12216c5bd899338b7423966274476914b2a46735fc5a461423a11d522436"},{"format":"raw","label":"datas","path":"datas","signature":"3045022100a3a40f4c17b37186d4fb96502fea483c0837d89dba2d86e950959142b19403d1022018bcb3029746d4fc0467d7f5c0d261ebe5d0bae6f502a74013dd096acfdad373"},{"format":"raw","label":"nonce","path":"nonce","signature":"304402200666208fca07d5cb575ba6343820aa555a57ce43facce4830f92908813d974e5022023167cbcec528a72e296336613e5354678fe3f2cd00f7e2a8bf574a6d8a486a0"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:80c176be42decedd0ce1d10963034b678ce2c9a781ef457be4eeaaea":{"contractName":{"label":"Unfollow","signature":"30440220138ca52d637f7c86067c5fffa161f3903f24d778cca96a30c4548be8776c5c81022033aeae1247a4b5e38d1cae7797fd38b0abddd02e8dbca3b67f4cd1976c996563"},"fields":[{"format":"raw","label":"Unfollower ProfileId","path":"unfollowerProfileId","signature":"304402201694f3f51d449d10d120fb31e2711c486ba1e664821d8f074ccd3a1f4c28fc6102207a8e7a137973e64929ee4356dae0040ed71691cd7ab6d05e2da8b7a19e6302d6"},{"format":"raw","label":"ids Of Profiles To Unfollow","path":"idsOfProfilesToUnfollow.[]","signature":"304402206cc14f7124cc54c692569b1e0e6ceeb54d565cd900b91efeb97790bfc8d3727602203e69a94df5c1ac37fe304aec1b0ce7f319ff09466c57a19b64d878c9ad6d84d2"},{"format":"raw","label":"nonce","path":"nonce","signature":"304402205eb026dbe9c4e370c950cbfb1f5eca8008a85b0530626d18d032a5e039f95344022000c5c9fcc8552dea7353b7665a09591767e277bfba7c3481b16e2ae5b17edb76"},{"format":"raw","label":"deadline","path":"deadline","signature":"30450221008fd2f449dd33406c1808e3fb316b6c821ecd28f53a424d9aec648424bd7914e20220247a46d5452c33e0a5b75925ee8ea77596020f21ad033201411f4204e597770e"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:8af86ea269c2fa5628d4e7c2ddf1e62bf6f5bd5a07f17856db0aa8ee":{"contractName":{"label":"quote_with_sign","signature":"3044022066ce14f394f03dc964c40540c4497e8beb0ccb9e23fd425671c61539aca6ed52022029933a6b4ebe3ddaa601c41a48e3836353f98564c4aa6007188f74aca2e1b98b"},"fields":[{"format":"raw","label":"profile_id","path":"profile_id","signature":"3044022033d729504a577e04d98d13b6d84c86d25d88a236557cd2effbe65be55aba7e9802204c62ab51a7bbb6603323c72f3e24b94544d936107deb2c343928d4e60ddefe58"},{"format":"raw","label":"profile_id_pointed","path":"profile_id_pointed","signature":"304402201326f878e1d9148d07b9801afd2d8b61ec6af1867aa6bdbb0eb359593548e9ed0220320c96fb026447f1af62fbeaff9e4ecf117bf8e58dde2c14e2714bfe8c1b9a32"},{"format":"raw","label":"pubid_pointed","path":"pubid_pointed","signature":"304502210089373f933d7951c60b47da9e709ec0fc28c50366dad2cd5b3e588b6a00ab207d02203f4ec2b735cdee2b6c06bcedbd4ac221356bd21d9e41b0992328b7c1d1258273"},{"format":"raw","label":"signatureDeadline","path":"signatureDeadline","signature":"3045022100a076dec0c7feb81cc9669b3130d6ab6a98948ccd9566b9aaf1a6a63f86848631022072cf9a4d6b96a163b4262dc58e46405b5234d730c14646f19a272d8454616b19"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:9909de3ee56263be0d231b3590af5ea9616f13ff9ad1ff2889b375b1":{"contractName":{"label":"Comment","signature":"3045022100ed2c4aa6c95f02f9235c25a4ffa22bd7b17b94491ed6ae515d051060a16148d0022056d2002a24999109d2828685bb5808cfa8f24325c232611ed7813139b9c2e404"},"fields":[{"format":"raw","label":"Profile Id","path":"profileId","signature":"3044022012bb9c82d1778ba93755cad0ef5ae60d16cd031e4518a977ac52bbfbfcda5c2a02204ae859e24c8f72ea90b175462bad13377537cdd06ecb2c918c26487bceb8776f"},{"format":"raw","label":"content URI","path":"contentURI","signature":"3045022100a6cced0672cd5e3f71c8acbbbb7fbbde9af46d38855b3c084007e466ebcc1da30220585c60120da86a91a475a7c77043d254368a3336538a518ede750313cc573b9d"},{"format":"raw","label":"Pointed Profile Id","path":"pointedProfileId","signature":"30450221008bf5103548be1e4dfb70302d55600f1630f2a71440a32c1679309f729a90f2230220463b62310d865628eeaf8339ca0249306b0a58c05057a1bbbed32c6f96533e83"},{"format":"raw","label":"Pointed Pub Id","path":"pointedPubId","signature":"304402203080c0a486bf69aa5e6c0b5242187f05b0c331510c50cca02e4721663923916102204e5c8ac70425ff2a3addb437cd0302b09fd769cf31b38b9914c6be2a00e0f3eb"},{"format":"raw","label":"nonce","path":"nonce","signature":"3044022021ec722852ebc53bdff303a327ac9fb8ca85d3c1b7331f3a74e36224a03f26a302200754e591c0e4c2420f4045d9f72b86829cb374572dfea7ebf9c2b02d1cb18720"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:a99363f790ad883fe3bb241d3de4b3afcdcb29d04018e7f3b858e123":{"contractName":{"label":"unfollow_with_sign","signature":"304402200e0488184cf4faf9d7942148e518530f3777676ac0c32ec9500e1def858c42fd0220716264c7be429bea5acf111c58c4fe7836933f13a1a87a8581fac110ff7ec52e"},"fields":[{"format":"raw","label":"unfollowerProfileId","path":"unfollowerProfileId","signature":"3045022100a01ea12793326480182402c1742d526592eb7c3605704488568c8a5bc6b879ac02206f8d48159f83c9acee651473315be799cf0a8d945685fd4cf80ef7815e94d101"},{"format":"raw","label":"signatureDeadline","path":"signatureDeadline","signature":"304402204a2f85d72695d14300907aad0cdf2fef138ecece23e2284b32af8dfb456e5d47022003a31e07c9104a9302f52b7e5896f8e4988a96f8fdb4b6ae8463125c2a711a4f"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:bb16dbc5aec39ac7140b2be7560b53dc69091ac405d0dc9c9944cf43":{"contractName":{"label":"create_profile","signature":"3045022100c8bc13779d4affa2535364c67fd0fdfdcfdcb91bfda2ee29645df5b10c0ce021022043679732fba8f9a4f2195bde7f9cc3008de2c3f5e5969e7a198b3765a013d92f"},"fields":[{"format":"raw","label":"to","path":"to","signature":"3045022100e29d5ee58e92a1f8640b0a87b9e148f9d1f453c5825bd98a6a3efb21569f8ba002203a3efee9b6a581135cbf2e02fab5297bfe84124c7b53c9a6c490e67902d99ab2"},{"format":"raw","label":"followModule","path":"followModule","signature":"3045022100ccefa65f301b19a11738d62082ab7717df57ce9ae834c85654324c2e96d0688402200c035b906f30b68be520a180de42313ad174e25ecda1a5f6953975ce824a39ad"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:c4318961bcd5f60585b391b40af279843ef5987b4de1c021a1099852":{"contractName":{"label":"set_profile_metadata_with_sign","signature":"304402205cbd8d6179fe4f3b58e89fdcb235973be3d43bf38c48b227212e50fab2ebad8002205bf98bdd1aae44d31d4e7d11cad5c5355796efca410a4079eb9a5fd79eac4b7c"},"fields":[{"format":"raw","label":"profileId","path":"profileId","signature":"304402206d3dc1a9ce664aabc49b5a9da69c973de34aa2a910965387948134155d5cb7fe0220057ce81243f25e6286f790cca12db07a27ebc83fcbb0878b6f9ddd44cd6d7122"},{"format":"raw","label":"signatureDeadline","path":"signatureDeadline","signature":"3044022069389e62eeeb0ded581ce91e752fb61b3db7c05d28ce95ea944b0b671987242c02202ec474a18cd966d8d9e20c9634fbe3e372478c5a5381efd369e14e1fbccadf7e"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:c9c7f3c34b7e22b2e08c9df904034aa7a66d2805bbb76ed439b35990":{"contractName":{"label":"follow_with_sign","signature":"304402202ee99ddeae71395ed85a710f1bde875a69d110d48d9942be8bfe5e1884199feb02206a230978387b6026ee9c97d0ce4b1c6f5ce40c7d44d57eafdf9a75718d432c84"},"fields":[{"format":"raw","label":"followerProfileId","path":"followerProfileId","signature":"3044022066e3535230da7c373f2913e833146befe76247d65db282385065e9023aa2ac8302202516f12f249c3739027b5d9ba43c5059da13773346197d7953c92340014e324a"},{"format":"raw","label":"signatureDeadline","path":"signatureDeadline","signature":"304402201c9d931d8a0333ccde8d4545f4561e2716576197d825f03c71979d9da51f3db70220546538fe354c9309dbdc1e86cc87a5f2b57f15d04a2909a99b1d1000151df3c6"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:d071f8811ba8d8972da7e2982b8796f9ef8623acd4d9efb47ea517b3":{"contractName":{"label":"collect_with_sign","signature":"3045022100ffc5e96ea59fcd16c7baa3dfe1cc1d6692d6c96e26cb2459df3dd91b6e861247022075fcff9df082a3a6976411144a96bf1020ef21355a83e7958399d52cf0ed6974"},"fields":[{"format":"raw","label":"publicationCollectedProfileId","path":"publicationCollectedProfileId","signature":"304502210099436784574bf76acbc0fc0545e906e8aa926602e885065783c2707812070e5c0220072ea4073ce3a6ae2a5a233482cf4d44825bc2cd194b1b4953ad9e508ba669e0"},{"format":"raw","label":"publicationCollectedId","path":"publicationCollectedId","signature":"3045022100bb04f580b5db9b6a4e52b6204dfa292339d89f22dba32519ca67b9defe20d96502201e7754b257580e553cd1ab13df0efb76356430d4867d820d76ad24addfb577bd"},{"format":"raw","label":"collectorProfileId","path":"collectorProfileId","signature":"304402205146b54e4c4e1f177f7eb14f2c3aea4d85099047a570685a106cc107ce9ad8d30220748afed65ae98795ff8d1c4421d003afb45920a52f3959dd86b70aea25f89f27"},{"format":"raw","label":"signatureDeadline","path":"signatureDeadline","signature":"3044022074f936c0bb1dd1ebc38eb6dc4bfd965a12eb3a76aff1d010d7f0852d1e3b04bc0220095f7dcc6a816fa38f4292618ab991a0eea1b69c9825f7d926621a79b8126fb8"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:e16be30e76d1fe7d10df971f8669e616e11b70590ef4002bb58f7d86":{"contractName":{"label":"ChangeDelegatedExecutorsConfig","signature":"3045022100ccb92e84fee211f1e1fd47abee3a39fad87e97988d15c468dd074b32629cec9302205f52145220b3285e3f9528be1797511f56ced0d2a22704ccc2dd4bfa7fb9b767"},"fields":[{"format":"raw","label":"Delegator ProfileId","path":"delegatorProfileId","signature":"304502210098f9f759088ad8ce5383a15004c738d8c3a39bf5418b0b65cd0e93ff4e5c86ed0220746604eb87ccfaf0877b531cbc296b50037718b57aa13f0201c14cc883f2dee1"},{"format":"raw","label":"Delegated Executors","path":"delegatedExecutors.[]","signature":"3044022020865f47450696ae64a2c628e35ed54ce4d8f13de1aed2065c87d5c9658f5a5e022008e511f727828e94a5709365389f20cc9d4378233767d639445cc17a46a87581"},{"format":"raw","label":"Approvals","path":"approvals.[]","signature":"3045022100ddf33e1b7793dca98a966cdbb83d0ca6d191708125a6c50bc52cd388f51c57ed02206ad81605cc962b0626b37bbe3ddc2023f22d8097ed828d395c31106063acfd15"},{"format":"raw","label":"configNumber","path":"configNumber","signature":"304402200b6e2d9ca322469d0d866a1d22a2b6fa23ae0d2dec7f8d5a51022163f2d0987902201d1e02f30cc9798115d5e2704165bee82afe69f2bb9af3ed626268803ee6517a"},{"format":"raw","label":"switchToGivenConfig","path":"switchToGivenConfig","signature":"3045022100b2157446fb6c5205c8fc6b97ea444083531b40fc95059d298829bb96e4d7ba8502207aa09aa16328195ad1e11cf5ed775c4bce5ded678157ae0ae47ee976e00daa30"},{"format":"raw","label":"nonce","path":"nonce","signature":"3045022100c7836dd3d52c1940889ebd8e377616fa52834f0822b7ea3c75bb6e01c2b4657a02207c4bba14de8df6a291ba01a76ac58ff13ef077ffe04481703ad189740bb9db63"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f0cf3d3b7ed7ba54e5dfe70cd7822ec56431596fa9d1c3e2cd2b4e6d":{"contractName":{"label":"mint","signature":"304402206639bbb45b91a9c309742451e2bf73a29bc75fd32c428ee60d58fb001353da8002200b4aef1c912feaf73e3a45323a7df3b8b2df44afdbd0237a64b3723c7053f72d"},"fields":[{"format":"raw","label":"to","path":"to","signature":"3045022100af1ae8906e120f6783c5fb2518696ca60332ae1128de9b2478ab45c789bb05650220417ec699e96bab47c26d8d37b2feabac7810946d5de7987dcf5af3c95e04ec73"},{"format":"raw","label":"profile_id","path":"profile_id","signature":"3045022100d339951d42fd3c3b90c389dc703af3093bd3fd16dee7f9f4239192f2b44f5cfe022054426b5ca70bc65e1703026c12b5dbf8d2e79928c9aa478f693388eaae1edb26"},{"format":"raw","label":"profile_id_pointed","path":"profile_id_pointed","signature":"304402204eeccfddfa2f9bf4dd9b9e1db1a9c91cc2f7bf22115c6b74676f2bfc53d820c802200bf3068effc45575b8b08fb809329a9c14769b23acb0b55012dd83df19533ec5"},{"format":"raw","label":"pubid_pointed","path":"pubid_pointed","signature":"3044022010452fa9f43371405fd88f66eeb50ddd95dbef93180ad5b147f9b368866d4034022012e23a825920c903a5fcb18db53c664a943e442cf79258536bcb576d4c839416"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f2d2c19e66c050722ce388552dc6bed2ed5487f7cf4128054d3d4b7f":{"contractName":{"label":"SetProfileMetadataURI","signature":"3044022037f24dc90ef82099d00622929b8ed180ff73cc92998160d234060f5e74f76cf6022068bff3003c656eec1aa2c5f7719e9d42993f64e46b72663257ecba783673182b"},"fields":[{"format":"raw","label":"profileId","path":"profileId","signature":"30450221008ed21c3944a3ef93c8cf1db94deec88844a51d6404933fbad3b72f0dc8f4e5e902200f5fe8234ae704a754ca5f90cd54329bb808b5f4e85cf37e0c7bae2c1965763d"},{"format":"raw","label":"metadataURI","path":"metadataURI","signature":"304402205ac0d9389e90ccdba173fd9b5bc206ff7afe5f94aa97e6be83542e74c1883030022072ca6572f6b91d65f00976c46aa9ab24cfb87773da72c6bd5df007c34adac3d6"},{"format":"raw","label":"nonce","path":"nonce","signature":"3045022100cb681a895a6b4fc2e0fb4648ee3fb398134b4cc8dfa8387e04616bf87261ee270220067b327a33ab2c24efd989d15694e6066597c6070179fb33199dd9d203b28a30"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f48d14ae14ca8663b397fafc56d53833a2eea3e8a6450961e58f274a":{"contractName":{"label":"Post","signature":"304402204c6f0130681c8166f9f89c73ec30aa48d5cbea6d3f65e222d1c27feaf3f303a202200f138d210c299d234c527eff77064b37883f57ef8263942c871101b49ffe136c"},"fields":[{"format":"raw","label":"Profile Id","path":"profileId","signature":"3045022100ef075942ff80ffd16ab5aee79178e68d453573937830cb309649d5bcbe07ee61022055d84b6b081ce5aa88d5f89db163b87e617d181ae6f8b859d70f06026bb19954"},{"format":"raw","label":"Post URI","path":"contentURI","signature":"3045022100aa09a0f04edac5f9241f187dfde4b0370091b3ba0bbbba37daec73246ee1b7ed0220265d8c8242e9cfb645ce0a18217ddab8b1c312aa513c9af1662c8b91b72920e3"},{"format":"raw","label":"nonce","path":"nonce","signature":"3045022100ac7a9acf7f5008efc137f632f5603e36541f1347a8cf2aeeafee7ce98f4f32e302202cbd3fbf86bdd772bb646febd6b5fa426dead4a840ff24e77d5fed9a7ea26d4b"}]},"137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:fa764abeb889b33c2dd4e1396f1316d8cf49e87d0b5b341ced7b7f04":{"contractName":{"label":"Set Follow Module","signature":"30450221008d7d0ecaa7ae3d5c4d6ab9119e14ed55962722252addf490298fe3be29c8fc95022056f88897d6a0da3b495275071b8ca3a32f6d9b47b4f420d9bd2a1c2229b807a0"},"fields":[{"format":"raw","label":"profileId","path":"profileId","signature":"304402200a819ea2e5f20eeee5787138f2a7b32f3f237b48a014d049be742b52967c2d5902204cc6a95c24c2436b4e22a34ae5d3ad68d995ca9998f3a073056af98e8fb6dd0b"},{"format":"raw","label":"followModule","path":"followModule","signature":"3044022050576104c1505e117d9acb5e71cdb28c26b34b1cf2bd91cf617a47a838a4d4a60220034626740cf27f0a9c2d4f3e6ce53e0d612cc2c8e48cd5999616e2817cb57022"},{"format":"raw","label":"nonce","path":"nonce","signature":"3045022100946b8bcb1606ecaa3786b80c7dcf08f8c0343ec2a756c48408d617f4b341fd9402200375a2e3c3be53320ffddf1caaed5fd4c12b61cb25e35afc94cdc29c253dc316"}]},"137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3":{"contractName":{"label":"AugustusRFQ ERC20 order","signature":"3045022100a887a8b2f40695509ac6e040feb1a4a088fee459fd7e76cb137ea7c06b0a0b930220617b514271c05679e7ce04860ffca703ad2a21f4a45cce34b40e38624cf7ec13"},"fields":[{"format":"raw","label":"Nonce and metadata","path":"nonceAndMeta","signature":"30450221009fcaf300fef36d00f64c3d5e92991e67fd93862f8eddba0b8472568b5c66e38d02203a26f3aad1c0cf6638dea961f8f5e4ba5f72272bc7f1e33afac897a3b5b51604"},{"format":"raw","label":"Expiration time","path":"expiry","signature":"3045022100984f166ee1744b4b69e24ed1e49fbaf43a24e82dd5b7d2103cf8ca854ff49e0a0220326ab17879b902521fa032a89c5c984e52bf3e31c8336cd67a1ce198d7c36e2d"},{"format":"raw","label":"Maker asset address","path":"makerAsset","signature":"3045022100f4ec14863e0512804fc69d82fe17bf576340ae8005d0c48520cefb3254b102f702205fea57ba3919071157ff3ee0c93472e936f1dc079bcb0c447bb87ad86e505ea2"},{"format":"raw","label":"Taker asset address","path":"takerAsset","signature":"3045022100957771ad2eced04af9750c1df10cc5b5b913fd3f9fe83408baa766573ed34221022055a1ba30b3a8895a011719ac54adaf7bfd24fe2c5041a90348097f719bed0dc7"},{"format":"raw","label":"Maker address","path":"maker","signature":"3045022100f25edb42b652d5c645de567c201a1e6a64b0d6b23274cde08046d955cd2573860220129bbded4e33150cc38b93033b2d70d5fa141066f1ed7c603b5515ab8cdb2fca"},{"format":"raw","label":"Taker address","path":"taker","signature":"3045022100c8790938f88557986c769102d31603849dc8c560cc03a45db99ddc90d69306690220295950348fffc22fbb898d75e768edb1edcb1c8772cc3518ff9687e957a87e50"},{"format":"raw","label":"Maker amount","path":"makerAmount","signature":"3045022100b5e1dc4e5f69fd80611a4f5c7d306ac6aca4a2a2103515d761557e532884ca8702204b86dd5c323345242f1c1b263ba035932a10a5b0eeaddbc79fa10db27aa9d7d4"},{"format":"raw","label":"Taker amount","path":"takerAmount","signature":"3045022100bd1de29559311612a7d0bca3c61b10d9ddf0753be7c372ebb95e0b69b674c01102207d685aa2b0a2309ad094a5fc8e09210681781f9a4294e4c7973d0ecf1adabcbd"}]},"137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623":{"contractName":{"label":"AugustusRFQ NFT order","signature":"3045022100b9798555ab901ed3cefcdec4aabd9418f3561fba299833ceadbf9d3043a996a7022037388e3956ce02764088733d92384fb4e669754b037e8a913995d761ac0d5cdf"},"fields":[{"format":"raw","label":"Nonce and metadata","path":"nonceAndMeta","signature":"3045022100b57c5877ce124196316dde0e2fb0f18258521cc2c7c27405bde78008bca27d8d02202053d4696b28b40fd1a16e7a179020c7d633e4548da0bd92f9442c24da12d510"},{"format":"raw","label":"Expiration time","path":"expiry","signature":"3045022100b35db3057953f7b747d4423f688d8a3fb3101729f37af65c4ac4fc9a7ee8fb8d022033f4d70422b437593f00af75828ff067f914f825bd3075f8462080bf4e0f9ae0"},{"format":"raw","label":"Maker asset encoded","path":"makerAsset","signature":"3045022100e2e0f280d333692a776343669d6f17dac3ded8935d5875964d5ac6b05bb093f80220589afeaf7a7baf3b5964b439111d07deafe25be8a32b43640a2cc073a7257aa6"},{"format":"raw","label":"Maker asset NFT ID","path":"makerAssetId","signature":"304302201e35015cc3bbd6ca28bd57eb970cf1eb05826a4988c1238e951574f8804f28c2021f0cae62ed8199b725a39e714e60c92fe522ac7992c3dc1a27866f749547de89"},{"format":"raw","label":"Taker asset encoded","path":"takerAsset","signature":"304502210094d2c3de8a61bf940dc5c8132070ee0566ab6d0059f1eff5aec3ba1ec04740a202200fb41470f2693427466a9ce580d5c9ff12243f848351c7aa2ac070c1618896e2"},{"format":"raw","label":"Taker asset NFT ID","path":"takerAssetId","signature":"3045022100f9b55eafa8d519298960b040f36a7479ace9d43b677d243d22c3194147dfa033022025f7a2962e342ee1572f814cd8b8cba1382deb20054475ba9df9dd321bc9fcc7"},{"format":"raw","label":"Maker address","path":"maker","signature":"304402201aa4061287e14289ff1c4fdffe8ddd811775aae4bb6577970ebb87735102a5ba02207d9c89254e9698a7aff849a87c2a163ce9793212a5fe3745e446393c6a71ec46"},{"format":"raw","label":"Taker address","path":"taker","signature":"304402207ca92ed4b465b4fe1d4b2dd65561165a70b54c8dd132dcf15031c799c8ab22fe022041d7bd664003c62e949cdb0ed09a744ac6adce7d6e676e4de22437a830edcf74"},{"format":"raw","label":"Maker amount","path":"makerAmount","signature":"3044022038901c22513acf13bac39f553c763d26ee32c3e6e215ca3cb69da0274ca901c702204fce716fc91f3cb7ac7da446bd3432020d002c5a62c48d199d7b4379fe93c9f1"},{"format":"raw","label":"Taker amount","path":"takerAmount","signature":"304402203361ee1439f545c9664035be586925b2fb4878de9dbcdc7a519b5eb95a44ca6e02205f905942febcf5342577b5af149ea4deea5e6d0e1ae17356bb1d0628d8ccf8ff"}]},"137:0x27f8d03b3a2196956ed754badc28d73be8830a6e:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Aave Matic Market DAI transfers","signature":"304402200ac5ab94c126dde729e0159a1eed721dc3caa04f908312aa74c66af16004fc7602201aea814d65a8fa0554432cde24c032faac6a773fc00cd4c9db5a0e7f22d7c99c"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"3045022100aee488b860fd511c87449f2a833590a501850564f4613eb5cf03466303653f4002204c4ed53c89bb8fcc4a065a3bebc2c70c3fbca495edfa74c7f76b4e7297229713"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"30450221009514d69c48b51d1524fcdd437abf7db5144750ea606f48e9577a2d578bf4fb1f022020f9ef88c2ef73eb31bc05e4082030473ffb7b466770fc853736bfc82fb44aae"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"30440220732e37dab1ace5d04362dd98df8ecd47932b1b63dc5370da6a9e29e695d2a41902200313fe832be4e63fb12a3567dc2836fc2d02cf38dbafd7ca2d92a0a03be8e9c3"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100f941565f7d02add0ef8222014aa5005c8c0ac9de29865a4a66698db61c361f6c02205137eb64f68fa35067bac6902f2a670bd335cc7db07e0f2f41e2f50bdba2d9d7"}]},"137:0x28424507fefb6f7f8e9d3860f56504e4e5f5f390:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099":{"contractName":{"label":"Permit Aave Matic Market WETH transfers","signature":"3045022100d82c58e57d3d4040972e93cd45dfde23f59291603f0f6e77911f4d25210e532102200f1500ebf2516f1051190a05641219627ff2ac78aaeea2f67d723990089a0890"},"fields":[{"format":"raw","label":"From","path":"owner","signature":"304402200fd95d9d23b7f6e91d3bdeba89da05b66391f8883b9f7f66b30cf645b6baf5c802202ca600bd52e3ed1cd580713ee3d6f0b96d47e09d195979ac4b023ad8d06bf16a"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"30440220720a40e847932e9d428749631d4086ab7b3986473c98ec54e09bd116717d3ee502200c4f39dee8066fa918f4e364d3e3c7331fb2ef495bc01cd24138b8df6b49bd44"},{"coin_ref":255,"format":"amount","label":"Amount allowance","path":"value","signature":"3045022100dd280077c93088f7ba943099394deb2de7b6fa2753ac0fb91d7d0fa63a0ba9b702207be01299ab0b365b8b3950042840f56b0def6fdea0732b55195d897af08b31f2"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3044022042c6c68346231ab45807c1cef0395bc6b13eea68049fa33f4fe5f7511c4344e602201caca117a547ce09e1c80fa16ae66c52dc6c2cf0ca5aafe2f79f630c1e945f62"}]},"137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b":{"contractName":{"label":"Lazy Mint ERC-721","signature":"3045022100977ad189fb3f8c809caef784ca6c66fcda1c98274d92219b07416e43f43187af022051b069af307aef8d7b3b3aaf815eaf0e7e91c55f994616f3ea88293dd69f217c"},"fields":[{"format":"raw","label":"Token ID","path":"tokenId","signature":"30440220403fc14ad30f3f3ea597f75d88371c83ef2e10130a5143faeda87dc507fb9aa2022056202bc01b283e0f625b82c73db84ca3f17eef6d9eea89709aa0a88eae17096c"},{"format":"raw","label":"Token URI","path":"tokenURI","signature":"3045022100ce280997a6b39acd5dc3522401c205eb4719b4b43e7e673958f1c7b7b97a8f59022042eb6a70f1f45c771a697eb85b71ba58acc8074ac436d27840ec1325423d7e0c"},{"format":"raw","label":"Creator account address","path":"creators.[].account","signature":"3045022100f072042cace3b6ce605bbf0db7c3941928cb1ac5b6011bf47e04d76f57bbf392022054eb24e12319d88144a5e4d15a22271f2f1285d51f1b7f48bfc46ff1724c1741"},{"format":"raw","label":"Creator value (10000 = 100%)","path":"creators.[].value","signature":"3045022100b5517383a1f9f7281859e1e3ebcc588770ac08fe7961d83ebff3ff922674fa3302204c490c86d4d987875aa55c089a6c8bab4414a742bc7df19f67261a319d4d8c17"},{"format":"raw","label":"Royalties account address","path":"royalties.[].account","signature":"304402203660c0f0da24c89206e992e46c399d75d4e0981dd86bc145f4ed0d0ef469b47402200948f415f220225eaa67fb03749b2d5ea1ca8dfa76eda34d15c8f95746e30bd4"},{"format":"raw","label":"Royalties value (10000 = 100%)","path":"royalties.[].value","signature":"30440220747d86766a08b5bf78182dadf5ace3813cb8190266e5d1a72f2d94a387fd6ba5022006c69b8171a47fa15ef906fac4546856dd9467a8e1036d89e323614e64d29715"}]},"137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8":{"contractName":{"label":"Meta Transaction","signature":"304402203e256b1407f82dbe395bee10e34bf5b995c3fa91737172b58fb41bcf8e006eea0220046543fdb21b8f65e050b57081915c083fab2abc1cdd663ce53b1c792dbfdfb2"},"fields":[{"format":"raw","label":"User Address","path":"from","signature":"304402204576c4999dd6a70df131dfd032667a42695d333a07b3599ec6d72843c54b48b502202cf424d057bffceadbbcd9023b2241bab6d2faf8b7324fbdf87f5daa9789fe38"},{"format":"raw","label":"Meta Transaction Nonce","path":"nonce","signature":"3045022100e094b23ebe8102c3c1aa5f802c33ed56f48bc94f6446b289ce358ea60ac375c0022013255aba7dc03fcfe30c7eacdf7a14ad0c51f389ddd51f7c4ba6e8d9bbf3dbb7"}]},"137:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b":{"contractName":{"label":"List Order","signature":"30450221008b4ee6f1b492d19243afc4715d1f0cd9bf79a1aeb61fbf58f0e1323bce9dbc99022001a8a548f081eba23f33f03e20f478c33bd264efb3d8bfa16ce96e0b69ad5428"},"fields":[{"format":"raw","label":"Order maker address","path":"maker","signature":"3045022100f9851e9dfd9706740307e7829705b3e049390755e36b26a059f28d6bb47ac949022029a4efc35a2264fbe8f88eee1f83c430fb5e96bbf55e6deb31a60826cb0203b3"},{"format":"raw","label":"Order make asset value","path":"makeAsset.value","signature":"304402203bf13f37325f60973b02d5433857676ce135f94011047bbfdd2b97c30db1a069022029f409c7689891c222cdec4e63d143938ff73a4f6cffb0c5d56228d572d25fc2"},{"format":"raw","label":"Order taker address","path":"taker","signature":"3045022100bcdc72ba9f16a3ac3b73ad04f445a60958a7ea644511d9b917c5ae52be52c76b02206a68b66cc24c79e45687c07a201f7e910444a66a657c615c5854ac7065b0c6fc"},{"format":"raw","label":"Order take asset value","path":"takeAsset.value","signature":"3045022100c23622dc64172dfedc8fae04d5fa24e25f598bea659e703839dccf19736ba13a02207554a945d0e9c2816860ec7a6c4aab9088fb58f5316c1007d82f0add61693954"},{"format":"raw","label":"Order start time","path":"start","signature":"304402200cfe7613b90190a2c4dafaa661e5778a7756444e593a8e16105da315231df264022025e1daecd1752763decb7c51389a5eb97037536ecea3781e70ab428d75e1278b"},{"format":"raw","label":"Order end time","path":"end","signature":"3045022100d0047bfc769190c5a173c8bdf79a2fdef008f0674ac04f3a7fe100553f41dafc022030e7ef0a1dd8f6f4131da237f6c33a331add85dd747f7f9749806759767d0880"}]},"137:0x7f19564c35c681099c0c857a7141836cf7edaa53:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8":{"contractName":{"label":"Meta Transaction","signature":"3045022100a2f95042a915f8ae76b54b1f012271a44356484ea6d4963b81e6806ed6fe80500220564155498a275d3fe5eec595fad3858cb2d7fa85178b98208d09a886a1485257"},"fields":[{"format":"raw","label":"User Address","path":"from","signature":"3044022051a39f6c809110faf6aa95fde98315c0c2b2cac34c31d927c058a2c0ebc158cd02206ccfac20b0327ac6e2ca08d5d53aef189b2bbe8bc010ae9002b25edcf43c2f06"},{"format":"raw","label":"Meta Transaction Nonce","path":"nonce","signature":"3045022100c1e15f064b9cf3d8cb2c6b297318c543066a12868419121c7062ccb7fb2f619b02202c3079f47124d6a25178d4b8431acd0bb08f44e9a0ec302e71bb4cc9b49a05a9"}]},"137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9":{"contractName":{"label":"Lazy Mint ERC-1155","signature":"3045022100b85f48fd591345542f9e2271b4f33e71287a703eda9f9f7b54458dea60fb59fa0220661f4281eff16352e5e8db92a254b6b74ac0f20e3d41c9042a3c7c9f7397bd08"},"fields":[{"format":"raw","label":"Token ID","path":"tokenId","signature":"304402203dfd604170efb9379c36e17439f15f441b437aecf2d9abd0dc8b0c757c15d1fa022007fde07992c2b3797e7aacb7309cb60d494856d7a9d5866981a8948abf4d6a9c"},{"format":"raw","label":"Token URI","path":"tokenURI","signature":"3045022100a334814c15bfe1474472e56201aa83aa7016648b2a92aa2ae7c4d86b8a412eaf0220416654d59af289a253a96cbe4f5c9b75c2129d603d94cb3c7966cbea682f542a"},{"format":"raw","label":"Token Supply","path":"supply","signature":"3045022100a180585fc34f26b83b50c1d7609a0623b85b76267e393bf2871f41790487bf5902206c296108c56f2a1557a66a04f05bbcd7f0e0e0cd7a7a9764783673c0cda21d1f"},{"format":"raw","label":"Creator account address","path":"creators.[].account","signature":"304402200a32f52a36f61e3b62af734ceea6e02ebf44e9bbafccb92b2570b7ae9666638e02205e8a0ee1634919bab75369b611257e17c12cf379a4b83e3da2089de13863baa0"},{"format":"raw","label":"Creator value (10000 = 100%)","path":"creators.[].value","signature":"304502210092c988b7806250d99ca2760167a0c72f4c7e20f8f9174c519421bba8adc03c0a022032f33a3843e31b8ad17991e8eb3e3b922c5c2b9570d930fa9456b6f59b8974d3"},{"format":"raw","label":"Royalties account address","path":"royalties.[].account","signature":"304502210081e5ed5701d2bb497c4b1cadd0ca61220b1078357f7e3ace908c01fcfcd3abad02203b03cb75eeabcd49777362466e3af9a461ad39059238748ed7d902f988db3318"},{"format":"raw","label":"Royalties value (10000 = 100%)","path":"royalties.[].value","signature":"3045022100cc555652ef532386da9ad2405536aaa7adbe4cdac73ae9b2a8d4b0659eb4013a0220030799c1a813bef66c6395c7305a1f98e3bfc0bd045917d63bf7bd24e09fbebf"}]},"137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8":{"contractName":{"label":"Meta Transaction","signature":"304402202e2b7810798bb8d8094ff46e47ae09c820b374420984f5c9845139f7995b5266022050244aa907e45d7ff4ffc0b383262c4425d32aee4190bfc09fff359163268b73"},"fields":[{"format":"raw","label":"User Address","path":"from","signature":"3045022100da2c6c45ce4014375aec27ce7dfc470a066a53a3ba812da7f4fac641fc48334502202ce049c05a76e19fc4195a323464383f3eca62f33a435ad5807716af1a83af4e"},{"format":"raw","label":"Meta Transaction Nonce","path":"nonce","signature":"304402207b53dc30da4e7360a2deb22ab0ee2ddca9dda1c807095a57751dc395d7d503c602200f464f277a17558cab3b891fe8d4fb232b5783f26f6813da77ceeba527bbe1c5"}]},"137:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3045022100d259cbf0306cda1fbd842725394b29020aaa05159884cdff8c256ad87e6d55ea02205e5c7bbbbc030c2e1362e41185312aa8140802495fed2325031da2af79dde7a4"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"3044022078ff4404d1d554e4d48af1b36b116389dfc385ed212c5ae51cf0218ea7f2aeb20220420d390f654485f830075770a5383f1f79d6557f5c9553e9006e289d4b1ac225"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"3045022100f3d322f11e7ed81304baaee25ca2991ad339be783a3f5ff60b0fad3edad3291002201a396f507b590d56d8af66999fafdfc6aaadc75e0e2c9d558b90d5320bdb21a8"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402207d9c68450fd568c07e5b5ecffe29747c64d247cc1ccc8cce83d4112d029317d202206c631ddb8ea90ad75aa1339f2e966b72193758615f303af6c8f94c733f6e877c"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"3045022100e847166e60f851e3c8d1f44139811898ccd0d3a03aed6c77f8c3993813f479d2022031fe6b6a574b56c5104003cf07900d11ffaf303dc016da4c1c3d184663da8f6a"}]},"137:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"3044022056450131868b314ca4a0644588bbef0223365b771c7d530c5d522216c3f6acaa0220648f89fca96da29e3049ab69fc3d5a97e42a749c60b1cb78daa3acfacbe577f3"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402203502b372181142404d4f77015f2fdffda0a4696039b5b7a8120e7692878a9fa902201d5731834b8dcdb805a1201caeadcf284117cc5613db44c401475641263dcbfb"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100d1f9af62ebf0ed23eb66251b321b1342516bfd883bb2464c75ae355566bb08a3022019fddbc0be194b2e5632a1d2e6fb1d097879c7281cf6a57930dbfd5aeda8dc23"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"304402206f791744834c59c69e50a9eed98aa403456e51ee2a13cc5848b1b09b3353230a022070d350d50175c0ee993b575834ad3520ec223180226becdf7b9a6abb31852d36"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3045022100e874350c7e10e0f109e84b13aac6fdf991222b32653956e5cba9bb91a4ebac77022049a029fc01051d7548b64e4137542ce992d24a25716a05e6e35f588a3cebae52"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"3045022100c44a39bac7d2b431e75bbd6ecf2b9af58422fa29abe6cac5874cf8964b388a2702206a73faa7534aaca6a8c1b0420b37b60d2412c2393540fa75105d78ae144da322"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"30440220431f8d9a182a7d233d23b6c7279c86032a0f67ca12a3e60e8dd1fee0dcfc896202205af02a1dcd72dc193e87e73bf35dcc5aea1adf4c05da0404dd287951188bf193"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100c5f09dbe6709756a1fda5e5f2829cd4c88c2a8a12112ecb2db1a6fd69b48941102202d1a58cf6b072a8b75527f2e7f1bf3b6500d2cd22c44eb09516eebbd4b5bbbfb"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e8ad0d17420a31ede8ea9a1bcf1b4a74602016fce59f1d2f448268356bca1102022035f7a6e24c73611965e3a9424403c3c56f65bce994761d130f0205ddaf859ab0"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100abd36c357f546a3557b5d58dddfca7bc64ea65d936836d8f487b1388b0f81256022060b1b1f1ba88bb4dc27fd58c57fcbb6adc22d058be33d3b764c3d0145c0ae4bb"}]},"137:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"3045022100f3a91aadffab51d26e5dded9b00d0a447eb3efefc3aaeff52805b3f42636de5502202766d3e6a86eaf5a28968bdcc71ae55f35bc4a88d816223094397976a6f23cdd"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402207518cd346517944c31b81019f3af5dab9945c074a0b1ecff4af822a5d9e7f98b0220053975c4e589dd3594f4e584306b7f3f6f79a356af1eb6c740d1cd3b880125a5"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100f87e20d6e92c47dc6cb0aa28a8f52bcc76e3dcb5705d5a2fca52cb536a8ce70e022003397f062033cea8cbe9ba39ae56d3349cc467fcd5b3a3bcbddb132d70a2d031"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3044022075e2bf8a4f9d5aca6ead3e75d78c2d2110f1ebbf1cdfca155cac867b4894b21a0220630057ba7e75e7a5c899460b34dba993f4611449c4a4ad80dc697cb082f8dcf7"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"3045022100c6de0438134c17094ff894e513d8b6d13367a5d7d69a22f1a19d654c0d8e28960220694b1d2b68cc6627140763861bb48184b10da001a81232cd33acba756f9e9e37"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"3045022100af5b8bac790473b173593ecb3f1d2c0b8d0fbd31e5937659fd2cef48fa46fd6a022000a4db89ea467ea3f52b203ee91a6147a73d760f2fab43f1f7c05553cc1f7e68"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402206eb54ec964fa667fb6a130710c6770e84fda83078c2a877ede8d817d00329ea8022030970ebe404e2f4739359e44a1581ab89b391122a91e58b225b007235454c173"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3044022009cf5c5c08e8e8022a7ff466218156653ae123dba81277b5e6c1bc7f0615dc5e022053a53758115bbec371aeaf5b1ed209d9c013299cc81227a76c926c5a84c46c7c"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100e3970afb8a471b9fc6834332077fae22791cc45451da4180f48ec29f97eb259102201c57886609f9763e18a3de24e3a310dd0616f2333c47bc8ccc5dd35923e677ff"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"30440220019cfd3a9736c5377aff92d01df3379b1e76c48e9b7dd3e6b21e54b233b34d5f02201a998d97ba275284ef17e469e9c8b5cf7b6060a606c15f278f315c73ec08c71e"}]},"137:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3044022074d08efc6e2defb1cdd7dbbf0ce076cad0fdadff5f64cf9ee03b2a601cc1564d022057d1c94befc8cae1c631e601b7079a473e0a0d5e65b7967018caead0bda47d14"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"30440220214343c3d61640d1060c8c77e87a4f1c2049a42608ac27e1677aafc959f2683c02207d097d9336cd21cf842e1105dbfe19f10e15089cb2b43e456a7812e742435be1"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3044022052e6a068616058c0cdeecd44682e350cf41b0fa6db92be2eced993fdcddb0f3402206f89634895f8ccbe811e5fd51a8125bcd90f9386c800ec499f661aa28f6aa414"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"30450221009129b2a6422cbeb5a169a705ee92c21ae8e45cee59b09aae969236aa101b3d0702202ec7a373f46a16a32ce42966d61aeb1d09458ca562af42f372b124fb98ef9546"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"304402207494724e8c616b2e066544d3e742168e06e8d6e84c1cf1182e32f30a92aa079a0220440a6b555acafa9fe13ce13c63d33fb9e79156eaac9605f6ec22bf68d804e929"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"304402202339daa422491d2fb2efc17a223e6d191b431069250f4240b9b804f8dca2c6e00220682f54d39eda33b5237950a7e39b4e4ba4f501f071e700479e5768bbaa8281ef"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3044022043c32d3e1b5b644799aa8c8a5813cecb40956c282c227c87b6d692a1cef5e7f00220077a6e81cece0f12a9309918028060eb03842d3742ce65e8b364819bd1051650"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"304402203b079692e3c22218c0db1e14bfb3158901d89d466716f42aecd1737cd7857221022016ad9291aaf0a3388e4f21f6068d6610d560905175826e5b6fddd34b5b06e40c"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022079391bb740cf2e4a878e31cbf4c41940c5b312985245079aa3ea2ada4cb2862c022032c106c5981577447738eefa31216c734fb0c908a817b545aa7be529b1c29734"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100f593c88770547000c0e3aa6502528b5b756d75b4ae274da729cb5a1563d2c91b0220121d0ab4f6ae9d6583ddbf21be1735e45a56da217f3e278a766d73c593931e23"}]},"80001:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3":{"contractName":{"label":"Permit2","signature":"3044022015e91522c1c70a6d7f7b6fba1585ed3822af2f245f54805669d5897f8e8804c302204ac0b96383ec1fa0157be86de551cb9972600d6f58774af45194b708d61cc4b0"},"fields":[{"coin_ref":0,"format":"token","label":"Amount allowance","path":"details.token","signature":"304402203bf00c48a42f8216f513ebe4eaafc0bfe2fd64b0f9e9921e682c3aa4775475de02202e387775036517cc8b174cecd658786893857d2035fca136e3117e0f0422c38a"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"details.amount","signature":"3045022100c75e1909af9896d74065ca0a0a328a108d5cb2c3804b667a82b52d65621491220220220496cad037e2971aefd935b7abdf4b9d6f3f6eb0e997ea99a2d7118c8a11bb"},{"format":"raw","label":"Approve to spender","path":"spender","signature":"3045022100c19dd8af5d23240c2437f7eb3a082fc1c8ae9195c178bdafa119d370ff33499802201d67589fae70268a7080f09c162bb1777bba7281523d34c37dfcb496e3cda151"},{"format":"datetime","label":"Approval expire","path":"details.expiration","signature":"3045022100fd3a08902749a23ac5694d1d1499f11e9d52c723f286c63f0c1c11c01a9bff02022038efb165f44ad8e4cfdd722e82f7bdff6379daf1f7db55925f4ee2adbbc326d1"}]},"80001:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d":{"contractName":{"label":"UniswapX Limit Order","signature":"30450221009d336e41e39830bc5fb01567468404ca6371f13c75e8102647a77fcd7e1327a10220696e5f853b1fa5a19d6caf30859cd4e17981f2e0b34755e1e1e588c440998f38"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304402205cbae5501a5041672f937fccf36d87d19ba998b90a61ae26d3c4b4282551414e022037bcc80671ada5e3076281ebc6de328331846968571146f002708245da890a81"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"304402206dce9b3a993e5d887560c0ad2437595d98820a3685a8de482326267d1547a36702205486cc318b4655787841abe60147978f00e29b1a26f8f7d0b3df7a41ad49e0cb"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3045022100eceeea5637fb8c76437a9480346a458eb0e89c62b04f97a5736d69c67289cab302204fb4474ca0222732b3f8bc4971319d064a199909646ab5285ca9631c9a2a281d"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"304402205d52a11d48c59545bc8bf0a42796167baefc81cc6274e7ae1edd0cc8e372339f02207c2ad7baf32fdd87480af127bc69233d756f8b3cae5d8f0b9521ad9db6737a70"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputAmount","signature":"30440220527c20e05736e60b0e10c706a467eb62ff408ef417e28cc60b6ebd3263c97c7c0220734e646d8a62ec28fa4a461dc6d79d6986f67c934c608c4b6e787edefe483447"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402204a899d971e708e9f4be3e7044b3ccc0407babbdf35dbadd6d912a6bd691656df02201e4a7d528901ff5dc58a812f8e6c8b1ad08aa16e42336a2e682111be13d5b47d"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].amount","signature":"3045022100c77b95a129d17f1c163a54db3260cc6aee8d9a686b9c9686d615a7e23390d7cd02203bc102e5e05182501adfde070fd6caf75cb26292c242846131512314f2a49219"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"30440220428d1a58e563f844783b7ccd1ad5e5fde891c7df3c68a9462c16c2473cccf6f502203102a61a14c3cff284054fe2c0be781b5a1fd94fb41a27fb0f4d22c940a4f166"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3044022063f35c92c7b24bd200305ac1ece2ea39ee4624d266821b6f8864e2a0762425c102204b33c73e96608696f491007b51d379a80eee12be2d4fe37f0525d939b9b36d76"}]},"80001:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5":{"contractName":{"label":"UniswapX Exclusive Dutch Order","signature":"30450221008e02c726bf26cf868c71259a42b689a44f9831959d0ddcc5ac383c84bb0bbff10220703c3f4703639b9419171a58e089c7e51ee700aac154b160991b2085a90f2170"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"30450221008129174f55689c87a4ab3bc85460c2ad3ba932bcd17c320c838f49ecbc356bcf02200fbfa2cd5d7cf2adc1d4fe510915ca868c0a561b4eb998f353e055638c424add"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3045022100dc616179eddf37f9e79ed4e05ac6cabaf83a7eb4ed288e0fe578995f3cb742a50220627ef76253950173d13a4e01277177d9c5db53c8752311815efa5541530f923a"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3044022038458eb3dc5db7c501cf4f7cbb32604e762d78335c453728f492ae166e9f0476022011e100d0785e9f813c146f29c1681d50f0ba66ccee3c4a942355245fb9cdc4eb"},{"coin_ref":1,"format":"token","label":"To swap","path":"witness.inputToken","signature":"304402204f0dd86ebece12e4956669e089238c3613d606ab2917f23e1655d32153ff3ff102202cabfb60a7225bb9855fd414431b8be2b62a459d9b8350ef5417a5e89d1744f9"},{"coin_ref":1,"format":"amount","label":"To swap","path":"witness.inputStartAmount","signature":"30450221009735bf7c8eaa58fdc5293088a4d09be748ae7b56f3f87b7f9a471f2b8a52a7b802204afaaab811fcdfcca0f7bc377ca37b1d4b34172ef7de6d858dd2b3f8f2428166"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"304402206e2786d2a7c562a6827a8592815e65d9d05361a1ec93960ec551567fed92a63b0220453ed621d94f50995f5dcf643b43c5578bc7113ef6de28a3a6b0a339b5fb7820"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"3045022100f325ca8bdb8cde9ab52819c8a42cbf4a56fc7c76c1ce360fce9a9cec9dabbc6f02201ebfec336a311bc0c048563dbb7f6ab4813c74dcd6e523adcf7daa36f960e3da"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3045022100f9ea4f723651a6330c8d7b0f86b576eaf5361f3195399f2a4ac4c491f57af19302202d568abd40baba609d09770725cc8082aff931e4479c088c5fe4a8955a7bf0f7"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100e713e020ebd5de595572e1c5721f5ae36ef78b4d5550d0788ed8dd82043cdad702200dc1704439c79f7fce6aad713eb20247e645f02578b65e1309be2e051c833e61"}]},"80001:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf":{"contractName":{"label":"UniswapX Dutch Order","signature":"3045022100aaf3d94f2a63c782c0c1363827ad6516e5c5ed77350bde5d1dbdde75a302fb1c02201fe0dbafcd6fe5d4207c5db5b9e9d5e6e9022fcd8ac2d4d0c5c94d95923b692d"},"fields":[{"format":"raw","label":"Approve to spender","path":"spender","signature":"304502210097c9fc26409515773823ebbace587b2c040f78db00869eae59edd5f56a88e72802207eec9db2e4a0833ffe59a7844315e17fbd61f0eb8765fc8d949f0ec6ae6b396b"},{"coin_ref":0,"format":"token","label":"Amount allowance","path":"permitted.token","signature":"3044022050e824afee2c1e3b5a79fbdc6ecca81c649d1eced263aeabc9ff38fa4a30ece2022069fd446f1056048e81d44a20d98958c2b5074595e4528b647fa83aa6428eca89"},{"coin_ref":0,"format":"amount","label":"Amount allowance","path":"permitted.amount","signature":"3045022100c0fac768fa1a668435aef6337f8c0c71938b36e769adb3046dff95c71232ff6402202514823424f641eb5673d78888a47a7fc80212f9c602a449a62cb93b6fe22e4b"},{"coin_ref":1,"format":"token","label":"Spend max","path":"witness.inputToken","signature":"304402205855411ccb0b298775bc51a4f43e375d3bda7e0c5f6c40a22eb8dfedcfc3f0fc02200f1771c08f606df2b07da9d60a7af243003d941a2820e81f54b2d9f53ee7b8c7"},{"coin_ref":1,"format":"amount","label":"Spend max","path":"witness.inputStartAmount","signature":"3044022042f7e1ac955fe87fefab3183811df03cb9a0631458e396c3cb45c1b69f35b77b022049350af4b190b8a7bfc8e1fcf67b09fc5591d1506f53604aea71852a3a72e111"},{"format":"raw","label":"Tokens to receive","path":"witness.outputs.[].token","signature":"3045022100ae64e162a06dae806c8d9d3bab0b4db4414adcb9319d7c619c5a39dfbb705f44022038f88abc2a18f8dcf58708a0818df060b27c35484185100068e0b1c579ceebea"},{"format":"raw","label":"Minimum amounts to receive","path":"witness.outputs.[].endAmount","signature":"30440220682d1d814608a2d680aad01bd2b7b7a02a413617339488f2607333cbc1978af0022028412797455cb32181b5e29e9b4f7680b4334f8a7c02aa0f18de0b48d139ceac"},{"format":"raw","label":"On Addresses","path":"witness.outputs.[].recipient","signature":"3044022031fb26b688bdf77b431d294f406f7a2895354ce5ee8276d85a1f12e05234d0bd022021f6f9c04c05da8aca0fd552278384a2f87b16166028dad951e6c281c5cfca0c"},{"format":"datetime","label":"Approval expire","path":"deadline","signature":"3045022100c8e30fe710449e606a503369fd9f6ac495b8b7a9c2624bcc7abd3b0317075fac022058ba40814fd3cb590aad6fb8dc9e6d534ce65e97bc96d7ffc5e23230e7c005d7"}]}}');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/eip712_v2-hash.json
var eip712_v2_hash_namespaceObject = "\"a9e3d509bb5b12a3b25cedc21fc0d845\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/eip712_v2.js


/* harmony default export */ var eip712_v2 = (eip712_v2_namespaceObject);
//# sourceMappingURL=eip712_v2.js.map
;// ./node_modules/@ledgerhq/evm-tools/lib-es/message/EIP712/index.js







// As defined in [spec](https://eips.ethereum.org/EIPS/eip-712), the properties below are all required.
function isEIP712Message(message) {
    return (!!message &&
        typeof message === "object" &&
        "types" in message &&
        "primaryType" in message &&
        "domain" in message &&
        "message" in message);
}
const sortObjectAlphabetically = (obj) => {
    const keys = Object.keys(obj).sort();
    return keys.reduce((acc, curr) => {
        const value = (() => {
            if (Array.isArray(obj[curr])) {
                return obj[curr].map(field => sortObjectAlphabetically(field));
            }
            return obj[curr];
        })();
        acc[curr] = value;
        return acc;
    }, {});
};
const getSchemaHashForMessage = (message) => {
    const { types } = message;
    const sortedTypes = sortObjectAlphabetically(types);
    return sha224_default()(JSON.stringify(sortedTypes).replace(" ", "")).toString();
};
/**
 * Tries to find the proper filters for a given EIP712 message
 * in the CAL
 *
 * @param {EIP712Message} message
 * @returns {MessageFilters | undefined}
 */
const getFiltersForMessage = async (message, shouldUseV1Filters, calServiceURL) => {
    const schemaHash = getSchemaHashForMessage(message);
    const verifyingContract = message.domain?.verifyingContract?.toLowerCase() || AddressZero;
    try {
        if (calServiceURL) {
            const { data } = await lib_axios.get(`${calServiceURL}/v1/dapps`, {
                params: {
                    output: "eip712_signatures",
                    eip712_signatures_version: shouldUseV1Filters ? "v1" : "v2",
                    chain_id: message.domain?.chainId,
                    contracts: verifyingContract,
                },
            });
            // Rather than relying on array indices, find the right object wherever it may be, if it exists
            const targetObject = data.find(item => item?.eip712_signatures?.[verifyingContract]?.[schemaHash]);
            const filters = targetObject?.eip712_signatures?.[verifyingContract]?.[schemaHash];
            if (!filters) {
                // Fallback to catch
                throw new Error("Fallback to static file");
            }
            return filters;
        }
        // Fallback to catch
        throw new Error("Fallback to static file");
    }
    catch (e) {
        const messageId = `${message.domain?.chainId ?? 0}:${verifyingContract}:${schemaHash}`;
        if (shouldUseV1Filters) {
            return eip712[messageId];
        }
        return eip712_v2[messageId];
    }
};
/**
 * Get the value at a specific path of an object and return it as a string or as an array of string
 * Used recursively by getValueFromPath
 *
 * @see getValueFromPath
 */
const getValue = (path, value) => {
    if (typeof value === "object") {
        if (Array.isArray(value)) {
            return value.map(v => getValue(path, v)).flat();
        }
        /* istanbul ignore if : unecessary test of a throw */
        if (!(path in value)) {
            throw new Error(`Could not find key ${path} in ${JSON.stringify(value)} `);
        }
        const result = value[path];
        return typeof result === "object" ? result : result.toString();
    }
    return value.toString();
};
/**
 * Using a path as a string, returns the value(s) of a json key without worrying about depth or arrays
 * (e.g: 'to.wallets.[]' => ["0x123", "0x456"])
 */
const getValueFromPath = (path, eip721Message) => {
    const splittedPath = path.split(".");
    const { message } = eip721Message;
    let value = message;
    for (let i = 0; i <= splittedPath.length - 1; i++) {
        const subPath = splittedPath[i];
        const isLastElement = i >= splittedPath.length - 1;
        if (subPath === "[]" && !isLastElement)
            continue;
        value = getValue(subPath, value);
    }
    /* istanbul ignore if : unecessary test of a throw */
    if (value === message) {
        throw new Error("getValueFromPath returned the whole original message");
    }
    return value;
};
function formatDate(timestamp) {
    const date = new Date(Number(timestamp) * 1000);
    if (isNaN(date.getTime())) {
        return timestamp;
    }
    const formatter = new Intl.DateTimeFormat("en-GB", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        timeZone: "UTC",
        hour12: false,
    });
    const parts = formatter.formatToParts(date);
    const p = (type) => parts.find(p => p.type === type)?.value || "00";
    return `${p("year")}-${p("month")}-${p("day")} ${p("hour")}:${p("minute")}:${p("second")} UTC`;
}
/**
 * Gets the fields visible on the nano for a specific EIP712 message
 */
const getEIP712FieldsDisplayedOnNano = async (messageData, calServiceURL = getEnv("CAL_SERVICE_URL")) => {
    if (!isEIP712Message(messageData)) {
        return null;
    }
    const { EIP712Domain, ...otherTypes } = messageData.types;
    const displayedInfos = [];
    const filters = await getFiltersForMessage(messageData, false, calServiceURL);
    if (!filters) {
        const { types } = messageData;
        const domainFields = types["EIP712Domain"].map(({ name }) => name);
        if (domainFields.includes("name") && messageData.domain.name) {
            displayedInfos.push({
                label: "name",
                value: messageData.domain.name,
            });
        }
        if (domainFields.includes("version") && messageData.domain.version) {
            displayedInfos.push({
                label: "version",
                value: messageData.domain.version,
            });
        }
        if (domainFields.includes("chainId") && messageData.domain.chainId) {
            displayedInfos.push({
                label: "chainId",
                value: messageData.domain.chainId.toString(),
            });
        }
        if (domainFields.includes("verifyingContract") && messageData.domain.verifyingContract) {
            displayedInfos.push({
                label: "verifyingContract",
                value: messageData.domain.verifyingContract.toString(),
            });
        }
        if (domainFields.includes("salt") && messageData.domain.salt) {
            displayedInfos.push({
                label: "salt",
                value: messageData.domain.salt.toString(),
            });
        }
        displayedInfos.push({
            label: "Message hash",
            value: TypedDataEncoder.hashStruct(messageData.primaryType, otherTypes, messageData.message),
        });
        return displayedInfos;
    }
    const { contractName, fields } = filters;
    if (contractName && contractName.label) {
        displayedInfos.push({
            label: "Contract",
            value: contractName.label,
        });
    }
    if (messageData.primaryType === "PermitSingle") {
        for (const field of fields) {
            if (field.path.includes("token")) {
                displayedInfos.push({
                    label: "Token",
                    value: getValueFromPath(field.path, messageData),
                });
            }
            else if (field.path.includes("amount")) {
                displayedInfos.push({
                    label: "Amount",
                    value: getValueFromPath(field.path, messageData),
                });
            }
            else if (field.path.includes("expiration")) {
                displayedInfos.push({
                    label: "Approval expires",
                    value: formatDate(getValueFromPath(field.path, messageData)),
                });
            }
        }
    }
    else {
        for (const field of fields) {
            displayedInfos.push({
                label: field.label,
                value: getValueFromPath(field.path, messageData),
            });
        }
    }
    return displayedInfos;
};
//# sourceMappingURL=index.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/bind.js


function bind_bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/utils.js
/* provided dependency */ var utils_process = __webpack_require__("process/browser");




// utils is a library of generic helper functions non-specific to axios

const {toString: lib_utils_toString} = Object.prototype;
const {getPrototypeOf: utils_getPrototypeOf} = Object;

const utils_kindOf = (cache => thing => {
    const str = lib_utils_toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const utils_kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => utils_kindOf(thing) === type
}

const utils_typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray: utils_isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const utils_isUndefined = utils_typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function utils_isBuffer(val) {
  return val !== null && !utils_isUndefined(val) && val.constructor !== null && !utils_isUndefined(val.constructor)
    && utils_isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const utils_isArrayBuffer = utils_kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function utils_isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (utils_isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const utils_isString = utils_typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const utils_isFunction = utils_typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const utils_isNumber = utils_typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const utils_isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const utils_isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const utils_isPlainObject = (val) => {
  if (utils_kindOf(val) !== 'object') {
    return false;
  }

  const prototype = utils_getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
}

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const utils_isDate = utils_kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const utils_isFile = utils_kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const utils_isBlob = utils_kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const utils_isFileList = utils_kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const utils_isStream = (val) => utils_isObject(val) && utils_isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const utils_isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      utils_isFunction(thing.append) && (
        (kind = utils_kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && utils_isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const utils_isURLSearchParams = utils_kindOfTest('URLSearchParams');

const [utils_isReadableStream, utils_isRequest, utils_isResponse, utils_isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(utils_kindOfTest);

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const utils_trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function utils_forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (utils_isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function utils_findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const utils_global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : ({}))
})();

const utils_isContextDefined = (context) => !utils_isUndefined(context) && context !== utils_global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function utils_merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = utils_isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && utils_findKey(result, key) || key;
    if (utils_isPlainObject(result[targetKey]) && utils_isPlainObject(val)) {
      result[targetKey] = utils_merge(result[targetKey], val);
    } else if (utils_isPlainObject(val)) {
      result[targetKey] = utils_merge({}, val);
    } else if (utils_isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  }

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && utils_forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const utils_extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  utils_forEach(b, (val, key) => {
    if (thisArg && utils_isFunction(val)) {
      a[key] = bind_bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const utils_stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const utils_inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const utils_toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && utils_getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const utils_endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const utils_toArray = (thing) => {
  if (!thing) return null;
  if (utils_isArray(thing)) return thing;
  let i = thing.length;
  if (!utils_isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const utils_isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && utils_getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const utils_forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
}

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const utils_matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
}

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const utils_isHTMLForm = utils_kindOfTest('HTMLFormElement');

const utils_toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const lib_utils_hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const utils_isRegExp = utils_kindOfTest('RegExp');

const utils_reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  utils_forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
}

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const utils_freezeMethods = (obj) => {
  utils_reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (utils_isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!utils_isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
}

const utils_toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  }

  utils_isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
}

const utils_noop = () => {}

const utils_toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
}

const utils_ALPHA = 'abcdefghijklmnopqrstuvwxyz'

const utils_DIGIT = '0123456789';

const utils_ALPHABET = {
  DIGIT: utils_DIGIT,
  ALPHA: utils_ALPHA,
  ALPHA_DIGIT: utils_ALPHA + utils_ALPHA.toUpperCase() + utils_DIGIT
}

const utils_generateString = (size = 16, alphabet = utils_ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0]
  }

  return str;
}

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function utils_isSpecCompliantForm(thing) {
  return !!(thing && utils_isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const utils_toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (utils_isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = utils_isArray(source) ? [] : {};

        utils_forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !utils_isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  }

  return visit(obj, 0);
}

const utils_isAsyncFn = utils_kindOfTest('AsyncFunction');

const utils_isThenable = (thing) =>
  thing && (utils_isObject(thing) || utils_isFunction(thing)) && utils_isFunction(thing.then) && utils_isFunction(thing.catch);

// original code
// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

const utils_setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }

  return postMessageSupported ? ((token, callbacks) => {
    utils_global.addEventListener("message", ({source, data}) => {
      if (source === utils_global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);

    return (cb) => {
      callbacks.push(cb);
      utils_global.postMessage(token, "*");
    }
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === 'function',
  utils_isFunction(utils_global.postMessage)
);

const utils_asap = typeof queueMicrotask !== 'undefined' ?
  queueMicrotask.bind(utils_global) : ( typeof utils_process !== 'undefined' && utils_process.nextTick || utils_setImmediate);

// *********************

/* harmony default export */ var lib_utils = ({
  isArray: utils_isArray,
  isArrayBuffer: utils_isArrayBuffer,
  isBuffer: utils_isBuffer,
  isFormData: utils_isFormData,
  isArrayBufferView: utils_isArrayBufferView,
  isString: utils_isString,
  isNumber: utils_isNumber,
  isBoolean: utils_isBoolean,
  isObject: utils_isObject,
  isPlainObject: utils_isPlainObject,
  isReadableStream: utils_isReadableStream,
  isRequest: utils_isRequest,
  isResponse: utils_isResponse,
  isHeaders: utils_isHeaders,
  isUndefined: utils_isUndefined,
  isDate: utils_isDate,
  isFile: utils_isFile,
  isBlob: utils_isBlob,
  isRegExp: utils_isRegExp,
  isFunction: utils_isFunction,
  isStream: utils_isStream,
  isURLSearchParams: utils_isURLSearchParams,
  isTypedArray: utils_isTypedArray,
  isFileList: utils_isFileList,
  forEach: utils_forEach,
  merge: utils_merge,
  extend: utils_extend,
  trim: utils_trim,
  stripBOM: utils_stripBOM,
  inherits: utils_inherits,
  toFlatObject: utils_toFlatObject,
  kindOf: utils_kindOf,
  kindOfTest: utils_kindOfTest,
  endsWith: utils_endsWith,
  toArray: utils_toArray,
  forEachEntry: utils_forEachEntry,
  matchAll: utils_matchAll,
  isHTMLForm: utils_isHTMLForm,
  hasOwnProperty: lib_utils_hasOwnProperty,
  hasOwnProp: lib_utils_hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors: utils_reduceDescriptors,
  freezeMethods: utils_freezeMethods,
  toObjectSet: utils_toObjectSet,
  toCamelCase: utils_toCamelCase,
  noop: utils_noop,
  toFiniteNumber: utils_toFiniteNumber,
  findKey: utils_findKey,
  global: utils_global,
  isContextDefined: utils_isContextDefined,
  ALPHABET: utils_ALPHABET,
  generateString: utils_generateString,
  isSpecCompliantForm: utils_isSpecCompliantForm,
  toJSONObject: utils_toJSONObject,
  isAsyncFn: utils_isAsyncFn,
  isThenable: utils_isThenable,
  setImmediate: utils_setImmediate,
  asap: utils_asap
});

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/core/AxiosError.js




/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError_AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}

lib_utils.inherits(AxiosError_AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: lib_utils.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});

const core_AxiosError_prototype = AxiosError_AxiosError.prototype;
const AxiosError_descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  AxiosError_descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError_AxiosError, AxiosError_descriptors);
Object.defineProperty(core_AxiosError_prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError_AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(core_AxiosError_prototype);

  lib_utils.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError_AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

/* harmony default export */ var lib_core_AxiosError = (AxiosError_AxiosError);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/null.js
// eslint-disable-next-line strict
/* harmony default export */ var lib_helpers_null = (null);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/toFormData.js
/* provided dependency */ var toFormData_Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];




// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored


/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function toFormData_isVisitable(thing) {
  return lib_utils.isPlainObject(thing) || lib_utils.isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function toFormData_removeBrackets(key) {
  return lib_utils.endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function toFormData_renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = toFormData_removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function toFormData_isFlatArray(arr) {
  return lib_utils.isArray(arr) && !arr.some(toFormData_isVisitable);
}

const toFormData_predicates = lib_utils.toFlatObject(lib_utils, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData_toFormData(obj, formData, options) {
  if (!lib_utils.isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (lib_helpers_null || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = lib_utils.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !lib_utils.isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && lib_utils.isSpecCompliantForm(formData);

  if (!lib_utils.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (lib_utils.isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && lib_utils.isBlob(value)) {
      throw new lib_core_AxiosError('Blob is not supported. Use a Buffer instead.');
    }

    if (lib_utils.isArrayBuffer(value) || lib_utils.isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : toFormData_Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (lib_utils.endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (lib_utils.isArray(value) && toFormData_isFlatArray(value)) ||
        ((lib_utils.isFileList(value) || lib_utils.endsWith(key, '[]')) && (arr = lib_utils.toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = toFormData_removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(lib_utils.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? toFormData_renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (toFormData_isVisitable(value)) {
      return true;
    }

    formData.append(toFormData_renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(toFormData_predicates, {
    defaultVisitor,
    convertValue,
    isVisitable: toFormData_isVisitable
  });

  function build(value, path) {
    if (lib_utils.isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    lib_utils.forEach(value, function each(el, key) {
      const result = !(lib_utils.isUndefined(el) || el === null) && visitor.call(
        formData, el, lib_utils.isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!lib_utils.isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/* harmony default export */ var lib_helpers_toFormData = (toFormData_toFormData);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/AxiosURLSearchParams.js




/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function helpers_AxiosURLSearchParams_encode(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams_AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && lib_helpers_toFormData(params, this, options);
}

const helpers_AxiosURLSearchParams_prototype = AxiosURLSearchParams_AxiosURLSearchParams.prototype;

helpers_AxiosURLSearchParams_prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

helpers_AxiosURLSearchParams_prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, helpers_AxiosURLSearchParams_encode);
  } : helpers_AxiosURLSearchParams_encode;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/* harmony default export */ var lib_helpers_AxiosURLSearchParams = (AxiosURLSearchParams_AxiosURLSearchParams);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/buildURL.js





/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function helpers_buildURL_encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */
function buildURL_buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || helpers_buildURL_encode;

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = lib_utils.isURLSearchParams(params) ?
      params.toString() :
      new lib_helpers_AxiosURLSearchParams(params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/core/InterceptorManager.js




class InterceptorManager_InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    lib_utils.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

/* harmony default export */ var lib_core_InterceptorManager = (InterceptorManager_InterceptorManager);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/defaults/transitional.js


/* harmony default export */ var lib_defaults_transitional = ({
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
});

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js



/* harmony default export */ var browser_classes_URLSearchParams = (typeof URLSearchParams !== 'undefined' ? URLSearchParams : lib_helpers_AxiosURLSearchParams);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/platform/browser/classes/FormData.js


/* harmony default export */ var browser_classes_FormData = (typeof FormData !== 'undefined' ? FormData : null);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/platform/browser/classes/Blob.js


/* harmony default export */ var browser_classes_Blob = (typeof Blob !== 'undefined' ? Blob : null);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/platform/browser/index.js




/* harmony default export */ var platform_browser = ({
  isBrowser: true,
  classes: {
    URLSearchParams: browser_classes_URLSearchParams,
    FormData: browser_classes_FormData,
    Blob: browser_classes_Blob
  },
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
});

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/platform/common/utils.js
const utils_hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

const utils_navigator = typeof navigator === 'object' && navigator || undefined;

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const utils_hasStandardBrowserEnv = utils_hasBrowserEnv &&
  (!utils_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(utils_navigator.product) < 0);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const utils_hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();

const utils_origin = utils_hasBrowserEnv && window.location.href || 'http://localhost';



;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/platform/index.js



/* harmony default export */ var lib_platform = ({
  ...platform_common_utils_namespaceObject,
  ...platform_browser
});

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/toURLEncodedForm.js






function toURLEncodedForm_toURLEncodedForm(data, options) {
  return lib_helpers_toFormData(data, new lib_platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (lib_platform.isNode && lib_utils.isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/formDataToJSON.js




/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function formDataToJSON_parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return lib_utils.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function formDataToJSON_arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON_formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && lib_utils.isArray(target) ? target.length : name;

    if (isLast) {
      if (lib_utils.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !lib_utils.isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && lib_utils.isArray(target[name])) {
      target[name] = formDataToJSON_arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (lib_utils.isFormData(formData) && lib_utils.isFunction(formData.entries)) {
    const obj = {};

    lib_utils.forEachEntry(formData, (name, value) => {
      buildPath(formDataToJSON_parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/* harmony default export */ var lib_helpers_formDataToJSON = (formDataToJSON_formDataToJSON);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/defaults/index.js










/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function defaults_stringifySafely(rawValue, parser, encoder) {
  if (lib_utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return lib_utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults_defaults = {

  transitional: lib_defaults_transitional,

  adapter: ['xhr', 'http', 'fetch'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = lib_utils.isObject(data);

    if (isObjectPayload && lib_utils.isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = lib_utils.isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify(lib_helpers_formDataToJSON(data)) : data;
    }

    if (lib_utils.isArrayBuffer(data) ||
      lib_utils.isBuffer(data) ||
      lib_utils.isStream(data) ||
      lib_utils.isFile(data) ||
      lib_utils.isBlob(data) ||
      lib_utils.isReadableStream(data)
    ) {
      return data;
    }
    if (lib_utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (lib_utils.isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return toURLEncodedForm_toURLEncodedForm(data, this.formSerializer).toString();
      }

      if ((isFileList = lib_utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return lib_helpers_toFormData(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return defaults_stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults_defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (lib_utils.isResponse(data) || lib_utils.isReadableStream(data)) {
      return data;
    }

    if (data && lib_utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw lib_core_AxiosError.from(e, lib_core_AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: lib_platform.classes.FormData,
    Blob: lib_platform.classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

lib_utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults_defaults.headers[method] = {};
});

/* harmony default export */ var axios_lib_defaults = (defaults_defaults);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/parseHeaders.js




// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const parseHeaders_ignoreDuplicateOf = lib_utils.toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
/* harmony default export */ var helpers_parseHeaders = (rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && parseHeaders_ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
});

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/core/AxiosHeaders.js





const AxiosHeaders_$internals = Symbol('internals');

function AxiosHeaders_normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function AxiosHeaders_normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return lib_utils.isArray(value) ? value.map(AxiosHeaders_normalizeValue) : String(value);
}

function AxiosHeaders_parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const AxiosHeaders_isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function AxiosHeaders_matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (lib_utils.isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!lib_utils.isString(value)) return;

  if (lib_utils.isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (lib_utils.isRegExp(filter)) {
    return filter.test(value);
  }
}

function AxiosHeaders_formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function AxiosHeaders_buildAccessors(obj, header) {
  const accessorName = lib_utils.toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders_AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = AxiosHeaders_normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = lib_utils.findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = AxiosHeaders_normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      lib_utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (lib_utils.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite)
    } else if(lib_utils.isString(header) && (header = header.trim()) && !AxiosHeaders_isValidHeaderName(header)) {
      setHeaders(helpers_parseHeaders(header), valueOrRewrite);
    } else if (lib_utils.isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = AxiosHeaders_normalizeHeader(header);

    if (header) {
      const key = lib_utils.findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return AxiosHeaders_parseTokens(value);
        }

        if (lib_utils.isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (lib_utils.isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = AxiosHeaders_normalizeHeader(header);

    if (header) {
      const key = lib_utils.findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || AxiosHeaders_matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = AxiosHeaders_normalizeHeader(_header);

      if (_header) {
        const key = lib_utils.findKey(self, _header);

        if (key && (!matcher || AxiosHeaders_matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (lib_utils.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || AxiosHeaders_matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    lib_utils.forEach(this, (value, header) => {
      const key = lib_utils.findKey(headers, header);

      if (key) {
        self[key] = AxiosHeaders_normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? AxiosHeaders_formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = AxiosHeaders_normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    lib_utils.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && lib_utils.isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[AxiosHeaders_$internals] = (this[AxiosHeaders_$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = AxiosHeaders_normalizeHeader(_header);

      if (!accessors[lHeader]) {
        AxiosHeaders_buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    lib_utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders_AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
lib_utils.reduceDescriptors(AxiosHeaders_AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

lib_utils.freezeMethods(AxiosHeaders_AxiosHeaders);

/* harmony default export */ var lib_core_AxiosHeaders = (AxiosHeaders_AxiosHeaders);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/core/transformData.js






/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData_transformData(fns, response) {
  const config = this || axios_lib_defaults;
  const context = response || config;
  const headers = lib_core_AxiosHeaders.from(context.headers);
  let data = context.data;

  lib_utils.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/cancel/isCancel.js


function isCancel_isCancel(value) {
  return !!(value && value.__CANCEL__);
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/cancel/CanceledError.js





/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError_CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  lib_core_AxiosError.call(this, message == null ? 'canceled' : message, lib_core_AxiosError.ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

lib_utils.inherits(CanceledError_CanceledError, lib_core_AxiosError, {
  __CANCEL__: true
});

/* harmony default export */ var lib_cancel_CanceledError = (CanceledError_CanceledError);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/core/settle.js




/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle_settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new lib_core_AxiosError(
      'Request failed with status code ' + response.status,
      [lib_core_AxiosError.ERR_BAD_REQUEST, lib_core_AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/parseProtocol.js


function parseProtocol_parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/speedometer.js


/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer_speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/* harmony default export */ var lib_helpers_speedometer = (speedometer_speedometer);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/throttle.js
/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */
function throttle_throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1000 / freq;
  let lastArgs;
  let timer;

  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  }

  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if ( passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs)
        }, threshold - passed);
      }
    }
  }

  const flush = () => lastArgs && invoke(lastArgs);

  return [throttled, flush];
}

/* harmony default export */ var lib_helpers_throttle = (throttle_throttle);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/progressEventReducer.js




const progressEventReducer_progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = lib_helpers_speedometer(50, 250);

  return lib_helpers_throttle(e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? 'download' : 'upload']: true
    };

    listener(data);
  }, freq);
}

const progressEventReducer_progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;

  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
}

const progressEventReducer_asyncDecorator = (fn) => (...args) => lib_utils.asap(() => fn(...args));

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/isURLSameOrigin.js





/* harmony default export */ var helpers_isURLSameOrigin = (lib_platform.hasStandardBrowserEnv ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    const msie = lib_platform.navigator && /(msie|trident)/i.test(lib_platform.navigator.userAgent);
    const urlParsingNode = document.createElement('a');
    let originURL;

    /**
    * Parse a URL to discover its components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      let href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
          urlParsingNode.pathname :
          '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      const parsed = (lib_utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
          parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })());

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/cookies.js



/* harmony default export */ var helpers_cookies = (lib_platform.hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      lib_utils.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      lib_utils.isString(path) && cookie.push('path=' + path);

      lib_utils.isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  });


;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/isAbsoluteURL.js


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL_isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/combineURLs.js


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs_combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/core/buildFullPath.js





/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath_buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL_isAbsoluteURL(requestedURL)) {
    return combineURLs_combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/core/mergeConfig.js





const mergeConfig_headersToObject = (thing) => thing instanceof lib_core_AxiosHeaders ? { ...thing } : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig_mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, caseless) {
    if (lib_utils.isPlainObject(target) && lib_utils.isPlainObject(source)) {
      return lib_utils.merge.call({caseless}, target, source);
    } else if (lib_utils.isPlainObject(source)) {
      return lib_utils.merge({}, source);
    } else if (lib_utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, caseless) {
    if (!lib_utils.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!lib_utils.isUndefined(a)) {
      return getMergedValue(undefined, a, caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!lib_utils.isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!lib_utils.isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!lib_utils.isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(mergeConfig_headersToObject(a), mergeConfig_headersToObject(b), true)
  };

  lib_utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (lib_utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/resolveConfig.js









/* harmony default export */ var helpers_resolveConfig = ((config) => {
  const newConfig = mergeConfig_mergeConfig({}, config);

  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

  newConfig.headers = headers = lib_core_AxiosHeaders.from(headers);

  newConfig.url = buildURL_buildURL(buildFullPath_buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);

  // HTTP basic authentication
  if (auth) {
    headers.set('Authorization', 'Basic ' +
      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
    );
  }

  let contentType;

  if (lib_utils.isFormData(data)) {
    if (lib_platform.hasStandardBrowserEnv || lib_platform.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(undefined); // Let the browser set it
    } else if ((contentType = headers.getContentType()) !== false) {
      // fix semicolon duplication issue for ReactNative FormData implementation
      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
    }
  }

  // Add xsrf header
  // This is only done if running in a standard browser environment.
  // Specifically not if we're in a web worker, or react-native.

  if (lib_platform.hasStandardBrowserEnv) {
    withXSRFToken && lib_utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

    if (withXSRFToken || (withXSRFToken !== false && helpers_isURLSameOrigin(newConfig.url))) {
      // Add xsrf header
      const xsrfValue = xsrfHeaderName && xsrfCookieName && helpers_cookies.read(xsrfCookieName);

      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }

  return newConfig;
});


;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/adapters/xhr.js











const xhr_isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

/* harmony default export */ var adapters_xhr = (xhr_isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = helpers_resolveConfig(config);
    let requestData = _config.data;
    const requestHeaders = lib_core_AxiosHeaders.from(_config.headers).normalize();
    let {responseType, onUploadProgress, onDownloadProgress} = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;

    function done() {
      flushUpload && flushUpload(); // flush events
      flushDownload && flushDownload(); // flush events

      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);

      _config.signal && _config.signal.removeEventListener('abort', onCanceled);
    }

    let request = new XMLHttpRequest();

    request.open(_config.method.toUpperCase(), _config.url, true);

    // Set the request timeout in MS
    request.timeout = _config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = lib_core_AxiosHeaders.from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      settle_settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new lib_core_AxiosError('Request aborted', lib_core_AxiosError.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new lib_core_AxiosError('Network Error', lib_core_AxiosError.ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = _config.transitional || lib_defaults_transitional;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new lib_core_AxiosError(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? lib_core_AxiosError.ETIMEDOUT : lib_core_AxiosError.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      lib_utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!lib_utils.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = _config.responseType;
    }

    // Handle progress if needed
    if (onDownloadProgress) {
      ([downloadThrottled, flushDownload] = progressEventReducer_progressEventReducer(onDownloadProgress, true));
      request.addEventListener('progress', downloadThrottled);
    }

    // Not all browsers support upload events
    if (onUploadProgress && request.upload) {
      ([uploadThrottled, flushUpload] = progressEventReducer_progressEventReducer(onUploadProgress));

      request.upload.addEventListener('progress', uploadThrottled);

      request.upload.addEventListener('loadend', flushUpload);
    }

    if (_config.cancelToken || _config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new lib_cancel_CanceledError(null, config, request) : cancel);
        request.abort();
        request = null;
      };

      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = parseProtocol_parseProtocol(_config.url);

    if (protocol && lib_platform.protocols.indexOf(protocol) === -1) {
      reject(new lib_core_AxiosError('Unsupported protocol ' + protocol + ':', lib_core_AxiosError.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
});

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/composeSignals.js




const composeSignals_composeSignals = (signals, timeout) => {
  const {length} = (signals = signals ? signals.filter(Boolean) : []);

  if (timeout || length) {
    let controller = new AbortController();

    let aborted;

    const onabort = function (reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof lib_core_AxiosError ? err : new lib_cancel_CanceledError(err instanceof Error ? err.message : err));
      }
    }

    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new lib_core_AxiosError(`timeout ${timeout} of ms exceeded`, lib_core_AxiosError.ETIMEDOUT))
    }, timeout)

    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach(signal => {
          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);
        });
        signals = null;
      }
    }

    signals.forEach((signal) => signal.addEventListener('abort', onabort));

    const {signal} = controller;

    signal.unsubscribe = () => lib_utils.asap(unsubscribe);

    return signal;
  }
}

/* harmony default export */ var lib_helpers_composeSignals = (composeSignals_composeSignals);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/trackStream.js

const trackStream_streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;

  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }

  let pos = 0;
  let end;

  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
}

const trackStream_readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of trackStream_readStream(iterable)) {
    yield* trackStream_streamChunk(chunk, chunkSize);
  }
}

const trackStream_readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }

  const reader = stream.getReader();
  try {
    for (;;) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
}

const trackStream_trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator = trackStream_readBytes(stream, chunkSize);

  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  }

  return new ReadableStream({
    async pull(controller) {
      try {
        const {done, value} = await iterator.next();

        if (done) {
         _onFinish();
          controller.close();
          return;
        }

        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  })
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/adapters/fetch.js










const fetch_isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
const fetch_isReadableStreamSupported = fetch_isFetchSupported && typeof ReadableStream === 'function';

// used only inside the fetch adapter
const fetch_encodeText = fetch_isFetchSupported && (typeof TextEncoder === 'function' ?
    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
    async (str) => new Uint8Array(await new Response(str).arrayBuffer())
);

const fetch_test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false
  }
}

const fetch_supportsRequestStream = fetch_isReadableStreamSupported && fetch_test(() => {
  let duplexAccessed = false;

  const hasContentType = new Request(lib_platform.origin, {
    body: new ReadableStream(),
    method: 'POST',
    get duplex() {
      duplexAccessed = true;
      return 'half';
    },
  }).headers.has('Content-Type');

  return duplexAccessed && !hasContentType;
});

const fetch_DEFAULT_CHUNK_SIZE = 64 * 1024;

const fetch_supportsResponseStream = fetch_isReadableStreamSupported &&
  fetch_test(() => lib_utils.isReadableStream(new Response('').body));


const fetch_resolvers = {
  stream: fetch_supportsResponseStream && ((res) => res.body)
};

fetch_isFetchSupported && (((res) => {
  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
    !fetch_resolvers[type] && (fetch_resolvers[type] = lib_utils.isFunction(res[type]) ? (res) => res[type]() :
      (_, config) => {
        throw new lib_core_AxiosError(`Response type '${type}' is not supported`, lib_core_AxiosError.ERR_NOT_SUPPORT, config);
      })
  });
})(new Response));

const fetch_getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }

  if(lib_utils.isBlob(body)) {
    return body.size;
  }

  if(lib_utils.isSpecCompliantForm(body)) {
    const _request = new Request(lib_platform.origin, {
      method: 'POST',
      body,
    });
    return (await _request.arrayBuffer()).byteLength;
  }

  if(lib_utils.isArrayBufferView(body) || lib_utils.isArrayBuffer(body)) {
    return body.byteLength;
  }

  if(lib_utils.isURLSearchParams(body)) {
    body = body + '';
  }

  if(lib_utils.isString(body)) {
    return (await fetch_encodeText(body)).byteLength;
  }
}

const fetch_resolveBodyLength = async (headers, body) => {
  const length = lib_utils.toFiniteNumber(headers.getContentLength());

  return length == null ? fetch_getBodyLength(body) : length;
}

/* harmony default export */ var lib_adapters_fetch = (fetch_isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = 'same-origin',
    fetchOptions
  } = helpers_resolveConfig(config);

  responseType = responseType ? (responseType + '').toLowerCase() : 'text';

  let composedSignal = lib_helpers_composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);

  let request;

  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
  });

  let requestContentLength;

  try {
    if (
      onUploadProgress && fetch_supportsRequestStream && method !== 'get' && method !== 'head' &&
      (requestContentLength = await fetch_resolveBodyLength(headers, data)) !== 0
    ) {
      let _request = new Request(url, {
        method: 'POST',
        body: data,
        duplex: "half"
      });

      let contentTypeHeader;

      if (lib_utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
        headers.setContentType(contentTypeHeader)
      }

      if (_request.body) {
        const [onProgress, flush] = progressEventReducer_progressEventDecorator(
          requestContentLength,
          progressEventReducer_progressEventReducer(progressEventReducer_asyncDecorator(onUploadProgress))
        );

        data = trackStream_trackStream(_request.body, fetch_DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }

    if (!lib_utils.isString(withCredentials)) {
      withCredentials = withCredentials ? 'include' : 'omit';
    }

    // Cloudflare Workers throws when credentials are defined
    // see https://github.com/cloudflare/workerd/issues/902
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : undefined
    });

    let response = await fetch(request);

    const isStreamResponse = fetch_supportsResponseStream && (responseType === 'stream' || responseType === 'response');

    if (fetch_supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {
      const options = {};

      ['status', 'statusText', 'headers'].forEach(prop => {
        options[prop] = response[prop];
      });

      const responseContentLength = lib_utils.toFiniteNumber(response.headers.get('content-length'));

      const [onProgress, flush] = onDownloadProgress && progressEventReducer_progressEventDecorator(
        responseContentLength,
        progressEventReducer_progressEventReducer(progressEventReducer_asyncDecorator(onDownloadProgress), true)
      ) || [];

      response = new Response(
        trackStream_trackStream(response.body, fetch_DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }

    responseType = responseType || 'text';

    let responseData = await fetch_resolvers[lib_utils.findKey(fetch_resolvers, responseType) || 'text'](response, config);

    !isStreamResponse && unsubscribe && unsubscribe();

    return await new Promise((resolve, reject) => {
      settle_settle(resolve, reject, {
        data: responseData,
        headers: lib_core_AxiosHeaders.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      })
    })
  } catch (err) {
    unsubscribe && unsubscribe();

    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {
      throw Object.assign(
        new lib_core_AxiosError('Network Error', lib_core_AxiosError.ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      )
    }

    throw lib_core_AxiosError.from(err, err && err.code, config, request);
  }
}));



;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/adapters/adapters.js






const adapters_knownAdapters = {
  http: lib_helpers_null,
  xhr: adapters_xhr,
  fetch: lib_adapters_fetch
}

lib_utils.forEach(adapters_knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const adapters_renderReason = (reason) => `- ${reason}`;

const adapters_isResolvedHandle = (adapter) => lib_utils.isFunction(adapter) || adapter === null || adapter === false;

/* harmony default export */ var adapters_adapters = ({
  getAdapter: (adapters) => {
    adapters = lib_utils.isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!adapters_isResolvedHandle(nameOrAdapter)) {
        adapter = adapters_knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new lib_core_AxiosError(`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(adapters_renderReason).join('\n') : ' ' + adapters_renderReason(reasons[0])) :
        'as no adapter specified';

      throw new lib_core_AxiosError(
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: adapters_knownAdapters
});

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/core/dispatchRequest.js









/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function dispatchRequest_throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new lib_cancel_CanceledError(null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest_dispatchRequest(config) {
  dispatchRequest_throwIfCancellationRequested(config);

  config.headers = lib_core_AxiosHeaders.from(config.headers);

  // Transform request data
  config.data = transformData_transformData.call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = adapters_adapters.getAdapter(config.adapter || axios_lib_defaults.adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    dispatchRequest_throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData_transformData.call(
      config,
      config.transformResponse,
      response
    );

    response.headers = lib_core_AxiosHeaders.from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel_isCancel(reason)) {
      dispatchRequest_throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData_transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = lib_core_AxiosHeaders.from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/env/data.js
const data_VERSION = "1.7.7";
;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/validator.js





const validator_validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validator_validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const validator_deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validator_validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + data_VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new lib_core_AxiosError(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        lib_core_AxiosError.ERR_DEPRECATED
      );
    }

    if (version && !validator_deprecatedWarnings[opt]) {
      validator_deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function validator_assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new lib_core_AxiosError('options must be an object', lib_core_AxiosError.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new lib_core_AxiosError('option ' + opt + ' must be ' + result, lib_core_AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new lib_core_AxiosError('Unknown option ' + opt, lib_core_AxiosError.ERR_BAD_OPTION);
    }
  }
}

/* harmony default export */ var helpers_validator = ({
  assertOptions: validator_assertOptions,
  validators: validator_validators
});

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/core/Axios.js











const core_Axios_validators = helpers_validator.validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios_Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new lib_core_InterceptorManager(),
      response: new lib_core_InterceptorManager()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;

        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
        try {
          if (!err.stack) {
            err.stack = stack;
            // match without the 2 top stack lines
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
            err.stack += '\n' + stack
          }
        } catch (e) {
          // ignore the case where "stack" is an un-writable property
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = mergeConfig_mergeConfig(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      helpers_validator.assertOptions(transitional, {
        silentJSONParsing: core_Axios_validators.transitional(core_Axios_validators.boolean),
        forcedJSONParsing: core_Axios_validators.transitional(core_Axios_validators.boolean),
        clarifyTimeoutError: core_Axios_validators.transitional(core_Axios_validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (lib_utils.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        }
      } else {
        helpers_validator.assertOptions(paramsSerializer, {
          encode: core_Axios_validators.function,
          serialize: core_Axios_validators.function
        }, true);
      }
    }

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && lib_utils.merge(
      headers.common,
      headers[config.method]
    );

    headers && lib_utils.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = lib_core_AxiosHeaders.concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest_dispatchRequest.bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = dispatchRequest_dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = mergeConfig_mergeConfig(this.defaults, config);
    const fullPath = buildFullPath_buildFullPath(config.baseURL, config.url);
    return buildURL_buildURL(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
lib_utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios_Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig_mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

lib_utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig_mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios_Axios.prototype[method] = generateHTTPMethod();

  Axios_Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

/* harmony default export */ var lib_core_Axios = (Axios_Axios);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/cancel/CancelToken.js




/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken_CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new lib_cancel_CanceledError(message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  toAbortSignal() {
    const controller = new AbortController();

    const abort = (err) => {
      controller.abort(err);
    };

    this.subscribe(abort);

    controller.signal.unsubscribe = () => this.unsubscribe(abort);

    return controller.signal;
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken_CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

/* harmony default export */ var lib_cancel_CancelToken = (CancelToken_CancelToken);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/spread.js


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread_spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/isAxiosError.js




/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError_isAxiosError(payload) {
  return lib_utils.isObject(payload) && (payload.isAxiosError === true);
}

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/helpers/HttpStatusCode.js
const HttpStatusCode_HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode_HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode_HttpStatusCode[value] = key;
});

/* harmony default export */ var lib_helpers_HttpStatusCode = (HttpStatusCode_HttpStatusCode);

;// ./node_modules/@ledgerhq/hw-app-eth/node_modules/axios/lib/axios.js




















/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function axios_createInstance(defaultConfig) {
  const context = new lib_core_Axios(defaultConfig);
  const instance = bind_bind(lib_core_Axios.prototype.request, context);

  // Copy axios.prototype to instance
  lib_utils.extend(instance, lib_core_Axios.prototype, context, {allOwnKeys: true});

  // Copy context to instance
  lib_utils.extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return axios_createInstance(mergeConfig_mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios_axios = axios_createInstance(axios_lib_defaults);

// Expose Axios class to allow class inheritance
axios_axios.Axios = lib_core_Axios;

// Expose Cancel & CancelToken
axios_axios.CanceledError = lib_cancel_CanceledError;
axios_axios.CancelToken = lib_cancel_CancelToken;
axios_axios.isCancel = isCancel_isCancel;
axios_axios.VERSION = data_VERSION;
axios_axios.toFormData = lib_helpers_toFormData;

// Expose AxiosError class
axios_axios.AxiosError = lib_core_AxiosError;

// alias for CanceledError for backward compatibility
axios_axios.Cancel = axios_axios.CanceledError;

// Expose all/spread
axios_axios.all = function all(promises) {
  return Promise.all(promises);
};

axios_axios.spread = spread_spread;

// Expose isAxiosError
axios_axios.isAxiosError = isAxiosError_isAxiosError;

// Expose mergeConfig
axios_axios.mergeConfig = mergeConfig_mergeConfig;

axios_axios.AxiosHeaders = lib_core_AxiosHeaders;

axios_axios.formToJSON = thing => lib_helpers_formDataToJSON(lib_utils.isHTMLForm(thing) ? new FormData(thing) : thing);

axios_axios.getAdapter = adapters_adapters.getAdapter;

axios_axios.HttpStatusCode = lib_helpers_HttpStatusCode;

axios_axios.default = axios_axios;

// this module should only have a default export
/* harmony default export */ var axios_lib_axios = (axios_axios);

;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/1/erc20.json
var erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["ethereum","0x_project","ZRX",18,"0x Project","304402200ae8634c22762a8ba41d2acb1e068dcce947337c6dd984f13b820d396176952302203306a49d8a6c35b11a61088e1570b3928ca3a0db6bd36f577b5ef87628561ff7","0xE41d2489571d322189246DaFA5ebDe1F4699F498",false,false],["ethereum","aave","AAVE",18,"Aave","304402204245fb63f748566f94a8edab39e33ed27d247ce2becaf77f5b994b25280d469b02202edb2751a47402df19d3e3f37cc2da10045698977f76f8aece49957233ff57f4","0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",false,false],["ethereum","aioz_network","AIOZ",18,"AIOZ Network","3044022063261cc99495490da0caee3b9a3352f120e01c828f6b45a02642f0d8717dc7fc0220538379598165d7af784d6ad2e771b6c9d7f5a8481062ad3938c69fc45ee0c2fb","0x626E8036dEB333b408Be468F951bdB42433cBF18",false,false],["ethereum","apecoin","APE",18,"ApeCoin","3045022100f245da6a5b212fe9b49c1a7cd23bb75ddfb06d7295ab95fb66841451e9a1e5b30220714fe14b9f47d50bf54f208de6fadb7719bf13094330b290b41e31a982281afc","0x4d224452801ACEd8B2F0aebE155379bb5D594381",false,false],["ethereum","apenftio","NFT",6,"APENFTIO","304402201925ef7751a9f146010e43a9786055c8f8d7cf714983b379bc4d1fcd166d0a610220559a7e991669d6df124426eaa19e34c0528655eb89956faa0d95301faac35cc2","0x198d14F2Ad9CE69E76ea330B374DE4957C3F850a",false,false],["ethereum","arbitrum","ARB",18,"Arbitrum","3045022100de4ec446f670f35ce79f6e673f99d02ff4cc26ee40f5680fb2de22c990385ccf022009b465340d1329ee47841b1a427d7397c0e88573be7507c04cf0e2fde1d77e9f","0xB50721BCf8d664c30412Cfbc6cf7a15145234ad1",false,true],["ethereum","arkham","ARKM",18,"Arkham","3045022100f281c30a7b89dcc183b8b5aecbc0b3c650aa9512e19ca86c42daab7e01c070ed02207c08ce4165c3caa55cc9ba99a2e5863432f397b3460efef9c93546d96e811be3","0x6E2a43be0B1d33b726f0CA3b8de60b3482b8b050",false,false],["ethereum","arweave","AR",18,"Arweave","304402202a145cbdc4181aca32548699c94c3ba76df47f19b770b9caa4f3a73d54940feb02207357e838fbcdf20b023cdca577098466ea5f477fdbcb8c58cab4313e52a85e51","0x0F04676403A51412B53FD264fF48a3F70A348391",false,false],["ethereum","axelar","AXL",6,"Axelar","3045022100bbdad138957d1628743041b1b247fcd22e0c7096c1eb4e29910bc475bc5f2f2202203f12a126eecc07ae0efe8683abe02ca27a17b10b5da7cc353bdc0e568ca37051","0x467719aD09025FcC6cF6F8311755809d45a5E5f3",false,false],["ethereum","axie_infinity_shard","AXS",18,"Axie Infinity Shard","304402200842f8ea8f7c061f90686b32a798f31706bdb9c87bb48049d5e74ee2c9d5b40402206db0d02d26106f31e14905b1c663c8ab19f04b4094442498dc32b04f6bb6983f","0xBB0E17EF65F82Ab018d8EDd776e8DD940327B28b",false,false],["ethereum","beam","BEAM",18,"Beam","3045022100ee04c4b52779c4e7fe215735b518a482ce0d24dcf9acc95b4636d2d713a3bfa802200ea056e38b45fecaa55cf9acf852e757b2c7a3866f9194cff768c2cb6d1cbca5","0x62D0A8458eD7719FDAF978fe5929C6D342B0bFcE",false,false],["ethereum","bitgettoken_0581","BGB",18,"BitgetToken","3044022070ad3e8a9c464f72fef20c139625fe9cbc33668a15d75afa3b67d8788262016b02200c72c4e5fb022e627b9ebf28eb8a4e8e1c946c554d5822462ecf9161b30d34c4","0x54D2252757e1672EEaD234D27B1270728fF90581",false,false],["ethereum","bittorrent","BTT",18,"BitTorrent","3044022021e95de1c02d262a32f5ce81ccf88cea978119a9ad1e850a780f5aedcb06c84a02202fae68ee1a80291f4a89a53aacd617ab34b534e47559a78c58c06280e44309cd","0xC669928185DbCE49d2230CC9B0979BE6DC797957",false,true],["ethereum","blur","BLUR",18,"Blur","3044022048164f36642a7ca5187be52d2b70990af31a7577618db1501541345883d0007b022056738abb0fbf51a2ddc0520ee7df88124abbdc0ae14e5fc9108e987170485ff8","0x5283D291DBCF85356A21bA090E6db59121208b44",false,false],["ethereum","bnb","BNB",18,"BNB","304402205ccf7780c2780456c4d645ffdd0bd361abbd1fadc960ecb76f8c4f0391b85b7502205699a0fb0b2976d9687ed6e4aff677b4247d42886672f715455c13456b7b1a51","0xB8c77482e45F1F44dE1745F52C74426C631bDD52",false,true],["ethereum","bonk","BONK",5,"Bonk","30450221009c7bcd1659c9cd4f5a5238dc4cb632772d5c5e4feddfd32b688f90dd35ca39c002207cf182eba5c7da639fdc233d72b5802d7dae4aa6def0b0606365d78ffb41fdae","0x1151CB3d861920e07a38e03eEAd12C32178567F6",false,false],["ethereum","chiliz","CHZ",18,"chiliZ","304402204393291ca1c0fbe08524e15dd90e64135dc34aa556b7aab16f64144a4720729402201047f16681ef6c55ee60d0daf5d03e5890d4e6d03a3ca85669820b72a501f2dc","0x3506424F91fD33084466F402d5D97f05F8e3b4AF",false,false],["ethereum","coinbase_wrapped_staked_eth","CBETH",18,"Coinbase Wrapped Staked ETH","3045022100a137fc48e4b568a47c1d2ab8b261762ce7d57b8e9bf80c70460ccc316fe56929022024ad1e0cdc9607422d90addf4618903da77fac0fd9070000b675a5442fff5212","0xBe9895146f7AF43049ca1c1AE358B0541Ea49704",false,false],["ethereum","compound","COMP",18,"Compound","3045022100fe47a50f984b5a7e58c607b947b31a33647c61ec68f6e546459e67376683908e022022e2047be35367e054ff736120542d857a4c85d607ff010a10ce50e768d22f25","0xc00e94Cb662C3520282E6f5717214004A7f26888",false,false],["ethereum","constitutiondao","PEOPLE",18,"ConstitutionDAO","3045022100b19c4ac5eb281b71443ebdbfabcc245f7d47e21aa7b79750e89b7de28809bb6002207adf04abc3e3d11356ffddc59e47c3c0306d72f062fec1eb26615eee39bbee37","0x7A58c0Be72BE218B41C608b7Fe7C5bB630736C71",false,false],["ethereum","cro","CRO",8,"Cronos Coin","304402207516b954efe863842cfd13ec52b5282244190afb1670806ebada17b222a31fb402202209855189582452633836757941484a9888f58195546e4f9d10760b43d4d761","0xA0b73E1Ff0B80914AB6fe0444E65848C4C34450b",false,false],["ethereum","dai_stablecoin_v2_0","DAI",18,"Dai Stablecoin v2.0","3045022100b3aa979633284eb0f55459099333ab92cf06fdd58dc90e9c070000c8e968864c02207b10ec7d6609f51dda53d083a6e165a0abf3a77e13250e6f260772809b49aff5","0x6B175474E89094C44Da98b954EedeAC495271d0F",false,false],["ethereum","decentraland_mana","MANA",18,"Decentraland MANA","3044022015e383fe3e7dd61d5b5bb801b8e288ee30fe20161167ea587646463b3ae1199302203c466c471434e7999196b0818f94e2124a557364388d8ee19eacdca9ad9c294c","0x0F5D2fB29fb7d3CFeE444a200298f468908cC942",false,false],["ethereum","dexe","DEXE",18,"Dexe","3045022100ecc8497cd4eff463910801d50936e248beaa151de772d5edbfa4799b509e5ac302205f3aa44defa6b0cd3f1e17ea920d2439b7af0a488c1ebef9da1795eff2894b06","0xde4EE8057785A7e8e800Db58F9784845A5C2Cbd6",false,false],["ethereum","ethena","ENA",18,"Ethena","30440220187728a27c0e076d3c70de985cd78e1b2fea833fdadd4b7795a03cd67ca7165d02206fdf03a81eeb1e8141c8aec3ec9fc19e63d3f33dd38c9d8ed6ced1074812ea98","0x57e114B691Db790C35207b2e685D4A43181e6061",false,false],["ethereum","ether_fi_eth","EETH",18,"ether.fi ETH","304402204def5fc275f958698ce57f052597efb6504ca662223538533228b28a5041c6f002200c02019836305b1b5ac77ee1eb3e9acb3a338c62f35f823f237319bc481a328d","0x35fA164735182de50811E8e2E824cFb9B6118ac2",false,false],["ethereum","ethereum_name_service","ENS",18,"Ethereum Name Service","304402206f98ef83d316dda00cf1300b9b7d2a908f1bd31f55e56810749ec4cfb7ae8daf022070eed81c3d91434610319a88ae42b0318e5a925ea43d91961bd1927f44796dd5","0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72",false,false],["ethereum","ezeth","EZETH",18,"Renzo Restaked ETH","3045022100fba191cd5ba5649a0c1a9f89440fc2639a50d05ab50c5fa08c9420a8e50db7ef02207f90581c68f7bb2cd96e7163bcbf22605337529ce87e8cbe7e80dcd414c80f3d","0xbf5495Efe5DB9ce00f80364C8B423567e58d2110",false,false],["ethereum","fasttoken","FTN",18,"Fasttoken","3045022100951006529c4248f54001219b6b600c78b5665103974bf0822e3a00fe2be482d602204def1f47ecd327abc4ec2a3d7ab0e7d4432a89fdfe03e9bcd31ccfcb3f59ab04","0xaeDf386B755465871fF874E3E37Af5976E247064",false,false],["ethereum","fetch","FET",18,"Artificial Superintelligence Alliance","30440220511dd986d88311ccac6b6f188ecb3a1d06155e6969689e17da8be88792ca1d1702207ab9bfd82209dded657dcceeeea043ffb868e5b8202b5aa6c560647c64be4936","0xaea46A60368A7bD060eec7DF8CBa43b7EF41Ad85",false,false],["ethereum","first_digital_usd","FDUSD",18,"First Digital USD","3045022100e171493f0d342264e1e74def58afd915c20cd26a05f5122183be31345c77dbe7022017193556546ce450d7b9d93b8f45b0ea3a59eb94c0aa75de6ddb175c395a47b7","0xc5f0f7b66764F6ec8C8Dff7BA683102295E16409",false,false],["ethereum","floki","FLOKI",9,"FLOKI","3044022070d8793daa84c6564b1978229a2cebe2f025497b1179e8c012be7b07d9fa144b022058b2ba05822cf688bc2617d7a7cf53e0681ac201ca0ee0f3cb9722461a471d6e","0xcf0C122c6b73ff809C693DB761e7BaeBe62b6a2E",false,true],["ethereum","frax","FRAX",18,"Frax","304402200936ce19c0a31eb38bff0b86ffe2473d4223d0b371e166a035adccd63ec557690220124182ec464507758a2006e0d538704d7122ea73ff61f7ef4b633e12dce1ab27","0x853d955aCEf822Db058eb8505911ED77F175b99e",false,false],["ethereum","frax_ether","FRXETH",18,"Frax Ether","3045022100997318f97e9dc6bb6e0d805e16870eb49534a5195773576f2af95a7201ed1e5302207276bd9052c17a1b0d085e27cde0852cc5603111f60adeffcbc2b9268844d308","0x5E8422345238F34275888049021821E8E08CAa1f",false,false],["ethereum","gala","GALA",8,"Gala","304402204a955d845503e81d17ff4d74648e2a55a630701f1c675c2d639d48e6ae7755cd022045ffc6d71fac6e6ddee2c3f6e40b675fd82f4b5aba30745a2db26b7f743069a1","0xd1d2Eb1B1e90B638588728b4130137D262C87cae",false,false],["ethereum","gatechaintoken","GT",18,"GateChainToken","304502210094a7768058b0348365301f861d81016b58fd91e3d4a371163a47ba54832d42ef0220009c5747c533f1d276884b9737c9df24a21782b96a096f618ecc4e0ba161be24","0xE66747a101bFF2dBA3697199DCcE5b743b454759",false,false],["ethereum","gnosis","GNO",18,"Gnosis","304402207c0377904dbf01e240bec12919a032e0ba0011f701afe705f1b08042c895d18c022072dfa251c2113f39b884f3e9254e1822da8ade15cc66911c7beffa8d261879f7","0x6810e776880C02933D47DB1b9fc05908e5386b96",false,false],["ethereum","graph_token","GRT",18,"Graph Token","30450221009a9a1ded2666a2960662852c289e833a9f13d677edb2d590089fe111bb0858c602206ce0a5046ed71511cbec28a1960a4b6749dd76725a1f7c5d40e56bfb5c0067d7","0xc944E90C64B2c07662A292be6244BDf05Cda44a7",false,false],["ethereum","greenmetaversetoken","GMT",8,"GreenMetaverseToken","304402200fc91af76f80dc18ab918c8e9ac3391b4e2bc933ca9c6f2ddf050dc64f5f65bd0220553b32cd3110fa62d88538e64626c2a8553ac830e9ef31eecd77cb440ec4a832","0xe3c408BD53c31C085a1746AF401A4042954ff740",false,false],["ethereum","immutable_x","IMX",18,"Immutable X","30450221009b1a9532586be6b562f64c7b4b619b32db7322ef81baf9fcc890831bed9615a802207a20a0bf91763a8459ab743411f41cab4c3a624f4a646ae2254f44097e00cdb9","0xF57e7e7C23978C3cAEC3C3548E3D615c346e79fF",false,false],["ethereum","injective_token","INJ",18,"Injective Token","304402202a6f296f89f89e4c6302b4bc8b217a419f28cd176a2898d3fe3bb562739c586e022044daaf6eaf6ce353a0b9a34f2768c2d09728b4a001b0d886a5b59adec3be04f7","0xe28b3B32B6c345A34Ff64674606124Dd5Aceca30",false,false],["ethereum","iotex_network","IOTX",18,"IoTeX Network (ERC20)","3045022100bce6165ec65ac0de6c8b5fdcdeefb88d8af1a2c679d83adc13387eafc0f57d55022070ca327850985ea0b112366c44f8db064be0ed9677c36e303b72a204dc56cc7e","0x6fB3e0A217407EFFf7Ca062D46c26E5d60a14d69",false,true],["ethereum","jasmycoin","JASMY",18,"JasmyCoin","3045022100a56202883f3c1ed17123b5f11908cb2c6c9370a1ddad48d9de492cfdc73366d802201f9f53dec0f93a95c4dc2290feab2e97395c37339070583cb9e029662244d7ce","0x7420B4b9a0110cdC71fB720908340C03F9Bc03EC",false,false],["ethereum","kava","KAVA",18,"Kava","304402202913846eaf9a2ce4756a56175054b70f847237d724e9155ecf19cace590b429f022023181fb56747722fcba9ba47eefdbc8e74d689f27db269caf2849a273833d3b3","0x08d1E0A7fBd4eDBF56D81Da21D1b0c9c95Fb507F",false,true],["ethereum","kucoin_token","KCS",6,"KuCoin Token","30450221008a9b1622e643ec0a5adea2757ceddb94a91c28d711254eae1f038afd0ce2af3402204aa260e70b3222431dd31749411011134cc897ac125570a67bbdd5cbee2a35e7","0xf34960d9d60be18cC1D5Afc1A6F012A723a28811",false,false],["ethereum","layerzero","ZRO",18,"LayerZero","304402202c5ec0054641344c3b4e9abdfa78514b3a5e449a9984c9f2329c77b95bdbe95f02203bd049237e314dd50a9c70e321e21e754892114257992e1c696d31c07a7a6342","0x6985884C4392D348587B19cb9eAAf157F13271cd",false,false],["ethereum","leo_token","LEO",18,"Leo Token","3045022100d065ca5b1003a6eefb6ab83d9a83289920fbb7336bf98391ca677e010f8f17dc02202e8a0eb6b0aa1c1e9ce9c719c7de6b6f1c2879ca79ef05784d0c25248d77767a","0x2AF5D2aD76741191D15Dfe7bF6aC92d4Bd912Ca3",false,false],["ethereum","lido_dao_token","LDO",18,"Lido DAO Token","304502210090dc5084928229b6edf2b281a09bd9f98a4601b8da5026b39ddef2025521911d02205620d21b17879cf0cde90aa509dfd711c8c642c7b52108c29b8adafd578fbb39","0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32",false,false],["ethereum","link_chainlink","LINK",18,"Chainlink","30440220651bded883b8b185a2608450206aec79f9a8845406735f57b2a77c559fdb519202202162d372e209c04b03743367b3904628bd8f64b180f13cfb1e7df1600606dd72","0x514910771AF9Ca656af840dff83E8264EcF986CA",false,false],["ethereum","livepeer","LPT",18,"Livepeer","304402204e4fcc368035cc73a7de6d5cb8deb6204a005671db1716846676796cb9b068b0022069c54f0be2ad1802e3bdaf14f399341a85d5fe5c17b9bfa2305a7dd6213527f2","0x58b6A8A3302369DAEc383334672404Ee733aB239",false,false],["ethereum","lombard_staked_bitcoin","LBTC",8,"Lombard Staked Bitcoin","304402204eb602604b11a8a9a0a8a765db8ab4446a293945694a0478447c941c97f9901b02202520aca71407a2b148003d6b907ddcb8087e275fdeb2138931b0f9fb1d11b602","0x8236a87084f8B84306f72007F36F2618A5634494",false,false],["ethereum","makerdao","MKR",18,"MakerDAO","304402200bca467156035534a4fa8aeafff967b3845fc3cc11f6eea446d283103d8d23f602206eb2e6a90dd67b0bc45a8660ef501c560952c671c32f7394ac23a74191ac4f31","0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2",false,false],["ethereum","mantle","MNT",18,"Mantle","304502210083f64d757ded1a3fe82db9018c9d502dc24da311ecb2cab105ca893668c22e720220591ac6ae369e5e3d0f7782f009d3b197f42220f1ae2fd03c49395d5f8f8babe6","0x3c3a81e81dc49A522A592e7622A7E711c06bf354",false,false],["ethereum","mantra_dao","OM",18,"MANTRA DAO","3045022100c8f91d34de3d2e55755ff7056aaa43e65462fddbaec7c17fbf782ebb07703443022003179b588d5da221d064e49be206c4e1c637d5d7c52f9bb9f100098998d05d62","0x3593D125a4f7849a1B059E64F4517A86Dd60c95d",false,false],["ethereum","matic","MATIC",18,"Matic","3044022000d8fa7b6e409a0dc55723ba975179e7d1181d1fc78fccbece4e5a264814366a02203927d84a710c8892d02f7386ad20147c75fba4bdd486b0256ecd005770a7ca5b","0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",false,false],["ethereum","meth","METH",18,"mETH","3045022100ac5952623feb5dd6225537804bbe5d244e394c60b2c70cfea0cae701064d441d0220387dc1a004f4a59e6d36aa090374334e07f73f27c60c9dfb584261aca0ea858a","0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa",false,false],["ethereum","mog_coin","MOG",18,"Mog Coin","3045022100c64ba0a56d3a399bed44d85c3cbd910218cc9d2b9364b80168c8c691ec2023f9022049d8d0ff33ac1c83be40ba35b09757f0725225fed63609ed696034ee86c5df3d","0xaaeE1A9723aaDB7afA2810263653A34bA2C21C7a",false,false],["ethereum","near","NEAR",24,"NEAR","30440220538084827abba4ebce48bb549a0349ae3b47a33408653de2590fdd132f5cd4c902203851e7357a1b5f37786535532a0a8c884872b721e55435a3d346ab92f0f1cc62","0x85F17Cf997934a597031b2E18a9aB6ebD4B9f6a4",false,false],["ethereum","neiro","NEIRO",9,"Neiro","3045022100ae31139ff42e399882384e39a240fc93d289f91aa0b283a80dc1a01fbf31d8ce022051b63d3894c7260f33d600b5d63b4b08fe22c20401812963aaeab28e517a3781","0x812Ba41e071C7b7fA4EBcFB62dF5F45f6fA853Ee",false,false],["ethereum","nexo","NEXO",18,"NEXO","3044022074906d231c1ce9d892fdb1b5795f9e38a27d75d205421b3d5ce803a7a20884d402200436963f579b91431aed5739ea626650dee4054ede27980f74cf4b62a5add07d","0xB62132e35a6c13ee1EE0f84dC5d40bad8d815206",false,false],["ethereum","oasis_labs","ROSE",18,"Oasis Labs","304402205448086caf61e19cc415fc2a30039f8e8b82ace92b4fae57db4ed8bc2c010a75022010de085be64360f2a8f7384a4cd14fbf52ec0d9d6b42b31f47d0ad5372ff8195","0x88eA8Bc6e1A22B8201F44BE0A06b184cE15fA72D",false,true],["ethereum","okb","OKB",18,"OKB","3045022100fe7fe01ec1634c7a30dd562691f674d7d21820c2b8e5e4817c1701e9648d4a2702201dc2b24e28f58407a5aa2efe27b4df922551cf46ac4322f49c950a75ca6af9a1","0x75231F58b43240C9718Dd58B4967c5114342a86c",false,false],["ethereum","ondo","ONDO",18,"Ondo","30440220701af545ebe043e244c3db3468b75c5aae1f840ac83a7e4501658bc5173b48640220476e809c52862f007daa83ad51825fbc0a3f6f9d21eb2df5020cde4c376ad453","0xfAbA6f8e4a5E8Ab82F62fe7C39859FA577269BE3",false,false],["ethereum","pancakeswap_token","CAKE",18,"PancakeSwap Token","3045022100de2927e03592c81c74b1574feb6ef4d40e8fe58568be6a9f67ba9946aac7361902201a40936117bac4c58b85fb47386752f98c9a7e86c066f49396c5aae73cc9bae4","0x152649eA73beAb28c5b49B26eb48f7EAD6d4c898",false,false],["ethereum","paxos_gold","PAXG",18,"Paxos Gold","3044022000f0e57675b6367384fc82e8cd2307b345d831d31d7959fd9b8375d5ce33fd6602207c1a799e86d4df303784a882eeaf231fd0a8a0a004ea2b3c49348a5b07fd7cc0","0x45804880De22913dAFE09f4980848ECE6EcbAf78",false,false],["ethereum","paypal_usd","PYUSD",6,"PayPal USD","3044022002f21f67e1f948fa7bc1896ca834484aa1341b7e0372f5d767fb617d80e0dfc002204622a6c69bb5341ae4ef44995c1c24ba96fca9bf2d7de77f984e2fc3a5f8cf65","0x6c3ea9036406852006290770BEdFcAbA0e23A0e8",false,false],["ethereum","pendle","PENDLE",18,"Pendle","3045022100bb1904d2a430bc295589f6bc140e72c39e5c92694d56e202cb735d4d6e5078310220245e1daea537a6a170889de09c890d4eecbdda59b3349aa53315520b491ce000","0x808507121B80c02388fAd14726482e061B8da827",false,false],["ethereum","pepe","PEPE",18,"Pepe","304402206c0cd7c6a09365e3fbab62ee1ca06db60e096c527206514e0f8a6de9cba326cc022000edc1724c493c35da6454dba95f58e496fdb936c88dcad0b3ee015d860ef34e","0x6982508145454Ce325dDbE47a25d4ec3d2311933",false,false],["ethereum","pepecoin","PEPECOIN",18,"pepeCoin","3044022012b7fee2abf8ad282260301015db57844f0e92383114cd2481613a0cae18025c022052a59187e220216dae51c4013dcd627b0c85cff7428b3867d3776e44020da4d5","0xA9E8aCf069C58aEc8825542845Fd754e41a9489A",false,false],["ethereum","polygon_ecosystem_token","POL",18,"Polygon Ecosystem Token","3044022077eff823709a0359c79d5460b8106b5276c6d0268efe4ff69299f8620606189602205789ad5c9f4ddfc966c7a7f0b9955d4ad2e4d9f5e4bf19d54cdd04f96be5250c","0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6",false,false],["ethereum","prime","PRIME",18,"Prime","3045022100ba21b4831ccd1e9122734a13811102d4295c626e141312711c8fb8acd41eb8d9022062470df1fcd0a78dee5a6137561fa587e662e4074b6a455c1f4a35ed5bb7c6e4","0xb23d80f5FefcDDaa212212F028021B41DEd428CF",false,false],["ethereum","quant","QNT",18,"Quant","3045022100ffdf69cb5ca5f2de580a0796d04007bafa4db4a0a6df73d6ba1f3fdb1503f82e022011f94ac54925eea1c6b33861cb85ba3e237f7b168ba32a52f5329cbc4c0aeb41","0x4a220E6096B25EADb88358cb44068A3248254675",false,false],["ethereum","render_token","RNDR",18,"Render Token","3045022100857484c08b34fcc50d7cecb761a6652aefc15753fb9bac466d5de25d8a80796802205e8e38ad8b8732da6615633ff47ff8c70a4f02da0de3c177b5f6d2218dcf7c25","0x6De037ef9aD2725EB40118Bb1702EBb27e4Aeb24",false,false],["ethereum","rocket_pool_eth","RETH",18,"Rocket Pool ETH","30440220498c5d7baff339127b295f71e2eebe4faf0cea7e1cec985b51af367fb5e51b020220141e46f2759042c0e82a313d5a2dfe632bd4f0957304ff35879de2809ecd38fe","0xae78736Cd615f374D3085123A210448E74Fc6393",false,false],["ethereum","rseth","RSETH",18,"rsETH","30440220432e2a79c330dc4dd943e557b83ab2c160a032536eb8dd7bf04623ba555020b802204169cb747bbf88eaefff2e4cb7d98b1c8f9dcc47e18a2eab2df526b9e30fb6ea","0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7",false,false],["ethereum","sand","SAND",18,"SAND","3045022100ab9deb0fcb550233a1861c838042b4649fe49f1b9cf06239b4483f34cf622bd702200215de0365dd02819cc1653475fe5f74161a5dcc8ad5c19242cf8d280f3308de","0x3845badAde8e6dFF049820680d1F14bD3903a5d0",false,false],["ethereum","shiba_inu","SHIB",18,"SHIBA INU","3044022062879076cfc01d1b87b26309200c4b1506a4531318c2b66cfcb4cb6f8c7f92c802202420a4963ee7267e7a45438efd610c0fcdd14d655fc0f31f63ca95f2762d0491","0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE",false,false],["ethereum","solv_btc","SOLVBTC",18,"Solv BTC","3045022100ed6431286416a8babea8c09c32dfbcbe520020052465528d14ff346d751f8376022036aa1338ab0b678ab286f482e7b67e7e6bf45218f0b45142b7c4013bdaef8b60","0x7A56E1C57C7475CCf742a1832B028F0456652F97",false,false],["ethereum","starknet","STRK",18,"StarkNet","3045022100a531fcff66137792f737abffcfd93b354aa52742d86dbfd860cdd2487d2ce271022065c37c8e2a86b3fd00f51cce4a6022c8de42c6a0e0a732aea829642001b483ff","0xCa14007Eff0dB1f8135f4C25B34De49AB0d42766",false,false],["ethereum","steth","STETH",18,"LIDO Staked ETH","3045022100abdf606d3c95617ee65b0e52165ad768fc65fa155a9a049525bccc971e26b8de02205f22456404dde94dee363f9482f043b470768e128c38b262ee7970ce7fe899df","0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",false,false],["ethereum","superfarm","SUPER",18,"SuperFarm","304402201ca4a46b37457a5b4645711a859b12f9d24907a4109fdd7efbc35fea5ed18aff0220489acc5c8b0f109f0adde4fa1cd68dfbb8baffa8107dc5c75c12affbf119a69a","0xe53EC727dbDEB9E2d5456c3be40cFF031AB40A55",false,false],["ethereum","synthetix_network_token","SNX",18,"Synthetix Network Token","3045022100bd9e5139aa174b48549f88f2de7befa57c3ccbb6a0ddc6360e0902384476ab820220223c16846e0da3f037918466d27142f4e5eb43c441ea3167974301e4881c3603","0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",false,false],["ethereum","tether_gold","XAUT",6,"Tether Gold","3045022100878e9494dc8d833a30516f6f8f7c95b711707016e51c38dbe8dc46081ac7de9302205d5b296d0183b7c3a546a9e57ad2f4a829671236396ab6154d6cedf819b5cec6","0x68749665FF8D2d112Fa859AA293F07A622782F38",false,true],["ethereum","theta_token","THETA",18,"Theta Token","3045022100bfa089ee7f72bb801e930554faf0a55d38e18c7eca72b8d8f68fd9eda578d11c02202b8b62e4246b1a27885a4ac403c67a598ce114ee19239d807844637d047b009f","0x3883f5e181fccaF8410FA61e12b59BAd963fb645",false,true],["ethereum","tokenize_emblem","TKX",8,"Tokenize Emblem","3045022100984eb7c19c2548ef8729e80e62015ed09071be22e97681c64ab79023451a3b3e022009509c6cdfcaaa99cd12771bd60bc8582b96b4feeb14c1d1e4621ed315d15236","0x667102BD3413bFEaa3Dffb48fa8288819E480a88",false,false],["ethereum","trueusd","TUSD",18,"TrueUSD","30440220793cabf5a84ff4eb548e5dc52c4fdeb4dde7aba5e057608fa09ff0ed74ebbe6c02206c068560de40324fc599069e05fb5b400be34e81269b459db1f7639d8396efaf","0x0000000000085d4780B73119b644AE5ecd22b376",false,false],["ethereum","turbo","TURBO",18,"Turbo","3044022060c779cb22a65c80ba60d3382fa01998a6673a1ae93b5581682c41e41ce03f52022022349b94362fb627e56350b4829eb22570c374eaa475171a84ee96267d7f1e1f","0xA35923162C49cF95e6BF26623385eb431ad920D3",false,false],["ethereum","uniswap","UNI",18,"Uniswap","3045022100ae5d49e992705c94bb5afc7eed3eaf3a3cc5641b311eadbe667a04d5cfcc4ccd022074ae0849a4f1136631202d3d999c744fd76b422122d14d114ab7414e7287a041","0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",false,false],["ethereum","usd__coin","USDC",6,"USD Coin","3045022100b2e358726e4e6a6752cf344017c0e9d45b9a904120758d45f61b2804f9ad5299022015161ef28d8c4481bd9432c13562def9cce688bcfec896ef244c9a213f106cdd","0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",false,false],["ethereum","usd_tether__erc20_","USDT",6,"Tether USD","3044022078c66ccea3e4dedb15a24ec3c783d7b582cd260daf62fd36afe9a8212a344aed0220160ba8c1c4b6a8aa6565bed20632a091aeeeb7bfdac67fc6589a6031acbf511c","0xdAC17F958D2ee523a2206206994597C13D831ec7",false,false],["ethereum","usde","USDE",18,"USDe","3044022000e2c60c0acae998c32f139ffe95ecc07bdc24ff7e9b6795cea7c7e63c66f9a7022073d5bb969f7c5c2191c4ced9d2889ff0d936b50bad72eb5ad79313a0e6a16382","0x4c9EDD5852cd905f086C759E8383e09bff1E68B3",false,false],["ethereum","wbt","WBT",8,"WBT","3045022100bb56249637fdc72d2a4a0a8616f027a94501ffd9fb982520a47c54c2a5176b1c02205d7001e1b15213cf706ff4bcd473258eef0a6d2ab1283061835bcf8d809f51b0","0x925206b8a707096Ed26ae47C84747fE0bb734F59",false,false],["ethereum","weth","WETH",18,"WETH","3045022100b47ee8551c15a2cf681c649651e987d7e527c481d27c38da1f971a8242792bd3022069c3f688ac5493a23dab5798e3c9b07484765069e1d4be14321aae4d92cb8cbe","0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",false,false],["ethereum","worldcoin","WLD",18,"Worldcoin","3045022100eb87598304071714860becfea4228150c4dfc9de8886fd238b2188531159174e02206637b856e833a51f003eec6266dae7afdf128c4f90d35bdff18b7b131355d952","0x163f8C2467924be0ae7B5347228CABF260318753",false,false],["ethereum","wormhole_token","W",18,"Wormhole Token","3044022033dba5961077e3820f18c302746e49393ad187a4ba306fb267d60b90498a9d5302206cc80c84f72dffae459c3dcd94be20959eef6beba39a9cf9e07f81540240520b","0xB0fFa8000886e57F86dd5264b9582b2Ad87b2b91",false,false],["ethereum","wrapped_bitcoin","WBTC",8,"Wrapped Bitcoin","3045022100d733b3d1bc49a05698e14d8869834cf1911bef89cd98ea8d38f7c372b81a007b02206fb43deddc7508b567f330ba292eda1299410935434cb9795fec26ea1560dd2c","0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",false,false],["ethereum","wrapped_eeth","WEETH",18,"Wrapped eETH","30440220716cb39d6bb0e2d406a10bb756a93fbef60d622ebd8e5af5b6fb53fcf53fc92802202aa032418a2e7c0ca8f94e75302b6f17262623ef915ad38048fcfc949e0166aa","0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee",false,false],["ethereum","wsteth","WSTETH",18,"LIDO Wrapped Staked ETH","304402207c96e35011b39d96a67317e7e088977abd47609e05319ec48fe60e4beee0837c0220634c46cfdf5825097ed9aae3a6307cfe9a9c551213a277c29a9299114bc4f13d","0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/10/erc20.json
var _10_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["optimism","0xbitcoin_token","0XBTC",8,"0xBitcoin Token","3045022100daa58bc4f048d8c2920820e358fafaf4ab5b429e64af45141531b090805793cd022060af9e7a3ad4773701b589397fa62be974c259438a7b466a08aeab054e82f52c","0xe0BB0D3DE8c10976511e5030cA403dBf4c25165B",false,false],["optimism","aave_token","AAVE",18,"Aave Token","30440220418f7ca0dc087b2551a606c1a23d0a40b0353476b9421af1d42aa497034cb36302203a9fea2ad0160b21dd4631189072d894aa1ef1b30938b77d4fc511ce63a4909c","0x76FB31fb4af56892A25e32cFC43De717950c9278",false,false],["optimism","across_protocol_token","ACX",18,"Across Protocol Token","3044022044d9fe9f69192eca2300e873dc8ad76537e1fef3c51f46dca798c63a9bf1c2a902206e9c13cc1b91347fa2421b292c459b001ad86f05250d159d352ac590bd81fd1a","0xFf733b2A3557a7ed6697007ab5D11B79FdD1b76B",false,false],["optimism","alchemix_usd","ALUSD",18,"Alchemix USD","30440220362fee78236184d2ac8e8297d5d8fc45e5c64d02d7da229ae3d35d2d42ec2a450220308d8b76cc7a32a516e9e26c2e01bcb4909f9ad0cad22208de1a9074290783f4","0xCB8FA9a76b8e203D8C3797bF438d8FB81Ea3326A",false,false],["optimism","amulet","AMU",9,"Amulet","3044022074bfccbb5f25d18a5154efd1d0666393bf37be304aae9f780b645fdc8456101502202a424edc5354236626ed03e65bf42f12a01c7f97a7134ab092d9fa859f96ea9b","0x5C0Ea461FE5E6f3b4f90a071E72243C14C6abfd7",false,false],["optimism","ankr_network","ANKR",18,"Ankr Network","304402204a98a3c65d7a8bce4ca9b1c2d36217c57ee69e1020f47f572687b2c0b4279ae802206edaccf9831e9f06bd7b8ad70c7026beb9fcefeb5c7e33881853296259f22411","0xAeAeeD23478c3a4b798e4ed40D8B7F41366Ae861",false,false],["optimism","ankr_staked_eth","ANKRETH",18,"Ankr Staked ETH","3045022100da198d52417c7c4d49a3d5e7d6aec5b7e29ed17ec76b805d579ad6c8bb7909e3022058cb2cabd6f9f3bbf75510d10ccf7e7b665288afb13142e6735e23e3fac209ba","0xe05A08226c49b636ACf99c40Da8DC6aF83CE5bB3",false,false],["optimism","any_inu","AI",18,"Any Inu","304402206417b6fe79788a93e80a3f80d51420590371377d56cfa8eeee5eb332d717f58502201f1131534a90a5bfe6f7717e5a629b79b93004348d2c383047ca66e1c48d83cf","0x2598c30330D5771AE9F983979209486aE26dE875",false,false],["optimism","balancer","BAL",18,"Balancer","304402207be1f26132752386635272e72d6e8c556bf39c73ebbb49c6d614a269b36ae426022040dbf8671fa6d5aa319b7ee000d55df7c964519688200cbd518f47ce0cefca2b","0xFE8B128bA8C78aabC59d4c64cEE7fF28e9379921",false,false],["optimism","barnbridge_governance_token_optimism","BOND",18,"BarnBridge Governance Token (Optimism)","30450221008248c07e98c512f117c3450e8f76430bb2d80aa0071c054186a2ee9b88a3520a022053abc7b3c50caaab3cbcb277c55571b98b3b88abe035ca6ca0676b0c043d5935","0x3e7eF8f50246f725885102E8238CBba33F276747",false,false],["optimism","beethovenxtoken","BEETS",18,"BeethovenxToken","3045022100b3a3e18771dcf886bc2e9e883e5f21c540b79bc40ce7f37f019768534cd749090220721b1f5bf6a540ce7098aea456f9c62d5616aa5dc7b662dc532f4595cc85af2f","0xb4Bc46bc6cB217B59ea8F4530BaE26Bf69F677f0",false,false],["optimism","binance_peg_busd_token","BUSD",18,"Binance-Peg BUSD Token","3045022100a296c68a3cb9d579c83e4a6b8d3caa7f777abfcbc841f67a832ebfcff80aeb9a02200584a0fd2436c79f7d43fa6e78832b9a3bff4de709e362878aa7607808116b7c","0x9C9e5fD8bbc25984B178FdCE6117Defa39d2db39",false,false],["optimism","blockv","VEE",18,"BLOCKv","3045022100b38030ade6f6b040c7563bae700c6e8b9ffddc125bd5975c59593c0f8678efff0220784afd4b2f48620a9ca38c6f540edcc6ed652ba8814daa8ef62c4279772b4ad5","0xe3C332a5DcE0e1d9bC2cC72A68437790570C28a4",false,false],["optimism","cartesi_token","CTSI",18,"Cartesi Token","3044022042e5f48b6f77addf41a9364fd49aa9550ba2416a2358b6f513336d8acbf1e65002205ffd94c900b9ea4e56e15c61e995f7f77a919750e1b266d116404fd7f34a795e","0xEc6adef5E1006bb305bB1975333e8fc4071295bf",false,false],["optimism","chainlink_token","LINK",18,"ChainLink Token","304402200fa13f44802c6337be3666068808ba446ccff97a3d252aee7cf6570b0b2d0cf4022026fd7031e02f0f471c59f471bde5c1f0d4534c05b12a113b39db9e4a4eed100d","0x350a791Bfc2C21F9Ed5d10980Dad2e2638ffa7f6",false,false],["optimism","coinbase_wrapped_staked_eth","CBETH",18,"Coinbase Wrapped Staked ETH","3045022100b1ead2cd4a835a15367c98bcdde1737b1c4b7ec0237276d0609912c10e8f71fb022064d2949eaa8d601748b3b8627901400a3490916455dfb7922a266b4a9e943b3e","0xadDb6A0412DE1BA0F936DCaeb8Aaa24578dcF3B2",false,false],["optimism","connext","NEXT",18,"Connext","304402203e8ac3a0e6933c2c4d731f5acce52ad657bbf91b7daf48f02946ad721232915e02207a81fd2559fb3ca00af4ac6d402d00d847404cbc9df8c68768fab39c13ef31aa","0x58b9cB810A68a7f3e1E4f8Cb45D1B9B3c79705E8",false,false],["optimism","curve_dao_token","CRV",18,"Curve DAO Token","30450221008827154262e6837e2bdedc791cd3b86817e5e34209b25c47069e4fb8c2fd5dd402205921c433e0b81bf5ebc3cb41bd3e44739c0efde4e036ecd6f86dcba77d26c92e","0x0994206dfE8De6Ec6920FF4D779B0d950605Fb53",false,false],["optimism","curve_fi_usd_stablecoin","CRVUSD",18,"Curve.Fi USD Stablecoin","304402207e35c65fd7f700d5acfb50ad1f7a8747e3451a3e89034de9e763ae8a8a85639802200dc93b0004e863bfd653389994711d9350eb8f804e6d0103af5bdb731738d44c","0xC52D7F23a2e460248Db6eE192Cb23dD12bDDCbf6",false,false],["optimism","cyberconnect","CYBER",18,"CyberConnect","304402206266b83a634e3c7a2cfcae597f85a0b2bc3f98b16c31f36920902f0250991a650220255514c25aeca8d3d0c30519c1529cbd7972ad54559a86b8a9a2b59ae70c938a","0x14778860E937f509e651192a90589dE711Fb88a9",false,false],["optimism","dai_stablecoin","DAI",18,"Dai Stablecoin","304402207125b8d3845d2cebcf2c25b040ff9e8bfb17cf739ed2ad853992abacbc5974d402201f1bc8bd9fc3afc51b5500b58136d1c78f01abfdba6e32e960ce2b6a612874e7","0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",false,false],["optimism","defi_money_stablecoin","MONEY",18,"Defi.Money Stablecoin","304402201be7ee4bc74fd1e1392b77593505a299cca615cd5467861738f9e7d758b57da6022017195c32a05277b5498a6367bdd6c24a92e4c30866262eb85073ccc3a49ca822","0x69420f9E38a4e60a62224C489be4BF7a94402496",false,false],["optimism","dextoro","DTORO",18,"DexToro","3045022100f47cb204d73578daab7bb5a166113d36e012caa9363889bbf666c52e9fb6ca64022034db7ede1ce15b528f1e39d44d3be7cc479f8a00e00ac735e46c43348ba79a2b","0x1CeF2d62aF4cd26673C7416957CC4Ec619A696a7",false,false],["optimism","dforce_usd","USX",18,"dForce USD","3045022100ecd550db9a89da1eb9930a343686a88d1233b308c51a287977fe21d5a7ff6a010220437d6142b3a1d26e78fcfbdbd92546324d728fc48ec8e2067c3a589573b91c36","0xbfD291DA8A403DAAF7e5E9DC1ec0aCEaCd4848B9",false,false],["optimism","dhedge_dao_token","DHT",18,"dHEDGE DAO Token","304402201f8d746772289318de39a20925b1c97e61b9acdbbaaa879c1551ab020c30a40d022026f7423e6e12b2a669629783575361572f59a1efc48242a83a89da186a5f4a1d","0xAF9fE3B5cCDAe78188B1F8b9a49Da7ae9510F151",false,false],["optimism","dola_usd_stablecoin","DOLA",18,"Dola USD Stablecoin","304402200deeb434ee9287049dbb1f5c0bc12c3a33e24ac36b24371371460384ee9b86d30220010f3128cd2eee30cea3ffa498f2369c38d366fd112d7dd114edc607dfbe4b20","0x8aE125E8653821E851F12A49F7765db9a9ce7384",false,false],["optimism","euroe_stablecoin","EUROE",6,"EUROe Stablecoin","30440220189560a5bcd7d7e74f5d0f85a7ae6a58f85c2b6aa677d1c6df718e14bda1f17502202861cf5c1b0101c9e992a25fc14fda44a03671c29d3c55a5d074f9db2dd1282e","0x820802Fa8a99901F52e39acD21177b0BE6EE2974",false,false],["optimism","extra_finance","EXTRA",18,"Extra Finance","30440220300eb1e2afb1edf5eec28e67581225ad0525ea842de81ad7aa629c097ddac3a0022040dfc25daaf74c2a8783c7260f9c05155288eae108d8b5be6d456d4efb135e7d","0x2dAD3a13ef0C6366220f989157009e501e7938F8",false,false],["optimism","frax","FRAX",18,"Frax","3045022100ebbdb9e4c48cde940e0607fd864793b0c96c166c31a5d5a0161d1f2e81a0e0ba0220698920c290bad8e3d2a27e035acaa2584644a19ed5051b67f91632f5b27a102c","0x2E3D870790dC77A83DD1d18184Acc7439A53f475",false,false],["optimism","frax_ether","FRXETH",18,"Frax Ether","3044022035539cfa90412434497cfc11bfd005c422fd6395650b879e6f7d3fa5bbbfec8a02206af051d695571e9de9eb588883c8477678ecc450c5be69bea19d437db38a8075","0x6806411765Af15Bddd26f8f544A34cC40cb9838B",false,false],["optimism","fuse_token","FUSE",18,"Fuse Token","3045022100fc4b3193635d7cb46c54388a2089f51d3a1299a96b49ca588543970c6dd4ae5402205f69ad11c6e3b78bbf07c7a1a7237e6f0b5b68e5329a6ff82309e741ebc6ba22","0xe453d6649643F1F460C371dC3D1da98F7922fe51",false,false],["optimism","giveth_token","GIV",18,"Giveth Token","30440220315d526c4a89a844a0d8445b9ca58d0c5d146eaa054ca704949076bb2f6120fa02203c7de76fe6db01ecc59033b1a09a141271ef5f6ebbf4fc808de5549760416101","0x528CDc92eAB044E1E39FE43B9514bfdAB4412B98",false,false],["optimism","glo_dollar","USDGLO",18,"Glo Dollar","304402203fdcf28cf5aaddf4042e1935dd1f2dfde3183f679b52234e2c4e8e8e6543505e02200df74a60df23c89b7363fa5cc40d1cabb17599e3b4bf6564088556c48b74e17d","0x4F604735c1cF31399C6E711D5962b2B3E0225AD3",false,false],["optimism","granary_token","GRAIN",18,"Granary Token","3045022100f7fde547f18d1e01fdb7e4a0ff598bec5e221ee9ebc47c08c921fe6ba5ee48b70220763b9e5be73820cf4056479ee8517d24de6263a603972d15eeddc626add1edf9","0xfD389Dc9533717239856190F42475d3f263a270d",false,false],["optimism","hanchain","HAN",18,"HanChain","304402201f1353dfdb6d3f88f385b4059f06aabfc28e38e81d80119f05cb5c1588ba7cae0220255c656ee14affbec1afae3fec3fafb8a1a6418604b821acc71ec665c4a4431e","0x50Bce64397C75488465253c0A034b8097FeA6578",false,false],["optimism","hop","HOP",18,"Hop","30450221009a3597b3096a4b164537b8c0718bf813c183ed1c79dcab9a32abe35ecb8179f90220119905c8df49644077e86e7f643707ca763730173007f5bc46c271f6c9eae816","0xc5102fE9359FD9a28f877a67E36B0F050d81a3CC",false,false],["optimism","inceptionlrt_restaked_eth","INETH",18,"InceptionLRT restaked ETH","30450221009144edf9fcb03929974fe87e6a5f3de1d145ef40694d6db33e5409da5585ca4d02207e14fb5c00c4cbaaa7932687260e7f4322f729dd3cc3ba67c0688e60bd3c4ff0","0x5A7a183B6B44Dc4EC2E3d2eF43F98C5152b1d76d",false,false],["optimism","interport_token","ITP",18,"Interport Token","3044022014a385a7fb470b94c02f7bf9e8aef2e073bfb61a9e027ec9534227440c8d8cc402204b5da0ff3e83b542583e85c7e9ca5793bc7596020e81eb4cac31e5b4de404ce4","0x2b1D36f5B61AdDAf7DA7ebbd11B35FD8cfb0DE31",false,false],["optimism","jarvis_reward_token","JRT",18,"Jarvis Reward Token","3044022003ced50af95f34b56382b998abdad25459c7d0e63c2474296cb21c8b2b288d4502205b43ea7a3a0e9e2026e93c7629260dfeac5adbac843b378956d8bed733b55bec","0x15e770B95Edd73fD96b02EcE0266247D50895E76",false,false],["optimism","kromatika","KROM",18,"Kromatika","304402200d9f6451797f301919c4dc2ddc97bf8bb84e8633efed1a0f0dbe2509ad6f17d2022060205e53f18679b19f7d4d2a8c9639ea383183d0a3bb63854c3e3e983546311f","0xF98dCd95217E15E05d8638da4c91125E59590B07",false,false],["optimism","kujira_native_asset","KUJI",6,"Kujira native asset","304402201e98131efc6c674fc21dff67ae804808547f78844a8f49ad96ce09504795f65a02200770f08fa5b95d4610bce102f254ce6ce7ce44abf2eefa5c61ca1fb0bccbba88","0x3A18dcC9745eDcD1Ef33ecB93b0b6eBA5671e7Ca",false,false],["optimism","kwenta","KWENTA",18,"Kwenta","3045022100d8dc79bda2ba273335b19be679deb2cb9be7216952ac47c61d5b813ea22d24100220493497bb5e003f0f2f08240f7a97570d79ba77bdbb1a7a792bb41344a5f9b59c","0x920Cf626a271321C151D027030D5d08aF699456b",false,false],["optimism","kyber_network_crystal_v2","KNC",18,"Kyber Network Crystal v2","30450221008d76ff4214064282c1cba9e6ce78f866b4aa87c3456d377aed47a28455517f5602202e50bd5913c89242f8016e23bb138bba6e86b6bced9f8c8211e2fbd4eed97d68","0xa00E3A3511aAC35cA78530c85007AFCd31753819",false,false],["optimism","layerzero","ZRO",18,"LayerZero","3045022100ab567b1c6e28d820c18e6a0bd369b88a6e35fbbcc22fa1e8b1f1d7353dd22c7e022043aff6f09a292aae9ae6ac4d0c7a7e4925c96bae6e1c4449110982d0a0d832b7","0x6985884C4392D348587B19cb9eAAf157F13271cd",false,false],["optimism","lido_dao_token","LDO",18,"Lido DAO Token","3045022100b9d8e3db88a81c251e5a9cca1bb8f97b5eb3f2b7048e97bbc419df47a83badec02204dc1eff4d55a606f77de7e1becb33fe4eaf8e46bb11e8039fe51baa036593534","0xFdb794692724153d1488CcdBE0C56c252596735F",false,false],["optimism","lusd_stablecoin","LUSD",18,"LUSD Stablecoin","30450221008996a5a37b6acae1183a4b8984d615e36ce22aa643ee5d1214aae1c91804868202206f9ef14dc1366e44de3b48ab8291aea7aaf188caa2812047c2222790b4ba27db","0xc40F949F8a4e094D1b49a23ea9241D289B7b2819",false,false],["optimism","meta","MTA",18,"Meta","3044022003d995564a09fef0b03dd27578821721d60629adb12181194eef3ffd9d93d2dd02203617d8e55c3dbc48c9169646c1df119b49f7d6bcad5e56e0c20c6d5f97fefe84","0x929B939f8524c3Be977af57A4A0aD3fb1E374b50",false,false],["optimism","mountain_protocol_usd","USDM",18,"Mountain Protocol USD","3045022100f7a543785c0d51695593b17514e4700725feefde16ef30aa919e11fc4fd1f3c4022041ddbf18af256a209489d97b13cabdd95d0dd299209422a2961f9acc8d443dc5","0x59D9356E565Ab3A36dD77763Fc0d87fEaf85508C",false,false],["optimism","mummy","MMY",18,"MUMMY","304402206219a53300c700bd8d102fd59dab1d5eee04a5428098c1152a98466216f49ba602200316ea75dbf590f3756bc7abcf67f56cf0e54ef32ebc761dcc648078f6196d44","0x47536F17F4fF30e64A96a7555826b8f9e66ec468",false,false],["optimism","nya","NYA",18,"Nya","3044022078e21f4c7c69bc7eb2062c546d968d31cef6593267e4c093dfafeef64ba5cd4702203f470a123644c2e20d0576d4648c3c55b4d6a8118da52a476f1998574c76c3d2","0x38F9bf9dCe51833Ec7f03C9dC218197999999999",false,false],["optimism","oath_token","OATH",18,"Oath Token","304402205a13f4fe7f58f719068a5959a18545b157afacd6c41ef6f7a8ad8d6ae02d6efe022064bed57b5d4b2298b3e3803933e9a2bd23d69413a34877d881a9040ac00f2f81","0x00e1724885473B63bCE08a9f0a52F35b0979e35A",false,false],["optimism","ocean_token","OCEAN",18,"Ocean Token","3045022100828a43f329175f4034e417b87dc2e3d361de278c4ef7919ca4360aa6739bdc48022040f2e45930ad2df047a0cb93dfd5b06b5ec82bfd2d9f7094f74c4938c045996b","0x2561aa2bB1d2Eb6629EDd7b0938d7679B8b49f9E",false,false],["optimism","optimism","OP",18,"Optimism","3045022100e465d5b7725838059aa5bbd292cc1693fc8bc0eef773473b3cc62365c605151702200e9376c426c530ad91543de26db7089500337e5468a460b422775b04197b2249","0x4200000000000000000000000000000000000042",false,false],["optimism","optimism_tbtc_v2","TBTC",18,"Optimism tBTC v2","30450221008629a5bd48207e4433797074524cc94df5a65ea3e04ff54a316b31a49beaad33022013b825db72c231e0def00362d240ecda82b3eb34246c4f7cfb7ab88d5a1cbaff","0x6c84a8f1c29108F47a79964b5Fe888D4f4D0dE40",false,false],["optimism","orderly_network","ORDER",18,"Orderly Network","3045022100be4483a92f40c9556e6df21c593755440057e179a0b834340bffbaa493e617b5022041061699b2307f95445e94e5b25fd7ecc70d371a8dcf200b4b2b8eaee1c86783","0x4E200fE2f3eFb977d5fd9c430A41531FB04d97B8",false,false],["optimism","osaka_protocol","OSAK",18,"Osaka Protocol","3044022043006663c40b0d5d81aeadde085285e269605be14af2717f3a65f12d02b2891f0220564633b309cca0ca662786c204f1206bf3281f5bf59ef3f1d44396deaa0eff8b","0xbFd5206962267c7b4b4A8B3D76AC2E1b2A5c4d5e",false,false],["optimism","paper","PAPER",18,"Paper","304402205bf1bd00e45eb4fe6e31913a8cf5fdf76036f624a0d79087dbf47185a4520a50022044d8e08efea235f4ae01da8ffa2bc09727bfde2ab3fd711587850ee35a0f6017","0x00F932F0FE257456b32dedA4758922E56A4F4b42",false,false],["optimism","paraswap","PSP",18,"ParaSwap","3045022100f8e88990e420df246280fa394d9f56b23aa0d68b72c638c456a3ddfefb82e34102205177bb03995b26b10efece9d934696d8a0ab2d8a4f73cae01b76a71191df6805","0xd3594E879B358F430E20F82bea61e83562d49D48",false,false],["optimism","pendle","PENDLE",18,"Pendle","3045022100b968b32a1b4650b1a4cb7d30d1381c5eb0351d362fb17cc4108b6b212cdfd0c1022057cc12a184207008b87ebdf33e52cdf637b1630ba4bada5f582c9810daf0cda1","0xBC7B1Ff1c6989f006a1185318eD4E7b5796e66E1",false,false],["optimism","penpie_token","PNP",18,"Penpie Token","304402201fd1fdcedd272cf5d29ebe37bdb5ea1b5df3fea8e5bf22c4a63f0653a1669bae022045eae3a1aba25572b750d0d3f42bce6ead712ab6b9a5acf69cfe0670bc66501c","0xC4a65A93dD6CD9717551ebE827E8baEe025d1d7E",false,false],["optimism","perpetual","PERP",18,"Perpetual","3044022056ed6b81178d51b231ebb0761aac78747335ad507400e4d32fef5abf647250d402206c0308e8aa00acab5c235d826dc691ff1be941ee13a209101bfc17952c6749ec","0x9e1028F5F1D5eDE59748FFceE5532509976840E0",false,false],["optimism","pika","PIKA",18,"Pika","30450221008132bd2f1e1ed6c66571de08127b1c32b9e400cc1ef793fddd9381afb9c6b48e02202e41b2605e78c7a43b510949993665724bd72de1d3e4ccfa23cd19a01d6b58b0","0x9A601C5bb360811d96A23689066af316a30c3027",false,false],["optimism","pooltogether","POOL",18,"PoolTogether","3045022100e5b680265998ef114e0ca6361d14aa6bcbee6c03409711a8b5a74ab208b02ef70220317a48fed3a0f3f5d88c80be55dd39eec7d6368097e618177c8066eef510ca20","0x395Ae52bB17aef68C2888d941736A71dC6d4e125",false,false],["optimism","port3_network","PORT3",18,"Port3 Network","304402207ff8471c45fb4598102421e5f93d0ab59c1cfb1c76ecaf31577d87de7837a828022066d7f0be2af8a4491b13c0bdb35f8f4cc81f56d2d829771c2f775dd1ae597769","0xb4357054c3dA8D46eD642383F03139aC7f090343",false,false],["optimism","premia","PREMIA",18,"Premia","3045022100cdb5ab057c6b07b68d5fe203a21f6182f31a5ab410c576198b67ae29d38410dd0220255ce2daa89d1110c392d08582c18a7f886984c26e2980ecd16019d93e82f9cd","0x374Ad0f47F4ca39c78E5Cc54f1C9e426FF8f231A",false,false],["optimism","protocol_token","KITE",18,"Protocol Token","3045022100cf35348f8e1ff30bc410ab7a308fef3eece16a4e3e09d6bad28e7f363f666de002201c7c7927893a817ec916e16578629496b3162820fc58231298a3ab3637092084","0xf467C7d5a4A9C4687fFc7986aC6aD5A4c81E1404",false,false],["optimism","pstake_finance","PSTAKE",18,"pSTAKE Finance","304402203d4a8ab040f5c4d038c05a2a1842e02ba300e23f904f03e6b095f373e9b7e4a0022074759fa1e8cc61f9005168273b1b5588d394b9f059252ca9918763cf15f25c48","0x023550ADDe4FA2F90D63a41D9282BEE0294c04cD",false,false],["optimism","radioshack_token","RADIO",18,"RadioShack Token","3045022100e1e9f614bb3b84d3a7e8c9ca43abf8cbb4f34c6aadbac3273f0fdccba3215b1502205722f5afc78bb618489accefca4573b531656bbaceb27a9eb769928c72c5a82c","0xf899e3909B4492859d44260E1de41A9E663e70F5",false,false],["optimism","rai_reflex_index","RAI",18,"Rai Reflex Index","3044022040462ce0454c3c8e1e5c674132d0060836565f9e786b10c8652dedd388495cf8022079d42d8931d13bcfd4fc11916ca91e67f20aa111012342f4dcefa7d81442d231","0x7FB688CCf682d58f86D7e38e03f9D22e7705448B",false,false],["optimism","rigo_token","GRG",18,"Rigo Token","3044022076cc1b52f7cb8b7c99242dbeefd620b2804f34f3e1c1e02efe5110d6705dcdc402204c6688d33b03b9d7e17289267db2c21b04a053da90b7c86abdf72268f8430b5e","0xEcF46257ed31c329F204Eb43E254C609dee143B3",false,false],["optimism","rocket_pool_eth","RETH",18,"Rocket Pool ETH","304402203e20ec8351ccf8af3389d4d26697afaa0cd7d761b031f7241f085bf27327e42a02201b6a69faad43874b1bac4088979b90a83532a87bf209558f13563a764b5ee2c1","0x9Bcef72be871e61ED4fBbc7630889beE758eb81D",false,false],["optimism","saakuru","SKR",18,"Saakuru","30450221008b9d099e03ad8eaf3e66163d57e795d55a99829f231493123e4f53ee0206c902022013ef1c079610b3454d86555be14c515459077b41d94c852d50c3a615103fa1a2","0xe2dCA969624795985F2f083BcD0b674337ba130a",false,false],["optimism","sail_token","SAIL",18,"SAIL Token","30440220130e9c1265463bf8b956b99937f0b658168371dcdb675f7ab4269709c509f95f02207f7071c8a6dbbd472b9623382a84064f9e5a591427411bc4d5ebbfad06a9b2ed","0x7a1263eC3Bf0a19e25C553B8A2C312e903262C5E",false,false],["optimism","shapeshift_fox","FOX",18,"ShapeShift FOX","3044022028a48ff3532b0da9ec6edb21cf04f13c55439d998ba0affb3fd1ffba21911a2d02205b8358e4971ffd8395e98f930f103809be414c1b57b2717f0bfd2ed572e78c8d","0xF1a0DA3367BC7aa04F8D94BA57B862ff37CeD174",false,false],["optimism","staked_frax","SFRAX",18,"Staked FRAX","304402200c5084327e186052a55f7b3a81326938d6d6bca165cf72ad5444bad68ed12ed2022052d95cc5dd994592b6e6ffe34a44cdcd830b827b54f68bf366a9205afb242fe9","0x2Dd1B4D4548aCCeA497050619965f91f78b3b532",false,false],["optimism","staked_frax_ether","SFRXETH",18,"Staked Frax Ether","304402206092ea821a4f2fa0d2db88325a8cfe17d606f57d1e508e6fbccacd81cd3ba333022054cc111c21e5beb117aa825bb23a1f93f857e2447c275e5b55348613905338b2","0x484c2D6e3cDd945a8B2DF735e079178C1036578c",false,false],["optimism","stargatetoken","STG",18,"StargateToken","30440220048584a5d62b4f9597589186564b31f0f5ab77cbe38719391d748d53d66eb72002206e333c01d5c6afb1c32e789afafbad6ae0dd58d458d071857265c1f1f03637ab","0x296F55F8Fb28E498B858d0BcDA06D955B2Cb3f97",false,false],["optimism","synapse","SYN",18,"Synapse","304402205dc6a1c1f62303a49b42bd0569df3f284ea19c472fa5701439fc0ed2882831ed02201a7d97e3e7b179a7025f75017a9b1e4d0d07202b9b01f13586a8ed13edfd57cf","0x5A5fFf6F753d7C11A56A52FE47a177a87e431655",false,false],["optimism","synth_seth","SETH",18,"Synth sETH","3045022100bc48fba9bedf2d5af4ffd580a2ef8799d623793b8984df1d959ca98e7b30057802202dc2698eca42191e832cbd0eb4148f421e17f5a04b62f34693328525292efa60","0xE405de8F52ba7559f9df3C368500B6E6ae6Cee49",false,false],["optimism","synth_susd","SUSD",18,"Synth sUSD","3045022100aec1237635db13ba9b3732ed54b7553ab18f9d361d95a5fb3cd4d7e6907b0d4e02203698033fe7f52a031c4898c6f1d6756c989ca1553fc114ac8ecef586652cb15e","0x8c6f28f2F1A3C87F0f938b96d27520d9751ec8d9",false,false],["optimism","synthetix_network_token","SNX",18,"Synthetix Network Token","3045022100f9694daae21eae34fbb99229ca60193a95127d0223fef4b101265fef2da09ed0022061aa3106a76692dee9981aedcb35e75b5228718906f570377500149e08ab7dfb","0x8700dAec35aF8Ff88c16BdF0418774CB3D7599B4",false,false],["optimism","tarot","TAROT",18,"Tarot","3043021f79d1836d77da342c67a1c9c8d2ac5421f0f6872da0784f2e166d9fccd99f8f022040c1c0b64fd31121e65d2f572375fd32ab009fd138e14d6f36d081e5b18dd00c","0x1F514A61bcde34F94Bc39731235690ab9da737F7",false,false],["optimism","tellor","TRB",18,"Tellor","3045022100d72a421d7aaa21485445a73692882469c248f2967ef55b3ac25a5e9fea23bf35022064450e68a0c8b79068bcd1ff45b95a258f18c892f5ac67af4ad3d390f6ad4824","0xaf8cA653Fa2772d58f4368B0a71980e9E3cEB888",false,false],["optimism","thales_dao_token","THALES",18,"Thales DAO Token","3044022046d119d67b3f0e49b1805e113b6048e697e0467ec08008ff912d7009098f2739022015adc956d690d796a4623935fe8b9d9858b2c377c2c2913f70a6cecf8560d20f","0x217D47011b23BB961eB6D93cA9945B7501a5BB11",false,false],["optimism","the_doge_nft","DOG",18,"The Doge NFT","3045022100ccc98ace8478efaec6e344221f30808fb5a10c1bed75f682066e6663b1fb1bb40220744383d92d31e6594c3e3dac10d4732aac472d2d10e33b8f172a978641ce9151","0x8F69Ee043d52161Fd29137AeDf63f5e70cd504D5",false,false],["optimism","tlx_dao_token","TLX",18,"TLX DAO Token","304402207abd83223803ab99329934ceedb870672676ab5342be456dbc8a628b81d7390e0220532ec82c2e49d8f1b12e6bddaf003769b28cc73f3a45c2a3cff6f6f2f20da9b0","0xD9cC3D70E730503E7f28c1B407389198c4B75FA2",false,false],["optimism","trueusd","TUSD",18,"TrueUSD","30440220016f06e37f7d5c903d60148f47099b624ba1ac4e82aa33e93a6e389a3cc61c3f022028a4e9741cafecb98c08ba04e7470462f8b663f81e2cb14e564be1242dfec810","0xcB59a0A753fDB7491d5F3D794316F1adE197B21E",false,false],["optimism","uniswap","UNI",18,"Uniswap","304402204269dc3220bfcf3e8f49bc1d347e3aa4e571a17868fc024ccd492a7b18469fb60220158497b335cb74f77dd5dcf5879ea3f19131167a21a2560b58c7dbafa7bdc2ee","0x6fd9d7AD17242c41f7131d257212c54A0e816691",false,false],["optimism","usd_coin_e","USDC.E",6,"USD Coin (bridged)","30440220739893ad392eb372d576dc396543084e9c13a6bfb2caf1f272e823fe448ebf90022031b8ea111078a1b660154f0df0ee2d6f6a1aabe70057e5b03e5294396700f799","0x7F5c764cBc14f9669B88837ca1490cCa17c31607",false,false],["optimism","usdv","USDV",6,"USDV","3045022100af9b6c6419346fbe9b3a1ce51a7023b7ae12c0d5239976c1225ab72f3e9cc4ef02204947d0aa677cdd580a213a5b10e2b1967f79154534583e18d79667c06f9f61fd","0x323665443CEf804A3b5206103304BD4872EA4253",false,false],["optimism","velodromev2","VELO",18,"VelodromeV2","3044022011964ac54293e8239ad07ee39e5cf5d0bce0a3a34ef810456b7e1234598da7a5022061c6949ee157f247b176b30b34110164d2af0b93e466ec672d08b9f8dcb6b290","0x9560e827aF36c94D2Ac33a39bCE1Fe78631088Db",false,false],["optimism","vicicoin","VCNT",18,"ViciCoin","304402204f9dcc7964e029ff7e3664683f8b43b1e8cc2533e5345afcfb5becf2173be59d02204345d6174df9b95f61ec3d41f4911f2752ba0dd2220860ce563a9ddb4dceb058","0xc6BDFC4f2E90196738873E824a9eFa03F7c64176",false,false],["optimism","wagmi","WAGMI",18,"Wagmi","3045022100a9a6c41e9eda5f6017c8959119c4d32a5c3fa0d0156e61550f185a83a6145ddb02205c4a784979636867f4f94c50ee7f582fe97f6123b7af267a0d610af6f3e71cd0","0xaf20f5f19698f1D19351028cd7103B63D30DE7d7",false,false],["optimism","worldcoin","WLD",18,"Worldcoin","3045022100c8326b3a574e1d31ccd63f6404173b2a10bc31b63ed1ea730592f8f6aa64f7a2022037bba988b621491a71f34d78cb4d106eabddf280317636cce9c1e5745bbed4d1","0xdC6fF44d5d932Cbd77B52E5612Ba0529DC6226F1",false,false],["optimism","wrapped_btc","WBTC",8,"Wrapped BTC","304402204f3e3a20910d0477597770998077d11761b00f6b04ddde49b6f5b3821d1080a0022061f797d863b270d4dc0cfa9d59393f46444aa4b9630c7d703fc9f8bc89ef5b40","0x68f180fcCe6836688e9084f035309E29Bf0A2095",false,false],["optimism","wrapped_ether","WETH",18,"Wrapped Ether","3045022100eee7b29d02da60a3f7d48181c13d9ba07b07161ede9ef43f96ffed19c88cc8f902202e4cdce9fa3292c80ad563f89d14d82e8e8f8fd100a61e7949ff4beb14b82e4d","0x4200000000000000000000000000000000000006",false,false],["optimism","xprt_native_asset","XPRT",6,"XPRT native asset","3044022054ec9bd8e15b4e06cb37a6fab9f5ceffad1f37d6b3d66e8e7f350b9b8138e51702207eef14df7d2c8676de50f0f74d82ac24e6fc635ae84a7bfe40393186751afb25","0xc7Edf7B7b3667a06992508e7B156eff794a9e1c8",false,false],["optimism","xzoomercoin","XZOOMER",18,"xZoomerCoin","304402205cd50942b4ace0482d02139d19cb1ab2ac44badaace1119044e19fcfb92498a6022036115d2c2264c340a52cd2b9493f55c1067a6d15417ad0bd1e5a9e492afaba5c","0xB962150760F9A3bB00e3E9Cf48297EE20AdA4A33",false,false],["optimism","yearn_finance","YFI",18,"yearn.finance","3044022027ccd8b9e1f0877c9cd88d812649749048e8c2b5bf4584c603dbe1b8dcc99faf02204b9c7c4387ae5ce4a79404a54cd5f7fbcc3d80932f56aa3232d5d24081e72f87","0x9046D36440290FfDE54FE0DD84Db8b1CfEE9107B",false,false],["optimism","zunami_token","ZUN",18,"Zunami Token","3045022100d72eb1d907712708d12cad322c096f8aceafce34376f1b22faacb983b58fb01f02200cd75f1adcde69d11363af1cb511eae44601f04b39af2514b631d3c57a456ba4","0x25193034153AfB4251a8E02a8Db0DeaeF4C876F6",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/25/erc20.json
var _25_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["cronos","90_s_kid","KIDS",18,"90\'s Kid","304402206eccc74676af9a818ace945ac13b4bedd0322e8f1b4061247d140182898f280c02200a95f0b94729513913987f27c2906d559593a3e3dd70a1be04bb8a116deec334","0x251f890e708972eD7C9147a7f12a618E767Eb760",false,false],["cronos","ada","ADA",6,"ADA","3044022100822093adbba5ed5ae787b4de3fc3bde28a01c6bc36fb4dd5125d59489ca17929021f176c15ec099bd66e76a9a64e8c7e73f09446eb18a6fde34494f4e35325d571","0x0e517979C2c1c1522ddB0c73905e0D39b3F990c0",false,false],["cronos","autosingle_token","AUTOS",18,"AutoSingle Token","3045022100a393ed3e67ce2bd52174f3be27f8b55ad7d54a5547407e39b6fe340beb46404c02206e36912eeac5a53ac0f0943d39aa557ef67a1a3aa34dfc31ea361fdf48d07f96","0xae620DC4B9b6e44FBeb4a949F63AC957Cc43b5dD",false,false],["cronos","bad_token","BAD",18,"BAD TOKEN","3045022100c59c7c89a3b19a73dec61c6104af0f9f6973fe0df91f62316658edebb7bc7d0502200b93a7edb37ca275d1632a86abd6ddd3a9f0324dd0128748dadd0b09e2f1eaf8","0x0e66Ed8e8646472aB98a7acd38E7bDcB86da456f",false,false],["cronos","binance_usd","BUSD",18,"Binance USD","3045022100bc893cad980052a414f5609bd248bba9a19ed7f057fa2693280e536bce8a3759022001296149af01f578db3675f2f7443492c2202a2745b83af7404375e44604947e","0xC74D59A548ecf7fc1754bb7810D716E9Ac3e3AE5",false,false],["cronos","bonded_cro","BCRO",18,"Bonded CRO","3045022100c009712a14804304d7da785aacbd85fe643b2af219a451326ace81765a6a68e10220068b710aff40bd98cc1f095c070d41bb1232d8e7bec4d139af334f476cb5134c","0xeBAceB7F193955b946cC5dd8f8724a80671a1F2F",false,false],["cronos","build_token","BUILD",18,"Build Token","3045022100900f3a5c8bdc4096481011561a381b09a443a301e2d5240bd80a97c41be5a54a0220767310f96faac8a9c04ce15e244e9ab304d3fee8d451b33ad8d2a3214d001641","0x6467df17771AB26D1825bF0891b3c421D92EBC1d",false,false],["cronos","candy_token","CANDY",18,"Candy Token","304402204f492e0584b5eb079fcedc1dbb6cb377599ed7360a9614516803cc67266746c102207c86ecb9247d089c7531327c60f42e1be6b86d67b1d70e0bda8a8ac55529e14b","0x06C04B0AD236e7Ca3B3189b1d049FE80109C7977",false,false],["cronos","chainlink_token","LINK",18,"ChainLink Token","304402202ff713ab2869e57c44d21ed90d46f6b82d2deeed8312684a1b70ba0fff6e0ebf02207f29e559f648351d3583c9c0bf9271b27ef939a7400063136627ce6e86d0f924","0xBc6f24649CCd67eC42342AccdCECCB2eFA27c9d9",false,false],["cronos","chucky","CHUCKY",18,"Chucky","3045022100eeaa1305ea92f418308846fe658bad40a04d4895102125a6a50dbc3a298f99e602205d9936f83fc88f2cae9b3d3900faa7682e316c824fdacd09698f397a24104fab","0x85608d6373FDCfc9fB1582187dC3A81C2942F3f2",false,false],["cronos","corgiai","CORGIAI",18,"CorgiAI","3045022100cd597df06d7e391a9588e10a24bcdae7c34beb5719a62eb897dfcee1b421b10302207cb31ec04bb606811adfaaeb4721de114269736250807bff2dea8167d8bdd80d","0x6b431B8a964BFcf28191b07c91189fF4403957D0",false,false],["cronos","croakey","CROAK",18,"Croakey","30440220016915ec31742161c1bc754548f5b4b4e6cd6c463d5acb23d2ee305815f82fe602207d67eae9ee7b5e8ffe089e737adadbfe8af1e15701fe1f58034f33f2ff9c8bac","0xed70e1b02a63fAfD5ECE7c0a2A1B12d4b424B4A8",false,false],["cronos","crodex_token","CRX",18,"Crodex Token","3044022071ffa21ae1c5007d8ba1167cb87491a456d4fc8c7ca744cabd53fb7690714244022077e50161204c37a801f61c94c9e52100f5e9255c66a17b07b81e9cd6edcc22df","0xe243CCab9E66E6cF1215376980811ddf1eb7F689",false,false],["cronos","croginal_cats","CROGINAL",18,"Croginal Cats","304402205de371656d8d44dcd03ff3357694e14794c28ae2795e7aec7070e1af294d04b50220076ced571700108e733f8d00bf1845469e8425c03f044f0ebf6581f0fa1881f5","0xD50f5739A09f36C6f97cC9a4849C5462Ba6129A3",false,false],["cronos","croissant_games","CROISSANT",18,"Croissant Games","304502210087c0eeb4c0d22beb60d6027e150694d42de3b6f57e774667cc885d3e985b79db02206f6ecd37353303a3b05e25d37679163491b161f62cb87bdc2e05044973dc640b","0xa0C3c184493f2Fae7d2f2Bd83F195a1c300FA353",false,false],["cronos","cronaswap_token","CRONA",18,"CronaSwap Token","3045022100deb8b79e14f9e7b05124c1818e603d867a10d46dcaf98cd52bc205bf946c216a02206f366b7f26c27f0017248d2a75490049aca915d495331bacf96fcf8a1ccf6673","0xadbd1231fb360047525BEdF962581F3eee7b49fe",false,false],["cronos","crononymous","CRONON",18,"Crononymous","3045022100877caebf04fddff6fdebe85ca8a681fb75a2c471cf19f7e40f6bcfa9897f712702200a620cd3f34888ce5b43b314981b0b88b03b24688807c6db2ae9ac8f52604ce6","0x50aa2611004B3252030Cc95E9c5A2a44DFED9983",false,false],["cronos","cronosverse","VRSE",18,"CronosVerse","304402204aeffc8e27fbbcfd742a141e4e6c8cb7dd9139982321772d822f2b3e477ad65402205b8a033f379bcf892077f8c5586377d34d75a7d6d7c7a4c19ef6c00a7ec47919","0x2Ba01269EaFCe04c8DCCC4A9887884AB66E4Bcb1",false,false],["cronos","crypto_com_wrapped_staked_eth","CDCETH",18,"Crypto.com Wrapped Staked ETH","30450221008cb470bd9230f78ccf0aa36bb57741bb58ab76684070f68642098435d06f6e1e022041f67fb78502b7b66d0ce4e2ddc71f8a8c4b4d2f7909d5e94fb6d0aad5760611","0x7a7c9db510aB29A2FC362a4c34260BEcB5cE3446",false,false],["cronos","crystaltoken","CRYSTL",18,"CrystalToken","3044022076dc2dc4522397aa0c2d44bacdda71c76537e28b8146856da17c1937082f8b0c02200276879df7125c395f3ac865e2d96721d5b0b22931f45e29b4bc12e5be2aec06","0xCbDE0E17d14F49e10a10302a32d17AE88a7Ecb8B",false,false],["cronos","dai_stablecoin","DAI",18,"Dai Stablecoin","3044022035fa287118eb8e90d487ee98592b6290eb580b610e99991486df93f008887ac502205b93afb0335f565e12d14fe40ddb3c607a8f7235326f9fdc5e90235bebb356f1","0xF2001B145b43032AAF5Ee2884e456CCd805F677D",false,false],["cronos","damoon","DAMOON",18,"DAMOON","304402201e0a292c6794670fa7dc8ef181107763c46246cbaa14be3a79318a132a4b04e102207f9b5c0fdfa050ef408735e3afd806daecf94fbeb722c4dd871b9a66120b1159","0x431469cE9D70A5879e959bF15cFFAD003dC7f69F",false,false],["cronos","darkcrypto","DARK",18,"DarkCrypto","30440220272789410259ec3d6b51e39df2b85be45fd73a858caaf72654e32fa439ef28bf02205d194f4ba012b0ca28295d91d21e4dc789a8f997b76b9b949138da7d6e29a744","0x83b2AC8642aE46FC2823Bc959fFEB3c1742c48B5",false,false],["cronos","darkcrypto_share","SKY",18,"DarkCrypto Share","30440220152d5eb4b24d0d952384ef9992495ac89dbf6061e44219ee274c4404a11a27c402201e388294a3ce85d16cba78e2b7f483d02fc32c6af6c1403422eacc3137cb9ee9","0x9D3BBb0e988D9Fb2d55d07Fe471Be2266AD9c81c",false,false],["cronos","dexpad","DXP",18,"DexPad","30450221008ea055f4f6c094dc8fa59c1ca4346ccef7d45e4d0df197a787bf3d63fa7b2c8c022067b962e4a119e830cfa3e45924c1e77c4d1af111994c0f13106a2379dc848493","0xe0c41FF9a7032de445771E12C14868CbE061C993",false,false],["cronos","dogelon","ELON",18,"Dogelon","304402203d1798dd5e3aa5147a14f914aa419dcc43cd1e778c6ed1f38473aa061ecc8f6d022043905b999f073f301e15eb3cce833dafe1694745364942ebbbd11754fa25a13d","0x02DCcaf514C98451320a9365C5b46C61d3246ff3",false,false],["cronos","ducky_egg","DEGG",18,"Ducky Egg","3044022076f27199c3367ed71bd1c82585fb158f271af1c547587f8380a8ad7aec139620022016d5ceb12fe35564918708b1b4cec30898bc241935a70b8457d2b7815cc1bc37","0xFD71FC52D34eD1Cfc8363e5528285B12b6b942c2",false,false],["cronos","earn_network","EARN",18,"Earn Network","3045022100bbea09487c1a65abef3b31f1cc0293cd327e1752fe45a0601b1baa709bf62f0802201ea86924112818f2fd2f1273a01401f5d24ad72e6b8e2b4d6465e04afdb69788","0x9Ea69FD44a7BD7265d5B19AE8cb2E19F80DA059c",false,false],["cronos","emit","EMIT",18,"Emit","304402204cc2f546575e4c6d21c4089faad30c905984bf73b390b20c974d7a36f9d6e89b02204bec6bd5596c193039f0259cfad1301635e56d19edefad4e9b0ec33e15fdab14","0x9FA6552c1E9df51070A3b456355B5d76cBD59B5A",false,false],["cronos","ferrotoken","FER",18,"FerroToken","30450221009e5b346336aa25611ed5fb2e571487c3456efa1112a882adeded35eaed6b51e30220422afc291efaa625745e10f26a3784ad80545127f054110e6cedb254de48f96b","0x39bC1e38c842C60775Ce37566D03B41A7A66C782",false,false],["cronos","fortune_favours_the_brave","FFTB",18,"FORTUNE FAVOURS THE BRAVE","304402204784aaf90c2b84f358fe59f7aca9a195dcdc56f83d102fb3d28bd151222b224402205fe40206f1f710824a964738b5e2f54e57feeab0e86a34a865efd3da1f518d49","0xd677944Df705924AF369d2FCcf4A989f343DbCDf",false,false],["cronos","gdrtoken","GDRT",18,"GDRTOKEN","3045022100da81e42e0842319887b5ed1b706da37a6a2bcda5fe2f2732b48265f9f70ce1b5022079b5bca24f4f9d7899b63c9aa19e6bfb35f98cabc2db4732f4d0fa2746ed766e","0xeC0d0f2D7dDF5e6F1Ed18711fE5DD5C790E1C4d6",false,false],["cronos","goodmorning","GM",18,"GoodMorning","304402201b4831f3b6da9a4dbb8bcdbef87ec3067a78ca7e9d52ea3bf3a89c7e605c4e58022049d11dab84e41d8899f942b092edc2548f9d0b9b0ac63d5bdf169e00ed0a1901","0x7492450cc8897a4e444Ad972eB1619251EF15C23",false,false],["cronos","icycro","ICY",18,"IcyCRO","3044022022c84164ffa383972cb433cc13b3934c45c511bca2ed2df557a5e966a5fe8b5302207f77c671bc141226b7ba025ea513893a4874aaacfa118066e2d5e1cc45f4d059","0x8F857Af6Ea31447Bb502fE0E3F4e4340CDFCfc6C",false,false],["cronos","ink","INK",18,"INK","3045022100cc5dd148aec3382083859557009fb5e0ef3aa00657ae6fae616af2d8a409335d0220204fa9108022e41e3cebba60054a3af0fd55b02b37d8eb3ab752a6a7bd34df38","0x32975907733f93305BE28E2bfd123666b7A9c863",false,false],["cronos","krees","KREES",18,"KREES","3045022100e4b85d93a98b605472c4a2d6f46539c9f1c7cd94d4facea6ccd0705ea6345057022047dc9ff9d975c07d85cb0a18ccc7a90068f60d3a492b38fe9b37b18776ffa8d8","0x181cC996Eea445212e61bD45FF742b88c3907287",false,false],["cronos","letscro","LFC",18,"LetsCRO","304402201c190c5cdbd55589925311d17f511042723b96b2bae1f42f1f5758de9e4fdde7022056413716595e4e5b6fd5be43b31471174c007ae6adf43c6d67dd02b4c1470871","0x26E11c74793977E4d719e449aa08b0D65cb45C9C",false,false],["cronos","liquid_atom","LATOM",6,"Liquid Atom","3045022100c3b1732a56c1bc84735b2fb95341e8c8b275eb310af543a1a49f341898698cbe02202e9c134f1e1047665da4ca0ab7b06cfd018d8daf1febd5bff407b5657b04f8c4","0xAC974ee7fc5d083112c809cCb3FCe4a4F385750D",false,false],["cronos","liquid_cro","LCRO",18,"Liquid CRO","304402202140af0b83822e3c638a3eb188464de9fc5a5befeed08f749f610017dd660ed3022017fbb476f3d039d3eb2efbae70876e736ee1014e1f9f039b638bc50fedcec243","0x9Fae23A2700FEeCd5b93e43fDBc03c76AA7C08A6",false,false],["cronos","liquid_tia","LTIA",6,"Liquid Tia","3044022056b0e8ce3c461769fbc70f7a23ff78c5ac49f93354b0f8b8d56fad5e1526491302201bbff2d0b536612e1231136035ab4bfbabbc0e83c28f750dc165accff6e39455","0x276E28664DEC4982F892A5B836e11F23040b6995",false,false],["cronos","liquidus","LIQ",18,"Liquidus","3045022100d8bf3daf6e1def90296d64f18766a8932dbb2fa8e96bfc9f0c7779fc26bb8f9b02201717e67989fa3e5532292f2f22b07fd59f22a1630ac5dbd78604c6297da3bbc0","0xABd380327Fe66724FFDa91A87c772FB8D00bE488",false,false],["cronos","mad_bucks","MAD",18,"Mad Bucks","3045022100a6f1c6942b016ebecaba79ee733d816b97e92dc9f0b3147575cb1e7e17ae6740022064960b92b517e470ac1a960db6bf68732ca2ab4d19d85b8849c255655a316489","0x212331e1435A8df230715dB4C02B2a3A0abF8c61",false,false],["cronos","mad_meerkat_etf","METF",18,"Mad Meerkat ETF","3045022100d355b092b3bb701bf45594f44be8c518388407ef0810dab7e26a237d4fa4657902207acb813aaa464ee0d4674f44b3b1df4e8394d58c0a135e7e2bec1b9b67010ab7","0xB8Df27c687c6af9aFE845A2aFAD2D01e199f4878",false,false],["cronos","mad_meerkat_finance","MMF",18,"Mad Meerkat Finance","3045022100890e81973389215c2a1c6b1378fdbb80e745d5c691d0a39a9b6d9e32a43417450220483348770cf019b606d856d35ba142668d814ff5da9619fdcf98254e9d715a8f","0x97749c9B61F878a880DfE312d2594AE07AEd7656",false,false],["cronos","mad_meerkat_optimizer","MMO",18,"Mad Meerkat Optimizer","304402207770439181dd92ffb96ec392cd929cacd6f589bf31183d0dfe9a1660c696285b02202a6ebfe33ec7423b1b2f7a32c426deb779da9e1e1c5d68e1e646fea16cb0d0f4","0x50c0C5bda591bc7e89A342A3eD672FB59b3C46a7",false,false],["cronos","mai_stablecoin","MAI",18,"Mai Stablecoin","3045022100c2fee9b06900ad181a9451be78e4e7244a65a5631d0357b5c0e5d4da14b128f10220082526a3df74bcff40452fda640d9f27e2442cf08418717fce011a7338831414","0x2Ae35c8E3D4bD57e8898FF7cd2bBff87166EF8cb",false,false],["cronos","mimas","MIMAS",18,"Mimas","30440220446500410b50d65ec7cc7fe15435c61a074558ca64b838c0d83a6510cb8b30d502202e60ce2e03500cfe68681d248f75588d216ef550cf5c111713d641936be22faa","0x10C9284E6094b71D3CE4E38B8bFfc668199da677",false,false],["cronos","mouse_in_pasta","STUCK",18,"mouse in pasta","3044022075aadf1686ca2c9ef3fc7883bda210bb45737b47958825816cacff009852a8910220610219e6cf1535241902626e24a0278e65ad7fef11eea18a0e87644aa787d308","0xa0D445dC147f598d63518b5783CA97Cd8Bd9f5Bc",false,false],["cronos","nuts","NUTS",18,"Nuts","3045022100acb72699887d9260693098f09891d7cb3389cc1b0565fa381dbd2621b50108660220643b7dcd1f0b277484d956bbc73bf4786adf850f2697682dc99794a8fb7a6b51","0x59e60d641677cEcAE77868176F314F42572F5284",false,false],["cronos","paper","PAPER",18,"PAPER","3045022100966657bd3fdcffb331c4435820a039dfdf722a13a96c25d552272a4d6d34ec5702207a451c6a565f51023b8cd9273c24727821e1328ffd172ea06fbb3b807407f63d","0x1affBc17938a25d245e1B7eC6f2fc949df8E9760",false,false],["cronos","papparico_finance_token","PPFT",18,"Papparico Finance Token","304402203e1e76586ddbb90570ad32daf783ae351fed9affd186ea57aeb8b691219cb94102203a754eaf88525d3a1f0aff77f5da6dcad4428f8584e63c6f8ebc1025f4eea83f","0x59BAfb7168972EcCA5e395F7dA88e71eCe47a260",false,false],["cronos","phenix_finance","PHNX",18,"Phenix Finance","3044022007f606c1e4041414d8d5f47d96551429f04150a805d8f6b73066cb2f1d2253360220617774a093805033564659570fe78e78ada5003bf79a843bc8e13fb5cdf787e7","0x91381CED862941aF90995bC48336643a37CDA580",false,false],["cronos","photonswap","PHOTON",18,"Photonswap","3044022100d2cf8d6a918c4e0a35a7ea413646bc2fdcffe744c8680428ba73b29e2b48d08c021f4620611613bcc432db34a8ed8cdba958609e2068539a54af36b418e6cb6378","0xbdd4e5660839a088573191A9889A262c0Efc0983",false,false],["cronos","president_platy","PLATY",18,"President Platy","3045022100a654bc1f6044aa674ed4d30582cb3cdd1effc6f403cea2d3007bf797450557ca022000bf592418349e9367fed48fcd513981dd79dec2da159af9e4201c160f011a41","0x13C0ff45D019A5888Db92631F18556211001883D",false,false],["cronos","radioshack_token","RADIO",18,"RadioShack Token","3045022100aa24660df57aa75ecbdf5d867502a225c676dfda4c8353485bbd58f533866939022006befb095bf766232e085d412b443527b2d55ade0db8ce41731ada3771a0492d","0xf899e3909B4492859d44260E1de41A9E663e70F5",false,false],["cronos","robin","ROBIN",18,"Robin","304402201734c3624fa573186f1a515ca4f84fa7c376741aedafcba488f91f6c8384799802206dfbe8d968dd06494eae7657c9ff0e0241c307e50243d8039c654cb662e6111c","0x664E4b17EA045fE92868821F3eE0a76a5dB38166",false,false],["cronos","rollium","RLM",18,"Rollium","304402200dd2b7c732f23a7ead98edf45c774f14d67a794176b6b71b78639a3cfbe3870c022054341fbf2cc735cbcf565dda5942384b430ac83212f26fb47447949873eb340a","0x19258a1df9E929D02b34621CF52797998aE1Aa27",false,false],["cronos","ryoshi_with_knife","RYOSHI",18,"ryoshi with knife","3045022100fbbc46b68602ec9bf728b646c5327760028a4c360600ec0cc59d3065bc0d18d402207d0ceabc1883e0616302be1a69ba3fef1a99a4963c4f7a02591ee170e485ac04","0x055c517654d72A45B0d64Dc8733f8A38E27Fd49C",false,false],["cronos","savanna_share","MSHARE",18,"Savanna Share","30440220533cbab577e063738033f9b60244dd252531a720e6ae432e4f8bfa8439decbb4022047d07509361984e5da89746752e5a620844c6531abaeb541f3297675e13c2e27","0xf8b9facB7B4410F5703Eb29093302f2933D6E1Aa",false,false],["cronos","savanna_token","SVN",18,"Savanna Token","3044022026f4e194630f5f7166b06c1c030f6ba269c9e49801903e9aa321181b8017b30c0220592c90dcf6a0d274b63d627d9fef21e65cfe717efafa65ffb131e9692d6245d7","0x654bAc3eC77d6dB497892478f854cF6e8245DcA9",false,false],["cronos","serious_coin","SERIOUS",18,"Serious Coin","3045022100c6c23f8f00412d786de4ce2dca18e72168bfe039b81cae92cd04bad084808c320220482356c69d9c9741b5e29f20c25721aeac56cac243f821ba867b03e60f8e260f","0x7E575f50777f5096f323EB063fD80BA447627060",false,false],["cronos","shack_token","SHACK",18,"Shack Token","3045022100bbf90ae5ce01bb900f7a5290f32cce00a17dce27d02b8e9ae1f389956263ef02022060242d6bc02370ebf31db9f1a1968f586511378bd573f68d6a1ec0e820f36903","0x671D2E0E1a9c8E117A071bFC5763aF3fBe9bDF0b",false,false],["cronos","single_token","SINGLE",18,"SINGLE Token","3045022100dc1d8b3a66082d20ba61c6948e81856142ef07ba780c1946080ea0c0daa0ffdd02207a30e8430da8b84f4a74a8b9efe126c4683fefe37e3c6d2cf55c5f67f63d19ba","0x0804702a4E749d39A35FDe73d1DF0B1f1D6b8347",false,false],["cronos","sphynx_labs","SPHYNX",18,"Sphynx Labs","3045022100dfe415880ba822583fb7cbc6ee8410fd772ae4a52146479f37a1741b5c565dbb0220371eac2887b4103934e9401c57f4d2b1414bbbba5e2d9dfe530e66849c44f7bf","0xa776f5b86cC520861F55a261515264E3bd86E72e",false,false],["cronos","stonks","STONKS",18,"STONKS","304402207d8f206f9794c0a9508a2164273a955042d6cdf00496c27263bdad588a497ab502206f01529de162144cbc89156b054cc72f12245e9322bc0b8f750ce6049a639cf8","0xF307A39752Da29B1C1E45C2c1476976EAB272686",false,false],["cronos","tectonic_governance_token","ERROR",18,"Tectonic Governance Token","3045022100b958bce157e3e8a0f26675816a1cbc376151314e5ce5f9af9d1144176534ce440220111bb252f8f80c026e2a1239b80007bde9d37305a8c09d1811a5cbfc7e751fee","0xDD73dEa10ABC2Bff99c60882EC5b2B81Bb1Dc5B2",false,false],["cronos","tether_usd","USDT",6,"Tether USD","3045022100d9a9adb3d21a4c9cda7be98d67e278060be879c68b3de0777922ed1ebd0074b1022049ba2a8c82abdc699a47718031cb788d61add42fdd7464d36cdd7bf231cfbf1a","0x66e428c3f67a68878562e79A0234c1F83c208770",false,false],["cronos","toxicdeer_finance","DEER",18,"ToxicDeer Finance","30450221008d26756284d47ac92ede694a97746d5af68ba1f2daf5417a42aacdbfbdb3cbe202201985332b2d66029517417e562cdbc22cf15f636fc92bf8271fe5a95e8a3dfe2d","0x6D6D6ba0c7e7DBaFffeC82b1ddF92e271650a63A",false,false],["cronos","trollcoin","TROLL",9,"Trollcoin","3044022063fdc57024f400d3cf288c25d5343f4e46c846fffd60d5e9457c0f16acaff61a02203b625d7735b41d5b013c6268265a1d0503fd54418b3cf5320232ed9531fcfe2d","0x679f6863a653251C8C215e77205A7058b5bF676a",false,false],["cronos","trueusd","TUSD",18,"TrueUSD","3044022042d638a42dd5801fe2074352c2f44770860cd142c0b8c2c45e2ef857325345cc02204077b147b366a4c2574b0c49705a8fa3aa6f48f8b5576a1be31896544b4d5208","0x87EFB3ec1576Dec8ED47e58B832bEdCd86eE186e",false,false],["cronos","usc_stablecoin","USC",18,"USC Stablecoin","3044022050eafa79ef865394e4e0f58bfd57502d1fea073d166109e54924d16a0da040e002205d95b09532ca42fbba716845481da6cf88801fddf9a2003e5e28cd350019b213","0xD42E078ceA2bE8D03cd9dFEcC1f0d28915Edea78",false,false],["cronos","usd_coin","USDC",6,"USD Coin","3044022077803133e8de6cae713b2f275bb345090e3c2224c0cc0e4c32af40b03c99e33b0220797584f5c557e0fc867ec0b30fda4fd58dcdc59e032d3d3a4eec383ab1e9540f","0xc21223249CA28397B4B6541dfFaEcC539BfF0c59",false,false],["cronos","versagames","VERSA",18,"VersaGames","304402203d261291133f362825ce45e6f88ebd69da2a7a12cb0680f3604dc42e6ea2d70a02207a706adc847d50f5ae7d8bef05f267ac1f8bd3f0f36bfb6a9fee9bc7180e7a23","0x00D7699b71290094CcB1a5884cD835bD65a78c17",false,false],["cronos","vvstoken","VVS",18,"VVSToken","3045022100f393853cb4255da032c9da524302f9148ff5f78157e7c77b8335c22aea56648c022027c13ada4d8fabd03c19e8d5d3281c93df6969ab66ff24ed2ca97edd9bc3509e","0x2D03bECE6747ADC00E1a131BBA1469C15fD11e03",false,false],["cronos","wrapped_btc","WBTC",8,"Wrapped BTC","30440220721f64658281ef31fe89c43cf77fbe9f6b4d5596f9d4b282f2d63ca34854b589022041461c3f36710af47bf22cf375aa59d6706320255bd2312be387fb51650cef50","0x062E66477Faf219F25D27dCED647BF57C3107d52",false,false],["cronos","wrapped_cro","WCRO",18,"Wrapped CRO","304402201cf19537941c4f3011ed0179ce8b8924a5456a66769da2a45812499be03338270220616ea9a1471d1159b7168cfad9f0edb0773d2718a81be2797b825ddfece329d7","0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23",false,false],["cronos","wrapped_ether","WETH",18,"Wrapped Ether","3045022100adb76a168f8365696ec266028335e6033fe1592d3f91de30ba4ceecb363b015a02202683d4a3caa70863f94d141ae36a4dbf72c7fecbd6ffc21baf0d10b3b611b010","0xe44Fd7fCb2b1581822D0c862B68222998a0c299a",false,false],["cronos","xcrx_token","XCRX",18,"xCRX Token","304402201c92b1afd5bfb3fad2f1334c43db88484a69a0ca3d3ad655e9934f412599d044022033a18f4d1663f044f16678ed5d2443660eb005c874bc486cb0d3b519fd327dbc","0x9315054f01bF8c13EE67C8498Af09A1933cbF24c",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/40/erc20.json
var _40_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["telos_evm","apeswap_finance_banana","BANANA",18,"ApeSwap Finance Banana","3045022100b560842cf43de7de52e604b35a193dd57a063c70e839ea0881f5f3382fee62a502200301c51a816fd5157c977a8c048c2e2ea30544f41773a0b441c394055b88e470","0x667Fd83E24Ca1D935d36717D305D54fA0CAC991C",false,false],["telos_evm","avalanche","AVAX",18,"Avalanche","30440220671764b08fc6fa56a9cd42a7483d9bb3836b08e15e137373ef43c83af58c547602203ac6ad3524fd6d54e1e1b7807d08d45d5f6169cf01311a27bf7b6ec885e73a03","0x7C598c96D02398d89FbCb9d41Eab3DF0C16F227D",false,false],["telos_evm","binance_coin","BNB",18,"Binance Coin","3045022100c9fd505e7eea77d8f7b3af9b01617747e936b24f25d6c55eca659e14db7bd56102207b68ff21b47b57b1bd1e05997d2b1d37355b921547a237a8095178eafb87ca93","0x2C78f1b70Ccf63CDEe49F9233e9fAa99D43AA07e",false,false],["telos_evm","chainlink_token","LINK",18,"ChainLink Token","30440220511788e04bee767a0fdcd134aca9e0b1057320f76e0aa064cb88539e1f9513dd022031011763d7f75ab19a708d88b62428429516a72a85df8665370ca5e94865c6cc","0x1CcCA1cE62c62F7Be95d4A67722a8fDbed6EEcb4",false,false],["telos_evm","destiny_coin","DECO",4,"Destiny Coin","3044022017287e24ba7da64e3072c83b3e9bd30c890dfdc63181953e11ff5e0f837f279a022046ea2b2aa1ccd880628214709c4c6dbf93d791c0ff45074c64ee7bb5b655f918","0x7e1cfe10949A6086A28C38aA4A43fDeAB34f198A",false,false],["telos_evm","elk","ELK",18,"ELK","3045022100834b2989a12e86cb906a427a49515606c6c360079d41e87013fe60cf155758f6022045b3ffb9a1675d9873d693b3fd1fabf9f80870af98abcb53db2cf3ad24881b73","0xeEeEEb57642040bE42185f49C52F7E9B38f8eeeE",false,false],["telos_evm","ethereum","ETH",18,"Ethereum","30450221008a9e4c9bf97c4eb4e2d7cce674fd94afaa634d9a816dd48e5f44ba2ac54dbfab022072a0c5eb9bc04c67bdd46408802a2c1080bca9167bf1a775e1cda49d4c849d65","0xfA9343C3897324496A05fC75abeD6bAC29f8A40f",false,false],["telos_evm","fantom","FTM",18,"Fantom","304402207af4c11a7d2d44c8c314087e69999e852ba5af86da993522af3321acd46f46f002202da2ce1f983d9a8479c3304df55cb425fafcb9256edd2e97ad398f627e5c2d74","0xC1Be9a4D5D45BeeACAE296a7BD5fADBfc14602C4",false,false],["telos_evm","polygon","MATIC",18,"Polygon","304402207b5ea08fe5b5df42d891a09e1c60bdaf6682808eba7d5bb63f6ef26fcbe96b6f02203775f7e13782e08395d93f4da04aea80c2e91a6cd70b71c9d359e7d031ebb3d3","0x332730a4F6E03D9C55829435f10360E13cfA41Ff",false,false],["telos_evm","robinos","RBN",6,"Robinos","3045022100d5bf03d59a650d06fc927de172cd3a374ba4aeba0e5029c1e71316fa641acacd02200312595897fb8e6c2907fe66c8d86272640fc147128cb8af8ed1db5db7ad0c11","0xfB319EA5DDEd8cFe8Bcf9c720ed380b98874Bf63",false,false],["telos_evm","staked_tlos","STLOS",18,"Staked TLOS","3045022100c79fc18db2431344ef267dfa7035c05fe8ea4c78aabf94e679c2af815aac1668022047365a0d19171a5fbc0c0b41531e5fca5fd3fc2b3e41b080b2b38ad1a2209a84","0xB4B01216a5Bc8F1C8A33CD990A1239030E60C905",false,false],["telos_evm","usd_coin","USDC",6,"USD Coin","30450221009d36b0b241d385047dc087620b7e2beb02febb2c13522328483d91281953b3d7022010eef3fb699b4c9d6383f91103bbf7a0fd0fb61e1cef684e4f24f60915a644a9","0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b",false,false],["telos_evm","wrapped_bitcoin","WBTC",8,"Wrapped Bitcoin","3045022100fc9a09ffd59258021a74f30cda950de66c5fc32d26048d77b558f5ff11551bdf022073768cf84be4d0822507c7e74a5da02d2d46319af2648a92121260c04ab5598d","0xf390830DF829cf22c53c8840554B98eafC5dCBc2",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/56/erc20.json
var _56_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["bsc","1inch_token","1INCH",18,"1INCH Token","3045022100f458aefa96e25e6cb5a94844e2ed97b44423e8ffcc9a7d5c58b4c3c06940363602206f0abd560f43bb48a34c65d3bb405ef0dcaaae6ad1929d3944188cd884968a75","0x111111111117dC0aa78b770fA6A738034120C302",false,false],["bsc","agi_token","AGI",18,"AGI Token","3044022060efc30b1b8952bb9550b7ce36c159ee439997bb8d3799935cb7c5379e66a8e4022056e852f0d64e90e07017e0d40aafbd3b5ff70aa660a4523d28696c8f059621bb","0x818835503F55283cd51A4399f595e295A9338753",false,false],["bsc","aioz_network","AIOZ",18,"AIOZ Network","304402203ef491e424e2c0d67c7b6e2661f3965f0565a293b1c4aea5695cfdf783f240d602205ff9d92af605f47db183155fc2f7c378340de3a26a8b8ae237ee08bf0bc68511","0x33d08D8C7a168333a85285a68C0042b39fC3741D",false,false],["bsc","aitech","AITECH",18,"AITECH","304502210090bddc76df716ea8b068b94bdeaa20f7e7fd4ff03f9b7331c35a24824f8f6675022069b9e5c62014f8b562ac7c6fe182be66585048bc3b8477d05efbb6877ddac705","0x2D060Ef4d6BF7f9e5edDe373Ab735513c0e4F944",false,false],["bsc","ankr","ANKR",18,"Ankr","304402202add7916acffae47b8f0759f4d63be12af634a2f5bcc1d39813a4b82ee41044702206ff71760a3d9221872239f1c47b657ee49b8b0a6e74cceca3ffb079c9ab8f886","0xf307910A4c7bbc79691fD374889b36d8531B08e3",false,false],["bsc","apecoin","APE",18,"ApeCoin","3045022100a4c197e7afa3659a7e55af45a1ca6b136194ee5813875807e2ffa5ab511e52300220249634ffde2bf925ea4fc879774f6c2def21d73e62182f664c2fc363f0be576a","0xC762043E211571eB34f1ef377e5e8e76914962f9",false,false],["bsc","axelar","AXL",6,"Axelar","3045022100d7f21a499b24cf0d6c46a5555a2d03e13a691ed13913366f0732ef21daf37ddc02200f9bbd229da3190fbcd47fad610700cdf7a0898a3984c9e6e8c2e2aad46a0329","0x8b1f4432F943c465A973FeDC6d7aa50Fc96f1f65",false,false],["bsc","baby_doge_coin","BABYDOGE",9,"Baby Doge Coin","3045022100d976a6ff1b1d7542d53329d0e1a9bf64d86c5db6df704dc829db10ed0a03c0c002205e0c9b4cb87e700f9b4be7d292cc8f1c0a41b03fe7cde92ed33eedc67dec56a8","0xc748673057861a797275CD8A068AbB95A902e8de",false,false],["bsc","beam","BEAM",18,"Beam","30440220027bbdb8b427d9b78a184c259226388d231d997e21f237c155b44b9f2ab439900220078c250c11dce89b0cde72fd671282b183242f1269bf2ed66c605363f927351a","0x62D0A8458eD7719FDAF978fe5929C6D342B0bFcE",false,false],["bsc","binance-peg_aave_token","AAVE",18,"Binance-Peg Aave Token","30440220303425ecff9a9fdf0f121ba6bf42444e2c208a709bd7ca7130af5791c7e9184602205abdc84522afd1c948f910344264c701bf638d99d65338b8d7f822c54c6d3622","0xfb6115445Bff7b52FeB98650C87f44907E58f802",false,true],["bsc","binance-peg_apenft_token","NFT",6,"Binance-Peg APENFT Token","3045022100fd1a905a42079ab7ba5aca84d94e0811ad9d8f4b00bf2c00bd29f086293c3944022047941c9f777ed3ab2d95c6c380e3082eab21d5767d553d383e2af3527d11dc49","0x1fC9004eC7E5722891f5f38baE7678efCB11d34D",false,false],["bsc","binance-peg_axie_infinity_shard_token","AXS",18,"Binance-Peg Axie Infinity Shard Token","30440220691a3f644df94eec922082948417fb14d9e53ea4739cde2606f4234d3f9fc04302203709295b811f3270a16cdf05f190f3687df9c4b12314547c7e85ca3992ff18bd","0x715D400F88C167884bbCc41C5FeA407ed4D2f8A0",false,false],["bsc","binance-peg_band_protocol_token","BAND",18,"Binance-Peg Band Protocol Token","30440220541e7015f2438030d38e8bde19e1e3115bb690c1783aedb168b1d58cc8751a2f02204d33e627417bac5a7080879950d7e6cf4edcb654918ead0f46c2315e01dcb8e6","0xAD6cAEb32CD2c308980a548bD0Bc5AA4306c6c18",false,false],["bsc","binance-peg_basic_attention_token","BAT",18,"Binance-Peg Basic Attention Token","30450221009bce750c593485069075887224100edd1ddb1c1c19cbec73b83a73228e3567d302202708bd7e5821ac2f7990de1912ac978efc09cf0ac59cab3118a21cd5dec39bd0","0x101d82428437127bF1608F699CD651e6Abf9766E",false,false],["bsc","binance-peg_busd_token","BUSD",18,"Binance-Peg BUSD Token","304502210083b2c0ea8e139a888102c27c92cc72122ccceb1d6d0c3b8fa0dd4ae812ef5f8e022006a81899fee9303289661835a214b4a3075800c399bbcefd9b82164e6d9bd2d6","0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",false,false],["bsc","binance-peg_chainlink_token","LINK",18,"Binance-Peg ChainLink Token","304402205431e59f9522a8c01000362fa46ce3a89581755d2cad6c6754bded24fa9cc2e602201094d4d25697370f6975a856240638b2f0be30ae843354428853baa5d0637c7b","0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD",false,false],["bsc","binance-peg_compound_coin","COMP",18,"Binance-Peg Compound Coin","30450221008df86e4ee8e9eaaf159eb83789b755c9d649f0ad82a537602190309d41812ebe02203b4f46fe6758c149ed129129a5b27d88e2ba71f58395d01ba40bf4e895db153d","0x52CE071Bd9b1C4B00A0b92D298c512478CaD67e8",false,false],["bsc","binance-peg_cosmos_token","ATOM",18,"Binance-Peg Cosmos Token","304402200265f641211f4c7e1664b12cd7f279f0706182fefba819250324e95bcec22ba8022029ccd6cc80cb62ef900eaa793c6b3717aa01ee9728fe6e0473e487123aca7d6c","0x0Eb3a705fc54725037CC9e008bDede697f62F335",false,false],["bsc","binance-peg_coti_token","COTI",18,"Binance-Peg COTI Token","304502210095fc759da62a80b8034744a2f110a33fdb6e554baf0e9d8e6d661b6cbd51ea1302202e9f7fe9d4858455c2dadb3a9ad375dea7adcd906c72060ce0c90583e49e6dcf","0xAdBAF88B39D37Dc68775eD1541F1bf83A5A45feB",false,false],["bsc","binance-peg_dogecoin","DOGE",8,"Binance-Peg Dogecoin","3045022100d602d79c48bfd25c7557e77acf44fa8232d985ac9170cc4f2db1bcda4911a63a022021bced9bf580c60a8d704ecbb1077f33b7d82a0ea0319d1857e38758d9c02840","0xbA2aE424d960c26247Dd6c32edC70B295c744C43",false,false],["bsc","binance-peg_ecash_token","XEC",18,"Binance-Peg eCash Token","30450221008d295bb0d6dbd49dd3f6535e4bb016656ccbe7c81c82fbc7d87de266516f10f302207e10d1896cf6b70b4642a61193591df8c86faabc6eb1eab15c0ba823dd4eaa1c","0x0Ef2e7602adD1733Bfdb17aC3094d0421B502cA3",false,false],["bsc","binance-peg_elf_token","ELF",18,"Binance-Peg ELF Token","3045022100a9c2e713f2cb904296141ac797b34b2eddae36f36b251bd724b126416bded24402207bfae23672e959106ed750ebc279e11fa8c9e56754008953942a062caf7db7eb","0xa3f020a5C92e15be13CAF0Ee5C95cF79585EeCC9",false,false],["bsc","binance-peg_ethereum_token","ETH",18,"Binance-Peg Ethereum Token","3045022100878f1594ddcc979473abdf4766c0d3fedcad37f82723402e7be382fb8042d40b022021e1c0c4bf00e22e277b43aab7017fb2150992071a81e2c38bdf2f3e6252d7a1","0x2170Ed0880ac9A755fd29B2688956BD959F933F8",false,false],["bsc","binance-peg_flow_token","FLOW",18,"Binance-Peg FLOW Token","3044022014b0e5360d1212344546ecf48d915092e151eaa06cd0c51a26e3411be3e8e3c6022043b07b8b04d1adb1c80ce4cab877033fb3557ee5e003dee3b155bfca85097499","0xC943c5320B9c18C153d1e2d12cC3074bebfb31A2",false,true],["bsc","binance-peg_maker","MKR",18,"Binance-Peg Maker","3045022100f2646fd21db7873ab60ab660d3e6743faffda8a0d31b9430c2c0feacaec3f589022011f0d99965303a6c4be7d37f5ea6ecbd59d24b53319c2598b865f2f82bceea88","0x5f0Da599BB2ccCfcf6Fdfd7D81743B6020864350",false,false],["bsc","binance-peg_smooth_love_potion","SLP",18,"Binance-Peg Smooth Love Potion","3044022078826d7e891788673ba7fc76f6f08cacbad293a7232163bb8f8725966bbd0b2302200b7614a8a15833c5a7f551acdb4fa84dce253073f457e736f6de94825c4662e6","0x070a08BeEF8d36734dD67A491202fF35a6A16d97",false,false],["bsc","binance-peg_sushitoken","SUSHI",18,"Binance-Peg SushiToken","304402201ff768e7ccd4ea57c495bc84647cd34464e513278721d2a17f0ea996157a394a0220241f7131d9e22c64a793188a863c52017a0ba33a35d5580974676e242daf5f36","0x947950BcC74888a40Ffa2593C5798F11Fc9124C4",false,false],["bsc","binance-peg_synthetix_network_token","SNX",18,"Binance-Peg Synthetix Network Token","304402206842b6147fb84cf4777b4dc46b3c545afc09e2769973db6cc343582b486deaeb02201cec631b2cd68064d09ab96b79f8f44568c20f9b7d156cfb827bcc9f8fbfc9b7","0x9Ac983826058b8a9C7Aa1C9171441191232E8404",false,false],["bsc","binance-peg_uniswap","UNI",18,"Binance-Peg Uniswap","304402205673c99c2f001e6ec6203d3cd91d41dc56f6bc4defc30f193b44897600dc82bc022008717e1b72a6f3c572200cc7367994dce2ecedf2f1edbe1c3aee7487d9004a1a","0xBf5140A22578168FD562DCcF235E5D43A02ce9B1",false,false],["bsc","binance_peg_mantra_dao_token","OM",18,"Binance-Peg MANTRA DAO Token","3044022029257b107ad46a4fb336492aa04d5caf91311f5778d7e2c520b117f4e1c8f7d7022072569619faca801d8c03bacbfc7d5b13b4dbc055773d2ccb8db282de5798dcc8","0xF78D2e7936F5Fe18308A3B2951A93b6c4a41F5e2",false,false],["bsc","bittorrent","BTT",18,"BitTorrent","3045022100947c1461a3356f0a775ceb36292ca2d0fd5af067e73fb2f3e9217707621283a102207058927da014f65e436f4808ed489bb0bd659c0f2abc89b265a791dfd1c6862c","0x352Cb5E19b12FC216548a2677bD0fce83BaE434B",false,false],["bsc","bonk","BONK",5,"Bonk","304402206a5a39ceba1846783661de3a6b46b9da9576a03fbcf47ab9e2684314c34376270220107a6ddd78be4391a0aaa3d445ab4e030118d086a20effcf555b2690fb5b034f","0xA697e272a73744b343528C3Bc4702F2565b2F422",false,false],["bsc","bsc_conflux","BCFX",18,"BSC Conflux","3044022014762ec68c892c94a81061e6ced27689e5da8670709d74aec7907ce08f552a88022017a6f80b8f484aad37009a8cc7c9f2753ab854a78227488a2c5d57dcbd152966","0x045c4324039dA91c52C55DF5D785385Aab073DcF",false,false],["bsc","cartesi_token","CTSI",18,"Cartesi Token","30440220303d3c1acdf562ad31ab9e49be30e614240ef12847fd657149ef5c265fece9c102201001b2d86245521f514998ca204c2e96c1e589994e8140ed3778ada7b9da8b50","0x8dA443F84fEA710266C8eB6bC34B71702d033EF2",false,false],["bsc","chintai_exchange_token","CHEX",18,"Chintai Exchange Token","3044022000832c9bd50886f167d9625d9d5f0ca065b811b75c21c514e414d6a19e54170f022034e4fa8819aa480b043c6649122bde51e395cd087a5c20e36301851dcc73d4a7","0x9Ce84F6A69986a83d92C324df10bC8E64771030f",false,false],["bsc","chroma","CHR",6,"Chromia","304402200096c5821aae62c22a5db8ec83f803b323fbfbb0d2449dcf5dec89b815980fb70220478381cbe5cb4dd42142189c099e1ce1e0bdd56e3a94d4d9920ce73ca1ff90db","0xf9CeC8d50f6c8ad3Fb6dcCEC577e05aA32B224FE",false,false],["bsc","coin98","C98",18,"Coin98","3045022100880b312c5ece768a40a08b1ff91a036634490f56aa529e6b3aca81127d81a62e0220593983f52ff03068187764f1c9e19d1585f4d77db8eab9a9317a14bb5b3a4144","0xaEC945e04baF28b135Fa7c640f624f8D90F1C3a6",false,false],["bsc","decentraland","MANA",18,"Decentraland","304502210088af16a28880f8a611681e6bb6963560de017be13162693b33c2f01b96460c360220732b24f97f95d6941c580b9f395ff986b0848e63615808911619e669b47032f0","0x26433c8127d9b4e9B71Eaa15111DF99Ea2EeB2f8",false,false],["bsc","decentralized_usd","USDD",18,"Decentralized USD","304402203fc84cac8f526de78dfaf26b2288d3ea86ffd1e5007f61e89f050893c9acb60b022055331c2e2529cf6a894c15e1a374c9ac5ffa27d101d73073ce39f2da1c11e09a","0xd17479997F34dd9156Deef8F95A52D81D265be9c",false,false],["bsc","dusk_network","DUSK",18,"Dusk Network","3045022100dbea4dc673954f4b44ee55b6b12d3d88515cd532da19db0218ee7405bce4142202204b93390de28ba11504daebfd2996aaeed4b8b5e6922a153301176e92b9eb4a84","0xB2BD0749DBE21f623d9BABa856D3B0f0e1BFEc9C",false,false],["bsc","edu_coin","EDU",18,"EDU Coin","30450221009dfbcbb392dbfe90e1d64a1a57d0eff2c5fd48544a233fad0ec68b9d34bf02f5022039994e3106d9454450c0026987e3cde4d02e4f5f460b9e2475fec738095af899","0xBdEAe1cA48894A1759A8374D63925f21f2Ee2639",false,false],["bsc","escointoken","ELG",18,"EscoinToken","304402206be7e3c0fd231e503c94733d970097e217049c8b116e881793d9777b52f6e86802203812d2c61b7817a47c1e6c985a43c0cc30ed62a53417e4f7e4070346bdcfee4f","0x755341c49f4427e43d99d8254a8dD87056f1Ee00",false,false],["bsc","everipedia_iq","IQ",18,"Everipedia IQ","304402201687c7fc6555eca548a1c890157d22c90822005d5774de4fd7e0689ea76c57b0022051cb9d6aa0646b70979a1569187f20073965cdeca4dcad3616104a2743e12696","0x0e37d70b51ffA2B98b4D34a5712C5291115464e3",false,false],["bsc","fetch","FET",18,"Artificial Superintelligence Alliance","3044022057b0661ee9217fb149bcf52d42998f2a66b454b9c0e4f671e162115ff08ab297022007cf834f066212f7ce79c8168226791fa2b741ad9758c0ba624e5d26d416d5a3","0x031b41e504677879370e9DBcF937283A8691Fa7f",false,false],["bsc","first_digital_usd","FDUSD",18,"First Digital USD","3045022100a9f4b90a2d13d7f92a27c07c4d8f24e5ba169bce54ac4b768a18b7e30d8cc53d02200dfba7147aeba883665c0ff699ca5ccfd2a9cf532d687042ccc783f760497c5d","0xc5f0f7b66764F6ec8C8Dff7BA683102295E16409",false,false],["bsc","floki","FLOKI",9,"FLOKI","3044022010e3423e62145123f21c5d8e4915634d4c1e0cd949c008014a50132fec849abe0220156f345545564c842bd28a1faa6c712632740178011cac3f3366aac7ee98c3be","0xfb5B838b6cfEEdC2873aB27866079AC55363D37E",false,false],["bsc","flux","FLUX",8,"Flux","3045022100d07324c6d08d6cbef2e50b329e3fb3d5ac6f4d5418ba302bbe81b632517ac744022015f4fee4d116d99eab709a7ab2f9b2a4350168e8f68bed2c0e7c51ec614ec6a3","0xaFF9084f2374585879e8B434C399E29E80ccE635",false,false],["bsc","frax","FRAX",18,"Frax","3044022013f61e5f58cabd580e448f876bd1246cfadd19f30b4cf8afdb0c93a322e994b4022068da21831396a1cf32cb954a0fe54ee40ed50e02cc55ccc90f0b2af1e19c494a","0x90C97F71E18723b0Cf0dfa30ee176Ab653E89F40",false,false],["bsc","frax_ether","FRXETH",18,"Frax Ether","30440220315ee1989cb59e00bad8e5c4861f1fee95c13a0497dc9a1396d951bca7ac6fa902201bdb9e691c15f1c31c690f53c3d7205d11319672d195afb1440f2e4977998b33","0x64048A7eEcF3a2F1BA9e144aAc3D7dB6e58F555e",false,false],["bsc","frax_share","FXS",18,"Frax Share","3045022100ad5ba411f23f197605a56362c8615d4d513ff33bb963f4d7907c9ed86115fc2502207cc7e56d3a31f55c76b8268f6bb8555278e3c498b404b9d3e533c964d19b8d51","0xe48A3d7d0Bc88d552f730B62c006bC925eadB9eE",false,false],["bsc","gomining_token","GMT",18,"GoMining","3044022068c3207fb4458ace11a20d5c88ea26073b1a54350f4dcbfdb6853cf32a2ebcbd022052a2574a6213d0dc4169a7ba09ebe50107bd1269b190979aef9b7872380bed62","0x7Ddc52c4De30e94Be3A6A0A2b259b2850f421989",false,false],["bsc","gravity","G",18,"Gravity","30440220547dcbd721f37c36b9c4cbd5f55d7c6065ac627b77419a1210667a06db7f5b8d022013c1663cf7a4396733cf64eb43c67275015c2a166ec2ee105d34f4e58daffacb","0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649",false,false],["bsc","green_metaverse_token","GREENMT",8,"Green Metaverse Token","3045022100beb502ee0347d15b7e706a5154b45fc71f95b5fb66df0eccfee2c2bad659ef090220490bf7af0ede5306a1bb252eaeb95181b8563c1a47b1cbf1c081954661919da5","0x3019BF2a2eF8040C242C9a4c5c4BD4C81678b2A1",false,false],["bsc","h2o_dao","H2O",18,"H2O DAO","304402205ad033ec8b75cec9c0b97966d4b223d86a54abb5f8615168e373b54128793c5102207860888a0ad90247506cba0d2f6678ee3fc4c71ea3c8cc73ead5533944ca435c","0xAF3287cAe99C982586c07401C0d911Bf7De6CD82",false,false],["bsc","illuvium","ILV",18,"Illuvium","30450221009d4d88b79975d0133c5afc89e7581224b02bdd9357b2eedbb1b595ea10e972e5022057e308a353d63bfac4b95626c9946ea6d028f15879efa4dbcface665669e02fb","0x4d5AC5cc4f8aBdf2EC2Cb986C00C382369f787D4",false,false],["bsc","injective_protocol","INJ",18,"Injective Protocol","30450221008539e722919ca42b78d7a6f309a6e217cd1574cf2ad0a7fce4c6b877294369630220443bc94530e6dac4ea931892594a67c489b7d4698bb0a9e11eb98771f18c89fa","0xa2B726B1145A4773F68593CF171187d8EBe4d495",false,false],["bsc","jasmycoin","JASMY",18,"JasmyCoin","304402202f07edfbc4c31a331b38cf3462ddd350bec0fba7ab1c514ab779e641962e871a02203e13d07de215fbeb484eb53b611ede4bcc97195f5365d07a0e4b01484487d0a4","0x15669CF161946C09a8B207650BfBB00e3d8A2E3E",false,false],["bsc","joetoken","JOE",18,"JoeToken","3045022100f3e262bce935938d88e92d5d834007f4b87daf5a6c9a8bba3f0c8ff404b9bb0602201008765096b255bbab0ec06526fd83f5a14732301b76ef1a0e0319b57f5f3fa5","0x371c7ec6D8039ff7933a2AA28EB827Ffe1F52f07",false,false],["bsc","kava","KAVA",6,"KAVA","304502210080e5f75e398aa4e40f460414fd87813862c9e8d9e6a278e7dd3c2ad69efcbbdf02204f78fecb6a9473e227981d83d7469ff7ea17681f8d411a72aa874e23e751a052","0x5F88AB06e8dfe89DF127B2430Bba4Af600866035",false,false],["bsc","kusama","KSM",18,"Kusama","3044022047227dafc02d9a70778f00b4b87ba5c5a15659618aaf20d23d2bca54809020d2022037ce5c5310a9cd138d964fa5439a656e407509fa1bcdb156c10fcb7b390c7460","0x2aa69E8D25C045B659787BC1f03ce47a388DB6E8",false,false],["bsc","layerzero","ZRO",18,"LayerZero","30450221009da3d03c65446ffb98575d6830cc22e78d69c6790ab9cbef58fe768323c171240220239282a82d433497b079ea3c00b1cb6739070c041ab370710ed79f94d2d54145","0x6985884C4392D348587B19cb9eAAf157F13271cd",false,false],["bsc","maga","TRUMP",9,"MAGA","3044022023ff3097d1948ed4c8c35f78588969d95521de936782d5a7dedac1b9ba7c95a20220054d452c19b76f95d5491ed626a7dbb29632d60712c21a42051777c550ed0bad","0x4eA98c1999575aaadfb38237Dd015c5E773F75a2",false,false],["bsc","mask_network","MASK",18,"Mask Network","3045022100f233d78076eefd948bd4e074b8a998bd469593293e61981211af60de9930419e0220782eb26e09be0ca775014fc2added450e218f35441864e0fbf2dd9e44b0df1a7","0x2eD9a5C8C13b93955103B9a7C167B67Ef4d568a3",false,false],["bsc","matic_token","MATIC",18,"Matic Token","304402205df236f3ad785468995572b13cf4afbecd99f3f6bed9825bae846c9977ae521102204ef3cb49ab531c095b2d6bd97d5353cf911f98b3238405c5c880ce46b4917d94","0xCC42724C6683B7E57334c4E856f4c9965ED682bD",false,false],["bsc","metars","MRS",18,"Metars","3045022100a3d18c828ccb95f3ac96387aa084bc80835ac529947794527182e76ca7988f31022018ad5f9c40b58bf4223107e9b0de1ca79e4980cc381c68ee8c530eb865c26ba7","0x238D02eE3F80FBf5E381F049616025c186889B68",false,false],["bsc","metis_token","METIS",18,"Metis Token","3045022100d44fc780cfeb3a61e14bd89c8923aae9c4732cadfea45b52e2067519dfcffe6c02202039b91727ac63c63f14efa5772f241bbb911557bc01e1819e35a4265b65f6e6","0xe552Fb52a4F19e44ef5A967632DBc320B0820639",false,false],["bsc","miotac","IOTA",6,"MIOTAC","304402201e430d525b39f086b168f605156e5e8a1289788eb82a05163f34c57b72276185022050fc464b04c5717224c155b7761e86fa79197d375346a65c93707c9d67086683","0xd944f1D1e9d5f9Bb90b62f9D45e447D989580782",false,false],["bsc","moonbeam","GLMR",18,"Moonbeam","3045022100d4434fa12aa1246e93fd2ee2e437687aeda2d224657eb463581ffa7a488d7b610220531f74abfbb71a30bc2e5259f2423bc87dc8ed20024626cfe32b1b53098df8b5","0x76F3CE6aF26de7A9854dBD153ACd8f46a2Cf5133",false,false],["bsc","netmind_token","NMT",18,"NetMind Token","3044022031bb3d788b46d89cc1ab109f8f598bd93811bf8a5d98bc075611440efc27360002202062e1604611451b5c8dbf67960d191b3762619613044d38900699acf9dd15b7","0x03AA6298F1370642642415EDC0db8b957783e8D6",false,false],["bsc","ocean_protocol","OCEAN",18,"Ocean Protocol","3045022100a582fc8f481db845856dc3a39e8d852e59715fd1946314635b5a9f60c8c8db6602201e1563d006467fc9abae7506c8f79643242e6f18e9398716c4e5e805a2e0d1df","0xDCe07662CA8EbC241316a15B611c89711414Dd1a",false,false],["bsc","oraichain_token","ORAI",18,"Oraichain Token","3045022100dcd5f4ec48d929bd94e333c860520726e37ce548d54f22621318ca4ba646287a022007ad67dfbd14876216857c65f5b8c8aaf1f25a30684e9744948421952897ed73","0xA325Ad6D9c92B55A3Fc5aD7e412B1518F96441C0",false,false],["bsc","osaka_protocol","OSAK",18,"Osaka Protocol","304402205bbf951e4f060ab25e52f4d881d63161d6783369531ec6710d3e51dd7df5a90f02200e2c7cb66545a01c2b302513aedffbbdd84b0767cb2bd1fb9a06dbaf3dfc18b2","0x11cd72f7A4B699c67f225ca8aBb20bC9F8DB90c7",false,false],["bsc","pancakeswap_token","CAKE",18,"PancakeSwap Token","30440220568070fa3a4c88d54d6383fa4c1e2f3f16d69446ae5baf4b712c8d8931118f0502203cd35a099046b325a5bd2698a55a36feeb1e1fd392d47053205c0d31b13a94f7","0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82",false,false],["bsc","pendle","PENDLE",18,"Pendle","3045022100e1450bceedfec9974205299cfb2827b2eddb88f98d9c7a50a9d0ff2cc8abcd7002205ea125fb566eacd2fc53d769a8a65e9e85397f5816bc09987cba66e83f1d2b46","0xb3Ed0A426155B79B898849803E3B36552f7ED507",false,false],["bsc","project_galaxy","GAL",18,"Galxe","304502210081946e4d74e0bf38c6f8d3e08bca6d34d0d2b51ab26a97792def860c78a05f6e022061ada32bc65a121f02327fb1181c784f8b1f72d6698a39784ffb0b60d5017442","0xe4Cc45Bb5DBDA06dB6183E8bf016569f40497Aa5",false,false],["bsc","quorium","QGOLD",3,"Quorium","3045022100d25a22b85123f5797a810b8b107dbdf9969a1a038aadab0dd33d337c4431b23b022031e1b10dc11bfab7c6ae763d9ab3be46a61ef331c1f47da40fb78ec657f0f909","0xDC49A53E1f15fd7FD522E0691CB570F442e9ca6C",false,false],["bsc","reef.finance","REEF",18,"Reef.finance","3045022100b4333ce9f802e0d407e9a3f2f1776e98aa4b53d03508c73c1607356504f455f902207f8c11d08c0fee829c3f568f58e2a83ec84ac94eb45dbfda225216ad62e7b8a2","0xF21768cCBC73Ea5B6fd3C687208a7c2def2d966e",false,false],["bsc","renzo_restaked_eth","EZETH",18,"Renzo Restaked ETH","304402202f28ae2c6c8aedca908d813fdc48c30a4763395b4d97a2ee5c073dac0cbc1266022071696b4b460edddfa5c3cdcc2590ef0631a9aea9b67437b8c1e7a174abb79130","0x2416092f143378750bb29b79eD961ab195CcEea5",false,false],["bsc","safepal_token","SFP",18,"SafePal Token","304402204d09c51605ad031bfab07940c16db49c1a777b97a900e0f92940c80a1d00ec9c022077d16a53e75c781a0bec2a8376b095a520391b6a5b74149fdee59c651db7cb3f","0xD41FDb03Ba84762dD66a0af1a6C8540FF1ba5dfb",false,false],["bsc","solv_btc","SOLVBTC",18,"Solv BTC","3045022100da986d02bfeac07d78df4dd9172cee8cdb4082828a0ea72f7a3db5fdeac05b9902205b50bb47443f3eec19c3b037c68d63a9081b2c536066508893ad2fa6acec5e11","0x4aae823a6a0b376De6A78e74eCC5b079d38cBCf7",false,false],["bsc","space_id","ID",18,"SPACE ID","3044022054143ed06db2b4c6a2fd584ad670af9d8aaf6e33a35d00b1451ed1417be8344a02205bea420707e7bd273ee516f4550a5ed7f87deb8b2a0af6b9d56f4b297eb914b0","0x2dfF88A56767223A5529eA5960Da7A3F5f766406",false,false],["bsc","staked_frax_ether","SFRXETH",18,"Staked Frax Ether","3045022100f6ef9f43ae49e183c631d787fd482dffd444c47854f0c86c3a3e134ccbf901e502204e6ae4dda1143e2ced5e51d44370451995015c5a3ad33801a66049129858cbee","0x3Cd55356433C89E50DC51aB07EE0fa0A95623D53",false,false],["bsc","super-erc20","SUPER",18,"SUPER-ERC20","3045022100abd6084fc2ec25e9e53f65daf5bd1cf0a39fd5c6c50dad1c8742de5a1742ea6c022074a19f767c099ad0bdfd21b5cf4f8373912cbbaf03472fb623c2f24eca660f81","0x51BA0b044d96C3aBfcA52B64D733603CCC4F0d4D",false,false],["bsc","swipe","SXP",18,"Swipe","30440220348a4b1edd0089a9b050d1599e44c7bf72c9077f648b7847c553d73987e4ce1e02205c94f1c2daaf9d96f9f04d3e0244c200a2ca70c5691019a7fd18fc693c91d9ff","0x47BEAd2563dCBf3bF2c9407fEa4dC236fAbA485A",false,false],["bsc","synapse","SYN",18,"Synapse","3045022100fabc616ca42e61e3ea3c38b4c95424d27dad091386269da6613cdae2991805fb0220498035901a9b2383e87e027dd8257d0885fe3df278a11498ccfbf095d798da51","0xa4080f1778e69467E905B8d6F72f6e441f9e9484",false,false],["bsc","the_sandbox","SAND",18,"The Sandbox","30440220443c2346e3b4815c4c0fd7ffa628f3e9d3bf8753349311601f19e42222567e79022002df751c4d8102f418f886efe8bff64aaa3063abbfef21e0cca0ca46351de6a6","0x67b725d7e342d7B611fa85e859Df9697D9378B2e",false,false],["bsc","trueusd","TUSD",18,"TrueUSD","3045022100f9c8dc6b85ae1f105d9efb333c28c1ade3b1adc38992c3beb3539a20b672b789022039093b157912365cdcb0bdfa5da88618af21c6a1f9aed7e21f90c566dbf1704c","0x40af3827F39D0EAcBF4A168f8D4ee67c121D11c9",false,false],["bsc","trust_wallet","TWT",18,"Trust Wallet","3045022100b7c67bb307b75574d8a8f3825f58b30fd635379f1a8f24c8209cd9c720dbb778022053ab485d6a2c8bd561e447e148955d3e84d521710e6457555847345ff12a70b2","0x4B0F1812e5Df2A09796481Ff14017e6005508003",false,false],["bsc","vechain","VET",18,"VeChain","3045022100cfb726d50269eb7bcc67ae6bbd84f2ed78038e28b871a5485def6bfdc12822a502202bac28d1c3dc70967e338ea1e7a2cc655f6f6154588c9b7981437f840534573f","0x6FDcdfef7c496407cCb0cEC90f9C5Aaa1Cc8D888",false,true],["bsc","velo","VELO",18,"VELO","3044022012fd53433e64bc0765c9c088d07709880d8f49a54bfb4e81801be1e6f310e7e902203d211a55300390a0616de3d8d96feeb43bb5ea33d6c3c26f65132176ce3d017c","0xf486ad071f3bEE968384D2E39e2D8aF0fCf6fd46",false,false],["bsc","venus","XVS",18,"Venus","3045022100f12e1bd8445053d9fe45ebe93b9a3220f7fbefa5971315a98745ebf2f4581ccb022064ef5a26998de58fba194b253f3f84a1c65934f9bca921a222f6cf6262a63d2c","0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63",false,false],["bsc","wootrade_network","WOO",18,"Wootrade Network","30440220724870491e6538a8a31d736107e51c825ad230c82f8e4824c8009fd1a86db71502202077cbc773b1b555dae6b3e6f1df0a28c27e484e90015a1ca6822585e27e7479","0x4691937a7508860F876c9c0a2a617E7d9E945D4B",false,false],["bsc","worldmobiletoken","WMT",6,"worldmobiletoken","3044022053d6549172b982731fff9be0c60395dda0de36054941fc551ed757fea28b7677022075557c6579b0ee579913444396f4f2c81c631079ac535e1cb9293b319e8f02ba","0x637c2173f6E678aC3C9b43b6665C760Dc6021C13",false,false],["bsc","wrapped_binance_beacon_eth","WBETH",18,"Wrapped Binance Beacon ETH","30440220492f02ee4337349b2f30d15da67533e525815afef750158fb8ed4218c69cfdaf02202348eae1b84af0b0eb5d5b8d1d3af87adf141dc2cda810ea3c7d72e04f6b5cd8","0xa2E3356610840701BDf5611a53974510Ae27E2e1",false,false],["bsc","wrapped_rose","WROSE",18,"Wrapped ROSE","3045022100aae4eb5d4c4b716b3d434de043bf7fad8f703d4261d617cb65e67cf9030ba7d7022057d322f44d798f44d7c7e73aa2b0fb7b64584a384d9fc3556c98d964ce5672bf","0xF00600eBC7633462BC4F9C61eA2cE99F5AAEBd4a",false,false],["bsc","yield_guild_games_token","YGG",18,"Yield Guild Games Token","304402203d5a5892ddbfd896d8c238d2aeb87358fc4d41337b91454c61185d772c23923602206db44178683ab7fa1f54d087a1a69f2b5c5602771eb0f48f88b7695f2118eb7f","0x13Ab6739368a4e4abf24695bf52959224367391f",false,false],["bsc","zeta","ZETA",18,"Zeta","304402207bd623a10cad36b8949fa3a0f5f94d756a8ab72d1e6a254686610fcd0dce135002201c53b76825e8b479c0202aefc7d8a603808ee8a2630e076949318c29eea1be09","0x0000028a2eB8346cd5c0267856aB7594B7a55308",false,false],["bsc","zigcoin","ZIG",18,"ZigCoin","3044022035fbe1f0227a295413a185e819fe25f8435c2644b20ec66a1dce5d800a93819e02203f58ee933a47a8323dfff8a244c9fe2af2fc21d3cd837323c3304f3c5ee06e1d","0x8C907e0a72C3d55627E853f4ec6a96b0C8771145",false,false],["bsc","zilliqa","ZIL",12,"Zilliqa","3045022100fd2edf3cbcfeecca704328ea37ff8f9a769aad6d630b3c54cb948651d0eab32a0220701e203cb421839ba4665d1332fd54b7f21cc51559b78cfb0e1f9f6263dc6f8a","0xb86AbCb37C3A4B64f74f59301AFF131a1BEcC787",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/57/erc20.json
var _57_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["syscoin","dai_(multichain)","DAIM",18,"DAI (Multichain)","3045022100d66e0dd35fdc8db9c3d005dc63e24be1593cd9283ddb6f325a30ccd8656021d4022013ea3a970275e947952bf1fecd41f880418b3086d36c7cc3064b4da9fa7385e0","0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73",false,false],["syscoin","mai_stablecoin_(multichain)","MAIM",18,"Mai Stablecoin (Multichain)","30440220778f5a7b2307220c5e666dd70cd68fda915ad30b20119be5b4b8b42025e57b54022065c47da36ab96c7d69574ffcb1ca0ed9bccfc17e1d2fd98024f36c5c062cb83c","0x2611FA1cae2a3E20Ed47fB1b293437c14f41B00f",false,false],["syscoin","pegasys","PSYS",18,"Pegasys","30450221008e2a4dfcd8cd190bed2f48c1545c94e16ad8841dc700a36911570ff5150c45d4022072c6251d02cbd6efe834a6428b46f4a426c900349cb0b2cce6c51d6e66f35442","0xE18c200A70908c89fFA18C628fE1B83aC0065EA4",false,false],["syscoin","tether_usd_(multichain)","USDTM",6,"Tether USD (Multichain)","304402200f13993e00f670c94a3ef0d0ccfe970f96964c08732830d2f05fcff449c9eacc02201d2eb9d2a31821e9947bcd10e1ef7168a64debc98490f867ede330d69990d42a","0x922D641a426DcFFaeF11680e5358F34d97d112E1",false,false],["syscoin","usd_coin_(multichain)","USDCM",6,"USD Coin (Multichain)","304402202fa776e4615024d5d5f58bffae70922ebca943224590d988c0193c4d12dbefd702207baa6eac39c99a8b79a435ada388120281c0734c52f836df03be93323ec02bd2","0x2bF9b864cdc97b08B6D79ad4663e71B8aB65c45c",false,false],["syscoin","wrapped_bitcoin_(multichain)","WBTCM",8,"Wrapped Bitcoin (Multichain)","3044022037db12fa044ceef2ffab2ab49f7f1916587a65cdd3c43f3db5e70b9a66cf9f530220038fd08b5b9290866a5259c2191df05d058fdb731d1123ef3d728e3bba46ee45","0xc9BAA8cfdDe8E328787E29b4B078abf2DaDc2055",false,false],["syscoin","wrapped_ethereum_(multichain)","WETHM",18,"Wrapped Ethereum (Multichain)","3045022100f62533cfc0796c1ab1cb2516d5c3237191c4208f5fa84e863424e5281ea5a460022033931926e446672d7956a7923562fa56bade7cfadd9d9ce669874233be2d07e5","0x7C598c96D02398d89FbCb9d41Eab3DF0C16F227D",false,false],["syscoin","wrapped_syscoin","WSYS",18,"Wrapped Syscoin","3044022048a26c9d7ee71dcac1ef343013e110337c8a84479c3ea492b1c7bbeb548255820220086b1d78cad1c4abc7d90fe924e5419a71df9691e74428b67cf77ddd40d564a9","0xd3e822f3ef011Ca5f17D82C956D952D8d7C3A1BB",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/137/erc20.json
var _137_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["polygon","(pos)_compound","COMP",18,"(PoS) Compound","3045022100bc6c39d0831aabe4207836ccfef88f0331dfc8b764bc4980f6bfe0fd2546c5cf02201636c8b88bb165998f86ff398a3da68e9557b3ad6f6d7f33e99b162ba7a7b201","0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c",false,false],["polygon","(pos)_dai_stablecoin","DAI",18,"(PoS) Dai Stablecoin","3045022100b74ee418eb7eef1cde0876e9589a6ba217a3318ad840bb797c68adb4ecc57bd4022014fc46f93500576aca05034e243d12f4a28e56b81a3606d4c99d617ebebadaf5","0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",false,false],["polygon","(pos)_wrapped_btc","WBTC",8,"(PoS) Wrapped BTC","3045022100839e22224fc6ece318210c2cd6508d4e4e428c718e36a44b1c3590796dd4fdbb02202e86a2e423132e2fd0e2aabb580b1e06112c7de74f540e17e4042849877abcce","0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6",false,false],["polygon","(pos)_yearn.finance","YFI",18,"(PoS) yearn.finance","304402206d3c20aa3d59d2e41123c6a4d9f497b7af19b7d2a40a8149669debc6b3adbea0022043d30baa1b9ec44cf11d7b6b4f820bed89518032aa40a8137c6b2ca8643f794f","0xDA537104D6A5edd53c6fBba9A898708E465260b6",false,false],["polygon","1inch_token","1INCH",18,"1INCH Token","3045022100e379fb6706bb16d8f39ed26a4f0c7e105a3fa1b50e01176d2702b6aba2209fa502205c347dd1fe3a1447a10ced5de9b58a01661d2381e4f18ef36dc51a03dcbb02e1","0x9c2C5fd7b07E95EE044DDeba0E97a665F142394f",false,false],["polygon","aave_(pos)","AAVE",18,"Aave (PoS)","30440220456a4411c8ca81b689f3f80ee2b198a754f8795194966b596469abef607cb34b02207a1543fcf5ceadd67a2fd87b57a71cddd74c3fba0a5973a765ac5b25eb7691d6","0xD6DF932A45C0f255f85145f286eA0b292B21C90B",false,false],["polygon","aavegotchi_ghst_token_pos","GHST",18,"Aavegotchi GHST Token (PoS)","304402203a1933f215bfeff1068a22f11d5355e62a920fa50108c0b1fd26e2f51cfa35c90220275a8e7f0950b491bdb46e03a4dd89b7574b70d0e1e1a7f47b29f315feb1d385","0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7",false,false],["polygon","across_protocol_token_pos","ACX",18,"Across Protocol Token (PoS)","3045022100a891f20bb001576b5f1e729435b7ee107a36c208c5fe57f1c6e9b81953c2314402204a1129c2d0a6b19b4bee277f2130c03d0cf69647508a8931c4830518596d4fcb","0xF328b73B6c685831F238c30a23Fc19140CB4D8FC",false,false],["polygon","ankr_pos","ANKR",18,"Ankr (PoS)","3044022078a506294c7fe50740b13322b089fca1934f9e1008ecb46394b8986f069384a20220313354ff5746b22ecd4a0f76208bd87e4cf13fdaf52e528915e7978993e0aa99","0x101A023270368c0D50BFfb62780F4aFd4ea79C35",false,false],["polygon","apecoin_pos","APE",18,"ApeCoin (PoS)","3045022100b7745d7dc10dd8c919a24d5d73aaa73ebcc850467a62660a7ab33a68abf3330b022044583229de6a56a99a85126a29e93b057bea6ef2fd12b469fd915f9aa7479264","0xB7b31a6BC18e48888545CE79e83E06003bE70930",false,false],["polygon","artificial_liquid_intelligence_token","ALI",18,"Artificial Liquid Intelligence Token","3044022031a263c49ad3eaa14c858bd8eb5f202f3bfcfbbcbb3c91d7e375466f51be393b02201e724195531801d568ec28e82d9a01ba7acfc426a1cdd56f895f4b75c75882bb","0xbFc70507384047Aa74c29Cdc8c5Cb88D0f7213AC",false,false],["polygon","automata_pos","ATA",18,"Automata (PoS)","3045022100b32b7b633b76843ff1cf0c743cf0718aa7fbbda66f525b8048a3a72976469f300220247efce8551d01a3de172fc030d844295e6632d6731fe3bccf2b99c6aa39ec4a","0x0df0f72EE0e5c9B7ca761ECec42754992B2Da5BF",false,false],["polygon","autonolas_pos","OLAS",18,"Autonolas(PoS)","3045022100e7248e7e1dd108fc097329ef9bff3c6b23ab903b35fcd3ee546f3fd4a4fad81d02201d56fd7589925ed22e4865e2546f3fb052b65ab675d695d82d36e78534803788","0xFEF5d947472e72Efbb2E388c730B7428406F2F95",false,false],["polygon","balancer","BAL",18,"Balancer","3044022065dd446f0899eaf96b76e325fcdbb44011aa2cc74c97c8efeaefcba268c8ef88022004b20ead8b2627dfdb27295fd1549390205ffdfb101259c5e52049012e1b5516","0x9a71012B13CA4d3D0Cdc72A177DF3ef03b0E76A3",false,false],["polygon","bat","BAT",18,"BAT","3045022100cf93e17a4073c83ddab8b64e01c0c64d6c2cb96a87c3a84a537bc1905933762902205bf6f9e94ee53d75e7c3ee7381703eff8131befbedfd72ec6cbc60d2ff942009","0x3Cef98bb43d732E2F285eE605a8158cDE967D219",false,false],["polygon","bit2me","B2M",18,"Bit2Me","3044022009f57d54d5f992c035ad5592dac587217fe7d6f7ac14a0fcf99f96c31663632d022003f9e1b826087b30d4df841d32318fd96e009dc92d98411ccc54341d2e0f833e","0xE613a914bbb433855378183c3aB13003285da40A",false,false],["polygon","bonk","BONK",5,"Bonk","3045022100c470e15bf8ef7a99f4bb4acf770d4ea25ba1f3aaa9e425c68a65b49dedcd2fb2022049bdec33ca58aaa4db93372128538ca60660a99e06c9b95dba196f473c584948","0xe5B49820e5A1063F6F4DdF851327b5E8B2301048",false,false],["polygon","boson_token_(pos)","BOSON",18,"Boson Token (PoS)","3044022058b04f883555c335919d904ef85f37118d537c153c21f2b7c604e8518003733b022014ccd32dd67a015b4482639ecfbf340485775fe4b47ef8244bb5f1cb0801cf24","0x9B3B0703D392321AD24338Ff1f846650437A43C9",false,false],["polygon","busd_token","BUSD",18,"Binance-Peg BUSD","304402204ebeb9cc4f576f9d9bdc09cd6a62db00c7e78e16f009cde3a592ccbead6a2dce022013c279d79dd9d7fcce0bb65924bed1244500b4b072b5b16a8881a613bbcba015","0x9C9e5fD8bbc25984B178FdCE6117Defa39d2db39",false,false],["polygon","cartesi_token_pos","CTSI",18,"Cartesi Token (PoS)","3044022054686793ff24f95f598775b460d19b47b668403f6446a8be2e0811ec22449aae02202a3f43510fcdf81b3fc1c76eb4e1319090b99889327741abca749029ea339202","0x2727Ab1c2D22170ABc9b595177B2D5C6E1Ab7B7B",false,false],["polygon","chainlink_token","LINK",18,"ChainLink Token","304402207253a5dc3dd9edd9a3fbae8779c20bfff5e3853a6ee46d76903c4c27f7cc521502204f3355c7ff2ce78fd5ba38b13037cafd481a5c058635e649588c8e42eb5e36f7","0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39",false,false],["polygon","civic_pos","CVC",8,"Civic (PoS)","304402207401e74344749b5ecddc19767a603170a69fce311053943ec805c4a24f98a1910220031e4a037182c0792091e0969ac785013bec35b0820c9cdae886cf1c5a378e8a","0x66Dc5A08091d1968e08C16aA5b27BAC8398b02Be",false,false],["polygon","cobak_token_pos","CBK",18,"Cobak Token (PoS)","30440220750cf83d6aa716bbe242db26f76af8b1862ddfb01917b5bed44420438ed90b60022050780356d87f319a9d0d335749f7d32b63fcacd8e36e34bdcfc910fe42d969fc","0x4EC203dD0699Fac6adAF483CDd2519BC05D2c573",false,false],["polygon","coin98","C98",18,"Coin98","304502210087108a46c988e0404f9258b5371a8fb07523defa2bad52cb31dfe27324d97d6b0220019d750ca583f2694977adc7576d2f2bb34fae7d42d086d4dae995d9e6e41e0a","0x77f56cf9365955486B12C4816992388eE8606f0E",false,false],["polygon","coinbase_wrapped_staked_eth_fxerc20","FXCBETH",18,"Coinbase Wrapped Staked ETH (FXERC20)","3045022100f82c0d3286af68853fbab0f23ebb3cce897543420b547092464ec50cbdffbb06022076bd1b048f578e2bdad41c1fd49102c232e7938714e8a75601b3fbeb7c59480c","0x4b4327dB1600B8B1440163F667e199CEf35385f5",false,false],["polygon","crv_(pos)","CRV",18,"CRV (PoS)","3045022100f379c74676f646ea2c59b1ad896ebb81ddee85db0f1a7cd9163251a49f31367c0220466c4cbe449cc63e5a94b262aa7bcd6c8f6cfd99ef1fcc356f9f597ee4148b56","0x172370d5Cd63279eFa6d502DAB29171933a610AF",false,false],["polygon","curve_fi_usd_stablecoin_pos","CRVUSD",18,"Curve.Fi USD Stablecoin(PoS)","30450221009bb614d3c4b993db8991df803d4921936ee235d01759a1bd9346d780350d63cc02205e9fb20baf45879e3b09c6437fd895f7626a18342d69175b76fd73543b48a424","0xc4Ce1D6F5D98D65eE25Cf85e9F2E9DcFEe6Cb5d6",false,false],["polygon","decentraland","MANA",18,"Decentraland","30440220436699eef62d0e27cde881617e2bcc77e99fee8ddf20f7fd716bdfb49a2d5699022073b43e4d889526c69e07a87d377fc401986c2f620287c98396ee7e449e82062d","0xA1c57f48F0Deb89f569dFbE6E2B7f46D33606fD4",false,false],["polygon","dodo_bird_pos","DODO",18,"DODO bird (PoS)","304402202a0ed61c90c54e5779891c6d4e890d1e1e045da42223788fef9da9308190ff8d022048ead3c7af67d77c6ee8fe319799d58bc50117e4677166926d6015218acdeba9","0xe4Bf2864ebeC7B7fDf6Eeca9BaCAe7cDfDAffe78",false,false],["polygon","dogelon","ELON",18,"Dogelon","304402204b0eb245902417b53d92071ea313cf7fbf4423bcc554c8a317676e35c12b964b0220078a990d4cbf28bd53a0a7a64252f8f074f678e6d6af10e8740faa577ebeeac7","0xE0339c80fFDE91F3e20494Df88d4206D86024cdF",false,false],["polygon","edu_coin","EDU",18,"EDU Coin","3045022100cf3eac938ce7192ee8ad4843f872a968d02938ddc90f98522ba35233e8b70c1402204523f6ef42a8f4bccf6ef8c74a2cb56110a4194b708820d0d1f6f022ca55cac9","0xB03E3b00BaF9954bF1604d09A4dbd5Cf88E1f695",false,false],["polygon","escointoken","ELG",18,"EscoinToken","3045022100a32894a2b0da6173c483769f87aee7c9efd15904276079c03e44844952b5c742022016de97df60478d5f9f7f599b1dd12f320e4479184bfbe3fa5d15148e839f2c61","0x8226AC9EdB26ff16DA19151042a8BA3BB2cC237F",false,false],["polygon","everipedia_iq_(pos)","IQ",18,"Everipedia IQ (PoS)","3045022100e1427ef7323b3f37d465fb9689fb018dec757aa8366b8e343dae3ba2c83410d6022013c549d42ad32760d28babf415b5b7fb7d212fbc4c6565c197960bf807e85ae3","0xB9638272aD6998708de56BBC0A290a1dE534a578",false,false],["polygon","fetch","FET",18,"Artificial Superintelligence Alliance","3045022100f462e081f273bb1ae69168d64d538ec202cffb609c7bfd306d12297e84825f1902207e82b440a4deeddf67292873c416ea065ef9663961a3ebfda099538f75d3c1d9","0x7583FEDDbceFA813dc18259940F76a02710A8905",false,false],["polygon","forta","FORT",18,"Forta","3045022100dffb349c02d84532a6471b0aa651569a6b89f20e2b97ccba8d610f7d1bb3d2d102206d94fdfbc39f1917702f6fc0a17eed23595adf9d4ba13018df8650737f473642","0x9ff62d1FC52A907B6DCbA8077c2DDCA6E6a9d3e1",false,false],["polygon","frax","FRAX",18,"Frax","3044022008cc676c8cbdd5aeaef7b6063b2dc4627ddfdfe833b9914d561aad7d3044f27d02206ea37a4acd19f614ffe782125f2efc6015dc9fc94424eb9a43aa789b40fa9294","0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89",false,false],["polygon","frax_ether","FRXETH",18,"Frax Ether","3045022100883e38467f8d840bd6e51ecbc904cff14845b316f4e08ed32b32673f2806845e022032d5585d202418709df26988a09df453cf71092ad930bf22f63e6ead9ad4d667","0xEe327F889d5947c1dc1934Bb208a1E792F953E96",false,false],["polygon","frax_share","FXS",18,"Frax Share","3045022100a1574be05a44035908709c966fcc8756a13d60c43af8a1b57086ed83d889f5b102200aaf6578af553e7c1c22785842228c46342d86c654e44e87b3ccb67bec53a8aa","0x1a3acf6D19267E2d3e7f898f42803e90C9219062",false,false],["polygon","frontier_token","FRONT",18,"Frontier Token","3044022031e7a7961b55db287bcc987825a632348a952dc9352abae8db1b0f3fe3b7353c0220404f9ea73f5dd8a9498fd6db2a69d5a4eb4dcc4847d0f3344567b6548676edbe","0xa3eD22EEE92a3872709823a6970069e12A4540Eb",false,false],["polygon","gains_network","GNS",18,"Gains Network","3044022100eece560275b0df892c526a4248e43a00bc82eedfa958f5211f737e2572077ff7021f35ce82649c501c384f6af2d3372456d93991497021371ab34afbdc3230e45c","0xE5417Af564e4bFDA1c483642db72007871397896",false,false],["polygon","graph_token","GRT",18,"Graph Token","304402206e352ac6947f2d2089339e567429a4de41f8c0ef4d0a7d4c0fb0a706a56e45af022011a85b67e644478abee9ed8e3f8e9db3973d54a85a9ab43d10f970be76a0d59b","0x5fe2B58c013d7601147DcdD68C143A77499f5531",false,false],["polygon","greenmetaversetoken","GMT",8,"GreenMetaverseToken","304402202520e1c40176b3a395e4b2e31764eedb78f4cf2b52569a0d81851810b2a00dc602205ad07521d3ace2378f1cbee74d3dc9832e6a7f376d2c5fc923a54c2995c6f852","0x714DB550b574b3E927af3D93E26127D15721D4C2",false,false],["polygon","instadapp_(pos)","INST",18,"Instadapp (PoS)","3044022046aa1646ff99298984627f196832310a2b1ab17409e4efd6a37b76fb69a520ba0220714ae7ea148e42d1796c260ac0d0d5ca882e4d8d00ce503fae0a76d422d9ee19","0xf50D05A1402d0adAfA880D36050736f9f6ee7dee",false,false],["polygon","insure_pos","SURE",18,"inSure (PoS)","3045022100e119a9cd9064000922d03b1325707c163f25bc73b084459d93be54278ac7ac9202201bff8abc3544d581726af5cf1ecb72abe8193daf0ec63c34edbc9c12da045fad","0xF88332547c680F755481Bf489D890426248BB275",false,false],["polygon","kyber_network_crystal_v2_(pos)","KNC",18,"Kyber Network Crystal v2 (PoS)","3045022100ac428da56dd621eaaaafc550ec9970ac2c8c5297af8bc7bcff068f35890121010220779cdf971ea6b145fcca46cdf8a926acbaa9ff97dd309ed5770cf769e7cdaa3d","0x1C954E8fe737F99f68Fa1CCda3e51ebDB291948C",false,false],["polygon","lido_dao_token_(pos)","LDO",18,"Lido DAO Token (PoS)","3045022100e4e6074edaf35a5f5ddbdcb3551ed3ac69448b197ff3024887db347fe5fd5f4e022000c9b0ad2ff8c5fbbe0c5fa1d7667a8429cefb953d9e988224aaf84e372650e3","0xC3C7d422809852031b44ab29EEC9F1EfF2A58756",false,false],["polygon","liquid_staking_matic_(pos)","MATICX",18,"Liquid Staking Matic (PoS)","3044022035523f9be3d4bf623daa0c6d43c88af5a8f19ac0732b6d05b51649fc6ca48665022063627829489de17eb7c2d170fbd874cf2c24dfba640ec53f2f5c09647cbd8a59","0xfa68FB4628DFF1028CFEc22b4162FCcd0d45efb6",false,false],["polygon","lusd_stablecoin_pos","LUSD",18,"LUSD Stablecoin (PoS)","3045022100f3a9ab8db9c2e65bc5123274c3553d4e2304b24d217d7beda0b83414ed9d0f8f022002e33d417b830b0fec66b36d4f8937eef35714cac27cb570be86a28023c45b80","0x23001f892c0C82b79303EDC9B9033cD190BB21c7",false,false],["polygon","m2_global_wealth_limited_pos","MMX",18,"M2 Global Wealth Limited(PoS)","304402206794b905dbe2d3b35660bf78d2c6d46f0480a7444c8a5ff406a79839725e21a902205ae20269421e12c6116f840b671c09c10f944be8dbb6757ad3d98a86fc58ad8c","0x95A62521c655e7A24A3919AA1f99764C05B7ec4E",false,false],["polygon","maker","MKR",18,"Maker","3044022028163f6351dc91fb1b53d02e407b7d41e7d43eebe30e9b51ba26c227ab1447f302202257ef7960134df342c1a74c06698e5f0cb2180032dad663ad17ff6b850f4588","0x6f7C932e7684666C9fd1d44527765433e01fF61d",false,false],["polygon","mantra_dao","OM",18,"MANTRA DAO","30440220610533443b38a8a6567b13823a5e34275edf5532e0ccb28678b4571aa485428e02202f41793d82e11b5736dd936611854e6352eb08ddd5017e9b3f036e7cc66d8333","0xC3Ec80343D2bae2F8E680FDADDe7C17E71E114ea",false,false],["polygon","mask_network","MASK",18,"Mask Network","304402201610449bb6144e5fa5a0dff8a3937546c63f5425c3183040bc3af91d241fb10d022050f2e11ab90ba3355081db37e2e1391eb670458095a5f960a498746239bc887e","0x2B9E7ccDF0F4e5B24757c1E1a80e311E34Cb10c7",false,false],["polygon","matic_token","MATIC",18,"Matic Token","304402204809d6569de46f25f6b7804cd5758e04bae97c4f3e296b58fa5b313fc8d7c5e6022060bcffefd8c6353be414945c11db390750e5e43b1f8ba5f2dfcc50764d1a7efe","0x0000000000000000000000000000000000001010",false,true],["polygon","nakamoto.games","NAKA",18,"Nakamoto.Games","3045022100e638f9de7f2e67fad5e0f19233935bae921c551ae4529c8f22ba8d8d44104b32022011147c5459d6f815bee6a31ca29c8e4a63cb5485b9b4820ebaa24ce663d04787","0x311434160D7537be358930def317AfB606C0D737",false,false],["polygon","nexo","NEXO",18,"Nexo","3045022100e55f2f5e587f95f627932523c95ea0d1d748dbecc9921d0def3f0acccb70efee02207c3b2fee173e99d90c28eb324832db0d14b4a477c1ec5f2468442b6404d41d8c","0x41b3966B4FF7b427969ddf5da3627d6AEAE9a48E",false,false],["polygon","ocean_token","OCEAN",18,"Ocean Token","3044022042dbec9c2f3a5270e89008659bcd0d3103922f210f9e4d574e189690690ece5c02207a959c67010943e050dd27a9a01f1362bb82a4aae92ed011edc748215edc115e","0x282d8efCe846A88B159800bd4130ad77443Fa1A1",false,false],["polygon","ondo_short_term_u_s_government_bond_fund","OUSG",18,"Ondo Short-Term U.S. Government Bond Fund","3045022100f6736d8075634db63cd4385c3963d4d2292d67d044511155fcbc37680f87d29a022041ddae6cc0ed2c48a727b16b0b1f8ae1c75448ddaffe03381dccc3d1ceba34fa","0xbA11C5effA33c4D6F8f593CFA394241CfE925811",false,false],["polygon","orbs","ORBS",18,"Orbs","3045022100acc9116af0f76a425b4c455e6e9d6b1b59f09c8e0df801d28d0bc2741366d0fb02205b2e79fbb2e0057a7ba49dc952998b914c25130a82f8d2e1f3dd2bcb3d5012dd","0x614389EaAE0A6821DC49062D56BDA3d9d45Fa2ff",false,false],["polygon","osaka_protocol","OSAK",18,"Osaka Protocol","3044022060e232512662737df203bdcd339152aedde528ebaf31a6f2a1ce0dcf9bb8f87b0220644b13ba6282131b2f4000ccd77aa4fdeeb4d94d49d5df5e8e336c60713da4f7","0x11cd72f7A4B699c67f225ca8aBb20bC9F8DB90c7",false,false],["polygon","polygon_tbtc_v2","TBTC",18,"Polygon tBTC v2","3045022100e9419a618f758eeedb92160ea4fdf63c3094df06947c09a2c580b72166755f9602206ce8ee0be764a76c1676f76b68110fe8023fa2c351b74f76c2eed6ebd8d1c115","0x236aa50979D5f3De3Bd1Eeb40E81137F22ab794b",false,false],["polygon","pyr_token","PYR",18,"PYR Token","304402201f9a2c5b19732e43d8e09701aa2969e5ee1b0394665cecb558dd1d0afa962bc4022057cceedec8dd7fad2299463f50f91b1e098b4d6f3f864bd1ae5fec5ea63ef36a","0x430EF9263E76DAE63c84292C3409D61c598E9682",false,false],["polygon","render_token","RNDR",18,"Render Token","3044022042d62a1be583b33bf641857e3519ef7422a350e21258f030b8c25fdd4c7e8260022052f4e10c82849f947f4a5acb87db379c56c84576bd083073c16a6a59869096cf","0x61299774020dA444Af134c82fa83E3810b309991",false,false],["polygon","request","REQ",18,"Request","304402207d4a4d64ba7d7e41fd03eb5dd20703119108efaf6de3671149e69fd305e98673022062d55ac8e8cba6b42de22bc687669ab4a9864c92ab99092d1d0d8a5b199e9a8b","0xB25e20De2F2eBb4CfFD4D16a55C7B395e8a94762",false,false],["polygon","rocket_pool","RPL",18,"Rocket Pool","304502210088e2753ca251b934fb95645f451b30f0d69b72228f76e671c71f4784d80523df0220695ecb3258a48d7fc434e73910e1718b20a6359e4501c796d541337a2c820a79","0x7205705771547cF79201111B4bd8aaF29467b9eC",false,false],["polygon","rocket_pool_eth_pos","RETH",18,"Rocket Pool ETH (PoS)","30440220304e312655d54140710f300c0cb1e422ce4990ded6458e79b8f8b58a9dc1de4902200fadac938538585de47e38ad9f9b7598cdc504a86a78a7e6036d87e9550e5402","0x0266F4F08D82372CF0FcbCCc0Ff74309089c74d1",false,false],["polygon","sand","SAND",18,"SAND","3045022100c21119cb079c76295c8524b3091064854b02ff371416a1a5e48e9095edb3bfe502206f785716e63e80a99eade8d3fb273031614393e086883d866b5f9db2809b9ebc","0xBbba073C31bF03b8ACf7c28EF0738DeCF3695683",false,false],["polygon","satoshi_airline","JET",8,"Satoshi Airline","304402207272da19e217e4df8ea3c35a9d2ddcb20780c2d3c0cc35d6786aeebdeda3ae0002207d9d14c1e4fb73f9c3b256dee5e60a9e9cedd37e5bcc5a9e7d6f0b368762321c","0xa615Df92fCa12ad40B8f642F46167B623A03d646",false,false],["polygon","singularitynet_token","AGIX",8,"SingularityNET Token","3045022100c8522f1c1ab31af32f71740b443c3cc1039c74764c59d4ea15cad27c4097410802202a2dacb662495b79a7573dad329ae177d40bc37976d94a9d4ec9c1eedd21c7e7","0x190Eb8a183D22a4bdf278c6791b152228857c033",false,false],["polygon","smardex_token","SDEX",18,"SmarDex Token","3045022100e038f32112bc8b41db5171f7d48ebb12a57e00e8954700df2d39f692d3ba661102202fad915109aac4fa75d42f78582513acb0f1bbb3d8472ca2a3fb5469eed6c2f7","0x6899fAcE15c14348E1759371049ab64A3a06bFA6",false,false],["polygon","spiko_eu_t_bills_money_market_fund","EUTBL",5,"Spiko EU T-Bills Money Market Fund","3045022100a69cf2ef7caf5b18c4812ab5ee25044d06f56972c72d018fb19e88532dfd5f3402203543692a92e3dd115624571627d76e88c25ba3fbf12ea8d3746f237e3c6b8f5a","0xa0769f7A8fC65e47dE93797b4e21C073c117Fc80",false,false],["polygon","staked_frax_ether","SFRXETH",18,"Staked Frax Ether","304502210082936b1ff1c025be0a20f65d9670644359348badcbdc8f34be1e2642df3775f002204254098d1caa277a7a84f6096e9bdc5865b4f8d285b0c3d9e3e04da868d817bc","0x6d1FdBB266fCc09A16a22016369210A15bb95761",false,false],["polygon","stargatetoken","STG",18,"StargateToken","3045022100d170a9a9cebe10b039a3d250e43a39ce86a11d735e7da5d79fe44957033f9a0002205a1d95e8a3f6a8a868039fb6fc88b87f935fe4c34e626f1cb31cf7f6756065f5","0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590",false,false],["polygon","stasis_eurs_token","EURS",2,"STASIS EURS Token","3045022100cd91f0b64f1981b6c541efa3d28c1eefd0df08cde9c385b6eebc5a1d76725f2e022047f17ddc307ed6941857f5cab5acbd5f1bebc3551a987d8614342c7379825672","0xE111178A87A3BFf0c8d18DECBa5798827539Ae99",false,false],["polygon","superfarm_(pos)","SUPER",18,"SuperFarm (PoS)","3045022100b34b5b5981c20518320baf7c6f695fda645162a870dccfc292a32ef12c163b5d022065681bcaf2a7018a3638dfd880526b84418b22e323d590d564198e501f730000","0xa1428174F516F527fafdD146b883bB4428682737",false,false],["polygon","sushitoken_(pos)","SUSHI",18,"SushiToken (PoS)","30450221008884a0addca753dc4393d8e5541819547c6d6e5ead02a5e1a7235fcddbb0c64902204c5c0f309402efa8767c9114ccf2b866d2c0a2aa05cb7d14aa18e00bf841a508","0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a",false,false],["polygon","synapse","SYN",18,"Synapse","3045022100b8170de42845f84dd5557114a7b5e4f23003e07bb16ef08b20fd10d577dd487202202f974e30922c92ae7ba146e5de0d19b7b5d7e8f7b00e4d70524d8bde24179839","0xf8F9efC0db77d8881500bb06FF5D6ABc3070E695",false,false],["polygon","synthetix_network_token_(pos)","SNX",18,"Synthetix Network Token (PoS)","304402201f2c8892ac4f7edda2054cc124893abebf1b1341609c310b010c24f3eb5d53ab02205622033d1f4ded85a0de1061b3e65fc707718029f02b75d56bfe470e6061661b","0x50B728D8D964fd00C2d0AAD81718b71311feF68a",false,false],["polygon","telcoin","TEL",2,"Telcoin","3045022100df6734e8dc79763f3a2e3ccbbe547f9380f24a5d25ec0e7ef5e3357aa23e105b0220484abf1214cdc1bda02a17900fc9f3ae73ffbddbebb101f51ad5674c860d4aa2","0xdF7837DE1F2Fa4631D716CF2502f8b230F1dcc32",false,false],["polygon","tellor_tributes","TRB",18,"Tellor Tributes","304402207d9872134e96a0deebacd719b1a3d684a8a3282449d721ae0bcdfdf1a864f6e402200c07a0aa5e0d897fdc795ccc9794e5e288b8e22e30594b25f8afbacb053b4370","0xE3322702BEdaaEd36CdDAb233360B939775ae5f1",false,false],["polygon","the_doge_nft","DOG",18,"The Doge NFT","30440220706ef6101760367e5887b8d32ea5d73e8edc1c1e4aef6155ea235dc0571871c9022072a102ed96053f89fe8b33b790af28449ab6ce9d1515daf84bc5ffc5a7d1d012","0xeEe3371B89FC43Ea970E908536Fcddd975135D8a",false,false],["polygon","tlos","TLOS",18,"TLOS","30450221009e7f03cc64d0559442c44c7292cb2e3eeaf0684927ca1c4764ede505a37f7b3302206965f124e943405befd99f0c75c3cdbe69e2739a0b8c54a8bc95c7ba0660b888","0x193f4A4a6ea24102F49b931DEeeb931f6E32405d",false,false],["polygon","trustake_matic_vault_shares_pos","TRUMATIC",18,"TruStake MATIC Vault Shares (PoS)","3044022012dc6b78a9ee65aa179e854156300f92129912a59942ef999d23d1cb6c670e31022058e7cf621a69c3797dde016348ec26f94e79b37e2debea2bfdeafe5fa4a680d2","0xf33687811f3ad0cd6b48Dd4B39F9F977BD7165A2",false,false],["polygon","uniswap_(pos)","UNI",18,"Uniswap (PoS)","304402206fd1ec530e75eadcd8adca249ec060cec1ee532d2a63c6617de8ec73cc62456502207d2e780bb93cca35ea810596b764cbe8fa72a593379ff4f48512687cc4611fd3","0xb33EaAd8d922B1083446DC23f610c2567fB5180f",false,false],["polygon","usd_plus","USDPL",6,"USD Plus","3045022100dd03c274dc8eb3e9b66345ec00d6b7bb13dfaaf0c1c480810372b5a5b652187f0220396974879e8805834c1f061b4d59c164ef37828ede3ff36ac7000548748fa007","0x236eeC6359fb44CCe8f97E99387aa7F8cd5cdE1f",false,false],["polygon","vanry","VANRY",18,"VANRY","3044022052ad61194ebbbc113b65eb887942dca4c628cc7ba4537e09951fd182e8b7b33f02207d250b003b610fdd3898dada8d6073cb5acffe0464ba25143326aeb8af91517c","0x8DE5B80a0C1B02Fe4976851D030B36122dbb8624",false,false],["polygon","vicicoin","VCNT",18,"ViciCoin","304402204c4f19a159452273d663df80899775e784c2d27784d3c029a20c81c9503c48ee0220368b2c6424bcf078e1473a7ee52eed1c00cbe8df678d6ac98d58f7cf7f57a121","0x8a16D4bF8A0a716017e8D2262c4aC32927797a2F",false,false],["polygon","vsc","VSC",18,"VSC","3045022100fc2059489683ff5dce8c0c20d51fb3fa7ee57106ee283bd31cf2c40417ab502c02207d4fe3757942d54d7d5a9c05d51588ab49cf8dd73f0d09b7658b88f50bca3187","0xcDf937995A55a9AB551D81b463AC0f7F02795368",false,false],["polygon","wazirx_pos","WRX",8,"Wazirx (PoS)","3045022100ab4f4b77c7836c3313f90cc9a3e5998dea75c0f26205b94faece1b4c1732ce4502203387a29d1a6401e651876b1e918236c581aef03c6c1bcc6ed3ed7f24c7c7833a","0x72d6066F486bd0052eefB9114B66ae40e0A6031a",false,false],["polygon","wootrade_network","WOO",18,"Wootrade Network","304402206fa91ec7507c0b90e8072900b0ec42a60496deefa710cb0a942178610021100f022040c899804634ebce099a9c8ffb3bd1e34a229e73a4190c0f320662fda1ee0994","0x1B815d120B3eF02039Ee11dC2d33DE7aA4a8C603",false,false],["polygon","wrapped_ether","WETH",18,"Wrapped Ether","304402207b674dc939fc9958aef413f7e1b3d755ffbcc8240933d7b6d888e4adeae5c8a802206dd9b1c0c8291e28977497ac8139902446fbb770cd82f6aad7eb7c7b72d69b50","0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",false,false],["polygon","wrapped_ixs_token","WIXS",18,"Wrapped Ixs Token","3044022010c5a4c283d33754c01d52b1efb06e45844dd575d1bb20ad164af0eb915d0f3a022060075f9a9a4c8c19339931a68114ff2dc85ee8057cbac439eb2e7803463a4c67","0x1BA17C639BdaeCd8DC4AAc37df062d17ee43a1b8",false,false],["polygon","yield_guild_games_token_pos","YGG",18,"Yield Guild Games Token (PoS)","3045022100e0d30ae31d4f50c86ff493d58d7a3287acaf613982df5a34d0b8a1c2eed3fb6f02205d3f82d35a9e6e799447dedd259564a99526fd5ef3c04174b3b570e6091c0c41","0x82617aA52dddf5Ed9Bb7B370ED777b3182A30fd1",false,false],["polygon","zen_exchange_token","PZCX",18,"ZEN Exchange Token","3045022100dc428e3ad660a176a8f01010d252679e4bf6e6a0788cbcc2b2413b646a23dde402201678139ba93e85f4cd1646a8a3fb7cdba020417f2346b8ed8c4c4d779f1eade3","0xDD75542611D57C4b6e68168B14C3591C539022eD",false,false],["polygon","zigcoin","ZIG",18,"ZigCoin","304402200bc8db825abdcfb8edf839c42d20ae48801baf497da9988299ec64c917c0b7130220045c3a0bdd3f5e1e64325c5f7da47274596534943bd826f435d061dc86627b1f","0x7BeBd226154E865954A87650FAefA8F485d36081",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/199/erc20.json
var _199_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["bittorrent","decentralized_usd_tron","USDD_T",18,"Decentralized USD_TRON","3044022030cd4c59272b33aa4ca17fef6b1619112eaba658cd1c2fd6fce03e0d3315c93c02203e77dbf7d56d30ea1f3646b7e20e0cfcd8a55a963dc7cd05065e7e3603cd99da","0x17F235FD5974318E4E2a5e37919a209f7c37A6d1",false,false],["bittorrent","infinitorr","TORR",18,"infiniTORR","3045022100e3dccab26b81e381a02bda7f66886f88111160421b6b76242d3ac0a1e0e2c7d6022004d90d327a587e83d030980c4778b40ed391d2d6f51dda18ae5b0d5e7972fa80","0x195Ca22A177e6ED905c469f4F64Cf67e819f49c2",false,false],["bittorrent","justmoney","JM",8,"JustMoney","304402205d4d8100a1c8e7678b12a5299f6c6036249e706d2b9ae0f7d2e6fc5413df936a022065cca4ccb907ad607dd8264f66566379e458011a10356860ac6eeeb0ee331dbe","0x388D819724dD6d71760A38F00dc01D310d879771",false,false],["bittorrent","kyber_network_crystal_v2_bsc","KNC_B",18,"Kyber Network Crystal v2 - BSC","3044022064c3a2675d4f3ae6a1fe087ca41065f55fb364d5b5c9127def1dffbdc1d264a20220085f26a0a987741d98ac72d0b26685e6a05e04348f35843ebfbf4a6254f972d9","0x18fA72e0EE4C580a129b0CE5bD0694d716C7443E",false,false],["bittorrent","kyber_network_crystal_v2_ethereum","KNC_E",18,"Kyber Network Crystal v2 - Ethereum","3044022068f8836c5ee1d25152b9c5b2c25d20d683302b442ac5979d5af63fa30c3a142002207294f88a18f5f0adb07f75844b9a2c7707eb2f70d4d38cb309fe4ad9189c233c","0xE467F79E9869757DD818DfB8535068120F6BcB97",false,false],["bittorrent","tether_usd_tron","USDT_T",6,"Tether USD_TRON","3044022062b86dd07bbc4dba81c491135b2007b931e23453705db1a0429a043c9617e9fe022023555e883669c0dcefbce86be267683da8c27236ecfd67fbbd4a50af4abfce6f","0xdB28719F7f938507dBfe4f0eAe55668903D34a15",false,false],["bittorrent","trx","TRX",6,"TRX","3045022100fddad8f9b8ce2c32975660935976be3ca878b637268eec801acb52b0ccbd04020220361b52655b86125fb72f82f269bfa3f56adee2179478c289e69bc1d6e1086c41","0xEdf53026aeA60f8F75FcA25f8830b7e2d6200662",false,false],["bittorrent","upstabletoken","USTX",6,"UpStableToken","304402201bbaf2aab6f7e6994fd2efd0b4b9eabcfb8af517d2b6ee1ddfe255855815e77402203a8da9dce703418831e300aafbec916b2ab7fe26960c102580ff46bc424b2fc1","0x6C8C028D3592B83D6a1D0f53635557fD8DD31545",false,false],["bittorrent","wrapped_btt","WBTT",18,"Wrapped BTT","3044022010c9d472d76e4a4fea942d20da4f95015dd320ceebecae776b02593af94ba6b802203e0ad92e3425de2b7c2adf04258e7f23d4e5b35515791d19eaa8e543cee09bce","0x23181F21DEa5936e24163FFABa4Ea3B316B57f3C",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/250/erc20.json
var _250_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["fantom","aave","AAVE",18,"Aave","3045022100c255fc969ae944b2c62365d872778141e17bf9d0085ebc785f5432c55bf631440220598951a1e0b0ef4c129975864ccbec0322fcec6184b9642e4c44506840dfebb0","0x6a07A792ab2965C72a5B8088d3a069A7aC3a993B",false,false],["fantom","alchemix_usd","ALUSD",18,"Alchemix USD","3045022100b9006d35f126f74888f301c63ea7ec82387793a70dbe21e8044f2b171707cd8a0220224c746e05b8a19c4563e4fefa11c5ffdfc1ade1235fed6a3ac45f3cab2f4d67","0xB67FA6deFCe4042070Eb1ae1511Dcd6dcc6a532E",false,false],["fantom","allbridge","ABR",18,"Allbridge","304402207b1a3331382a782461f413c0ac65409c55ad103b6c5407d9812e5ce30cb7e2e70220787e36c3812907b7b853dd7198811721e9b51869d3c23ca5cab52e945b1777f8","0x543Acd673960041eEe1305500893260F1887B679",false,false],["fantom","alpacatoken","ALPACA",18,"AlpacaToken","3045022100ea22e472680d8feaaaee22202b83fa873d53a6a7e225e2e8e6bde443de4ac5bb02207b8957dddfa715c9c536054cc68dfa8d812c0d3c0a0dc719f2daa4d3332a292d","0xaD996A45fd2373ed0B10Efa4A8eCB9de445A4302",false,false],["fantom","ankr_network","ANKR",18,"Ankr Network","30450221008ccd00049251e37dde21b625cf558cb111cf64d94256c0a7ce9eaed18d7a199202203cfa82bd3fc69782b56ab7dcac19c5743ddd45afc958168870d3c1175a99edf2","0xDF474B7109b73b7D57926d43598D5934131136b2",false,false],["fantom","ankr_staked_eth","ANKRETH",18,"Ankr Staked ETH","3045022100ecd33b9617b6cf8b6b7ba9e6b3f69e359f68944c0b6d76661839c09ea339613f02207b485555d5ffe7a9bcbabb89cefc168e8350d2e5f3929c4495062e9031527af6","0x12D8CE035c5DE3Ce39B1fDD4C1d5a745EAbA3b8C",false,false],["fantom","any_inu","AI",18,"Any Inu","304402207c66293df64cd77744e0d0a563f14cce28bae20d4a910252d38876e92aad8e6f02204ddddc47e8bbce08e9148d0e1663d2a5794179ef1614536562dc736a49b148f3","0x2598c30330D5771AE9F983979209486aE26dE875",false,false],["fantom","archangel","ARCHA",9,"archangel","30450221009fa8dadcabe5e05fc6ceedb425c91de34d5796865dc39a8191769d3bdd06c7a70220679f61aa15f3d3812a89248140fca3ead6d8aadcb1df039c45c97d471e148437","0x5E2e2d3Ee4944d0E6c0b663625859CF8cC45ca88",false,false],["fantom","artwallet","1ART",18,"ArtWallet","3045022100e1c1e02dd832fde5cc2657c498936fdc62d2ead0b438eb4573bf71bde8798c3802204ddebd59adf49e47aad225cf03478585dd6cc5cca4de839658c9eb29d836bcde","0xD3c325848D7c6E29b574Cb0789998b2ff901f17E",false,false],["fantom","ataritoken","ATRI",0,"AtariToken","3045022100f19b00efaaf52d848d183cf8be82d1906d31bbf0092979018f011963be7cd8230220572b7e288f9b357b16544832289def313e3978d278be597e99ab31e5dd6fb558","0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b",false,false],["fantom","axelar_wrapped_lqdr","AXLLQDR",18,"Axelar Wrapped Lqdr","3045022100d3d9bfa11172048b80b3b321bb21bd0092cb386b5bc32e18a29df069f6c2e11e022051dd3cf49fea97b33da3d0901e6a4a97996e7db72b024cd9f6a0bccdc5ffe5aa","0x4b6B3d425F82248996D77EcC3F3df1E500aaC1db",false,false],["fantom","badger","BADGER",18,"Badger","3045022100d6a0e6119256e97991e6ac3d2dc6b2acda028d8b654d7ec17c08ac5a212acb9202203d4d392a16ed690c56be92d19b61dc9ec433bcf067848931f2cd1a453cd0806b","0x753fbc5800a8C8e3Fb6DC6415810d627A387Dfc9",false,false],["fantom","band","BAND",18,"Band","3044022000e482cddfeee7ceb73b15778a844faa2add39ba4432fcde37d3c1a762745c6e0220669efbf37f5e80f0c57d2b7b0a30b3005b2db696bb3d7a058f510fdb4c4f3cb9","0x46E7628E8b4350b2716ab470eE0bA1fa9e76c6C5",false,false],["fantom","based","BASED",18,"BASED","3045022100fbeee46fd4d073eb8ce741465bd9c8762b5b10a05202445e16ce35939c5a677302205eb127170344af990222e359c8eb4837e52fa1ee8f755a6c87da351b498c7e83","0x8D7d3409881b51466B483B11Ea1B8A03cdEd89ae",false,false],["fantom","beethovenxtoken","BEETS",18,"BeethovenxToken","3045022100ddf7bf0b6fffde5e1d9352023281d44ffd2b81606fadb8ea5ace2c5738f11fda02201384960da1dfe1dbd04f3ec6c27da3dcf897f5be583201277777faa10116d4b7","0xF24Bcf4d1e507740041C9cFd2DddB29585aDCe1e",false,false],["fantom","betswap_gg","BSGG",18,"Betswap.gg","30450221008790cf4717866a50a9eb81442d949763968658c3e3a8e47911fa3efbddb30f95022009b5651797a47ab6326243d24cf6d549f81ff5763fff0026fe15ec5d75ccacce","0xCE22c3e95B5E118ea61C4fb9357Fe45Cbb34cb56",false,false],["fantom","bifi","BIFI",18,"BiFi","3044022050653e898e1d7de440246f55734ffa6455624f8c33c297bb93b3cbb41be9aa3c02203cc6bb7dc6e198a96d02fdef11a33983738c1b8aa086afaab8e3d3c69f19426d","0xAD260f380C9a30B1d60e4548A75010ede630B665",false,false],["fantom","bifrost","BFC",18,"Bifrost","3045022100abd136d10646ec7f470b63fcf2713f74ad0367710a7ba88086bf5329a30bf1550220612e30fbdd1604ba752c43c7fd678a05c53a95f9c5ea54764d71c996bfe2794a","0x84C882A4d8Eb448cE086EA19418Ca0f32F106117",false,false],["fantom","blacky","BLACKY",18,"Blacky","3045022100edeb03f843e0c7178b4ab7f43c55aa5957da0862a74429d1ef8973474ead5c950220533593010ae7afb19a0645220c71382de4654c48b5666d594861523e00c31d18","0xb5Fd949436772E07CbBF35Fb6524e79924c54CB3",false,false],["fantom","bridged_usdc","USDC.E",6,"Bridged USDC","3044022008fedcf6fa680f1ef4bd9b7b0251d7d43409abc5a886dcfe8c9eef0178aef2f4022017ed4076bf22bc3ddfad42c1c4a91381a8ed618ff2937a7080df07a93e4b1638","0x2F733095B80A04b38b0D10cC884524a3d09b836a",false,false],["fantom","celsius","CEL",4,"Celsius","304502210095217c324fdc62e99aae31260c9b9e6aadf2f1a1d7c051a3cda477e969ebeb84022032d641e7412f05a3a127b82c784c7d97580e7518ca20903f69cf11f7c33a7a91","0x2C78f1b70Ccf63CDEe49F9233e9fAa99D43AA07e",false,false],["fantom","chainlink","LINK",18,"ChainLink","3044022026b71757fa6efc359d3795fc15912d3052b49c6196d16762cc21cb52c1a358400220390a7e11ff245680e5049d7ec08c515382e7273095601108b5c9b99c3340275d","0xb3654dc3D10Ea7645f8319668E8F54d2574FBdC8",false,false],["fantom","chillpill","CHILL",18,"ChillPill","3045022100f0b2994675c223c622405697ad20a49cd1f05d14d1d9c7bae15891033b47700e022000e3b3439c68b5528c618f9c598d433b8c772260f3f77374f1547fa5604e5c52","0xe47d957F83F8887063150AaF7187411351643392",false,false],["fantom","circuits_of_value_v2","COVAL",8,"Circuits of Value V2","3045022100c95aabb8e24780d0a3af2c9e9b27605dd0f829a38dfea1d23b120ebbe27d8fea02203a08923ead6bcdea42c95ec505b0502f415de9f333ade0f24b6e3db66a4447bc","0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12",false,false],["fantom","cream","CREAM",18,"Cream","304402207c62485acf2b63515f866d356d394329d9d9586a56ca0ae809d791cb380c7ff20220370cfc4da1add43c183d58a83e91422f1346060a288337191d84a6c26592e558","0x657A1861c15A3deD9AF0B6799a195a249ebdCbc6",false,false],["fantom","curve_dao","CRV",18,"Curve DAO","30440220241ba43970c6e4b65f6c1d12b1240a1583887e065e47ba6c06fec5e9c29a96e002204f44f3f0ccede27ab967be63df075c88e7346494a5f0d78fd4b1018e84875726","0x1E4F97b9f9F913c46F1632781732927B9019C68b",false,false],["fantom","cyberfi_token","CFI",18,"CyberFi Token","3045022100e965fbade9aefda27ecf62a3cc2bf328fa697ff329fa225685524e5188157d340220431c278e0d66249c5c66b4d6989fd61a13d563a9572748a58503319261074264","0x6a545f9c64d8f7B957D8D2e6410B52095A9E6c29",false,false],["fantom","dola_usd_stablecoin","DOLA",18,"Dola USD Stablecoin","3044022038df5f187a9545ebd1f5e3c08d8c6b74eacf7ff0bcfc522e40f7989745f945e3022065bf6cb7097451c069a7f20c6ae435fbb8017b69b75a3974460c631cfd93e348","0x3129662808bEC728a27Ab6a6b9AFd3cBacA8A43c",false,false],["fantom","dsla","DSLA",18,"DSLA","3044022010944932c88f2a994763ba22bc989a133fa063d79a58cede0811a83288acfadd02201f20ffe53b2196f08467e59ea6861fb5db650fed51778a84f73cf31d5bb7278f","0x25A528af62e56512A19ce8c3cAB427807c28CC19",false,false],["fantom","elk","ELK",18,"Elk","3045022100bed7e1677b471b23155f9548bd82431c695aa6d8d5c9d32d33283c37787a33d702207f532c980b238592d47a44f6ebb69a2886c20b8d7a761125e138cfdf33b3fbe3","0xeEeEEb57642040bE42185f49C52F7E9B38f8eeeE",false,false],["fantom","equalizer","EQUAL",18,"Equalizer","3044022023b52df38d823faf11fa8318e46e7e67e609da7f86f15d9e1a39c4a8d8310a3b022025ca70db2c7ba72cee8dcd60044c46dd684163ba4b4c7e4d8d00f7317f082832","0x3Fd3A0c85B70754eFc07aC9Ac0cbBDCe664865A6",false,false],["fantom","ethos_reserve_note","ERN",18,"Ethos Reserve Note","3045022100ff5e1da467756e1c2ea253b2f51f60ea518f71730b97c92bf6e679aaff694ab702203c6111dd4ffc17009c8633f71fa3c1715a47c4d86e64a5eee2c9fd927751c2c3","0xce1E3cc1950D2aAEb47dE04DE2dec2Dc86380E0A",false,false],["fantom","everrise","RISE",18,"EverRise","304402202310e3c7ceb86ac8757a2edd2cbe1ef2c9b65423c3d12e89587f4e4a923bf4d602200a7e03f10ef07d4b0410e871e87a6c9827a95ad67197325e197de36880843e19","0xC17c30e98541188614dF99239cABD40280810cA3",false,false],["fantom","fear_nfts_via_chainport_io","FEAR",18,"Fear NFTs [via ChainPort.io]","304402202ba1ca0cb44d1ec5077716d17c523330b41d182bb3154eb985ccbf5deb22913c02202fe8d2e1cc32cc5c8ccb6d70366ba1f882847e0515bb1501a41ca28fdb4234d4","0x14418C22165553251B002b289F8AbE4D1Ed41d76",false,false],["fantom","frax","FRAX",18,"Frax","304402204d596e207be4efa182fca81b6b9ee06f6231d183160f29488d5b3b4c4285c1140220446b94e4b527182a223b2a8ab49f5bfb0c60638c4d24ad1be4d928cd6e5a8a05","0xdc301622e621166BD8E82f2cA0A26c13Ad0BE355",false,false],["fantom","frax_ether","FRXETH",18,"Frax Ether","304402200db3073c52313dbffaaf8528dcde3745e0f8fd65a0171080d654fda567d8385c0220118c1538215de6ee392246b7ce70ad4b69aafa78a59b85156dd271c2ba88448e","0x9E73F99EE061C8807F69f9c6CCc44ea3d8c373ee",false,false],["fantom","frax_share","FXS",18,"Frax Share","3045022100f55cfbb28f72ad805c500b97a49c6aa8f9bed6e0545d6f4d364eb574a8f7c56f02202cde16c6cbb0c4dc3a6ae4374eb9021a90825ac05bb9d8c07fda8572c5b51d69","0x7d016eec9c25232b01F23EF992D98ca97fc2AF5a",false,false],["fantom","gelato_network_token","GEL",18,"Gelato Network Token","3045022100ba5c75cf3ad9e62f857b5c9d388f9abd6342f61a731ab94ed877cbfb0300d71602206a6c81815c1d850a1c10ff9321a2825b955a34fe8445a66646d52447f392455f","0x15b7c0c907e4C6b9AdaAaabC300C08991D6CEA05",false,false],["fantom","granary_token","GRAIN",18,"Granary Token","3044022052912ed145a9f8e2bf2e7f7bb8ab232718fff3f84b2ba3e2de3b0df66880fff202202d58bb778eabcc44590fc9b1a35d5833168250705ca9340cfd1f23d248063ac0","0x02838746d9E1413E07EE064fcBada57055417f21",false,false],["fantom","hegic","HEGIC",18,"Hegic","304402202f4c98cb89dfe8d21e860a1270231414bc70e3dbdf51ca100653dc78ca5bfd7d022024787376e7aec2512bf317a27597009b5d2f2344a8b414fdf8c2dcd26e085f39","0x44B26E839eB3572c5E959F994804A5De66600349",false,false],["fantom","hoops","HOOPS",18,"HOOPS","3045022100ed9e0d33cd9b7d94cdd3a825540b4178a7d3e09df8f1715a7308730089d3d10e02204945fef673d487e329274aa5c2c52a06169e87810a084df63c6487179713743b","0x431516E478d73CFAB034229c4D7a94A2CBF5787F",false,false],["fantom","https_t_me_ftm1337","ELITE",18,"https://t.me/FTM1337","304402203969555095e4f9c54f910e4352f331037728c6dea1e847a898dbbcdbb09dfccb02203832186daa1f5733dc1d5dabd397619de60f2fe6e947d288d554d406ba0b0285","0xf43Cc235E686d7BC513F53Fbffb61F760c3a1882",false,false],["fantom","hundred_finance","HND",18,"Hundred Finance","3045022100a4ccf586d20ff42787728277ca677b852aeb7a4e706515485bce77a3515bd86002202bcf5f1a0f9d806b38bcf2a39a28432b32bc46547e84e4047f64c77b6993952c","0x10010078a54396F62c96dF8532dc2B4847d47ED3",false,false],["fantom","hyve","HYVE",18,"HYVE","304402200525e5444e135d82945abc10c3e025596872fd8b966dfef515505d05624847d202204fd126a2c782b3d4bad0c7ff2530e36fecefca835d1385b0e5c9d317f9bbbd4b","0x90b89e881961E1053AeaDdbA13217d56F747349a",false,false],["fantom","icetoken","ICE",18,"IceToken","3044022001e0afa3886220e5311758e962f44c1176804b10b1885e2e8f6157bc0087f8f402202d48f5d2d9b33f65f93745221ec3beabdf11aaf6d72951de659102a458f4188c","0xf16e81dce15B08F326220742020379B855B87DF9",false,false],["fantom","interport_token","ITP",18,"Interport Token","3045022100a339c8373f80dc347694b790503e608656e0b7cf7b3473b23a75de651d39cd1d02204974447b194ad9913c9d8e1c109094e9cde726255f2fb18033b0e681074bcdbf","0x2b1D36f5B61AdDAf7DA7ebbd11B35FD8cfb0DE31",false,false],["fantom","ironbank","IB",18,"IronBank","30440220525b7e58758f0955628fb1ec5b9a9295a23f6d70d166b8dd3ed005474816f8de022058fe412fb68705c8bdff04b4e7e8879bc49e4def84b95f63ca7d9754a7af0a32","0x00a35FD824c717879BF370E70AC6868b95870Dfb",false,false],["fantom","kalmar_token","KALM",18,"Kalmar Token","3044022000f573ff5ea7d090a498d1eb8dac3f2bab255ca0b95468489c02aded992902a702204304744fdbf4ed46f419c7207e626e7949e3d707ca534600937102276de6d498","0x4f851750a3e6f80f1E1f89C67B56960Bfc29A934",false,false],["fantom","keep3r","KP3R",18,"Keep3r","3045022100c349484869a954e137f642c2f6ae63dafeea6ff8d8fcff5e5fbed626e92983e5022025d1d51d8b12dd351cb4d16cd68daf334d93951dea5087f2192f51faf769a4eb","0x2A5062D22adCFaAfbd5C541d4dA82E4B450d4212",false,false],["fantom","kyber_network_crystal_v2","KNC",18,"Kyber Network Crystal v2","3045022100ee11cc62bc0e5ff8e5d5dc53c03a859fc49ca81aa31f5eed65a1a98e79b5cf1702201d91e7c64bd4d764bde912e27ac3ab08e2feee6e58687afdd182af91edf9d701","0x1e1085eFaA63EDFE74aaD7C05a28EAE4ef917C3F",false,false],["fantom","lif3","LIF3",18,"LIF3","3044022068b918748efb73dd53c97ec7ab8e3661506cb1e8c721faea9acf245c01613e79022004d4e593363338e7e541c8e3566d585ab7af444540797a45c746ee1e785fbc57","0xbf60e7414EF09026733c1E7de72E7393888C64DA",false,false],["fantom","lshare","LSHARE",18,"LSHARE","3045022100ad50b275d1e756b3158855fbddc40e84190a777a06254f717830219f78918a5e02200c9e90976f66b49094c67db562f5f0f0a5dc58d701601cfc4b1f9af86ed939ec","0xCbE0CA46399Af916784cADF5bCC3aED2052D6C45",false,false],["fantom","lumos","LUMOS",18,"Lumos","30440220028eee61a917c6eb178be9e247c7c5fbc5cd0d20adce5f3962d80ceddd377430022011b7ddf7458f6fb16b119d63af2e6e064880a3e0ce2cfbed483dc8038bf03dc6","0x94fBE860aD699670A2293D194CF1376EF58C014a",false,false],["fantom","mimo_parallel_governance_token","MIMO",18,"MIMO Parallel Governance Token","3044022038cf2cc97e6baeb1b8c34b0c28d983b7b4c64ed0062218157379a8f20ec91a350220120efe550e9712a714183ae8c4774c7c47fd13d0724dd6e4e5795ef1101f7a48","0x1D1764F04DE29da6b90ffBef372D1A45596C4855",false,false],["fantom","moda","MODA",18,"moda","3044022075eebeb7d32cecec9fa48d4533f0b82a97d0007a90db7f5bb823d6395e95ccd3022057901e23dfb804442e1014fa93b43b7d275c25b31ec638830094c216c58eac22","0x6496994241804D7fE2b032901931e03bCD82301F",false,false],["fantom","mpx","MPX",18,"MPX","304402203981661c0f51a44b343a4af6866245ce241c5baacc188d5b8717e1843971024c02201ad426828e1295ae864faf37d3025cd3f7b16f358102726978580d9249ef06df","0x66eEd5FF1701E6ed8470DC391F05e27B1d0657eb",false,false],["fantom","mummy","MMY",18,"MUMMY","3044022056d180a1423f090e051eea8c9b6adf545e635bdbb15375cf0bffd753a166103f0220655f5d873e7d107fe590339f0b956f8b53c6d00ac762a16264c5610828ad495f","0x01e77288b38b416F972428d562454fb329350bAc",false,false],["fantom","nexo","NEXO",18,"Nexo","3045022100a59a9c26e6b6916b46df4473c1b0fce5fb6ec1f93385c4e567a8e39cb091993a02202e83cb2fda1d8b9baf3ff0cdf738f1b217a42f4e17dfb854470ceae698de6454","0x7C598c96D02398d89FbCb9d41Eab3DF0C16F227D",false,false],["fantom","nord_token","NORD",18,"Nord Token","3045022100bd2d0cd9dc5a9ae7db6a1785438bb796d11dc5a255928663096f21866c56d0950220735b025f5e91f0784a996748178f48a4e3072c3859fbf9b886d452b587a6ed86","0xeaF26191ac1D35AE30Baa19a5ad5558DD8156Aef",false,false],["fantom","o3_swap_token","O3",18,"O3 Swap Token","3045022100f3bc669ca8e057248fb8e31916673c984efca51a000810309a4875b0a07bf3cc022043b27b4efcc1d3bc9397150f451a18dc751a183d9e4b05fc49a6c19833fff73a","0xEe9801669C6138E84bD50dEB500827b776777d28",false,false],["fantom","oath_token","OATH",18,"Oath Token","3045022100d844af249444646ecee33b45a379529dfcf8096514804bb9e0a2b0725776c3eb02204cc16420af5b54349c89594c08ce26cb410b7c3dd506bebc5ac34acb46885da4","0x21Ada0D2aC28C3A5Fa3cD2eE30882dA8812279B6",false,false],["fantom","okcash","OK",18,"Okcash","3045022100e274421c72f1e79f34ddf2b7bbcd04910acf37d7e35874c7e29083ffeff2467202206b2d94e0a118f094d4095e0883eddaeb701a22c268d4db58d447fa3525eabc37","0xd3Ac016b1B8C80EeAdDe4D186A9138C9324e4189",false,false],["fantom","onino","ONI",18,"Onino","30440220048e1e3773b9112bf3c2d6f887256d90018de39f537f3ecedd0218cdf50c901c02203a0c1aac09fb926040e030d2c969b3a4beccfec162ecab3668552f1bb1651387","0x667c856f1A624BAeFE89fC4909C8701296C86c98",false,false],["fantom","paintswap_token","BRUSH",18,"PaintSwap Token","304402202a25dd150abe6b1b6a4d8e81d63602d7d48c16e837644e59e8a9b812b28eab860220462be4365c2f32dd86ebfde6bfa755538cf62ed706fdef6236e1437df91f9cb7","0x85dec8c4B2680793661bCA91a8F129607571863d",false,false],["fantom","par_stablecoin","PAR",18,"PAR Stablecoin","3045022100ee242153b1ad27981326a3f7053ed2195720e5ebebd772ea819bdcb2d7fa563c0220114e36c0046971c22990c2b1f3017f288638c622d153caf8b962f40121631863","0x13082681E8CE9bd0aF505912d306403592490Fc7",false,false],["fantom","premia","PREMIA",18,"Premia","304402200d3b88bee5507f426bc2098ed77a459c34d8bce3d052e16d60dfe8ec36ced779022069057ff0d002876bf314f97f71bee1b0a3c69a2f71372a8265f72a854e4adc75","0x3028b4395F98777123C7da327010c40f3c7Cc4Ef",false,false],["fantom","radioshack_token","RADIO",18,"RadioShack Token","3045022100bf5a8b05b3ad83c36a5b5f32d4940da8b111b866d965a1d9042dd2be74cac38602201ff9c98068064bc85723d0428dbf5ca56f4898b2b66eff27d03cbc898290863c","0xf899e3909B4492859d44260E1de41A9E663e70F5",false,false],["fantom","raini","RAINI",18,"Raini","304402200e46385c05adf77f3eadc4cba922660c2b2e74213d4c5e564fd0cefed2266d1f022013bb8a6f959ad1084542b0dfef683ec02c09232e0915d36d81db2e019cc8df5a","0xe83dFaaAfd3310474D917583Ae9633B4f68fB036",false,false],["fantom","rari_governance_token","RGT",18,"Rari Governance Token","3044022034764276e995ee3701c925f6af41d63bd5826c621300aec35825eb8d5a100aa502205e00176ceb32f06ed1f481e474fdd29bf54afaf5af5e10f90bb70fae825103e3","0xcF726A06f3dcEc8eF2b033336D138CaA0EAe5af2",false,false],["fantom","sftmx","SFTMX",18,"sFTMX","304502210082fe24c582184199828cfbf15be2ed29744214ad44870441fa9e584ab7101d7102207ffc8c3eab37e4a616b409e4722d3df71544e932adb863267b293885d92dfe5e","0xd7028092c830b5C8FcE061Af2E593413EbbC1fc1",false,false],["fantom","solidly","SOLID",18,"Solidly","304402202e57e1e366a67c5436a479f6deadbe920851126c0b71850a4b6a18c012da05aa02207224e32f79c023d98243b63878fcbb7b4c61dcaaa1e2f3d50e35d3e235bec276","0x777CF5ba9C291A1A8f57FF14836F6F9dC5c0F9Dd",false,false],["fantom","space_token","SPACE",18,"Space Token","304402203902cb5d1bdb69370b8a902e3dae29b68b938932e345144f877d2df603f153ac02202568c1862e29e0909d962271d3e44d3d05eac926e508f40c10f8dc2a05a8a8c8","0x5f7F94a1dd7b15594d17543BEB8B30b111DD464c",false,false],["fantom","spell_token","SPELL",18,"Spell Token","30440220412fdcf7222535d1a171f2a3a4bd7be36c8e48846cfc8580dd960af075785d2702202c3b91cb4ff0c518b119e2230ad70bf8ccb0660bdecc4df0d8791426b72edbb2","0x468003B688943977e6130F4F68F23aad939a1040",false,false],["fantom","spiritswap_token","SPIRIT",18,"SpiritSwap Token","3044022052f25f7d6119937de5a294f64fe107f6059c48f6d790f7e909f86c784534f7830220404c6dff2c8540a22029f3d1aadc59a32b89c345d2566f5ad4d2f03c33f7e867","0x5Cc61A78F164885776AA610fb0FE1257df78E59B",false,false],["fantom","spookytoken","BOO",18,"SpookyToken","304402206f05ff2aa152cb98a58ab7aea2193f2ed9d0d183df5ee72b199f62916dd271bc02200c5f8e8e216dd8436fc5832c662ff5220195c587709e0c86e50703402e349ce9","0x841FAD6EAe12c286d1Fd18d1d525DFfA75C7EFFE",false,false],["fantom","stader_wormhole","SD",18,"Stader (Wormhole)","304502210097fcd2c8a6f8d7b6c0bce3769e7791808eceec77666322a864e44cda282d42fa022049e0cab6cf88778f517b60e9b736e5ebd4b707d78005d6b4d8bc9b167c18bdeb","0x412a13C109aC30f0dB80AD3Bd1DeFd5D0A6c0Ac6",false,false],["fantom","staked_frax_ether","SFRXETH",18,"Staked Frax Ether","304402203f83e90eeb3dbeaab7e10d822bf0d04032438a38af8996cfe4dae1b725f504ed022060aab8ef216ea2cd6966e79f24f02653fce98520f0628bf93254027daf99b01e","0xb90CCD563918fF900928dc529aA01046795ccb4A",false,false],["fantom","stargatetoken","STG",18,"StargateToken","3045022100f6166eaf899da2e93998cfca31837507099e2d327ad7f24aeeb4a257f94d3fe00220104fe25c70c3caf824f2db92327674e56267e90aa8a53fb6fd417ce4984bb6a4","0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590",false,false],["fantom","sushi","SUSHI",18,"Sushi","304402204ff198a04c787bc2814787ad1fb3b8381e2890a9bea7a80f4e7c26a9e32171910220769d0118d0345391a29b1e7bdea3786ce5b1d35a5eab99a6690912c4cd09bd5d","0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC",false,false],["fantom","synapse","SYN",18,"Synapse","3044022057a508de0a635816a0e3c4d0bf7e8ee3605ae98b91c0929c976a71df67912f000220493f30e5bdcaa941aedddd5def7306477da1a59b4bc323d5b263fea0d4f5c46d","0xE55e19Fb4F2D85af758950957714292DAC1e25B2",false,false],["fantom","synth_susd","SUSD",18,"Synth sUSD","30440220553b3ae4185a1107e9e35ffbba965a06c60d9de2e7962c9411fb1431266e8b4402206ffc232f4d58898f61c1b22cb47bc414b7616b0450670e981bf4d238473f812a","0x0E1694483eBB3b74d3054E383840C6cf011e518e",false,false],["fantom","synthetix_network","SNX",18,"Synthetix Network","30440220197736f9f04552e9892660b0eb8ac766e852cd841200b3f81991fae8df6b1b54022053b70e2b03ae17db0b4cf591b9180c22d27c3d6a799aecd6ee64756a669439d5","0x56ee926bD8c72B2d5fa1aF4d9E4Cbb515a1E3Adc",false,false],["fantom","tango","TANGO",18,"TANGO","3045022100aef7a9968e298dd958e0350bf2163a6328980f3cb2ba2d0a0d26ed2f548c830202200a082384eb277785aaf91b2354743dc06855c7b95227d7935808a481244a1cd9","0xEE9fF3EFd508741492B5bd45269aa45a43bE59c8",false,false],["fantom","tarot","TAROT",18,"Tarot","3045022100a1909991e03775bdf8f11cdd78a950f9431172b0a6d7e78a9d134b971af4aa1202206167ed5532e07afc59e418fd77f47b1bed66b676d1a553ad5e04d4bbdb93e0d8","0xC5e2B037D30a390e62180970B3aa4E91868764cD",false,false],["fantom","tetu_reward_token","TETU",18,"TETU Reward Token","3044022010dc6cdfdafec5532f8575064a7eeabedaa9e04c38ee97d17b7f81c631c3bc600220577f52a0d15e04ef23b6445427e4e5e2d855a855f3abd9f2fa1c91153f4bb278","0x65c9d9d080714cDa7b5d58989Dc27f897F165179",false,false],["fantom","thorstarter_token","XRUNE",18,"Thorstarter Token","3045022100befc5bff500ffca83b20fce91d3429e150e544235b783e57017f82e2aa893d1c02200553f80c7d3f0eb11b576c2e7d611b268cae1c3cd8e7ba1bd1fa5850dcc59ccc","0xe1e6B01aE86Ad82B1F1B4EB413B219aC32E17Bf6",false,false],["fantom","tomb","TOMB",18,"TOMB","30440220286c3231dd7e886cca7d6685f8b5ce9709ea734b10bebbd4e069b9cd6e4c79f8022040a3aef3f66ae0f9fcbc7e23cdce3fdfaad407879bac015ecf8d498f23f029e9","0x6c021Ae822BEa943b2E66552bDe1D2696a53fbB7",false,false],["fantom","travafinance_token","TRAVA",18,"TravaFinance Token","304402205af9b46dff89511b523d25f85c7e16474eea8661405b468699ddd8c5fda51dc5022021765e60fdb145f5dd7eedc5cd44f69014c3f53451995371d9beb69564ec9043","0x477a9D5dF9bedA06F6b021136a2efe7BE242fCC9",false,false],["fantom","treeb","TREEB",18,"Treeb","3045022100fffa158366611edeef796acc12198f5ce7d10616a4988527e5e2de72cd201a5302200baa6b03a5f461c33d097bcc27f40853b1fa73ddc371e2f1151490144da77932","0xc60D7067dfBc6f2caf30523a064f416A5Af52963",false,false],["fantom","trueusd","TUSD",18,"TrueUSD","3044022003e5ae94fd53aaee042a4395fedb1ced1b7cf1788c29bdba495cc3ee85b9d86002207c6bc234cce52f2b5224ab2cc088c1077c5e4ae7154162127b77e1efead92916","0x9879aBDea01a879644185341F7aF7d8343556B7a",false,false],["fantom","tshare","TSHARE",18,"TSHARE","304402206a6aa1236b0b65dc0d41d475c2e7ad95fc3e5f03af7d3087902133218db1aa690220033d7891592fbeb97cd387e6b2ef46da889098c06e14b2c3aaaa8159fd9e7d39","0x4cdF39285D7Ca8eB3f090fDA0C069ba5F4145B37",false,false],["fantom","vempire_gamer_token","VEMP",18,"vEmpire Gamer Token","304402205580d692babaf81f7a26d657861419ba27d5946875ca3a380f8ef318d8a048e80220763cfa089eeb092263566ae4887b500801a226d962860a96b20a44a29a81f6ad","0x526f1DC408cFe7FC5330aB9f1e78474ceFF2a5dD",false,false],["fantom","vespertoken","VSP",18,"VesperToken","304402204d51bdafe39b59973c3a985aa8720029d7c237085f8b9c1eadddc4ddc1e5541502202783716d0b49a21edd4a5ff8132618c9d75e6014f5eb61ff90055484dfb37245","0x461d52769884ca6235B685EF2040F47d30C94EB5",false,false],["fantom","wagmi","WAGMI",18,"Wagmi","304502210084e044022a371b9b83329e7c99ec9a99c76570c0c0c7ad8bd89f79d2417b46ad0220307e4ac49afe3fd6d85381a8589937889795e19a9f2a010e6d973a21beae56b1","0xb1F795776cB9DdAC6E7e162f31C7419Dd3d48297",false,false],["fantom","wigoswap_token","WIGO",18,"WigoSwap Token","3045022100b9f46ab28fc74289c1e04a905eee0a2d4023e20ce855f04db11e888936b89f9b022032392cd413fa60bfee4f93674731643c28c6f6b902518056ad82a439849ec1a0","0xE992bEAb6659BFF447893641A378FbbF031C5bD6",false,false],["fantom","wootrade_network","WOO",18,"Wootrade Network","3045022100be16ae768a4fbbc8dfdf170f2607a5bc46e0bcdb54a3401fcda33eb9a2422ad102201e171921880abb11e69c0fd1c7b5d15bd9943466234f2dad021682351bb3d137","0x6626c47c00F1D87902fc13EECfaC3ed06D5E8D8a",false,false],["fantom","xy_token","XY",18,"XY Token","30440220242387d4e1ccfe082220f5ae0460cf673977595c025fbfb57ec5de675c9cd5b90220653e1c83f4c167d46a92bc1c2cf77fcde036bf110d66d65a3a518c44376e2c73","0x444444443B0fcB2733b93F23C910580FBa52FFFA",false,false],["fantom","yearn.finance","YFI",18,"yearn.finance","3045022100b4c030dd9275f2a312c238cadcfcd903e8ead31101c96450e621d97299fefb1e02207e979c3929a34c18bd2879fa0579a5e9402ddec76e33c354a8d20195298641ca","0x29b0Da86e484E1C0029B56e817912d778aC0EC69",false,false],["fantom","yoshi_exchange","YOSHI",18,"Yoshi.exchange","3045022100df8740acff36dc3672deb13358a7bb413582078a3a1831a5450072b19b6492300220353888b5ff01532f23621338315fb1e8d2a059c02272b61bdcb6136ff1752aaf","0x3dc57B391262e3aAe37a08D91241f9bA9d58b570",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/592/erc20.json
var _592_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["astar","arthswap","ARSW",18,"ArthSwap","304502210081312181b8b6a132b1bad38e763e86a13983909c26255d4e71a4815472b8963202202259a6422bb63e368a3560d235693b105a99d1a2891e7ad019319ecb7c3bdba3","0xDe2578Edec4669BA7F41c5d5D2386300bcEA4678",false,false],["astar","astar_note","NASTR",18,"Astar Note","30450221008de46c8a6654a74a72f070f9fbd62bdba46dd81d7993ef3e0618decc4358f1c70220590c235f2b37bcdce24bbcb51f711d1e094de5d22a493cfa371f4f59ce832d12","0xE511ED88575C57767BAfb72BfD10775413E3F2b0",false,false],["astar","bai_stablecoin","BAI",18,"BAI Stablecoin","3045022100996cc11cdc69e41fc1f892a679a0b624cdca8ce6e79fe2f46e4e20ee42862cb702203635a4c86beff57e9564442d50140c692eca706294b8f47bafa5a03fccfbf33f","0x733ebcC6DF85f8266349DEFD0980f8Ced9B45f35",false,false],["astar","binance_usd","BUSD",18,"Binance USD","3044022053cb3b214478cbb5e5f1bc0ca84a105ce44723ed47b822258912b47cd7e41e1202205b88bde1819cd4841e226d8a27064166470370f066a9c2eed8304f28f15a5237","0x4Bf769b05E832FCdc9053fFFBC78Ca889aCb5E1E",false,false],["astar","ceres_token","CERES",18,"Ceres Token","30440220536adbbebb3908953073d3ceb7ff8ae9fb0e561649e65362fb8b671a16f3bdb402205681503ddc402c107a8a337b994e119509510a80d73dd0ad38ec734eeba9d39d","0xe69583B62D7B7d8a568E1eC08f34B648589F4cF1",false,false],["astar","dai_stablecoin","DAI",18,"Dai Stablecoin","3044022078fd5ce95ada69253077b738a7501ccce680525cd9a8c1bd567a438f6602e920022030f4eaa6f7c377c16dd26fdbb35bcba6c379ccfea9f8623dc9f5fb05a64ef83d","0x6De33698e9e9b787e09d3Bd7771ef63557E148bb",false,false],["astar","demeter_token","DEO",18,"Demeter Token","3045022100da7e080b26a3be29f926ef9c6c9836ee999e7f0b7820c6e6be6b3b1759c5c4b4022074f6526144599741d448092ebc65bd85388298039a7a6a6d429d46c8cdb4ba09","0xb51541df05DE07be38dcfc4a80c05389A54502BB",false,false],["astar","interbtc","IBTC",8,"interBTC","3044022079464c37b8ec18ecee5ce54cc6d16e75cfa39d63d67f6c69f011828c02a53748022039a920647993b8a70e633271ee1521f2d35947d607490a5960803b432fa2cb89","0xffFFFfFF00000000000000010000000000000004",false,false],["astar","jpy_coin","JPYC",18,"JPY Coin","304402205ee25ce6f84d1ba3767eb976458c5a5723b11168238faeda0b4585db5601021d02202dbf88bcfe1438df3149c82588b1e6c3d876d4af3ec0a1682b9676ab538452ff","0x431D5dfF03120AFA4bDf332c61A6e1766eF37BDB",false,false],["astar","lay_token","LAY",18,"Lay Token","30450221008385511751709cb73a8e624fb6b8ada349aba5612c4d9b24351877dc881bac5902205e07580eea00ac836a227376ee91f16a6ebc49da9ac030b7b8c9006fbefa477b","0xc4335B1b76fA6d52877b3046ECA68F6E708a27dd",false,false],["astar","matic_token","MATIC",18,"Matic Token","3045022100f9c935bb2ccff07aad1e7e10c9e01769ffd65c7d24b6b5fb6cf5a9b754dac3f302203a28362b3e4be0538bc11292f38ba946bfc52d8eb92a46701b601f143755bf47","0xdd90E5E87A2081Dcf0391920868eBc2FFB81a1aF",false,false],["astar","ousd","OUSD",18,"oUSD","3045022100ee37af7abddbe01fa8b9f1e55e714e7e4b2028aced3d290600d1f139dc6ce526022077ca8d8dfd65d51719ccd3cf26c311b4fe481f347c8bc42b0ea75d914a4a3c18","0x29F6e49c6E3397C3A84F715885F9F233A441165C",false,false],["astar","polkadot","DOT",10,"Polkadot","30450221008741bb5e34e5455344b129ac6c0371ac332491f45440eee96dc9c55509bf5a01022039677ea471bc2b6a8e2f7b0abd377baea021ede0d0c71758c6070aee2042a480","0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF",false,false],["astar","shiden_network","SDN",18,"Shiden Network","3045022100d857ae6e4948c143e5aeb57505af0d2d0205eeeb0ad8b85e87367462d928f86602206e63019bdc8a63d46b9e4d2e507241c29f5117b4120b829bf6b9381e2560147a","0x75364D4F779d0Bd0facD9a218c67f87dD9Aff3b4",false,false],["astar","sirius_finance","SRS",18,"Sirius Finance","3045022100a73bfeb73ff2aeecb3b21ce665643214832f2c50c0411c996a8ee3af6b5817b40220679ebe75e33a95c437a7a9ac0ff385bf6dcb23c546b2d70783306a7bc99cbece","0x9448610696659de8F72e1831d392214aE1ca4838",false,false],["astar","starfish_token","SEAN",18,"Starfish Token","3045022100f2a8d518eda9015c4641def9a0f493c5824f4befe5b89d61d247ecc332da267002202070a5f73e3487182617be2eb1f229c4959716744c52f9f6f8dee033d0728236","0xEe8138B3bd03905cF84aFE10cCD0dCcb820eE08E",false,false],["astar","tether_usd","USDT",6,"Tether USD","30450221009d01d40979bd3a0b09b9c41cad2ee31561ff879a103c69b7c2b4a933955e613702206db832faff9e7fd6090a94abbeae6f0b8423624677d83c4cbac765694c655ed8","0x3795C36e7D12A8c252A20C5a7B455f7c57b60283",false,false],["astar","usd_coin","USDC",6,"USD Coin","30440220747952dff189674444bd3023e7a9ba1b8dc13d334bb64183211e4ab7327005eb022005b5bed8761fb6fa7c938817079a0fdf8926026904312852800ad8e96e2e2c34","0x6a2d262D56735DbA19Dd70682B39F6bE9a931D98",false,false],["astar","wrapped_astar","WASTR",18,"Wrapped Astar","3044022022967f56029ba87acf669e060d54f116cf79ccadb0fe77fdf9e8cee42016f28b022031fef3d0a8b05bb3d0175e142ce046f14fe7803a882edfb65943b3875c689cf4","0xAeaaf0e2c81Af264101B9129C00F4440cCF0F720",false,false],["astar","wrapped_btc","WBTC",8,"Wrapped BTC","304402207099089b2246edd92d6d37723cd96c80419f8fe41e0e8d9b3a896c9698bfe45302203133ee58780befa09861053fbaaa8771cb294dd5ff457e1cf9d75486bf12442f","0xad543f18cFf85c77E140E3E5E3c3392f6Ba9d5CA",false,false],["astar","wrapped_ether","WETH",18,"Wrapped Ether","3044022012d4c4e385fd6d3a5d261d07ea3a0be919cbb8b0fcd37065ecf104cf85bdd34102202fd5886732b16f2be0dcf023b53e760832631cb1a19781bc541d221203e05744","0x81ECac0D6Be0550A00FF064a4f9dd2400585FE9c",false,false],["astar","zenlink_network_token","ZLK",18,"Zenlink Network Token","3045022100d66d9dbbdeab6afd13558b1c56a0ba1bc6c3b8422948ab4ca7777373061ea401022048cec55f131b6a0747ff21cec94ebcb74dc5640620fa91cb1be3498045c39ece","0x998082C488e548820F970Df5173bD2061Ce90635",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/1101/erc20.json
var _1101_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["polygon_zk_evm","balancer","BAL",18,"Balancer","304402201078107597cf18b420468a92253bbc5129397432e24c28ee0af18b4e6374533502206cdfb601c65bb5f62479d64fdfa4ddf4bb65207918adbc1b9f721c7fa139f433","0x120eF59b80774F02211563834d8E3b72cb1649d6",false,false],["polygon_zk_evm","chainlink_token","LINK",18,"ChainLink Token","30450221009c858586ca3a228bf74d8545576f05d7a5a86af9da714c27ba4b8ec11ef1f69c022063e347f04ac2ab77a6738f63343bb55f5021b859399e5936d117dd8a1cbf5cf2","0x4B16e4752711A7ABEc32799C976F3CeFc0111f2B",false,false],["polygon_zk_evm","dai_stablecoin","DAI",18,"Dai Stablecoin","3044022020600bd7bb3c415b987b9c3b49de13eadb48f33311fed00d3dde350d4488ef5c02200cc9a42a9161caf6781aa32e12e317455536b5c7b16f668b6d71589fb84a172e","0xC5015b9d9161Dca7e18e32f6f25C4aD850731Fd4",false,false],["polygon_zk_evm","frax","FRAX",18,"Frax","3045022100a4b569e8f07c244b3ada4100d872d6df9cd80df53b17d41d27d74288997ce79f0220481fbdebc9c9bb0282b015b76ed37c243e4d6125fb765bfd8370a0ee7a89f189","0xFf8544feD5379D9ffa8D47a74cE6b91e632AC44D",false,false],["polygon_zk_evm","frax_ether","FRXETH",18,"Frax Ether","304402207357f19417e75486a8b1532f37021615a874245eaa8397b72fa7270ad0a7070f02204da2432e4c4ecc752ad1fce9fbfa21bfc0452a53cb10dc8e5db5288aa15c8ded","0xCf7eceE185f19e2E970a301eE37F93536ed66179",false,false],["polygon_zk_evm","frax_share","FXS",18,"Frax Share","3045022100ac792c1b5a1045c6ebf289c02e716b55b08e98c5038dd332cbfcd8f692cb9635022079a6c6893c6ce83053031f4300b2fb35fd30ccdc755592eea0b25f6c847d40a4","0x6b856a14CeA1d7dCfaF80fA6936c0b75972cCacE",false,false],["polygon_zk_evm","matic_token","MATIC",18,"Matic Token","3045022100cfc264f415e632c5c333aa54e9c2622da871b3a78aea509f3c070c7f90abf63902201fb3c16ad6233358091e0f7689d4afa21cfd8620f4180d22d528ea972bcdba53","0xa2036f0538221a77A3937F1379699f44945018d0",false,false],["polygon_zk_evm","staked_matic","STMATIC",18,"Staked MATIC","30450221008ed409b6a97631be51a5d087b6af2e48322d84cdf9f921beb50a8d381fda950c022065728c04ac1595e3d32b8ef5c9d375b9c978cd1d029ac133696f5cffb531dec0","0x83b874c1e09D316059d929da402dcB1A98e92082",false,false],["polygon_zk_evm","tether_usd","USDT",6,"Tether USD","304402202445e450beda4a85399289103a66af50d56c2e2c362c8a347fd2250a3e48e6c1022029372dd95034859c3109045f61a8607835949ddac882df1dd44ef104fd59c28e","0x1E4a5963aBFD975d8c9021ce480b42188849D41d",false,false],["polygon_zk_evm","usd_coin","USDC",6,"USD Coin","304402207f1212de6d85a14630be4020296217e913ffdaed2f44dd083769d3fb03771e2f02201dcfc3b2aad7e0d73d11355b9bc511e58a90a070a13cdc5a80527fa1782878c7","0xA8CE8aee21bC2A48a5EF670afCc9274C7bbbC035",false,false],["polygon_zk_evm","wrapped_btc","WBTC",8,"Wrapped BTC","3045022100927701354fcfcb9a2e67ba45ce2404d0863af2482e0d134249ac6994925bf33f02206b822fd098632cebdf0a944e2cd65e19d8dc5f88f96eaa1cbecfc58a341bac58","0xEA034fb02eB1808C2cc3adbC15f447B93CbE08e1",false,false],["polygon_zk_evm","wrapped_ether","WETH",18,"Wrapped Ether","3044022038941d9030331fa829b47e6028fac4483a2da60f228ab88f01dc89e870295dc8022050b21cbe9808b41eb0c2a482bc2b01222f8c8cab87882d9b5a6a97fa4830ab61","0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/1284/erc20.json
var _1284_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["moonbeam","acala_dollar","XCAUSD",12,"Acala Dollar","304402207cec94e60836a6077fae808345e724452314cd063a1b4457346c70dcd67c122802207973cdb568de464a90399b39008f139ea0c82f5f262ab6176e61b47c01e1f92d","0xfFfFFFFF52C56A9257bB97f4B2b6F7B2D624ecda",false,false],["moonbeam","aliumtokenon_moonbeam","ALM",18,"AliumTokenon Moonbeam","304402205ff8ad7bd7a1e51cfd1efe2fa132b4241f0c12615184dc499eacd919c2d43f4702206c8c028f66354739c8a9427b9b3179b59119878741619370b8be60cdbc929384","0x1581929770bE3275a82068c1135b6dD59c5334Ed",false,false],["moonbeam","apillon","XCNCTR",18,"Apillon","3045022100cd72e1494e8897b74f96c419fc0443b5a0fac60409eb7698ced978d6749ab1100220158fdc0f8f110786f27b1ef2c05c993afdcb88692afa23f04e4e6d584874b9e6","0xFfFFfFfF8A9736B44EbF188972725bED67BF694E",false,false],["moonbeam","avalanche","AVAX",18,"Avalanche","3045022100d5f66b11c4364b11b09c04d8c5cd310cd2b453a4826c3437f07a9cf9b9608c0302202cd3f63a36da8795fa889f971db2c9f43415b4118410aaee8fcc469bdf0a4f27","0x4792C1EcB969B036eb51330c63bD27899A13D84e",false,false],["moonbeam","axelar_wrapped_usdc","AXLUSDC",6,"Axelar Wrapped USDC","30450221008f40aace27f9f243d71360cdb898928eda13548ac3a82854930cd572053952220220632d02d50ca270ce33788002d44be8cf5ce3cf5777c70d6394074045f5255f6b","0xCa01a1D0993565291051daFF390892518ACfAD3A",false,false],["moonbeam","beamswap_token","GLINT",18,"Beamswap Token","3045022100e206b65cf4d74ef2bc4f7fac87e8340dd3b31cd6837b153acdfeab09841cb7290220119d3cee6f0e3287df60ac030ebcaaca83bfec03554c0dbabdd395993b090f4b","0xcd3B51D98478D53F4515A306bE565c6EebeF1D58",false,false],["moonbeam","brla_token","BRLA",18,"BRLA Token","304402205bb5ad5e1e631e82fccc161e4c32a9486e31b3ed6cc18c31b22bc17f3feb131902201ad89971c35f2126b8c32587906dce2f4b2ef87394a0311875fd2280acfb2507","0xfeB25F3fDDad13F82C4d6dbc1481516F62236429",false,false],["moonbeam","dai_stablecoin","DAI",18,"Dai Stablecoin","3045022100dcff3d7c044ae02dd1a492d1ce014de26443a1b4ef28236f8641bc3fd93bbfe8022008a8c6b445dd55848570d84ed854d1d44fc11879375fad67d822a7cc94350031","0x765277EebeCA2e31912C9946eAe1021199B39C61",false,false],["moonbeam","dpsdoubloon","DOUBLOON",18,"DPSDoubloon","3044022078bf0c6a58dcc18b6f49f59f34e346de362d5c4595f4007264be75a60ce99a4202206aef2852dd1fb68a6fc3267524de03d73f917fea10e64595e179b68a53aa9e85","0x2758b57E3C052aE2B66be2E175c8F1980723d7aF",false,false],["moonbeam","energyfi_token","EFT",18,"Energyfi Token","304402203fad3334b1b22aed4906b0402e51389dd8e8b8ad626d6d09f8585686fcd5695002205ab93f94e14c752b2dd582e1bac9df9d9108b5cc5336c46517ecbc8104d8c4e7","0xA423E7eEB60547d9C7b65005477b63ae7CE67E62",false,false],["moonbeam","ethereum","ETH",18,"Ethereum","3045022100db20de2599fb1a5ceab4d2a29c1e5fa1e2512fb5249e57225ba0a487569382d60220588c3c08c5729369b0f5f175523271e3719c9a7773f2144c178e0ef09431610a","0xfA9343C3897324496A05fC75abeD6bAC29f8A40f",false,false],["moonbeam","flare_token","FLARE",18,"Flare Token","304402201e85824454003992a4c82cf833802906a14d0d1b2ff37373ab6f27c627bbd3db02204b525300c8ef1209b3563298a840aa051fd656c54a03cc7ffba0da27f12b15b2","0xE3e43888fa7803cDC7BEA478aB327cF1A0dc11a7",false,false],["moonbeam","frax","FRAX",18,"Frax","3045022100f0d0a7f18e04f0407e979b0708d4453e747004578b80ff4124b124de2ec8334702200cd09e807e85381ee95855fef6bcd1727bbec83f2aefc757b7d7a71922ef466a","0x322E86852e492a7Ee17f28a78c663da38FB33bfb",false,false],["moonbeam","frax_ether","FRXETH",18,"Frax Ether","3044022065ef1dc33fc8692de1782d0e9e6862155ff4802a6ada8d30a9767e78934d53c1022042b13ed77da3de0de1937956ca7ff4fc7bdc34efdcc6743bf982eda62821aca8","0x82bbd1b6f6De2B7bb63D3e1546e6b1553508BE99",false,false],["moonbeam","hippopotamus","HPO",18,"Hippopotamus","304402207e8fb5e0f082714f7fa7eb2525dbdd5db29395461b3e14233c324f48ecd36ffc02207236ed560870b53bc97cfd6a932db54083decfa870f363ca3404f81cf395c03d","0x823d826d3aB6956ba934893f325e7c323fAAF6Ca",false,false],["moonbeam","interbtc","XCIBTC",8,"interBTC","304402204bbcaf9c8781bf0eaed83705f2f26dd6b933f134ff0cd9fb4369999f3176046c02204c0bb5015d7680e1234cacd75304be197e9a44666e9770ef71d4db7acb4bee1b","0xFFFFFfFf5AC1f9A51A93F5C527385edF7Fe98A52",false,false],["moonbeam","mai_stablecoin","MAI",18,"Mai Stablecoin","304402207d0d097a6ab6ed885154af75d36af31364a084dd732e8827c881b14f4da8170002201e178117e4152189fb580da271f0fcd2a25f1210393cde95c37680c90b058516","0xdFA46478F9e5EA86d57387849598dbFB2e964b02",false,false],["moonbeam","matic","MATIC",18,"Matic","3045022100b6c3595f1d4bf3cbfffc42fed6a44ff4a09b5a51568ebcab0ba2fa4651b2de4e02201c3f0d31161ba79a8b7df5d6d2624d58b60c487658d25b112ef1d36182a2cba6","0x3405A1bd46B85c5C029483FbECf2F3E611026e45",false,false],["moonbeam","phala_token","XCPHA",12,"Phala Token","3045022100fd4d403d811b4cde327641e619062373f7b6c5d9c9bacc8e109b35b847285c3602201d7fb4ec2dfb0ba07d95a2c2d4803b97c6029a8c221a6f505e73f35ccac3bb91","0xFFFfFfFf63d24eCc8eB8a7b5D0803e900F7b6cED",false,false],["moonbeam","rmrk","RMRK",18,"RMRK","304502210096714af3b7ae3d3f4c3feb7f39378b0e762cf2c202cf11771c659d8c5192e9d40220496f676538cfa1ca4b7d838436fe27df3a1f19fb37b8cc9c6d64784ae19a6e6c","0x524d524B4c9366be706D3A90dcf70076ca037aE3",false,false],["moonbeam","staked_frax_ether","SFRXETH",18,"Staked Frax Ether","3045022100a4ab8ac3c13c6f2c25324696e609fad0950cdcdbd9ced4bd97cc851ccf2888e102201500098de3e5234f8f8943f82856a6195dce1a278b4c52b27c8539981de7ad17","0xecf91116348aF1cfFe335e9807f0051332BE128D",false,false],["moonbeam","stellaswap","STELLA",18,"StellaSwap","30440220059dd67a36c013f0b7fd53bee0fff4c3a95afed887911938e1c4b994c13b67b702206431842aed7bb84e53886f6f38eee65b125448a2e12edceb6b03ed7444b1607b","0x0E358838ce72d5e61E0018a2ffaC4bEC5F4c88d2",false,false],["moonbeam","subsocial","XCSUB",10,"Subsocial","304402204e44c14c2fda4437a4fa849a0d09852fbbb6b324e2e9ce1e9c1456c11ec99d4f02200c989c297fd5384500f3106f9402f627dcd2d4b2ce76f16e0b5b35a7555d1c45","0xfFfFffFf43B4560Bc0C451a3386E082bff50aC90",false,false],["moonbeam","thorus","THO",18,"Thorus","3045022100ffafe00c0d7b09d775e86f65b683c748dd2813d9b15f1e77860d36f41c586f6e022067c26dddbf418f08ae735a7bcc113012eab226d59261c3d6ceda153a7dacd686","0x735aBE48e8782948a37C7765ECb76b98CdE97B0F",false,false],["moonbeam","usd_coin","USDC",6,"USD Coin","304402203069ee485bada7b9b95c5d711d61bfa7676bf59ff190df758e7e05068ed2b87402200a21a05ccc2f12e6afe5294f61193d6e4fa0dd15aa69a7d4e8f71b38f3d79bb1","0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b",false,false],["moonbeam","well","WELL",18,"WELL","30450221008f6cd50a91048ab2c45eeede1ef9c6260872c42d0193a2fbb0478e90d0c658bf022074bb72f001d806de54ddc680accae3711d6d8051cba040ddc54a2e094fe03d70","0x511aB53F793683763E5a8829738301368a2411E3",false,false],["moonbeam","welletoken","WELLE",18,"WelleToken","304402207c0b8c6138bf5f9a3e5da27de884976014c41a6d1257840fa091c30b2f207e08022072ef6ada0aa2f188d3bbbec0e96833f947cac7574f661ce7583c55ac8dece950","0x8389cf5BE8f1e56211D226668A8B8f6cADE61Ee4",false,false],["moonbeam","wrapped_ether","WETH",18,"Wrapped Ether","3045022100bcd6bdb50a890b7c10c3f66be24c6bdc456d5ff6c7eb04496c71c7c4be4bc8a10220609bb3ae2a2f992e60100c4877fdf36ff75977f165cc3a16ed9d3b76fb72f77f","0xab3f0245B83feB11d15AAffeFD7AD465a59817eD",false,false],["moonbeam","wrapped_glmr","WGLMR",18,"Wrapped GLMR","3045022100887e24a7a4f04ed8b1b6670650a15f9811e1f81d0aac55639fa93c148dc3785d0220510ff1d1d90c1fd9d9352b8ea2ed1cc526449a5a6886b1e868e589ad8efa8642","0xAcc15dC74880C9944775448304B263D191c6077F",false,false],["moonbeam","xcdot","XCDOT",10,"xcDOT","304402203247a704ac50ab3301e944c6da8bdc837b9d88ea159b8a02d7eb59b75d909a220220309f2a8dce45d022bfc62be5918df650f17b04b2fbf0b00bc86c35c8b7ab0ed4","0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/8453/erc20.json
var _8453_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["base","aavegotchi_ghst_token","GHST",18,"Aavegotchi GHST Token","3044022078ff4a86f88e7401a724a131b891409a3caef1cb0e00ba50363cc80c7ee2765e02200b090d02ea7718f63c46e8eebef3936b21329a86e593944da7157aff6c6081d2","0xcD2F22236DD9Dfe2356D7C543161D4d260FD9BcB",false,false],["base","aerodrome","AERO",18,"Aerodrome","3045022100d05d94ebc2ca43397ea1e9bca878c06949844364f7e160a88b3a7d873c5837c0022075036fab9e32ba6e1dc71a520dc41002b98331e41287178c9682119d39f1fc6c","0x940181a94A35A4569E4529A3CDfB74e38FD98631",false,false],["base","aleph_im_v2_supertoken","ALEPH",18,"Aleph.im V2 SuperToken","3045022100d997a09a3b0dd40c80ae5a63da73d55a872e69c3d108972b3ee96bc945a2647f0220074ba5bd3b86f1ec7d91a3fa821843c84a4b852f683dd83cc4087f53fdee4d87","0xc0Fbc4967259786C743361a5885ef49380473dCF",false,false],["base","andy","ANDY",18,"Andy","304402203df818d7ee0989979308e3d4db358d27f10bf795ce46227621de9d12f0099b560220140f2a895c25efb1bf5332c6f62ae4890a832afcd502a324f85b9889bacbe3f9","0x18A8BD1fe17A1BB9FFB39eCD83E9489cfD17a022",false,false],["base","artificial_liquid_intelligence_token","ALI",18,"Artificial Liquid Intelligence Token","30450221009109c0794c40ac92826b2e61d919b420b7b25785b75fa0e9deff4fa6faf0430002202ae2950a1d1565b6437080fba9d827981796d112e54fbefca78a7ecf3add6ad0","0x97c806e7665d3AFd84A8Fe1837921403D59F3Dcc",false,false],["base","aura","AURA",18,"Aura","3044022063cea46947eddd6da2655dabc2c6724645b8ee789fe747e2d05c74aef84859ac02207505f5b9e485b3053d3e71deab28612c3a3cd2c3ac16a65f9b36c258bead53d0","0x1509706a6c66CA549ff0cB464de88231DDBe213B",false,false],["base","balancer","BAL",18,"Balancer","304402202da9dde10f1cb1295a27f086a5bf9e08651259b291e1d59f2eb3d1f07d9b1c6602202be962151d71a8b1c30cec5b526ecda33c98bc214261951efa87da8b7fcf3e8d","0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1",false,false],["base","bamboo_on_base","BAMBOO",18,"Bamboo on Base","304402201d26a9f0c4440d711391b156d2885beb431e3f03244d4532e9757c0fb45b6a9d022024d77660be7fd707b456a10dfb7c7eb26b31a3b97ba7368ca5fa6d20cd751c94","0x689644B86075ed61C647596862c7403e1c474dbf",false,false],["base","base_carbon_tonne","BCT",18,"Base Carbon Tonne","3045022100f4ba1b39fe75b8decf8bd65053d7be408ec2646d9bc0845f6c06424428f56a6702202ce8fa9e647b695047b61abd86c013ca1babdeb9de49b54ac71b8415cad1626f","0x576Bca23DcB6d94fF8E537D88b0d3E1bEaD444a2",false,false],["base","base_tbtc_v2","TBTC",18,"Base tBTC v2","3045022100e7f4089f932286f38fb3f389590c28b29003ec7e864ba3e1162cc68863a13b080220520c8d510f459ac74e3d38eb3e69e63c8fc18b08b4914635fe2b1ae81f65f19d","0x236aa50979D5f3De3Bd1Eeb40E81137F22ab794b",false,false],["base","basenji","BENJI",18,"Basenji","3045022100f341224eca98035b3fb9cbf92d9df7ffe725c7205032199258319affb16fd98b022013dfd42b89b34954ceaa373b8efcd8a8bdd5d806d040f82759c9aba5bc4edf97","0xBC45647eA894030a4E9801Ec03479739FA2485F0",false,false],["base","bavatoken","BAVA",18,"BavaToken","304402206d5335374b97b3d45b4bd6fba548cf686abe87bdd7d8911e73ac1143b870b6e102202eeeef75aa792a8f9df7f82c48f1252643f74f90d27791936f831b9e91552828","0x3fbdE9864362CE4Abb244EbeF2EF0482ABA8eA39",false,false],["base","bitget_wallet_token","BWB",18,"Bitget Wallet Token","304402201658e350fb2b898bae5a667375547f6d37f69fe619a112315608bdbc9a6b5809022044d48abf2e811c53458aeb65a22920f0e9d5227a917c66708d75f9b895f3f77b","0x619c4bbBD65F836B78b36cBE781513861D57F39D",false,false],["base","brett","BRETT",18,"Brett","3044022023c5202b0d6d18d2758906451616c92759f27e5c8afce245957ac99b8a85e6c302203d83257d1c001b3486f4911281044b0797b6bfbb71408d20ce49a2e49b8952d7","0x532f27101965dd16442E59d40670FaF5eBB142E4",false,false],["base","byte","BYTE",9,"Byte","3045022100c5d9b3c3089bdfa4446a94468a188637a9eb3aeb26afb89c6b40fb2766dd7de502207b472812f3394d638ee6a49bc96d891ddf51ce8525ac8fa1e44f8c85cfc5f964","0xe095780bA2A64a4Efa7a74830F0b71656f0b0AD4",false,false],["base","cartesi_token","CTSI",18,"Cartesi Token","3045022100c6cabd2a21dcee94521609246cebe6a8e8b76305d3f7ec51d03b19caadcdc4d402203bb60247c66cac9262b8497f7dd42370552aafc9434b36a4314c402e13a250a7","0x259Fac10c5CbFEFE3E710e1D9467f70a76138d45",false,false],["base","catecoin","CATE",9,"CateCoin","3045022100b9904f88960d437eb4051fd961418fd7f1dc2793e9095dce96cf07fe4004072402207e37327c0880eb2bf50c8d7fd1e77b9b023f6629677c6c713c663f741e7f9917","0x051fb509e4A775FABd257611eeA1efaed8F91359",false,false],["base","chintai_exchange_token","CHEX",18,"Chintai Exchange Token","3045022100c12abf94524e030f8ec3584c61608dfb3aa176da2794e31f1c8ebdd59ddb96b902201192f7e6f0fa73c2bf02517d8c9e96f99aaf48fdd59c82f9ba3ba9eee83330f9","0xc43F3Ae305a92043bd9b62eBd2FE14F7547ee485",false,false],["base","coinbase_wrapped_btc","CBBTC",8,"Coinbase Wrapped BTC","304502210097129ab6b79ad87ec53224c2b25d3288009a27a59b45eeb1c6e8cb245ed3e605022055e7c2c23c65fc4217c3fe6b622cf71c1f84fd63b1c7e05cb29715d052c94dbb","0xcbB7C0000aB88B473b1f5aFd9ef808440eed33Bf",false,false],["base","coinbase_wrapped_staked_eth","CBETH",18,"Coinbase Wrapped Staked ETH","3045022100d3699480c658cab8741594ef5df14c6c7d8b6722a9604c0b1b1b831fd45c929d02201fd42486a6c2579db3ba56a59acb17e63be9a71d44eea7e3b1c742b54e2837ec","0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22",false,false],["base","compound","COMP",18,"Compound","3045022100fd1a5ccc7d79b4f47e8fd2755d9329e56731eee6a1fa9fb8adf58618d221889c022079de281e0f72d791f20e035d8d13c9cdc70cd86f108be2fd243f7409c4e38b93","0x9e1028F5F1D5eDE59748FFceE5532509976840E0",false,false],["base","cornucopias","COPI",18,"Cornucopias","3045022100a1496328a1b4a70064216fbbb16a37e8e32da6c476c0727ce8ad9f913cced79d02202c3a2fb750d049dd11e809a76c3966b912c55fb313755c5c47098c1cc4cd950d","0x0A953Dd9Fc813feFaf6015b804c9dFA0624690C0",false,false],["base","crow_with_knife","CAW",18,"crow with knife","30450221009c99ce82a7ed54b06d69dd6b7722885f84fa06e5a7db0bbe5cbea28a858706ab0220158333bdaab63b0214dfe3855d64c71ca161a3e0dd72f653e5a0e74becf0d4e1","0xdfBEA88C4842d30c26669602888d746D30F9D60d",false,false],["base","cryptex","CTX",18,"Cryptex","30450221008585a51a9c12dfbd6592ccdb7f8dbf013bbbb3130b961cdcea7bc27281782bea0220278126851f9475d8d46ff842b4de24aa89599ec5243c8680af611b6dcbca5c09","0xBB22Ff867F8Ca3D5F2251B4084F6Ec86D4666E14",false,false],["base","curve_fi_usd_stablecoin","CRVUSD",18,"Curve.Fi USD Stablecoin","3044022046056320d2ef4434ad8f0a766614321ddd137443e8368039b845038d14cd337402202f0cb26445eac9269c5416cb6b2f53acc255fffe811d4fd9fd72968e8b7a4af7","0x417Ac0e078398C154EdFadD9Ef675d30Be60Af93",false,false],["base","degen","DEGEN",18,"Degen","3045022100c988deb5a2f5680ccd26c9e39b93883d69dd10219207833517e8e62afcbd7e1e02202616dd6d03c1c9b28787c7be6695b8ab87f716716bd229491003bb929e2072ee","0x4ed4E862860beD51a9570b96d89aF5E1B0Efefed",false,false],["base","dexalot_token","ALOT",18,"Dexalot Token","304402203656cc68213be29cf598831bb46d73fd9d165fa4297a59d46e7e4c894be10bdf02206b3b241672b16a9d1c0c597ba13a2a01f5e006a7cf55f09937aea6953726d3e1","0x9d5A383581882750Ce27F84c72f017B378eDb736",false,false],["base","dola_usd_stablecoin","DOLA",18,"Dola USD Stablecoin","30440220240dcd5539544b2775d2c4f1a7a18e94351352397eaa7b92520f9da85e4a237d02206e68ba9e8e581e3f231dfd5b3925c1089769fffe7b50622769c2e208ac530f3e","0x4621b7A9c75199271F773Ebd9A499dbd165c3191",false,false],["base","electronic_dollar","EUSD",18,"Electronic Dollar","30450221009320656d8d3b63029230b778bfa0cae25cdd9820e4d3b4ca8e1bbaf9858759c202204d115f4c65270efeb178c7e20d0b6271cdde717f5d7e9a75e7938a0dd0d78bf0","0xCfA3Ef56d303AE4fAabA0592388F19d7C3399FB4",false,false],["base","eurc","EURC",6,"EURC","30440220454a78df5973d464a84c54435896b583573877682db0627e6c1502d4be97a4f102207a3aa0221d686dafbb7fc90fead88b3c75569b13a8e0aa2a1335be47ab2f50a2","0x60a3E35Cc302bFA44Cb288Bc5a4F316Fdb1adb42",false,false],["base","extra_finance","EXTRA",18,"Extra Finance","3045022100983e908b573e724148cec3f477ccab91248508faa1e174d398b50673b38a14cc022018e28d080a21f9401a7cef64372eda8aeb089e45f369ab594e5f4285bc306739","0x2dAD3a13ef0C6366220f989157009e501e7938F8",false,false],["base","feg_token","FEG",18,"FEG Token","304502210092b4cdf9c5a9681e54afbc074fb46519fd55c192899a10f531476a4ab97c25fa0220682071325e6c97ba04ccf2f7404a01ac4e36e42c8bab64a906d67ccff5b2e53a","0xF3c7CECF8cBC3066F9a87b310cEBE198d00479aC",false,false],["base","gravity","G",18,"Gravity","3045022100ed001ab72b3d66092369c264d01d528001b5fa57dcbceb109f027e0ec0901b84022051525915e8e499dab7577231fe64a779ff31d6213cde5729caaf09bd1c55ed6b","0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649",false,false],["base","harrypotterobamasonic10inu","BITCOIN",8,"HarryPotterObamaSonic10Inu","304402203c1b6f06147ff26be1c45ab32fef188fe8d5c25fd39c86b9b32709e16c36401202207b0d5eb13c162c8d5f024b62b1af66b46c0716fc612128484895e7fda0834b64","0x2a06A17CBC6d0032Cac2c6696DA90f29D39a1a29",false,false],["base","heroes_of_mavia","MAVIA",18,"Heroes of Mavia","3045022100816373ad25ff107beb411a09e698fb39a06c63d76dec655612d1034885f7534002203a178a7e224c517d20ce4fd916e77c9b71b1a8ae7b79c5b04a492e53e0fa92d0","0x24fcFC492C1393274B6bcd568ac9e225BEc93584",false,false],["base","iotex_network","IOTX",18,"IoTeX Network","3045022100a6e83418bc667aef5cb69a60e05ef6090284897caafd604d86958613e9cb45ad022004388bbaffed416f0ef47ed45b0c411cea560488e94557462055641a83db7a8c","0xBCBAf311ceC8a4EAC0430193A528d9FF27ae38C1",false,false],["base","iskra_token","ISK",18,"ISKRA TOKEN","3045022100aca0dbbf2e37da137ee0921db39a8e97baf22f99936d0f6170c603bc6b5b18b202200fefc778d60c2951fba385b22a85cdb9bd099ca40b19c67c0a96246dbf58f33a","0xd85EFF20288ca72eA9eEcFFb428F89EE5066CA5C",false,false],["base","keyboard_cat","KEYCAT",18,"Keyboard Cat","30440220781bc7c5ec1dd601978a8ce44eb0c378d42779af830bb699a21baba3aa6c93270220352f01eb02ba7bccdd29eef3c959d49cbb1bdba97c1a907155e8cbbe23a92452","0x9a26F5433671751C3276a065f57e5a02D2817973",false,false],["base","klima_dao","KLIMA",9,"Klima DAO","3045022100e25308393fe8f1b06527444c2af849f44fce274fec3b8fdc07eeda3ae40fe9fc022046e066cf2942f73302916ade30f2188a5c7c9f1097f43fb7641ecc697e2d0fa3","0xDCEFd8C8fCc492630B943ABcaB3429F12Ea9Fea2",false,false],["base","layerzero","ZRO",18,"LayerZero","3044022066afbf47260696596413de7ddcbe3d63482c283b57ea2d9f37ea01681088e3e60220062700145aabc2f593dae97ec15a5a979caf3f3a70ed2b0a86bb4608ccd1f291","0x6985884C4392D348587B19cb9eAAf157F13271cd",false,false],["base","limewire_token","LMWR",18,"LimeWire Token","30440220523eb595d03ea339682445eeff192ec4af3d632eeaad73ab513f3b8c9af5617802200989e04fd5b7421fa8210dcbe8e1386e95c7f35058e78ff38f3697a0d4e5c2a0","0xE997017e0Cb0CEB503565F181e9ea922CD979c35",false,false],["base","maga","TRUMP",9,"MAGA","3045022100c554498852a0be6856942ad44b4287250034eededd598de653f9f729fb0556af02200f34b7d38c2e05d6da766a6bfb6bef239c462c451b54cd445743d2afaa5f8e94","0x57F5fbD3DE65DFC0bd3630F732969e5fb97E6d37",false,false],["base","mantra","OM",18,"MANTRA","3045022100b62c9be4321a8ecafd2ff97b96e8771f593f7f7062cb755bce03be89bad9caf9022008d303227a6d88f902089d4ca607e292a05973bc15348a9c78b8f7b0966d83f8","0x3992B27dA26848C2b19CeA6Fd25ad5568B68AB98",false,false],["base","math_token","MATH",18,"MATH Token","304402204b7b808c98e105a13a16f0130224d4b3e43e9c98dc770bd83bacdfba2bf4ab4a022035f727d7229dc2564fcdf616d8643be3ff949abf6f72697b1642d6cd399ca893","0x9e81F6495BA29a6B4D48bDdD042C0598fA8abc9F",false,false],["base","maverick_token","MAV",18,"Maverick Token","304402202a7ab9a706a3bb66fef0536915831b7110c7c5a93df1e56b77e2f656587dc495022015800317b7a0d4405dbe70e16a8db84364975dc54efd08818c1143d18cc977b5","0x64b88c73A5DfA78D1713fE1b4c69a22d7E0faAa7",false,false],["base","mbs","MBS",18,"MBS","3045022100b788f22244c45650f532f76bbbaab10102c596308c03cc5cf4536e8c273e075702203e2f350a3b858ffdf6689f50191b4a50ccb71f4fbf709d4877e11e83a12ba9e0","0x8Fbd0648971d56f1f2c35Fa075Ff5Bc75fb0e39D",false,false],["base","mfercoin","$MFER",18,"mfercoin","304402207d764c46b7ec0700f5406c0418dbf96a6a0c1ab8143dd0a0a3791888857a2ba702202c1c4cfe448643189a8efff79877f8be4af943f5972f5c9868f3852fda5950e3","0xE3086852A4B125803C815a158249ae468A3254Ca",false,false],["base","miracleplay_token","MPT",18,"Miracleplay Token","3045022100a425d7186a8c74489e18ed91a466b7feb3d8c8c3016fca9cdacdea10ec1e224202205eeea0d02eff0d2cf743f096055b53ac9bff2efa0f8e0f1edbd90f226fc14c2a","0xF2d3d488626a117984fda70F8106abC0049018D3",false,false],["base","mister_miggles","MIGGLES",18,"Mister Miggles","3044022030e0bddb78dc1d13034f101d55d9cbe84c332a3439f2913cf1aa890c9fd10d920220468274d984affef7e1c111b6e37018954dbf0a05bac12c9418aff31983419f1f","0xB1a03EdA10342529bBF8EB700a06C60441fEf25d",false,false],["base","mog_coin","MOG",18,"Mog Coin","3045022100f3f4cf0612d08491fbe66162b7775fcf4c035a1d415ab7858789757a6b2dd47002201db0f49855da37e85ed4a9211f2844362fa07bff00e8dee335bc0bfe15649afb","0x2Da56AcB9Ea78330f947bD57C54119Debda7AF71",false,false],["base","mountain_protocol_usd","USDM",18,"Mountain Protocol USD","304402203f665cb9f138e2d11129c2968ffbf846cc1b13aa9a9257eb3a34640db06a9ce102202b2383fcb180b49b55995beb954563af5be2a04447392d43167363e49111187c","0x59D9356E565Ab3A36dD77763Fc0d87fEaf85508C",false,false],["base","non_playable_coin","NPC",18,"Non-Playable Coin","30440220299270fa9f5e462c0665be5b265f0b69d190bcef6702e084c510f18c87eba2ef022035fa82b64f869c42c02e57753eed7f3b397706c28754411cc52ba451650ec4cc","0xB166E8B140D35D9D8226E40C09f757BAC5A4d87d",false,false],["base","omi_token","OMI",18,"OMI Token","3045022100841628a320db073737b240629652866d2efb4341450cfd5850476131c5e5448002200e232781989689abb5eda9516b2a0f21d0fab268a322476ef1d86b796d1ca63c","0x3792DBDD07e87413247DF995e692806aa13D3299",false,false],["base","onyxcoin","XCN",18,"Onyxcoin","304402201445eaa5198fc682bff0a474964a883a0b840612a3ef7c556644e6cf81ec25e2022064792ffb4064a7a095f3bcaf35098230fcb23025764f12b99030af26a744f3c2","0x9c632E6Aaa3eA73f91554f8A3cB2ED2F29605e0C",false,false],["base","open_ecosystem_token","OPN",18,"Open Ecosystem Token","304402203d1fe3ef36e9af6b43ed0cafe6d730eb33b24b352d3e9818eb09a7866d93c8e802206046cb43d39def87a05ab55f61080e91256e2b735857fe5e09e95ab5b4f851b3","0x9A6d24c02eC35ad970287eE8296D4D6552a31DbE",false,false],["base","orderly_network","ORDER",18,"Orderly Network","30440220397b1a59c445bec2a6de3e3a668d61aadfcf5ee699346d833e46a1362db0a44f02206395c0673e77957bc86b4538945cb811e084263f936beb98c1d9de67af3910d4","0x4E200fE2f3eFb977d5fd9c430A41531FB04d97B8",false,false],["base","origintoken","OGN",18,"OriginToken","3044022059e2ce2f5aec2a59ca2b585066042fd28a5d70591a382da413d3235b1b31f87e022052bd0930c5e56b221983ff57be550738179eadaa618c9f28f5287ac8bed2eb64","0x7002458B1DF59EccB57387bC79fFc7C29E22e6f7",false,false],["base","osaka_protocol","OSAK",18,"Osaka Protocol","3045022100e8805853e74dd4de45f8a4fdca87a35aab831829d593f2b9e18aab2b5a991648022072e7f3bbd09bed7279314d83d34238ece0814b82bf080c81c428883d822a113b","0xbFd5206962267c7b4b4A8B3D76AC2E1b2A5c4d5e",false,false],["base","ox_coin","OX",18,"OX Coin","304402205b1017e4f379d05e302813b0d6f8db085a4e39c2ac4a6d3bd1f9222a6e442d9002200b590935078c8c7f4334354d3e1ab69c181317676f0b66e61328589bcc05729f","0xba0Dda8762C24dA9487f5FA026a9B64b695A07Ea",false,false],["base","paid_network","PAID",18,"PAID Network","3045022100d709f11af5d27d7b0fa890284a7e3b88b60f6c6e15bb54066fcb9fb6b880a06202204d9f7657ef3037f4b1d5a0c2c145251753f89fa5af49dc60841d48e07853d99f","0x655A51e6803faF50D4acE80fa501af2F29C856cF",false,false],["base","pancakeswap_token","CAKE",18,"PancakeSwap Token","3045022100dc2d265a2e383123a2d0322b2f7b9363b0cc4772b89a860060c662a2328545d4022034a651d06aa10b4c45e33724ab3b9a8443682fe3a899ef39a1ce5dfcecee6d5f","0x3055913c90Fcc1A6CE9a358911721eEb942013A1",false,false],["base","paragons_dao_token","PDT",18,"Paragons DAO Token","3045022100dee59e1dcc91a580057d5db5c24bc30e6d3489afb9c7ba6175a9d54fb9d17db8022022302aa8ee166528f43f462c5c692a9ed3655a3824e1654ddbd50bfeae5e5895","0xeff2A458E464b07088bDB441C21A42AB4b61e07E",false,false],["base","prime","PRIME",18,"Prime","304402205b8fb65fb277ea7151aba93d7a494edc97e218ce711988ba89d648650ccf0dce02201dccb919430820efa70ca711762a2e98a30bacebc9999b385476f64feb3a2da7","0xfA980cEd6895AC314E7dE34Ef1bFAE90a5AdD21b",false,false],["base","propy","PRO",8,"Propy","30440220786986b2612a129c65963654732cf9e8fbf5562ac9e1c1ef2ac497d5f686bb68022013ab430b11f45e1cd43bb968e51703499601762549dbed71ad5b366c0409cc54","0x18dD5B087bCA9920562aFf7A0199b96B9230438b",false,false],["base","pstake_finance","PSTAKE",18,"pSTAKE Finance","3045022100c49cf938efca41cfdadfb227c154e4301aded4c87b7d9bdf149bf5e5591d7e6a02206a73640249d7eedde23432a4d782160b8957c8aa0e0d490e85f32c7d95de2f94","0x38815A4455921667d673B4cb3d48F0383eE93400",false,false],["base","radiant","RDNT",18,"Radiant","30450221009838f2fe3d439c5e8e87a349c0ed12aa1c971bf9c26746e94e6c44b82414da1902203dde97cf224c91fd80bf8f26215e72609dae32c321d7386b4017b1ee8fbcf62b","0xd722E55C1d9D9fA0021A5215Cbb904b92B3dC5d4",false,false],["base","realgoat","RGOAT",8,"RealGOAT","3045022100d4ea582e03879dfae549f54666ad5c4b429d95a14c0d0496c43339a42e3beeef022069df5a1357dd531328d85be58d4add04057eaa48bfe1130914345a02e681697e","0xF0268c5F9aA95Baf5C25D646AAbB900Ac12F0800",false,false],["base","renzo_restaked_eth","EZETH",18,"Renzo Restaked ETH","30440220747bbaaf98e927eadc4d4f74093f8398b633e54847d9448f01b909bfa86d4dee02207b49f61dd7b8483189fa5a370543f12975b79574adfabc7452e6983b09d38be2","0x2416092f143378750bb29b79eD961ab195CcEea5",false,false],["base","researchcoin","RSC",18,"ResearchCoin","304402205187876bf6624c509d5c02bdad6b94edd69a83d9410edcc5621d52767bf2127f02204cbaf35e72427b17a05970d43e6e2ffeeef7708d6ecdbfa1849b32bf722fa17f","0xFbB75A59193A3525a8825BeBe7D4b56899E2f7e1",false,false],["base","reserve_rights","RSR",18,"Reserve Rights","3044022031d37368408504af9570a700c31b1db02c8caf45e1d0dffd8e5a1418beb7611602205639cb3b798a0ba363e15ebf2d64a5ee94f21a9c9968ab4a6b0f3c657f4080bd","0xaB36452DbAC151bE02b16Ca17d8919826072f64a",false,false],["base","rocket_pool_eth","RETH",18,"Rocket Pool ETH","3045022100a59d312b53a2ab16d56ac3de2530f145c9870dc4e447160931d96b42fabf7fa102206ef2f8a9efa3502c8cdf61bba8e0f559aed8fd07dfbfaeaa57e5c8dec6ee9646","0xB6fe221Fe9EeF5aBa221c348bA20A1Bf5e73624c",false,false],["base","seamless","SEAM",18,"Seamless","3044022056b304e1ce1dfbf59f1a4cc15b2b2df75d5fecac9663cdd5be8945bfdf6fa8c202202a66ffa79253ff03e3e673cf8b2d703863eba04eb9baf3916fb83d8134017558","0x1C7a460413dD4e964f96D8dFC56E7223cE88CD85",false,false],["base","smardex_token","SDEX",18,"SmarDex Token","3045022100f076e105410243b3f4844799e4683f0d74adb9e885ad22e07d06dc604427158d02203cde8765a138b30c0a1b088e7dccd6e7a467faa5298eccf15c786787d9efc08c","0xFd4330b0312fdEEC6d4225075b82E00493FF2e3f",false,false],["base","spx6900","SPX",8,"SPX6900","3044022071541ad8358f7e0ba1a16bd0e36580cfac34fe96226665029ee4858928cd433802201affd4550cd476a22a3a59f31ce782671a18f965e9c9dc59ab43dcba877478fd","0x50dA645f148798F68EF2d7dB7C1CB22A6819bb2C",false,false],["base","stargatetoken","STG",18,"StargateToken","304402200b2831aa93f22c0a5e855984e31eeba9de32004afce347621e2ebf620d153623022073ad4ea86bb823bab0acefb609435eb9ea8c65df18eaf840b9353e28bb1d169b","0xE3B53AF74a4BF62Ae5511055290838050bf764Df",false,false],["base","super_oeth","SUPEROETHB",18,"Super OETH","3044022059ae4c447cae780ae80140903726d361602b8bb930fbfca0f6c731229aec1fd80220679e0201f6caae6e114220698a8a873b69b8563b120f217876fc87c655d46d9a","0xDBFeFD2e8460a6Ee4955A68582F85708BAEA60A3",false,false],["base","sushitoken","SUSHI",18,"SushiToken","30440220722a9bf883ac437fa25a3ca58e71d93cfecde9f9a97d5fe9c82ceebc9bd452a80220640ecaa89eca4f9722d2dc22c3189274dea884a04c091e4cb14939b24e6396b9","0x7D49a065D17d6d4a55dc13649901fdBB98B2AFBA",false,false],["base","swarm_markets","SMT",18,"Swarm Markets","3045022100de8aac65385b0547770cbc173c53836e9ad13d2c39cffc3d652fb2c77992a3a702204c44d6a8e9dc6cfe90d1bbbf7ae80c62852ff16319509e3b6f9766363a4e095b","0x2974dC646e375e83bd1c0342625b49f288987fA4",false,false],["base","synthetix_network_token","SNX",18,"Synthetix Network Token","3044022014c1efc93ea0ad274bfe24e1dfbaf1ec53d833f6fb8562e63eee114c1defa6ba022078dd1459b00861511a6c66b60a83c250d9387d54193ba82c3b6d286b6197770e","0x22e6966B799c4D5B13BE962E1D117b56327FDa66",false,false],["base","tarot","TAROT",18,"Tarot","3045022100a1aca1b35f2b80e120761e0e7e17f77b8bf48f931ddebd75f837577f86cebf0802207bee9ab5202afe1b6a56427ae7870fb994eadba7b2d71cd86b28371bf8de4962","0xF544251D25f3d243A36B07e7E7962a678f952691",false,false],["base","thales_dao_token","THALES",18,"Thales DAO Token","3045022100b879347e9917b1f7bb39c54f75e4df089f171295ab6f3f403e7638d71a808b1502201ba958a98df4ad84c00d92e7e39edff5cb85668ee1230f1072bc06ecf4ff9051","0xf34e0cff046e154CAfCae502C7541b9E5FD8C249",false,false],["base","toshi_b2b4","TOSHI",18,"Toshi","3044022054bd9a3d529d409b7e670d5016245d20395505eff55c6e09f5462fcff25392c50220789bef43056cca6b70702bc7e11ab51ed5b3c7bc7230f7b7840a222dbbb3b8b7","0xAC1Bd2486aAf3B5C0fc3Fd868558b082a531B2B4",false,false],["base","tree","TREE",18,"Tree","3044022032c978c0d92771f7e56668790d6e310023afc0a8fb4be11169ca1cc23ed2ff5402207bd644a374d76489832d2eb94da33a664bf4cbffed2acce61f75a22f9d0c1c11","0x52C2b317eb0bb61e650683D2f287f56C413E4CF6",false,false],["base","truflation","TRUF",18,"Truflation","30440220360744682c442d0d0bf580020fd8decfcfcc698795408bf8cdacb4af9366c226022005dfaefcdd17135c95b71495c100655e8b9f4be154ed3f2787a7c0863c62b28e","0xB59c8912c83157a955f9D715E556257F432C35D7",false,false],["base","trvl","TRVL",18,"TRVL","3045022100d49ca1c7bfb891c7c056b2bdd473e7cb45a6cb2836d046e017e7ab6be2cf2c73022071d255724a2a58df0d1682736423f33d97a5218d7c68e61082f8a97ffe27e3bb","0x74aa9bB52B36a378a6E641B86d7acb76Dc9b3940",false,false],["base","upside_down_meme","WEWE",18,"UPSIDE DOWN MEME","3045022100bab61954a3220d6c52fabf3d5745d5c4bef0316e7fedb4ef9d88f0061c19370802200fdcf81b981ef7a51f64bbd1ee40b509a959e2dae5493bd5bc355f9038c82c67","0x6b9bb36519538e0C073894E964E90172E1c0B41F",false,false],["base","usd_base_coin","USDBC",6,"USD Base Coin","3045022100b424611cf52f93ea5d0f260f94475e19d32459ecc82171883334e569c004be2d0220514e9d3bdebd1a7ce8fb7e3e1885463f8e7688c5adff2deaad34aa13843023c7","0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA",false,false],["base","usdz","USDZ",18,"USDz","304402207648d2a7d81da1a9dfaab8ea350c9925b9ae98995efad226081a509e069484e20220676463d8377e66948a815de847c03790bb3180782c8ace3893c98a6d54f5af30","0x04D5ddf5f3a8939889F11E97f8c4BB48317F1938",false,false],["base","vicicoin","VCNT",18,"ViciCoin","3045022100db656be50c84812308cf87db057a8f5d7daba6e0f171f8f4f114ba1bcee01a2102205ce85be4b323d02e4dff6e89cde31b5ddd829149b54e80b97795c5da5ce7ba95","0xdCf5130274753c8050aB061B1a1DCbf583f5bFd0",false,false],["base","vinu_base","VINU",18,"VINU@base","3045022100b3b550f97b95c5288b35483bf9bb5c873606dbd0e1d424593f219d77a7ee5f7902206ae8e6adafa6ef03d6710bcbde2d025407b2142cd9d518db2984f0bb9816d7fc","0x72cCF64EE5E2C7629eE4eEe3e6AD6990289178ae",false,false],["base","virtual_protocol","VIRTUAL",18,"Virtual Protocol","304402202f8107358f62a5cd3adeac6ae93adbe9c01f3bb76bc6bf336a2901a737fb0fb6022018841af5595c103dc5b086ed6f63a37c37361490101987e4039ae9e42e19d766","0x0b3e328455c4059EEb9e3f84b5543F74E24e7E1b",false,false],["base","web_3_dollar","USD3",18,"Web 3 Dollar","30440220641079f166fd08b80f6fd591b9910def2a7a205e2d62e06197ee1afd96cf8a8e022077f30173bb440825066121e4ec5584304be8a210046363f02b2b62e2c7156ea8","0xEFb97aaF77993922aC4be4Da8Fbc9A2425322677",false,false],["base","wexo","WEXO",18,"WEXO","30450221009565ef991a3f2ae3e25c2bdaa4c85b5f18eddd8882b4e32682b4e4759f6273240220019614c90801aacb6dfb6177eed7019a038575ff3c55a4816510d4f62659ed00","0xAc12F930318Be4F9d37f602cBF89CD33E99aa9D4",false,false],["base","wormhole_token","W",18,"Wormhole Token","3045022100f4b0a9b08d8a606452c30afa2f76b6072cf58d2d0d9a97a99c35cbdb2732b146022078ea24601d55123df608724faf71dc3373eebac8549b54b08f912a478da8be42","0xB0fFa8000886e57F86dd5264b9582b2Ad87b2b91",false,false],["base","wrapped_ether","WETH",18,"Wrapped Ether","3045022100c26f97bde77ba2ab0655763bcd3389bf8101028c6c722b8aaf4a971c80b9bff4022058d6e21eef786ee968c6e32336b6bc1db7d2a852ecc9d65f9c421c4f1f50f9ba","0x4200000000000000000000000000000000000006",false,false],["base","wrapped_paw","WPAW",18,"Wrapped PAW","30450221009dab72e30db3580cc0a68eca248e82e707963884cb674b72b10fa98bbffe01e40220675f77ec9a58229cb368ffeabe09afa3d2b0f993f243c2ae9a28a21a5c93fcdf","0xc11158c5dA9db1D553ED28f0C2BA1CbEDD42CFcb",false,false],["base","wuffi","WUF",4,"Wuffi","3045022100ac84553d10216a994fb4208247db7e5d2519ada2d265dcbd7cfbff944c4b9f9802201f7ccc7ecdd4ba2ef2ad05c442019ab1f6ad433c18aef9af1963a6a2d2d4475b","0x4da78059D97f155E18B37765e2e042270f4E0fC4",false,false],["base","xcad_token","XCAD",18,"XCAD Token","3045022100a25c9a6f80f8e54d997deefe23cf5c55d8336d1c6f948120f4280ef0830c137a02204dff5dfa23ed997087d2a6fd6940006dc779a835a21758b4b679c6cfdfbfc8c3","0x750cF88d9E0c2BCedEEC31d5FaAd6eD6E3F1abC6",false,false],["base","xprt_native_asset","XPRT",6,"XPRT native asset","3045022100c7dc8390cec2f3ecf41c8d649d9d81448489f90d99e1909f0ec2696a4f41712702204b4599750cb9977bf0ab677c442b2e78b3dbe0a0c6196703bcb84d417b3ef8c5","0xc7Edf7B7b3667a06992508e7B156eff794a9e1c8",false,false],["base","yearn_finance","YFI",18,"yearn.finance","3045022100f833878fb6618ba47ace8051fb038b0df8d33369e906ff03e1bb6c1849547a0202205a4cbd0e322e30dfb057ea142e397604bce8e62b14e42c9e5ca785ab850325b2","0x9EaF8C1E34F05a589EDa6BAfdF391Cf6Ad3CB239",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/42161/erc20.json
var _42161_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["arbitrum","account_abstraction_incentive","AA",18,"Account Abstraction Incentive","3045022100c60ca0b33ac82d131e1973a9c3be6551d2039880f78c73f4d53fc4f2e0c17abb0220764f305f0d435ee47dd6ed4bf4f1584f9e83454046371a0b4c42e75bf31d3373","0xb0eCc6ac0073c063DCFC026cCdC9039Cae2998E1",false,false],["arbitrum","across_protocol_token","ACX",18,"Across Protocol Token","3045022100b885cfd4435bda0a2cbd5781e033cfa5bac79a37d1fce4a622b365b42caf09540220593597fe71dae462b4b71231364821385b6088e8234d720457f2fca445bcfe20","0x53691596d1BCe8CEa565b84d4915e69e03d9C99d",false,false],["arbitrum","aethir_token","ATH",18,"Aethir Token","3045022100a9c6eb6f9756794df6e1a681ddba88d851561bc081075b3e1df7484035aca64a022034ef177df596d4bf70f51ad6ed5f47f9b8a63b822bded0b328356ba65ff174a7","0xc87B37a581ec3257B734886d9d3a581F5A9d056c",false,false],["arbitrum","aidoge","AIDOGE",6,"AIDOGE","30450221008088229e8d70e48aa217fc70669d87680a71856d4831b20f6c7e33a0fbd778ae022019a6631412fa317884c85e9d01f4be85cb2b5abfe21055c6fe438e0ad7ce8386","0x09E18590E8f76b6Cf471b3cd75fE1A1a9D2B2c2b",false,false],["arbitrum","alchemix_usd","ALUSD",18,"Alchemix USD","3044022019eda2e17f38eb91295efd587d7632898db330c799b7e834af5b3e73942852cf02201c42fb59ae86798d3ca6d56da86b4caf2e1066f74e7fb8ee03e00d05b9786816","0xCB8FA9a76b8e203D8C3797bF438d8FB81Ea3326A",false,false],["arbitrum","ankr_network","ANKR",18,"Ankr Network","3045022100c16cda1a8347a479e0467503866816a66cf91752a33f398736647b6a3b3047190220065e2f974d384fb5fb37b6ea9fc455d64cd46b69a42b86eb477d53dab0ddb7c4","0xAeAeeD23478c3a4b798e4ed40D8B7F41366Ae861",false,false],["arbitrum","ankr_staked_eth","ANKRETH",18,"Ankr Staked ETH","3045022100b63379280a059d1b471cad4fbbc6d5c827a67b3353644731136d497f9bc4857a02206f140f0ede952bb5ca8ca903c6cc14bf54b8a97d7177afe710a9318b56abfd06","0xe05A08226c49b636ACf99c40Da8DC6aF83CE5bB3",false,false],["arbitrum","apex_token","APEX",18,"ApeX Token","304402205501acb40b577147fc7005294f8d80d1a569de563ef5a2164fa1b95663a5a4d50220566c5bd8a76859671aa5cf7d5ce0b5a66c8c96f8afadde9535af377f38a3d927","0x61A1ff55C5216b636a294A07D77C6F4Df10d3B56",false,false],["arbitrum","arbitrum","ARB",18,"Arbitrum","3045022100917f9626bf5dbbcd14310cb04a9ea66a85804ae73adf7913d195ef73d51ad000022075a3b2e440d4590606505524218465c193e9124dfec0d9c0b0cc72f37a45bf0c","0x912CE59144191C1204E64559FE8253a0e49E6548",false,false],["arbitrum","arbitrum_tbtc_v2","TBTC",18,"Arbitrum tBTC v2","30440220074fdef4ce896ec898b5382fd6af2df9a73eb55f23472f37ba253e89c9f7574a022040416ac069ebbcf91e3afcdb6875bf570773475d85c20c1a284010bbd9a154dd","0x6c84a8f1c29108F47a79964b5Fe888D4f4D0dE40",false,false],["arbitrum","axondao_governance_token","AXGT",18,"AxonDAO Governance Token","30450221009ee3cf4bd7ee83a5fa943e954d3c431ea13b6a943776362dd6f9e776584ffae702203ba6bb0cf859835e2756a2b3fb836b2bf5cfd8a2d946411025612a0a7dad7f6b","0xE0Ee18EacAfDDAeb38f8907C74347C44385578aB",false,false],["arbitrum","badger","BADGER",18,"Badger","3045022100fa9d3949f075b217de5a0b454fe358e04faff405b609533787f7d4294d967cbe02207bf603c2309c2b0e53e5d6081d8016e8c16de45a4a7f69cab91aa3ab56a59404","0xBfa641051Ba0a0Ad1b0AcF549a89536A0D76472E",false,false],["arbitrum","balancer","BAL",18,"Balancer","304402201710c13f11e099e071b7a2e03e322f45420ffc2987b222dc74e876bed6fe557b02201cce25671ab7a3e1765e7f670e71e2e031bddbc3e7e829dec74378b64c1563f3","0x040d1EdC9569d4Bab2D15287Dc5A4F10F56a56B8",false,false],["arbitrum","biconomy_token","BICO",18,"Biconomy Token","304402204a6e966c811bc0f2a2ca0c4a201444a6b145381a49114048ba65b98724eb326e02202cd519452d6c35852dbe07f038fbbc5ef83b0039770d0fef8e2a6116e999de09","0xa68Ec98D7ca870cF1Dd0b00EBbb7c4bF60A8e74d",false,false],["arbitrum","bitcoin","BTC.B",8,"Bitcoin","304402207f1bcc2d79a2d89a8a254c25dcf163040b1e21f66f67782ad3d8cf41a6e6d89902204815ea7ab354b6d644fd12e8d3e8ef48b3b044efbf922fa9f76573b8e2f36221","0x2297aEbD383787A160DD0d9F71508148769342E3",false,false],["arbitrum","bonk","BONK",5,"Bonk","304402202ffe4a856f0b68d6e72639bc6a51e2a75aaa48182fa9b872dca0af0c4a30369a02207498427bd26ebeef2c92d4b3c5ac8e9591d49af9074459defa593293316042cc","0x09199d9A5F4448D0848e4395D065e1ad9c4a1F74",false,false],["arbitrum","cartesi_token","CTSI",18,"Cartesi Token","304402204850e5fff676403e2611ef9037b74c0013bb40311347fb87c5e0ebd649c72f9f022031594053e787c7082d54eb3758bf5e2adcd355ded840dcb33ee64b26e9f3bdcc","0x319f865b287fCC10b30d8cE6144e8b6D1b476999",false,false],["arbitrum","celertoken","CELR",18,"CelerToken","30450221009d932fc160883e2240967e3b65b821bc20120407bab5617123fa6758f45f80670220169e61d74e4efe10bc334730d82fbf766f33411035a9827e7fe6f06d5eb4d3a3","0x3a8B787f78D775AECFEEa15706D4221B40F345AB",false,false],["arbitrum","chainlink_token","LINK",18,"ChainLink Token","304402203281b0e971bee77e0e6ce0f8a03ffb9453b2bc793c3d13e7e713328e1a50f1fa02203e128f1ff4dbff6941ef1a78d06cd6e821f7610bef619835c21b71893e1dc0c7","0xf97f4df75117a78c1A5a0DBb814Af92458539FB4",false,false],["arbitrum","coinbase_wrapped_staked_eth","CBETH",18,"Coinbase Wrapped Staked ETH","3045022100bd32674561579d28de468b039080db344a9004419f55367c0b35199fcc39aece022002ba9524b098171b8163270c1a07f74f97398b4231fcada980ab061a0fd487ad","0x1DEBd73E752bEaF79865Fd6446b0c970EaE7732f",false,false],["arbitrum","compound","COMP",18,"Compound","304402204902db631f8bb7a4e570eeb33536aa7a7e86b1fbd2ab6b1cd9931dfbe39cd4bd022035220220331337bae50f14e997a8918fd8b95600d0102d736ea189f002e4ba69","0x354A6dA3fcde098F8389cad84b0182725c6C91dE",false,false],["arbitrum","cow_protocol_token","COW",18,"CoW Protocol Token","304402202f57368c54fde6ab19d9d29e972a415e62f4a6f600383ac26dbf45f20ff4cf41022014572aeac84ef3c6f19f0a105f4a34478ad10214100f5424472d1f8e27e9dc01","0xcb8b5CD20BdCaea9a010aC1F8d835824F5C87A04",false,false],["arbitrum","cream","CREAM",18,"Cream","304402205b117709ccaef0aaf958d6d20d2a1e7bb2175574444b26c9140f7aa1aa9a996f0220275ea0162f757098a625239bd8c7ab7690c61f75a3faa51da6a7f527e80bd7bc","0xf4D48Ce3ee1Ac3651998971541bAdbb9A14D7234",false,false],["arbitrum","crow_with_knife","CAW",0,"crow with knife","304502210080318011ea7a85d8aeedbae8421e9c2d21cc6e3d82251eba272d63c2873ba8080220198d06f7320d1e6e8b80d9f3018b2de3224b65b3dbcc616a9285a919951668ee","0x16f1967565aaD72DD77588a332CE445e7cEF752b",false,false],["arbitrum","curve_dao_token","CRV",18,"Curve DAO Token","304402200c9a085e6df1e8daf16cd5a95501ba8d53f0e3db818420e07e0b1c49846d851d022069ebaa1c324454f80adfa3312abf399bc8f482d512e240e0f6a87a573a6385e0","0x11cDb42B0EB46D95f990BeDD4695A6e3fA034978",false,false],["arbitrum","curve_fi_usd_stablecoin","CRVUSD",18,"Curve.Fi USD Stablecoin","3044022031afd15aaebf51eeb53e291c0bd0e449be18a4b1a3e43a0d638907df9f02157102204582fb3cee5359613ee2d5468b21663fc705203075949ef2b88889599e68e2c5","0x498Bf2B1e120FeD3ad3D42EA2165E9b73f99C1e5",false,false],["arbitrum","dai_stablecoin","DAI",18,"Dai Stablecoin","3045022100b1df298841ea77641c6e42b96cd5545c41b8a2ea4f0ec1c14b1faedfbb30dae702204659aa24f4471f48801afd0a74d60c25361f4c4e348c2e78c6aae6871e3f18bb","0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",false,false],["arbitrum","dao_maker","DAO",18,"DAO Maker","3045022100dfc2aee0975a65d8a48695cdc76fddd6e006a49e5b7867c1f59bcbea8c6e0fc50220309802b9f4af61c1dda152597c61ee1df363c5636ad3ffeb74c4310fe5e0664f","0xcaA38bcc8Fb3077975BBE217aCFaA449e6596a84",false,false],["arbitrum","decentralized_usd","USDD",18,"Decentralized USD","3045022100e8fd9195606c989f9470e6209a5380c62b786c6444d6eb787d841ccc3ea7408e02206e94568f19b1d729a5a2bbbee3f86af8bfeb34421b318bf3cea334cc35929c9d","0x680447595e8b7b3Aa1B43beB9f6098C79ac2Ab3f",false,false],["arbitrum","dexalot_token","ALOT",18,"Dexalot Token","3044022050a74b35106d7f25167a2af33a3b9ab959d07c26ad21b32a64678aa3ffa24e6f02200d9f3f6e152a70101b7fa9a35c7f3de384e5e63f6f98319bcb12aa01ac8a78ca","0x9d5A383581882750Ce27F84c72f017B378eDb736",false,false],["arbitrum","dmt","DMT",18,"DMT","3045022100c6a2b3809d9b04a44a929a26722daa72b13fcb279c0777c6de5f3f0d78ffdfe8022079ec6e9d9c6933af5cfd80fe47686e7a50b1cb3d3e7439d5b2eb0867d8114aa4","0x8B0E6f19Ee57089F7649A455D89D7bC6314D04e8",false,false],["arbitrum","dodo_bird","DODO",18,"DODO bird","3045022100fc4d6bfe36015f05188f4e3967d04c066ac81488b3d489bbdf55d95c2da183ea022064474eb80a3902d548a3551ff53ab4ce8e40a7bc4e1fbecfbe0b614aa21d66e7","0x69Eb4FA4a2fbd498C257C57Ea8b7655a2559A581",false,false],["arbitrum","dola_usd_stablecoin","DOLA",18,"Dola USD Stablecoin","304502210098301eb82a28ea5f9435550949f33903693f92a6954160e15cab32b20465dd1f02207b5fba90a8f2bce5c50464e3713c168e45d328b22266ef4d348dff46ce60dedb","0x6A7661795C374c0bFC635934efAddFf3A7Ee23b6",false,false],["arbitrum","ether_fi_governance_token","ETHFI",18,"ether.fi governance token","3045022100bffd82be9903a666afa02559d8de631f096f99e9c552165bc1529d9b76051a3902205090bbaa7a5ba8d4d32a6f23dabc44614533b5738edf068fe8323d8213f92aa6","0x7189fb5B6504bbfF6a852B13B7B82a3c118fDc27",false,false],["arbitrum","frax","FRAX",18,"Frax","304402206186b9d44bff1aa192f71f9215471cf746f4125bcc8814762b6ad93791bb223602207041932e31838b03a60548a69b6055564265f3007062aecab82b5768b20e21c3","0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F",false,false],["arbitrum","frax_ether","FRXETH",18,"Frax Ether","3045022100b07e4d337a37411b2104fbca4ef1093064ff9bb036a3adac1da138c9f33c67c50220061822b8d80b129e03785b0e33e969d98d394862d57d95f5e1f8165c78aa9028","0x178412e79c25968a32e89b11f63B33F733770c2A",false,false],["arbitrum","frax_share","FXS",18,"Frax Share","304402201bee9606fa632b34f5272021a86d7e818b017efdd25cee3aea0353a018489e44022077f013b0165cb9c3987258e197c074930fbc529ddf22483f22f37178e369df5d","0x9d2F299715D94d8A7E6F5eaa8E654E8c74a988A7",false,false],["arbitrum","gains_network","GNS",18,"Gains Network","3045022100a55b04d8c66c82f59f6b319c27f35d3943b5418ba17dbca617c08ac8e43782510220020f6cd5eeda7754e8d5b3fb1468ca943eb1a53ad535f109e30d83d3887a7bc5","0x18c11FD286C5EC11c3b683Caa813B77f5163A122",false,false],["arbitrum","gameswift","GSWIFT",18,"GameSwift","3045022100ef5b2c5825970a7fc3db91721a31a0cb1907e580dc124bb9709b9d574bf8c84d0220574423495827419aab20767e88786ab0dbdbe604ab6d07557a2ad41774563792","0x580E933D90091b9cE380740E3a4A39c67eB85B4c",false,false],["arbitrum","gho_token","GHO",18,"Gho Token","3045022100bfaef8e63f4f0b1ca1dbf6e35f150e717ba39a8e0008286c783bd6450eaae69e02203cedc9e22b98a5966d335c019d1b5b2e81f5527d04c28c98ea0317c4fdf7787a","0x7dfF72693f6A4149b17e7C6314655f6A9F7c8B33",false,false],["arbitrum","gmx","GMX",18,"GMX","3045022100da3e49d3b3ba279d6770887945b07164384b3fb4cb202f3ba6659a37b23eba8602200ee70de31f76a99b55ad61c2ef21d51ba5298dda28a2cfd0958363f647ba8c90","0xfc5A1A6EB076a2C7aD06eD22C90d7E710E35ad0a",false,false],["arbitrum","gnosis_token","GNO",18,"Gnosis Token","3045022100a91c8a0e187285542269308ef917f02a3966fcafc4956412557887221c3d491b022022955fdd9854b80ed1688268cfb776f5dbc937337f52be8c81a825e12bbfd64e","0xa0b862F60edEf4452F25B4160F177db44DeB6Cf1",false,false],["arbitrum","graph_token","GRT",18,"Graph Token","3045022100aaf66467cc1b633f3acd3024b168af035c8994ad72176d82cf4b40244323221d02205824c1a947df290be529b0ac7d9c731bdc736defe6dca5c5fbfac3192aaf3ad4","0x9623063377AD1B27544C965cCd7342f7EA7e88C7",false,false],["arbitrum","joetoken","JOE",18,"JoeToken","30450221008c30ea73afb896dd72f690d343961e216b6692475c9ec7b2d8825842752b4e050220299ae6227475eedfbb522100c30a2ee96661385c3181141188e7f52a2e90a39c","0x371c7ec6D8039ff7933a2AA28EB827Ffe1F52f07",false,false],["arbitrum","kujira_native_asset","KUJI",6,"Kujira native asset","3045022100b256ac3aa19b0d3f430a1fd4eae8360917e16d85c47b7aca5a8cbb973911065a02207defcc85ac9e4e4454aa1a8d2da77d535c62bde56d891f86011db28b4f5c2dd7","0x3A18dcC9745eDcD1Ef33ecB93b0b6eBA5671e7Ca",false,false],["arbitrum","kyber_network_crystal_v2","KNC",18,"Kyber Network Crystal v2","3045022100a3833dcb9cff6fa568dc5725b377181b8606769a81de68d1db93903f15fc55ed022070bb1c90991786620f556ffeb8413e860a8fe270c17946303b932699bb2669ea","0xe4DDDfe67E7164b0FE14E218d80dC4C08eDC01cB",false,false],["arbitrum","layerzero","ZRO",18,"LayerZero","3044022050a47326baa0287307bb73b67d9662b57c52d41ac48d1414e38696aab66fdadb02202bdf6be7bbd03579b27851a7ecc1a6036ce38189fc9e69bd026cff9c10e348c3","0x6985884C4392D348587B19cb9eAAf157F13271cd",false,false],["arbitrum","lido_dao_token","LDO",18,"Lido DAO Token","30440220049019c0ede4a37074adb2680c24a6204807f1e3e96a43a7f7871d7ad204db210220799afb5adabfbfb6ee9bd4ec2aeac04b0d03f29f99dedbd317b799da7bf97933","0x13Ad51ed4F1B7e9Dc168d8a00cB3f4dDD85EfA60",false,false],["arbitrum","livepeer_token","LPT",18,"Livepeer Token","3044022072e1dbbf5f43c199ce458338cd3d4068c04feac4e3c5c8a612b41e4b7d31b2ef02205dcdddee09dd84229684d54f3e1ee3e95b6564a8d4298c44570707caabb70381","0x289ba1701C2F088cf0faf8B3705246331cB8A839",false,false],["arbitrum","loopringcoin_v2","LRC",18,"LoopringCoin V2","3045022100db687befd606c10cb26a55b522dcfd351e1e4fc821caf05f9508d5e9726d765202200c5c4954bdafceade1a4552f601e4229467bbf321eb3f0efc62f6d5a8219ed6a","0x46d0cE7de6247b0A95f67b43B589b4041BaE7fbE",false,false],["arbitrum","lqty","LQTY",18,"LQTY","304502210089ee4aff2ec6cf7104f5d7a25b799f0d0d08714832910f059014ef68911b4248022028bd6a2e945b98893f060bdbc9d598d24058c41bfbc2abce34921daa2cecb591","0xfb9E5D956D889D91a82737B9bFCDaC1DCE3e1449",false,false],["arbitrum","lusd_stablecoin","LUSD",18,"LUSD Stablecoin","3045022100fc235253decce42e7ff0fc18b9ca791c15bec0a3932655fb54a69be1468c9ea802204f27f3c82371117852b20a68756e991ecc9365c48af5bb360014fc09e2d479a5","0x93b346b6BC2548dA6A1E7d98E9a421B42541425b",false,false],["arbitrum","magic","MAGIC",18,"MAGIC","3045022100a0c3e2d65b033461b8c387de2e4f091d5f0d7bfb2012ec406ad740a39e90a02302201045cdea62ed9d0ad91aa3ab7b5886b4636db1d8477d01855c7b49d2a0506819","0x539bdE0d7Dbd336b79148AA742883198BBF60342",false,false],["arbitrum","magpie_token","MGP",18,"Magpie Token","3044022076513e7b833da25a68ef5ddb6212e39ff7969abfb4a6e123c323c58bc01ec3f30220255f69326ab57415f7a4689733b624f7a23a8e4f052bb1fb1df85c7801e9b850","0xa61F74247455A40b01b0559ff6274441FAfa22A3",false,false],["arbitrum","marlin_pond","POND",18,"Marlin POND","3045022100a9f8a1e6d08899489212a3197b3c686323119adc61304090a62f57e2c7520f490220420ec06e71e8ba4ef6fcb1a4ac920068aace55f10a9d5f0181dd05080f4766a9","0xdA0a57B710768ae17941a9Fa33f8B720c8bD9ddD",false,false],["arbitrum","math_token","MATH",18,"MATH Token","304402202c14d8dca6605139e6d892f358b5d408a405d9a9f6f515ff6520234946572da202205296ce4ee746e6890b1780e704476a38a3580ce0b772ae81d4ecaedc4a8906fc","0x99F40b01BA9C469193B360f72740E416B17Ac332",false,false],["arbitrum","milady","LADYS",18,"Milady","3045022100ff21fabb3c0df8e45f9441dab62697a7bd63c7dc49807b44f0d10a3dde845edd022054ed3b214dc5075d59ede12b41ebbc7c910c43d6307880364f36924606f38032","0x3b60FF35D3f7F62d636b067dD0dC0dFdAd670E4E",false,false],["arbitrum","mobox","MBOX",18,"Mobox","3045022100c07aa69890c92cdfb4c3e24c29f79e88827e9f1d53cb1a75480ae3503bbf11a6022021ca0565eaf369bbb115cb8600cb5b294ed5a3059ce98965c8a3c6598a450b3f","0xdA661fa59320B808c5a6d23579fCfEdf1FD3cf36",false,false],["arbitrum","mountain_protocol_usd","USDM",18,"Mountain Protocol USD","3045022100eed1583a982baaa6240a0097e69158c26e97d2c1d17f94e98d7422725ce96a3302207dd877c1f3f923af688821816f9dd6870597f03c3fd44878006a2575debfb751","0x59D9356E565Ab3A36dD77763Fc0d87fEaf85508C",false,false],["arbitrum","noisegpt","NOISEGPT",18,"noiseGPT","3045022100b9b66f88c8cf541600816ed8197bb863872cf0b54b1194f579373ff59f6780ff02202154dc8104d91706d22303524ddc815739ff5c972bd1644d103073be20a9180d","0xaDD5620057336f868EAe78A451C503Ae7b576BAD",false,false],["arbitrum","opuloustoken","OPUL",18,"OpulousToken","30440220242fb384c65207af4faef094a9d793c1e7a33ec319d17e8bdd06e86ece3ca9d402201d01c084ffb3b8cae2b95352e1c1182037902c1f7374180641700d216a55f19c","0x0c5fa0E07949F941A6c2C29a008252db1527d6EE",false,false],["arbitrum","orbs","ORBS",18,"Orbs","304502210095ee01b256c7b0f1db30876479f5cd739cdf2581f32be8ef7c165496d69762060220397410601ea2ea3f89b111488cd208e1196bf3587ede110802e6969d9abe8427","0xf3C091ed43de9c270593445163a41A876A0bb3dd",false,false],["arbitrum","osaka_protocol","OSAK",18,"Osaka Protocol","3045022100fb915b9ad3993c1e4aaaf96793dc8d7c3392a71d492c8ffb029f368f826dfebe022070986bfb35d6705fbbef18f50898e2b1b3796c4191761797276b733a7b23aaaf","0xbFd5206962267c7b4b4A8B3D76AC2E1b2A5c4d5e",false,false],["arbitrum","pancakeswap_token","CAKE",18,"PancakeSwap Token","304402203787188a148f22080b4309905edfbc3e5adda9e7f56adc6cac23ab535ab485bb0220416ac873b050f31e7743946b3f16d3fd9c6d46f1a7b934a3501ece4f4428b2d5","0x1b896893dfc86bb67Cf57767298b9073D2c1bA2c",false,false],["arbitrum","pendle","PENDLE",18,"Pendle","304402203cbd5956e93f05002a5811d5ca2490dc8673cc4acaaa33fc1a86001101ab3bdf0220557418f58526c251cef37ca9a88c608dd99ea0ed0c436f7e49735e89384481fd","0x0c880f6761F1af8d9Aa9C466984b80DAb9a8c9e8",false,false],["arbitrum","pepe","PEPE",18,"Pepe","3044022042f7c268fdc053a1fe2a32fa86a8d1ba5eece93e0f4a2e40900757f4b4c898b502200898bd39e663ded543b4bc031eeb3f28b164e7fb8eabb379eaf35c389bb13a32","0x25d887Ce7a35172C62FeBFD67a1856F20FaEbB00",false,false],["arbitrum","perpetual","PERP",18,"Perpetual","30440220615f185b947a877419fa9a4563a991358b405010636af79a51f12ef8d8f2dd890220748c8299ec6432ae9d2210d8c6c353c9ad453fedeb51c220222a0a5a45758e3c","0x753D224bCf9AAFaCD81558c32341416df61D3DAC",false,false],["arbitrum","radiant","RDNT",18,"Radiant","3045022100be698340055d97ba6fe47edf7bbc3dec80c2265b4e8dcea37c93e22c06389e9d02203c692cf94d4c3619b840c576b66ec166e8bc2acac026c112265b05bbd0b40d94","0x3082CC23568eA640225c2467653dB90e9250AaA0",false,false],["arbitrum","renzo_restaked_eth","EZETH",18,"Renzo Restaked ETH","30440220713fe1d4da70551600f15dd41291576e6bed0cdf1ff6e9a544e986bd4f6199000220545896d66881b43bca26ffebe55d70d0ff9a92f55f674da4f69e8788834d1e9f","0x2416092f143378750bb29b79eD961ab195CcEea5",false,false],["arbitrum","reserve_rights","RSR",18,"Reserve Rights","304402207fbbdfcce3e808dba9ff0da35d975c08265179ef1d958956b3951960ec1d6a060220509366c39257e95b5e2f028ac658f35dcea32fb24b8a4c416012466d11bc828f","0xCa5Ca9083702c56b481D1eec86F1776FDbd2e594",false,false],["arbitrum","rocket_pool_eth","RETH",18,"Rocket Pool ETH","3045022100d107189818dcc74c8aa9da16bf22d917584c8dec387a8536c20c4553a198d630022077132ec1314474f472c591e2af7dd976f85e4f5b48685ec6b5ca382c790b8e09","0xEC70Dcb4A1EFa46b8F2D97C310C9c4790ba5ffA8",false,false],["arbitrum","rocket_pool_protocol","RPL",18,"Rocket Pool Protocol","304402202ee07dbec8028b9fa214f2388603ba74628dc11f514969d0e86e38d0169f62fa02204bb46922ca608f53cc789ce0b099bdbac988d5c3c47995756ce8f6075ec6c422","0xB766039cc6DB368759C1E56B79AFfE831d0Cc507",false,false],["arbitrum","seedifyfund","SFUND",18,"SeedifyFund","30450221008e24d3cd5b2a9c3f7d6981d41fbfe00ca7d1cf33b32956ff1023f0305c490ce802202cab53de5079ba7b16f2187f4cadcd63b59a733ec81e706c895a62f7bb6c085d","0x560363BdA52BC6A44CA6C8c9B4a5FadbDa32fa60",false,false],["arbitrum","smardex_token","SDEX",18,"SmarDex Token","304402207be454d41b96cb96f666432d207a945b9ab4cbbd055e987fce06507699a8d1fc022059c756ec397740375c85b3f4c41c71534969787d47048003ee23729dbdc029e3","0xabD587f2607542723b17f14d00d99b987C29b074",false,false],["arbitrum","solv_btc","SOLVBTC",18,"Solv BTC","3045022100aed5f30eae00dc273d1fbaf75ca1fe10aee5f4ef2dcacb9b6b5035ad6cb9aeab02200aa5733e4644f5623492acbbefd3a83ece85c243f0b5d6b57c0874d49409c6c7","0x3647c54c4c2C65bC7a2D63c0Da2809B399DBBDC0",false,false],["arbitrum","spell_token","SPELL",18,"Spell Token","3044022027d61ea6a63c01256fe82b0e1653045f25321f756fe25ec9b492896f9620baab022002785e8e0ae247362ffac3a7e3a29a108dcae28c6a3cb8f2b08ff9b32b1ae488","0x3E6648C5a70A150A88bCE65F4aD4d506Fe15d2AF",false,false],["arbitrum","staked_frax_ether","SFRXETH",18,"Staked Frax Ether","3045022100d73bff97de924f92d421ee2e20909696ab63cec65cdc9068164cb210ac6018b302202c535c7c302a02807441a6367c840464cf214cc1172cc966e34ad5ab7c92da4e","0x95aB45875cFFdba1E5f451B950bC2E42c0053f39",false,false],["arbitrum","stargatetoken","STG",18,"StargateToken","304402200a9fad9e077609de292580a191b8e2adfc85494231511e1d68ea34040ef4722f02203173b94d974093815c741b17daffbfc582732d459fbf47bd0e4e7aafce421489","0x6694340fc020c5E6B96567843da2df01b2CE1eb6",false,false],["arbitrum","sushitoken","SUSHI",18,"SushiToken","3045022100f706ff2e0eb44ee304385306835b7805e4ed07e2a7d6ea9b91a14e9b8329f0d80220206ea2f1a76535fcb6101d4a21fb7926433beba61e9b93fe744b41b209875472","0xd4d42F0b6DEF4CE0383636770eF773390d85c61A",false,false],["arbitrum","sweth","SWETH",18,"swETH","3044022017d87dcc205f96d5c7e160823f14d8cb5f5b6440bfb3cd6ede8403083cee1a7702201ca938f9f2b85760b18a4d049824fbe941dfca9a45c3df8cbda68eb21287df8b","0xbc011A12Da28e8F0f528d9eE5E7039E22F91cf18",false,false],["arbitrum","synapse","SYN",18,"Synapse","304402207f458b419f1f96da996206ad41ec11408c4db680ae61b685513635073fdae8ce022056e607dc078052568900c2134b36b927d8a80ad580e17b5074f1370d5df07fe6","0x080F6AEd32Fc474DD5717105Dba5ea57268F46eb",false,false],["arbitrum","tellor_tributes","TRB",18,"Tellor Tributes","3044022055632f3e3df879a282c5b0640c10e829c3942421236ed22a7ab68d2c4d195b6302201f720c474b64b453652d462ca2d15b27fea30b2f7ca89d065bbdef8899a4761f","0xd58D345Fd9c82262E087d2D0607624B410D88242",false,false],["arbitrum","tether_usd","USDT",6,"Tether USD","3045022100d5638d26cd46b06a42ad3f80bae4108ea2a87fb254bcaef7b013701c95cd989a02202f0dd3ac4bc2b5a3500b559f75742e650961cb1fc47aea2b079ca6e62796c336","0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",false,false],["arbitrum","the_doge_nft","DOG",18,"The Doge NFT","3045022100d21dddb900fb9a2bd825cba883edf9091d37ee68540578a996bc58a9ab1e204c0220616f24cb99b121a5ea754d7c804fcd99f05eeb6d55bdaafa4aa6275f50bafd20","0x4425742F1EC8D98779690b5A3A6276Db85Ddc01A",false,false],["arbitrum","tlos","TLOS",18,"TLOS","304402200526afc21da21d1187810b5078e113172f15853d8bdac97fca925a810fc3102e022017d432c6c2e65a7cfd8dcc0ad39b7560542ded9fc9232e640b5c47ef5443a0ce","0x193f4A4a6ea24102F49b931DEeeb931f6E32405d",false,false],["arbitrum","tokenlon","LON",18,"Tokenlon","3045022100cc3b5afe20bdf552a9b447ea7b12b8a6bc85e0f8343cec380fff1959372dc7df0220596f48ece9fc1cbddeb93567ad83fab4fcb6f4b6e56b0499785888c8685f92f3","0x55678cd083fcDC2947a0Df635c93C838C89454A3",false,false],["arbitrum","uniswap","UNI",18,"Uniswap","304402201df92820021fbfb822a2f47816aa424d1e267c06952c5d5fab5d70bb9ba57b2902202345732f3fe479ed5d847a38fe20b9d431fc34b17e540cde2b1bb10691039bdc","0xFa7F8980b0f1E64A2062791cc3b0871572f1F7f0",false,false],["arbitrum","universal_eth","UNIETH",18,"Universal ETH","3044022045c3fad2acfa59a07c4ea06d5f8a402524e84a5ac9fd24d9b3c5ae49c9d440c6022024a4dfdb18252207c113d2dadb70a894da0c44c122c7fd5e4d575ff35efc4b25","0x3d15fD46CE9e551498328B1C83071D9509E2C3a0",false,false],["arbitrum","usd_coin_(arb1)","USDC.E",6,"USDC (bridged)","3045022100fe82f15a878903237676d495c58b542a1e4afd24f5364ab9b38af1af43c47c27022037d999f4f14fe4c53814565ad064a203b3fe958bcacb51c117346636dc6b21de","0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",false,false],["arbitrum","uxlink_token","UXLINK",18,"UXLINK Token","304402205d20d81fb16a90d188ed1d2c14fce93e6d2d3b7d47d0b9b3bde114eb68013e950220365a3c6b7faaa99d9d2de997008baf3658b6f2cae4519f685feb58f63cfe8fba","0x1A6B3A62391ECcaaa992ade44cd4AFe6bEC8CfF1",false,false],["arbitrum","venus_xvs","XVS",18,"Venus XVS","3045022100d3c83b37f628af710334797ede7de57663531c803c61c89e9560b10ec1d1e5d402200f823d409b3b17b53c637a6b82ef1b1241a3b14263a2b6775b70420dc3991dce","0xc1Eb7689147C81aC840d4FF0D298489fc7986d52",false,false],["arbitrum","vicicoin","VCNT",18,"ViciCoin","30450221008b2e0e59c421145150afe9641ca331e6eff1c2f34fc1b533fe64effd7cfb86e402207efde2b1fdc14d84089ef3705a43674530f862fda473266c6b106d314e78d9f6","0x60bf4E7cF16Ff34513514b968483B54Beff42a81",false,false],["arbitrum","weatherxm","WXM",18,"WeatherXM","304402206d5e3245c898c01438c11b79e51af090e9e242d760e5e167866401f1e7bc854c02201f7d47e3956ac9606220d37b77f5d75845e53d8a74c36b2a7a94285d55eb2cca","0xB6093B61544572Ab42A0E43AF08aBaFD41bf25A6",false,false],["arbitrum","wootrade_network","WOO",18,"Wootrade Network","3045022100da21e8e235e5e603951e6c5a919eb90bbb22d7b9735ae67cd9c68d29e99e12c00220796c81f6ae9b438af74ed00103d1fde5bb3ef020a7f5a974f5303a744b066609","0xcAFcD85D8ca7Ad1e1C6F82F651fA15E33AEfD07b",false,false],["arbitrum","wormhole_token","W",18,"Wormhole Token","3045022100ecd1dbb6c9cce3d4b66b74db10df94b418050f3e9f5fe9cbcb149d48ecad8c6402200f709e3f9ff358ee8c1334f0faccb4397e9a9833a8115aa9087b524a59119a1c","0xB0fFa8000886e57F86dd5264b9582b2Ad87b2b91",false,false],["arbitrum","wrapped_btc","WBTC",8,"Wrapped BTC","3045022100849bfa49d4a67d85c36f9a628d0fb0a5faff869da00caa58f563d8859420850102201c27dbbbac2f602b6f9f9e34ec629823ed151cd26cee6ec26cdf05bfd09c146c","0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",false,false],["arbitrum","wrapped_eeth","WEETH",18,"Wrapped eETH","3044022076eb96bc073b613906302ad57723d658164f619d9f90df14e7099babed9b8e76022077f73123bef697cc78445443209c1e0d83665dce17db34cc6fb062b86e930738","0x35751007a407ca6FEFfE80b3cB397736D2cf4dbe",false,false],["arbitrum","wrapped_ether","WETH",18,"Wrapped Ether","30450221008f9b6557d2c481eb97cf2e34779a3e0ba5cee142b92ce259e80709d7f2c3c59c022035573a9bb0a202d047dbe09b9816328f86b8d97dc319b3bc61f3470d6bf857a6","0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",false,false],["arbitrum","xai","XAI",18,"Xai","3045022100b3fc7e1a69af554a8294db5b162290af1bb2732f14b9c83d04b64b6322206d2502207200319201caab2bef5bd08c48aa2dada5f5a0b4eb05153a7a2e34e04b4c78fd","0x4Cb9a7AE498CEDcBb5EAe9f25736aE7d428C9D66",false,false],["arbitrum","yearn.finance","YFI",18,"yearn.finance","304402205e5ad6b14059a9a238365631854e1f673cad4cc48d0c0b6448b7926185e538790220472ed7e2f861d4ef53c061079d93f03ba164d350c40b30b0ab9cd63f3725db02","0x82e3A8F066a6989666b031d916c43672085b1582",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/43114/erc20.json
var _43114_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["avalanche_c_chain","0x_protocol_token","ZRX_E",18,"0x Protocol Token","304402205c1fcfbfe0a252dcd28dcb34cc3fce13d6487ab84993dfc6181b232423d1bc4e0220640026557ecdd385840bf19a75787796a16adc5d8f48ea2a95eec3ed76b1f553","0x596fA47043f99A4e0F122243B841E55375cdE0d2",false,false],["avalanche_c_chain","1inch_token_(bridged)","1INCH_E",18,"1INCH Token (bridged)","3044022009162ac131072ca2beb5dc936c99cfe919c29465458fe0cdd90838c151f16dc802200d8a4bee7c38e91216c8cd407e9a40059abb1f7b9f0bd83551686a814b070e93","0xd501281565bf7789224523144Fe5D98e8B28f267",false,false],["avalanche_c_chain","aave_token_(bridged)","AAVE_E",18,"Aave Token (bridged)","30440220746642014c946b988dd52f492db4123d54cb0558ff40f180010b53d150deaf1a022074cd085d2ea0c53f8c4726f36efd4670759418200415f5c8e3ebb84a94624711","0x63a72806098Bd3D9520cC43356dD78afe5D386D9",false,false],["avalanche_c_chain","aleph_im_v2_supertoken","ALEPH",18,"Aleph.im V2 SuperToken","304402201b4681a56fe99c043bc15e7c5fd34aa4a0dd37c991042588f1344faaef563f1c02200b9726538d7823d597b71fafcea813d7774297f2fefbc8da39a6100163552cc8","0xc0Fbc4967259786C743361a5885ef49380473dCF",false,false],["avalanche_c_chain","allianceblock_nexera_token","NXRA",18,"AllianceBlock Nexera Token","3045022100e09c3c42a721eea9509a933e061f85930b4373f5729d6331fb6f9eb61dd618aa02206cf545b7266887f381ab63206206a0b12cdf47143107dceff0dbb8b29cfb012f","0x644192291cc835A93d6330b24EA5f5FEdD0eEF9e",false,false],["avalanche_c_chain","alphatoken","ALPHA_E",18,"AlphaToken","3045022100efa1ac908f97f0089af93730bd2193be45fd5e3f3e163e2ca3ee3938d339cfab02204b2a7d6dedff5bcfc836049d030e8efef61e9402c89bbb3fa4a6358c00b3a560","0x2147EFFF675e4A4eE1C2f918d181cDBd7a8E208f",false,false],["avalanche_c_chain","ampleforth","AMPL",9,"Ampleforth","30440220164c371cff8e30efc76ef149a58471b7ea8747e5e8f3974319e6223ee9a97d98022076f5f7f573385bb6484f0e49fae32d449ee8378c254448ab7c6fa6b73390a8c9","0x027dbcA046ca156De9622cD1e2D907d375e53aa7",false,false],["avalanche_c_chain","ankr_staked_eth","ANKRETH",18,"Ankr Staked ETH","3044022006ea5833ff908c07d5a78f8e440cf20845d22c7539b265f03f0b675492877407022031c23c31ef91bade4f969960b5ca34d134cd3d254cd7c11f25c6a5f7ff7bd883","0x12D8CE035c5DE3Ce39B1fDD4C1d5a745EAbA3b8C",false,false],["avalanche_c_chain","any_inu","AI",18,"Any Inu","304402201948e2d1a7aa54c3f3d11a7fdd65af294dc1ed25dafd1ceecd5288083db001590220362e092558084a3e8fcd100fa1c309b1fe77c878c404201c9fe4264dc62c1403","0x2598c30330D5771AE9F983979209486aE26dE875",false,false],["avalanche_c_chain","avalaunch","XAVA",18,"Avalaunch","304502210085ef15081005ac45347f5907309525d091ff83a5cf484bb16315071df67b9ed502207134952c9fa7f01bc3976a45694badf395b1a1690afb39d54eb49419046b34b0","0xd1c3f94DE7e5B45fa4eDBBA472491a9f4B166FC4",false,false],["avalanche_c_chain","avax_has_no_chill","NOCHILL",18,"AVAX HAS NO CHILL","3045022100a4e14aa47f08e69c0f52018b5dd0a4025f14b27f228732d4cba226d7dbdd897b02201cd22c94f0e4b89172e238506027256d6e34b5f235264bad426382bacd1a2461","0xAcFb898Cff266E53278cC0124fC2C7C94C8cB9a5",false,false],["avalanche_c_chain","balancer","BAL",18,"Balancer","304402203251977af19d3eee70ab8d58007c4ae549b29e544f9c15ca814778ca44c0da79022023d6bb566401b431b325544da66ecbe1a63e0b674d345a332d2815aa383d7277","0xE15bCB9E0EA69e6aB9FA080c4c4A5632896298C3",false,false],["avalanche_c_chain","basic_attention_token_(bridged)","BAT_E",18,"Basic Attention Token (bridged)","3045022100e86637c53c767f00b55dee628bca8594e6fd81880499b850bb89573f9d8fc5be02205db570743556d321ab90fd3237b37f5926a04a1b4de6a9f52c4817ca0a990c57","0x98443B96EA4b0858FDF3219Cd13e98C7A4690588",false,false],["avalanche_c_chain","bavatoken","BAVA",18,"BavaToken","304402207946e03b51d6270dc8a9526fef7a9a28bad182b9fff9a8f851321ac5b52de374022047192d6e279458d1a308e7aeacdca27e9901c70d616e90c5b1fd9302e6af4fd9","0xe19A1684873faB5Fb694CfD06607100A632fF21c",false,false],["avalanche_c_chain","beam","BEAM",18,"Beam","30440220764825e1ed74a604c932355dfd89cb0b9d694d3c1f5ec82c3c054dea69a86c3802202025a5c8e7a76d7ec41d535012f5fbe0beed718fa7d4a1b99de87caa21419a33","0x62D0A8458eD7719FDAF978fe5929C6D342B0bFcE",false,false],["avalanche_c_chain","benqi","QI",18,"BENQI","3045022100dbe42489ce3662f5324d4fba76bc15145bb5f2bbc5f8542782c2fea4fd382d49022050d3a6b7cb16f115c6bcae7ef40ed73716831e528976803d733fe4b0944af2af","0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5",false,false],["avalanche_c_chain","beta_token","BETA",18,"Beta Token","30440220308fcea352dbb5e7dffdc80308da93f140e2a66fbecbe42c7f6df47e8b409bf20220051dafe679aff6e7ae2c3f0add4e6035f2b6ac8217209d9a85e60b226550c554","0x511D35c52a3C244E7b8bd92c0C297755FbD89212",false,false],["avalanche_c_chain","bilira","TRYB",6,"BiLira","3045022100b763296e1833342245b7f4002592d2360d5fd6e8083ea19cd9df1453daf4b2f80220105a59fb87b6f04c7d50797b1e645a38cebdbd7578d9e64d2d6fac1b9158f0cc","0x564A341Df6C126f90cf3ECB92120FD7190ACb401",false,false],["avalanche_c_chain","bitcoin","BTC_B",8,"Bitcoin","3045022100fd3f3d1364cad27fa78503b8aeef15687f9739dbd4c7fdb5e3bda8b006397b4a02203a2cd48deaaff4515fcc00a0e32ab371819c404e1df24def776339b390c1289f","0x152b9d0FdC40C096757F570A51E494bd4b943E50",false,false],["avalanche_c_chain","busd_token","BUSD",18,"BUSD Token","3045022100a759820c4d8f385cff02d545c4a4b35eda76aaab777b563040df096c37d91c6f0220691a533c2a8c94b79bee30ab877989aaa955b353542574914c5371b2c593c6c0","0x9C9e5fD8bbc25984B178FdCE6117Defa39d2db39",false,false],["avalanche_c_chain","cartesi_token","CTSI",18,"Cartesi Token","3044022049abf790ffde686ba5b58dc046c1335fd0cef71b479360c20d9242a0d02a49140220036ec64b04a6918c8aaa56464ac5f669348f1c6d3d6f843fe779353fd22c8d7f","0x6b289CCeAA8639e3831095D75A3e43520faBf552",false,false],["avalanche_c_chain","chainlink_token_(bridged)","LINK_E",18,"ChainLink Token (bridged)","3045022100e3b237319ddbc42d5368ae63e0bff6060637c9aa9432f9e5a5db534fef8a95890220652d3f651f019fd3a597d5f7b5788fdae904cfaab4e257ff8722e3ff5c3eafef","0x5947BB275c521040051D82396192181b413227A3",false,false],["avalanche_c_chain","colony_token","CLY",18,"Colony Token","304402203790f33c934e5e458076874193561a9f6e82ec0ec9d3fce5eded07ff8b8117d202205ac9658f25c8c6a0fb4504d7ac6a13ab1cbafd534a541e6b917c901f2d3ff7f9","0xec3492a2508DDf4FDc0cD76F31f340b30d1793e6",false,false],["avalanche_c_chain","compound","COMP_E",18,"Compound","30440220272125dbedcbc781e00f0ac12f533c03165335d79afc5a9d8b57a80228579a70022000ec5c8dc24f6cf3957de6092530b78944ec30a23451ccc7c5078feb576df50e","0xc3048E19E76CB9a3Aa9d77D8C03c29Fc906e2437",false,false],["avalanche_c_chain","coqinu","COQ",18,"COQINU","304402207e9025b826ec416a484ebc5551baa8ee49288319d46e40a492961716a7aa963d02202dd6b0bc5d842a297eea31f7a4060e3f252805b8c883834e71a1695d00732df5","0x420FcA0121DC28039145009570975747295f2329",false,false],["avalanche_c_chain","dai_stablecoin_(bridged)","DAI_E",18,"Dai Stablecoin (bridged)","304402202c37699018984cc99cd9ed586be60202a32f7153096299f8278810c5aeff568f0220138744c8e004ba43f570533462177002faed34badd7cb086e026d84a3bbe3765","0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",false,false],["avalanche_c_chain","deapcoin","DEP",18,"DEAPCOIN","3044022100b182add94b7c2a3add64255adbd36ea2a953a07e8ae29c80b37c3803438d2e46021f08303966c4a30df1394f026f04f7885f6f585ba4e4cc501094a77575b003a5","0xD4d026322C88C2d49942A75DfF920FCfbC5614C1",false,false],["avalanche_c_chain","defiyieldprotocol","DYP",18,"DeFiYieldProtocol","30450221008a217bbc0089a1ec452b9f80ede9069e76920080f8d85b65da94c48f42a7c07002200768028946546643af42d000f9511f9468b29ecc9a630a47f83a78bf5e7bc876","0x961C8c0B1aaD0c0b10a51FeF6a867E3091BCef17",false,false],["avalanche_c_chain","deltaprime","PRIME",18,"DeltaPrime","3044022007a9a6822f29e302491d9a0ecc5b42d6e8cf722ac5612697783f899298d5f7df02203b2c0b4d4d93898e1ee1ebfa5615ba0730eaaa86fef3c3a85dbd6a79d9905b25","0x33C8036E99082B0C395374832FECF70c42C7F298",false,false],["avalanche_c_chain","dexalot_token","ALOT",18,"Dexalot Token","304402200de7ebf57dfe7344dbe5302991c088a67b9e640059b45e1c4d46a5d2b9807fe50220522ee991c307b3a5590bfdef8bb25003371c160ae1db4c64bb1f42ffde2ea609","0x093783055F9047C2BfF99c4e414501F8A147bC69",false,false],["avalanche_c_chain","dextf_token","DEXTF",18,"DEXTF Token","304402206683921b1b04a3611e107119d822962695189eb9c7c79fc9c441193b7f430a31022007767b6d3364370ce4bc008901e719b0b059a9682721b48146d6defc359af827","0x03E8D118A1864c7Dc53bf91e007ab7D91f5A06fA",false,false],["avalanche_c_chain","domi","DOMI",18,"Domi","3045022100fb2c79c6c23671d5cbae832690e09734bcde240a6e3fcf2796b493c54b4de1bd02202cd1fac7ee52172dfbdaa28e316a7db34c7ae46b1e454d209cd17aff907f34ae","0xFc6Da929c031162841370af240dEc19099861d3B",false,false],["avalanche_c_chain","dua","DUA",18,"DUA","3044022002286cbd3c3b3cb1e3ab0b266a26b7ee573ad3bb85b3089ea4fdbb2dc9de94c80220238ae0e894b869e8e52ab89e40c22c2ae1a75da7519a3241a0df294c72a3c8bf","0xb418417374fcA27bb54169D3C777492e6Fe17Ee7",false,false],["avalanche_c_chain","euro_coin","EURC",6,"Euro Coin","3045022100b6cbe7cae5bdfd96abdc35957ca62e52f5a7d37c01236e2a85b4397c299e465a02200910c126f18fde7d4df85241203d476861784ee9b1a7821cfa614184868dc107","0xC891EB4cbdEFf6e073e859e987815Ed1505c2ACD",false,false],["avalanche_c_chain","everrise","RISE",18,"EverRise","304402206e6ecb35d9e530487013b5e623f055a91429abeb35a1d1ea8e1076866b7c834f02201eaa62709b1aa43b93b9384bdab4b6d952274e1a14b79182407228cf118f8dbf","0xC17c30e98541188614dF99239cABD40280810cA3",false,false],["avalanche_c_chain","ferrum_network_token","FRM",18,"Ferrum Network Token","30450221009aafb577c00f3a233e6377b9fa8c70416d94cfe221bbea87f64bb621b238e81f02202679b5e9789bbd3cb8a6ed14b56b796c2b5510faba97ef4d8f24258795a904a6","0xE5CAeF4Af8780E59Df925470b050Fb23C43CA68C",false,false],["avalanche_c_chain","frax","FRAX",18,"Frax","30450221008888c0a0286c70424af5cc87626334986b209eabfa1e586a5743f70f519dbfdc02202338d926e5caa6080c3fe84f0ac43ae58f2d095eb4b0ca0e3e24e8e873db926c","0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64",false,false],["avalanche_c_chain","frax_share","FXS",18,"Frax Share","30440220513eee5516f47591a0ee37625d1cb96a47e3e0ea3338ccc15f253a71cfca307502201ccf205f45ae2101d7265b9db196d716ac79fe058c7e3f44acd8b24734060bf4","0x214DB107654fF987AD859F34125307783fC8e387",false,false],["avalanche_c_chain","gau_token","GAU",18,"GAU Token","3045022100f8389bfc6a6919c0ff6eee5ac2d00ae52de56ac12ef6b7d0e13d9d74cee7d3260220489d02cc20706223f5b34d77dbc88f884e6782b905188f98523132d84938080c","0xCa8EBfB8e1460Aaac7c272CB9053B3D42412AAc2",false,false],["avalanche_c_chain","gmx","GMX",18,"GMX","3045022100c05bcaf69da7dee49adb7077bbd8c68ed1d7c82f34ef5b1156feb83065343e850220754c310e5f578612c4b1f3e0f6740692eaf26142d2392b26e478d06982bb0a13","0x62edc0692BD897D2295872a9FFCac5425011c661",false,false],["avalanche_c_chain","gogopool_liquid_staking_token","GGAVAX",18,"GoGoPool Liquid Staking Token","3045022100a2f246aa1d9dbbe1e8479032d5f579faf08c7f68e3eed277e3eaf4be0ab190d802204c2a4d1782ca6f38b2155c1bd02ded034dc9b0e1126dfe02c453f99d554f06bc","0xA25EaF2906FA1a3a13EdAc9B9657108Af7B703e3",false,false],["avalanche_c_chain","gogopool_protocol","GGP",18,"GoGoPool Protocol","3045022100c268e875dad89a23e65186125df13079cab1889520fa46a5a6b51a4d42c322ce02203533715450a9c0fac5566e7a1e27511b396fa183e81a871acae9c23276fdd244","0x69260B9483F9871ca57f81A90D91E2F96c2Cd11d",false,false],["avalanche_c_chain","graph_token_(bridged)","GRT_E",18,"Graph Token (bridged)","30440220575a180223255759dd9841513da9bf5877988ad5c03e2c1aa779be71a03cefe202204b58ac5634b3f93e3ec6e5ff869d37e1f17a439df065334eccc3488baf626eba","0x8a0cAc13c7da965a312f08ea4229c37869e85cB9",false,false],["avalanche_c_chain","husky","HUSKY",18,"Husky","3044022002b758926c39e08e77b828dc41abbfd27eb5af5f589bac43e471bb10356bb46702201078d68d005cb8a00ed5f952e7d48572d23b9bcce7072e624c056b985a600e6b","0x65378b697853568dA9ff8EaB60C13E1Ee9f4a654",false,false],["avalanche_c_chain","impermax","IBEX",18,"Impermax","3044022069a7456987095e585d95f9a2fba6dd3a0a75e10731fcd44ca344f70c2316bf02022064c6fd75174f25a74835c4af118abe63fa0849a57ca04815798a045ca032fefd","0x089d3dAF549f99553C2182DB24bC4336A4F0C824",false,false],["avalanche_c_chain","impossible_decentralized_incubator_access_token","IDIA",18,"Impossible Decentralized Incubator Access Token","304402201ea5f1a0a67fbdf0ef8b3dc5c7a5649a4cefc566fb4671dfad808e4e0169e85f022028413fd6dc3b5009a0cbdddb90aca3605496e6864818f81b305aff0bfa3dce0f","0xfCAF13227dcBFa2dc2b1928acFcA03b85e2D25dd",false,false],["avalanche_c_chain","insure","SURE",18,"inSure","304402201ce9aa20a60bd59a8579d05407a60a4d42d0a12db2a980f4302732e089ea8f6802204d594a060573824ee17d0bd86120ad5f9046de5ead0e7071e60ee92d5a3281d0","0x5fC17416925789E0852FBFcd81c490ca4abc51F9",false,false],["avalanche_c_chain","joetoken","JOE",18,"JoeToken","3045022100d58b4dc12e752ddb88da671433580b3ed1a3781ae3221fc440e4d3b24cf689c1022008df4e4468fe39590656b6bd19fd906f4e54ee783397b23818641240dbb0bba6","0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd",false,false],["avalanche_c_chain","kimbo","KIMBO",18,"Kimbo","3045022100945bcbb4a4a85d6d1e9fa51b25670398f527334b16b6dd5ae090cf2f9e191a66022032cce181a95438e01c7bf3ae6e83a3521b27615d7120e305d60028284dbf49be","0x184ff13B3EBCB25Be44e860163A5D8391Dd568c1",false,false],["avalanche_c_chain","kyber_network_crystal_v2","KNC",18,"Kyber Network Crystal v2","3044022025d8b849087f01ccbe85c40d6daa6fecb8de56e5fea58916e028808209b0a71c02201b02348bc50acc14869ce120803fb5d6e06d74beda832d53dcea11c522edf45d","0x39fC9e94Caeacb435842FADeDeCB783589F50f5f",false,false],["avalanche_c_chain","layerzero","ZRO",18,"LayerZero","304402206cad320c3f9edc072a5ea1dfccdf9537159c40ce723ef3a9397fe036c044afb302204950bfac0dce89f553989352c50a6a34cc2bc03f50017046905b6ec4bb818f31","0x6985884C4392D348587B19cb9eAAf157F13271cd",false,false],["avalanche_c_chain","maker","MKR_E",18,"Maker","3045022100828109f162eb4b7c8fe63d4d79c160a21f712911885ca2636092458aaea1235e022020277c074c6fd4ee41fe0ab0628d4cff01113ad2a365f7df4eee9005aafd694b","0x88128fd4b259552A9A1D457f435a6527AAb72d42",false,false],["avalanche_c_chain","meld","MELD",18,"Meld","3044022030d38983b95ea4488d4f692005aa2518cde7eaca75284b2dadb0a0ee2ed72bea02206ba4292504b2e74fbfe53aa2bcb26d701eb7fdfb857a9a9d52b87149f383394f","0x333000333b26eE30214B4af6419D9ab07a450400",false,false],["avalanche_c_chain","miracleplay_token","MPT",18,"Miracleplay Token","3045022100c4bf1f216d3e71557a4bf4249c540d3c2968558ece33a57fa93f4a83221dc7cf02204789f0b008e85c2fcac14bbd5492114fe40945589cdca8aee62b0e545b17a41e","0x422812fC000E831b5ff13C181d85F34dd71380b3",false,false],["avalanche_c_chain","nuklai_token","NAI",18,"Nuklai Token","304302203a8bd6515fcac5e93a475d0faaf39fb503cc5ea3f8d90c0ae6f4b8c5c30b4036021f318961d005bbd37f3fa9d9bfe14e505cf4e48b2a396db35d57faefcf548f34","0x5Ac34C53A04B9aaA0BF047e7291fb4e8A48f2A18",false,false],["avalanche_c_chain","numbergouptech","TECH",18,"NumberGoUpTech","30450221008fe705ee235656e3c65e7289c557ce2ae816a89e8f30a2d64a4d3470cc377e1702202ddff37cb6c167cb736c4e02ef2e41a5fc3799912b6ce807686a564b2b458db9","0x5Ac04b69bDE6f67C0bd5D6bA6fD5D816548b066a",false,false],["avalanche_c_chain","nya","NYA",18,"Nya","3044022024ef88933240ed8aca8709907c1913a0207a5b28f57b182e5e163aabe5e4a3aa0220458832a76cac9ede55266944436abe7a54e10af374dee60c22699a76f671bb92","0x38F9bf9dCe51833Ec7f03C9dC218197999999999",false,false],["avalanche_c_chain","osaka_protocol","OSAK",18,"Osaka Protocol","30440220550873af711340685d79cade1d821f1dfbaeadfa6e5e9fb63a3c13c1330ab69202206d558f79aac1d4dd71701b3b8a28c7a73eb2b060a3743f2185f3db07589eeb4c","0x96E1056a8814De39c8c3Cd0176042d6ceCD807d7",false,false],["avalanche_c_chain","ox_coin","OX",18,"OX Coin","304402205eb1ff67760f4e4e0948107895958989152ab6a5f1793d07bcb71b4a72fe38c60220285fd4872c26f012c28cf39e768f24067bf9052175f85a0a038ba1b43dca9ddd","0xba0Dda8762C24dA9487f5FA026a9B64b695A07Ea",false,false],["avalanche_c_chain","pangolin","PNG",18,"Pangolin","30440220318ec991397f9e66e40c1094bda6d728c41d58a58eda52c92a28869b283712370220047a31938232e37b0affa6a7782c18863aaa1f0dca859588359b7ce82caed12f","0x60781C2586D68229fde47564546784ab3fACA982",false,false],["avalanche_c_chain","pointpay_token","PXP",18,"PointPay Token","30440220420d93e8b2c44144bc701761702e08eebcd36c453a34c1a2c39e8cd566295a1102203090e5f24ed084766ae516a31a07bd5ed6f6afdaefc1a47ba5f46d21918c5665","0x15FA5d3DBD11a831b72B92C1705BC9F801E233CB",false,false],["avalanche_c_chain","rai_reflex_index","RAI",18,"Rai Reflex Index","30440220540afd3a449b03ec575dcf3b14e53b110e97006cf2525136c0c2f9e1e3737e1c022002ff1d54de509ed3dd0747cf4ac2deea43c6b6cb62be163c7edcf59a80cfba10","0x97Cd1CFE2ed5712660bb6c14053C0EcB031Bff7d",false,false],["avalanche_c_chain","raini_studios_token","RST",18,"Raini Studios Token","3045022100c5f16361205002c23450151431500001513bf01dfb8ded5f1eda39fc6f6024c202202811dc6ed64864501eba53a80815062cf9185dcebb27bd79de181fa81aa5fddb","0x23675Ba5d0A8075DA5Ba18756554e7633cEA2C85",false,false],["avalanche_c_chain","roco","ROCO",18,"ROCO","3044022073772e5a2cc1c1b0d492c0ffeef4b84d8ff64bda65a61027d4c709d705e18cb902200a52894003170521d5f9659ee640abcf3c43a125b004b4b59a6cc4e03db44be0","0xb2a85C5ECea99187A977aC34303b80AcbDdFa208",false,false],["avalanche_c_chain","shraptoken","SHRAP",18,"SHRAPToken","3045022100d6c55d3e045a4e5e720b0f56bb0e019fa889b1ca771c2268441439887971f52d02202c0a2a82607ab826cc77e1fd2bb0016160182e3b0e3ffe2cc092e250a9c0ddc2","0xd402298a793948698b9a63311404FBBEe944eAfD",false,false],["avalanche_c_chain","snowbank","SB",9,"Snowbank","3045022100e041961163469e7b4baf60bfbfa910598f74cd6ad5158f00c47da67dedca73ed02204d26926497aac179133556cef5317850225ede557cd3b8c513c41032dff1a22c","0x7d1232B90D3F809A54eeaeeBC639C62dF8a8942f",false,false],["avalanche_c_chain","spell_token","SPELL",18,"Spell Token","304402201e6cecc527477ee3b6b034e0171cb0b9cbfa7912f10bbf19a55f11ab5587109002201c8a2f26c27f3980fb2eb775dd66ab35e5a9dfe4db264e02ac81e7717dc283a3","0xCE1bFFBD5374Dac86a2893119683F4911a2F7814",false,false],["avalanche_c_chain","spookytoken","BOO",18,"SpookyToken","3044022006bcb9b7e38c7361d270a039b5314ad21cb6989e109d0390d7644ffdadab0ebd02206621d7e945f1cd7fc2880ed19fa3bae9829bf5565fa107fdb19173f269f976f5","0xbD83010eB60F12112908774998F65761cf9f6f9a",false,false],["avalanche_c_chain","staked_avax","SAVAX",18,"Staked AVAX","304402204036f65d14c20e82c159dc4dbdf624e3a9a9873aeee9429ad33f800c65e63a9c022037573c217cc4491c5b9b4697f7981372df955ffed8d3603161cf6135b0d06f83","0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE",false,false],["avalanche_c_chain","staked_frax","SFRAX",18,"Staked FRAX","30450221009fdaf75ac1188bd0ab8c47ee0b7888b6461d945eec5120c80c2c57c8e3c2b17c0220560487a1a2facbee102d86a563ab22def54bfaa6c5d349d4d1e54bde59698853","0x3405E88af759992937b84E58F2Fe691EF0EeA320",false,false],["avalanche_c_chain","stargatetoken","STG",18,"StargateToken","3045022100b5fe5442c5051359ef0a2da9f725041094adf0c20f25c7c1bcfb22567883b85602207a84270029b1ec47d30c155f4e4adc7f8f4dbee028b9475ad06e9499f91e8b9f","0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590",false,false],["avalanche_c_chain","step_app","FITFI",18,"STEP_APP","304402202c681ceec9e95d47f04485dd3e034656ff15c22d1911c03a482b354d0051218d022068b9d73ee4233a5d9fb20af76342414ad9fdb008b1c92f66e4c4d38306109700","0x714f020C54cc9D104B6F4f6998C63ce2a31D1888",false,false],["avalanche_c_chain","sushitoken_(bridged)","SUSHI_E",18,"SushiToken (bridged)","3045022100d2c4eacd1e6a41366a6d6809a027a735e9c4b5f428c27dfa0663c6e0b5960f3d0220556e28fa68def06674b7482e7babddc485fee9ce09eeb8cf827acf9a1bf52c4a","0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76",false,false],["avalanche_c_chain","synapse","SYN",18,"Synapse","3045022100af53c9cf1844df8eee94a891ae41a1ccccdfb403e42bce35a88497cc795270a102207988056a5f000f0f1a6cad3289d7fdc913ad9f774cff06462713312dd05dcadb","0x1f1E7c893855525b303f99bDF5c3c05Be09ca251",false,false],["avalanche_c_chain","synthetix_network_token_(bridged)","SNX_E",18,"Synthetix Network Token (bridged)","3045022100a24499aaa4dacdc378f71d984ce286ce1dae679fcbe59a32d5313a6ae5c06bc2022052e6434c6b8b631a51f07107fa050b9bbbf863bf1ba73eb379ab44e153dffcf9","0xBeC243C995409E6520D7C41E404da5dEba4b209B",false,false],["avalanche_c_chain","tarot","TAROT",18,"Tarot","3045022100c3b328d174bc3049f4e1dec0957ccb506db832b58136711a8f8b4fa452aaa4c10220709ac78671916afa545028f2432f958c84468e96f3611b87e7a892710e95fae0","0x5ECfeC22AA950CB5A3b4fd7249DC30B2BD160f18",false,false],["avalanche_c_chain","tomb","TOMB",18,"Tomb","3045022100ea4992e10071113a9dffaf6983453265d5b5026921ac15055ba948060e1b6fb502202e5f6d1fed4b41a90b7aebd37efbd4c8efa648adeb75aab488a5f9a0edad413a","0xb84527D59b6Ecb96F433029ECc890D4492C5dCe1",false,false],["avalanche_c_chain","trueusd","TUSD",18,"TrueUSD","3045022100ac70b82ab4607d816822ec1df4bd2741f977f8772b09a914b8919b1617df33d80220319aef968bda8c9a713b2f07778eed6b70a5dd1f73f7b603cd8e91c5f590f5bf","0x1C20E891Bab6b1727d14Da358FAe2984Ed9B59EB",false,false],["avalanche_c_chain","trustswap_token","SWAP_E",18,"TrustSwap Token","304402203010b703534727632505bcd9b0bdd3d2e2bb7f908f0f9e2f489b3b94c4f006aa022029a3a0ab0e830c8aea11811bf1e704005d8d970ca0485287ece110bb9b3afaf4","0xc7B5D72C836e718cDA8888eaf03707fAef675079",false,false],["avalanche_c_chain","uma_voting_token_v1_(bridged)","UMA_E",18,"UMA Voting Token v1 (bridged)","30450221008b88b5fc517acaecc6abdc2918106462a0e56902fd463b4d3f6b359ead7995ad02200a8c55e2ebea6b3771d12084886d440c77c01824c942ae6b239c089951637471","0x3Bd2B1c7ED8D396dbb98DED3aEbb41350a5b2339",false,false],["avalanche_c_chain","uniswap_(bridged)","UNI_E",18,"Uniswap (bridged)","3045022100876d6c5e1c63c6fcfc8281f46137bfa8bcc0f379a95cce7e0d0fa8a501fb4da8022009f4343e4036f0f64b2967f392ac7b3d279e7eae8310809e3205b16da89528b6","0x8eBAf22B6F053dFFeaf46f4Dd9eFA95D89ba8580",false,false],["avalanche_c_chain","usd_coin_(bridged)","USDC_E",6,"USD Coin (bridged)","30440220126f50b9a551c14fae7828923ca593eaccaf9795007756847fb47244161ffaf502204c242476a86af5e9ea33c89c60c6c0930c6b3874189db3b88240cf043a15acdd","0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",false,false],["avalanche_c_chain","usdd","USDD",18,"USDD","3045022100aac2f3e59c3d562bb56555ceae7d6052cd67f4fd8843140338dfcac0f19c4f0802202a7cc83b6bca4d6059b8587bd63b35f3a19b04d75dde3d325fc0562c92edfd62","0xB514CABD09eF5B169eD3fe0FA8DBd590741E81C2",false,false],["avalanche_c_chain","vicicoin","VCNT",18,"ViciCoin","304402201acab677c3eb0b8177448ea707e4c73115d6e978731116035aebb47044a258ca02201b4a64b7daf025f949caed34182a189c0fdc23664a845e8307101b17c527e234","0xc6BDFC4f2E90196738873E824a9eFa03F7c64176",false,false],["avalanche_c_chain","vnx_euro","VEUR",18,"VNX Euro","3045022100e3978744a8da6a435f993a1e541ff03e8adf17e4f5f2270697d6cf907a81065302202d65a05c19f69abbd52223a83be9a7386a42faa37aa79755282631e994dbab9e","0x7678e162f38ec9ef2Bfd1d0aAF9fd93355E5Fa0b",false,false],["avalanche_c_chain","vnx_franc","VCHF",18,"VNX Franc","3044022071aa3db0de3676b3e4ab9898a34253b857e8080a95b84289046bca5f3eddeb4202207039f406025ee051de7365df8e1aab634b6617dd925a687ee33216542bdda138","0x228a48df6819CCc2eCa01e2192ebAFfFdAD56c19",false,false],["avalanche_c_chain","w3ull","W3ULL",18,"w3ULL","3045022100925424b08343550bcca191d0190c0941dde9b8aa27f50b352c2dcc36eb7af1750220361350b704e5dc5dbd0042e831b01a017364657dfd0ff345a96087781c335d2a","0xa77e70d0Af1Ac7fF86726740dB1Bd065c3566937",false,false],["avalanche_c_chain","wagmi","WAGMI",18,"Wagmi","3045022100d95c85200d7efe209d13f3082564800409f87472ecfcaf455c52830923169b6c022018f3b6b5083a8a1ee34d2fa7add6c92f13e5134cf5b5e986406b47819e41826b","0xaf20f5f19698f1D19351028cd7103B63D30DE7d7",false,false],["avalanche_c_chain","wirex_token","WXT",18,"Wirex Token","3044022056996914409089cc4b36a17422b143476c9e7549b3e8d712a460b40df7618f8c022077c508d1a6c20db89b125781c9743284906781b9e30f185fbe39c757f6453ae0","0xfcDe4A87b8b6FA58326BB462882f1778158B02F1",false,false],["avalanche_c_chain","wootrade_network","WOO_E",18,"Wootrade Network","3045022100ff92a47ba2e848cfdc76051776e5f324bb8c69b182b9bc77629085ddf0373501022007579c907c7a02ba5a5ea11b8785e152145586f068dc628f92e2cdc7482112c0","0xaBC9547B534519fF73921b1FBA6E672b5f58D083",false,false],["avalanche_c_chain","wrapped_btc_(bridged)","WBTC_E",8,"Wrapped BTC (bridged)","30450221009b2d0dd9ca6c5bf37f7e7b55d54ae9b1295b947d59415be1b3b6ac9a409cedd7022036b13c14d828884fe88280fbd55ef21f6f07081b5385547fc275f9e3ecc3053b","0x50b7545627a5162F82A992c33b87aDc75187B218",false,false],["avalanche_c_chain","wrapped_eth","WETH_E",18,"Wrapped ETH","304402207db80ef9807b5aa1d307ef65c7f8ec2ab2d608d813b1760857bec95723b29365022060996462ee3dff7881f2bcfdef61b9ab8e893fd332cc890b6fc915ce7017e842","0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB",false,false],["avalanche_c_chain","xana","XETA",18,"XANA","304402206f6fa18638fcec132cae7c4e6bd8c6b7a9bd2e3f86f37e6e1760176c0adfd03902207b45add72f62800799efb076804fab21771c90204a1be7623b5e34db5447fd70","0x31c994AC062C1970C086260Bc61babB708643fAc",false,false],["avalanche_c_chain","xen_crypto","AXEN",18,"XEN Crypto","304402201d674a1a53b3f1e69bca594e6e84e9cbdcf8f3ded57b5f8384e53983ad80801502207982fbc3f2805704328b6055efb9f30d9b83ccf96e2fe3ed6476f6cfbc5d6a5a","0xC0C5AA69Dbe4d6DDdfBc89c0957686ec60F24389",false,false],["avalanche_c_chain","xsgd","XSGD",6,"XSGD","3044022006735e052bb31e08a99ea5302216110972871b087df76032901fa3c7fc113aee02204184de13d4b0b068dfca1301d359853298f2136820ee128fe37784c4b347dca1","0xb2F85b7AB3c2b6f62DF06dE6aE7D09c010a5096E",false,false],["avalanche_c_chain","yearn_finance_(bridged)","YFI_E",18,"yearn_finance (bridged)","3045022100c40e4c9f8af6c966309c8e7afe5a8d0cb97d15f8772b89bc3109df08771fd81902202af0a6373ef2e38c306a8e44ca629eb5d8a01662afb03903a42eccd0a98e0491","0x9eAaC1B23d935365bD7b542Fe22cEEe2922f52dc",false,false],["avalanche_c_chain","yield_yak","YAK",18,"Yield Yak","304402207598de64a300237489eacf84d3d34f3b0f6f65c1ef5413bddeece028fd2bb982022060c5723116e3ddce7ad5dfdfd4b81fb9b437d9af500b9034cc1cffe9016b71ba","0x59414b3089ce2AF0010e7523Dea7E2b35d776ec7",false,false],["avalanche_c_chain","yusd_stablecoin","YUSD",18,"YUSD Stablecoin","304502210096c9076739fa123a4223de8bc43e04c7447f6294cf843158c6ee8a20ca2649be0220778290173782efd27302f1791996b31cdabae9922a66c3d72fe977c4fe99127a","0x111111111111ed1D73f860F57b2798b683f2d325",false,false],["avalanche_c_chain","zjoe","ZJOE",18,"zJoe","304402207e27f3d8a2eb4655823cbd88c3771968bbd9e6deab6e60fb67d90974fc3d45be022020f6ec7f21616fafb721478c1ee4253ece12e28c81084fc6415bdbff170d36ec","0x769bfeb9fAacD6Eb2746979a8dD0b7e9920aC2A4",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/59144/erc20.json
var _59144_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["linea","3a_utility_token","A3A",18,"3A Utility Token","3045022100e46a5d368f6f8117f957c921835f291e52ba5286a29d97fbbdb2c4b38e0d01f902201176227a013164880de96787d199fbc998401ce7efa441f4b4acbcc1394c0830","0x3d4b2132eD4eA0aa93903713a4dE9F98e625a5c7",false,false],["linea","ageur","AGEUR",18,"agEUR","304402202adbe660a50aca7da5a109677b60309e7d9af00cd42336716af8eb3d94640e3302207a251197340448e25fcb78b2324bfda9b2fa0070b330cf15aecdd05f15547e18","0x1578f35532FA091EcED8638730F9dB829930ce16",false,false],["linea","ankr_network","ANKR",18,"Ankr Network","3045022100bd3c1615e01fd33d8c6ced63e84c6f2fb4e4d453a353fca91183a8506c27c7ef02204913a43317af9772886177335ee5ae56a6b5bbdca99c65b5ba43478729c5329d","0xa8Ae6365383eb907e6b4B1B7E82A35752cC5Ef8C",false,false],["linea","ankr_staked_eth","ANKRETH",18,"Ankr Staked ETH","304402202d937117066fc7cd40fb85ee356455b56cda23191fe9dc4af9e51e60aa4da0ab02205ea1db2378deb3ddcfe97ae5b77ebb3d65afe6cd012e479916a818d102450185","0x11D8680C7f8f82F623e840130eB06C33d9F90c89",false,false],["linea","apecoin","APE",18,"ApeCoin","30440220407ea1d7845b0b5dc5f3bd0e8bec62d7c656012cb659dd972203e21898cef519022006e46bb86443f23002c62d5ee759e3eaeed790b1f4ce3210d9990c6a421cb21a","0x6bAA318CF7C51C76e17ae1EbE9Bbff96AE017aCB",false,false],["linea","aryze_eusd","EUSD",18,"ARYZE eUSD","3045022100ce5cad1b76f63b96b25c7ff819933c51860844ec29550f81fdc89ce82c1540b502207c5f961b379bcf1e6bf0047e1bfe1fca52db6c5cf3fbb6325d9b4c2abab8651f","0xBA2f9e7ae9F5f03FCe7D560f986743659e768bbF",false,false],["linea","avalanche","AVAX",18,"Avalanche","304502210083b1f45d8f902839aa36e10a6d0bfbb4b6fa96855cd968d22aad16a8fcaa9996022044157be40919177995b920ae132e6ad7eda008d0895c7c7b9b97894aa85356a7","0x5471ea8f739dd37E9B81Be9c5c77754D8AA953E4",false,false],["linea","axelar_wrapped_usdc","AXLUSDC",6,"Axelar Wrapped USDC","30440220760d7dce5afa8c75b24215f0c21e9bd28e55b80129fa5201d1c3b37bdff5ec0a02203f6f6c66dbcc463937a842277ea20dd5ceed62abf44a78c6b9fd3b14560bf908","0xEB466342C4d449BC9f53A865D5Cb90586f405215",false,false],["linea","binance_coin","BNB",18,"Binance Coin","30440220430f4443858db97e3aa0ca25ef16a1efad28a723d2f6baa62506c3469e928bb7022025823c11a14fa0ec8ac0dc11e0adc0c498148ef3746a90404754650c8b8b6908","0xf5C6825015280CdfD0b56903F9F8B5A2233476F5",false,false],["linea","binance_usd","BUSD",18,"Binance USD","304402203e50d16e3db79e63141c2b8e3609eeb93a4fb7a64c2e5246a9e93bd77beb346402203affc7ce2003dd8afef0ee51c726c59f25e89e69b411089b6d5d387a185b3c16","0x7d43AABC515C356145049227CeE54B608342c0ad",false,false],["linea","chainlink_token","LINK",18,"ChainLink Token","30440220079a77902ae84bb273857537687787fb6ccddc5b42aef375b5b7eae5492b09fa02204bb401cf64a4a64aeb00dd85e0b3524a9854364821b8726732ab24785c77504d","0x5B16228B94b68C7cE33AF2ACc5663eBdE4dCFA2d",false,false],["linea","clip_finance","CLIP",18,"Clip Finance","3045022100f5bceaba14ee119726c220a3a60165e082553500ad5fa437176b6f24f043765402200bb4e7a186b9ec20d0c4b193d2d8ce8d87650eb7feacab8684de7a445aef22c9","0x4Ea77a86d6E70FfE8Bb947FC86D68a7F086f198a",false,false],["linea","croak","CROAK",18,"CROAK","304402207061a93ad02137e1b39dcaf4b2d046e3904e4e15291ae1b096d060deca34fc1202205093f70dbd237a87b26c72bced6ab5d67d7468844564fd23122422fe57c13e21","0xaCb54d07cA167934F57F829BeE2cC665e1A5ebEF",false,false],["linea","dackie_oft_token","DACKIE",18,"Dackie OFT Token","3045022100b71bd9d48dca1e47c291f1cc8ad2218cbad68de4eea6dc6916f1737d3a81f5b702206cb57aff70f5692a6df6281aaa60c1396378db83437f763b9512f3160f9ce315","0x757cD583004400ee67e5cC3c7A60C6a62E3F6d30",false,false],["linea","dackie_usd_oft","DCKUSD",6,"Dackie USD OFT","30450221009c21286c8c1020e2ce59d22118ae56fc0beea519e2ebe90e597817b624bc167d02202f82012684e8f0def2ee3b492ed7bc67245bb1f06bc7e97c3692a1bee68bba36","0xfd7353c0bcbE8eAdafE31e5256e3d4f04792A374",false,false],["linea","dai_stablecoin","DAI",18,"Dai Stablecoin","3044022079657b5f058b9cfacf65afe9163fe785167af44480ea8627c16a99ae3a487e990220524f0cbb16fd0cdbc919b79389f320b3564f84058cfd18754bf4ecdbae2ff7ca","0x4AF15ec2A0BD43Db75dd04E62FAA3B8EF36b00d5",false,false],["linea","davos_xyz_usd","DUSD",18,"Davos.xyz USD","3045022100d6a6a8a8511395543c2cfbf411b7b73fe4780d109c8765234a443df1cf2c5a5e0220760b14515ad2f8d5bb59ac5dbad2fb67e0e69cdefd0b4e80bb21dee7ff899e2b","0xA88B54E6b76Fb97CdB8eCAE868f1458e18a953F4",false,false],["linea","ecp","ECP",18,"ECP","3045022100ce2695370c955ca66d6946017b8e190322ca6cc52824d0daea81da7fbfc17a8602204dde03e59b6ec660be2ca15ccb7365dc3d847be6a9d31ba44606a2a32f2bc58d","0x9201f3b9DfAB7C13Cd659ac5695D12D605B5F1e6",false,false],["linea","ethos_reserve_note","ERN",18,"Ethos Reserve Note","304402205a1848ca535493c792764c8484b9fefd09b9858536cfcacef490a88ab7e023a302204c9f0ada612abf9cf5dc95f0b5444ec8b48f20730e3129ce7d11dc0dd2afbb39","0xa334884bF6b0A066d553D19e507315E839409e62",false,false],["linea","euro3","EURO3",18,"EURO3","304402207c9d82399b2d3e67a7686bbbf907b1a79d67d47bec517c46d7ae5c5e043e03280220163eed518b02346a11b3914792396b227a3c8aa57fe4b10a71e0665be5173448","0x3F817b28Da4940F018C6b5c0A11C555ebB1264f9",false,false],["linea","foxy","FOXY",18,"Foxy","3045022100a93a34c02b4047f91f523e7b57bc2de384642b5a7f6382f81b8147eb8e91e62a022074e146573511aacb812b9753a330fa9d20d4dc159ca1b9cb22f6c6552a014dcc","0x5FBDF89403270a1846F5ae7D113A989F850d1566",false,false],["linea","frax_ether","FRXETH",18,"Frax Ether","3043021f6cb01997713e7e73538eee306d9557f378525c644d9ce78652c7b812428620022040a7ded642405935f1c19e10b86632b42653966d218dfaff6b41b1c34997df1b","0xEcc68d0451E20292406967Fe7C04280E5238Ac7D",false,false],["linea","frax_share","FXS",18,"Frax Share","3045022100bfeb4a29a012d20f4235ba18301ad79c1f0a971f96c06350488f419e0772ac6c0220308d339099fb3900e592cb83087940bad0ea1d62ee612a2f3dfa881a98145da7","0x0A79e44c99505c7f388CA30c787ff97217E73ecC",false,false],["linea","gnosis_token","GNO",18,"Gnosis Token","3044022070e6d3d6a550f5a391c516a49928851f08f8834316f0e71e568f195bbc55d77b022062aa3c47107d45314e841642c2c38d5e52e6e17b671f392dd180f00144ccb320","0xe516a5CFf996cc399EFBb48355FD5Ab83438E7a9",false,false],["linea","gravita_debt_token","GRAI",18,"Gravita Debt Token","3045022100d9ed00abb4461d4e00a665481025204a6860e9b84576f5a95493b27feb13a6b302203641491d5e07ac5c7ed21501fb1e5aafef2f588cf60a6b2bed171fb355e8b78f","0x894134a25a5faC1c2C26F1d8fBf05111a3CB9487",false,false],["linea","hapi","HAPI",18,"HAPI","304402202aea7f95e5292d826295b34a40a65e2386c516802a64f3801ba2a8a2449718c102200417816e93c7b948b69c19beba4ab6758d02d0023861dc165cabb530802833ac","0x0e5F2ee8C29e7eBc14e45dA7FF90566d8c407dB7",false,false],["linea","horizon","HZN",18,"Horizon","3045022100d9dffc3ebfcdbc1e672031fdcab77e056ac3588c3c12f7b6061bd62cb7f7b3e002201031005862e51e32bd0baf26c19c0f36f4487aa36e8f4f9f8185a00fa333618a","0x0B1A02A7309dFbfAD1Cd4adC096582C87e8A3Ac1",false,false],["linea","inception_restaked_steth","INSTETH",18,"Inception Restaked stETH","30440220420b5004fb770ac56744575969c6764f28d54bbc84cc1dc74722a84a82672c3a02201fa4116fc8ac798c38fe86db01f2d4b80948afa3f95b2d7393d209936b5e3a2b","0xd08C3F25862077056cb1b710937576Af899a4959",false,false],["linea","inceptionlrt_restaked_eth","INETH",18,"InceptionLRT restaked ETH","304402205a5373da3a647f82024d21d004d6858508e8880af835a778525f468d155bbacc022048e472957826d6a3797e04d982f488f358d3f339efe3c260771bbd8bb401f7c9","0x5A7a183B6B44Dc4EC2E3d2eF43F98C5152b1d76d",false,false],["linea","interport_token","ITP",18,"Interport Token","3045022100de8de43b0de94969bab8e7d01e1e5ba8ab9ad3fd7d2d0f65722af21912e04e7102202ca0f10106146d3f3024b5957fdad9076b6747943622d329f8d91f65e675d79f","0x2b1D36f5B61AdDAf7DA7ebbd11B35FD8cfb0DE31",false,false],["linea","izumi_token","IZI",18,"izumi Token","30450221009b2dfb7e1aadfc0f1f2a6f7e40e93de5d89403f131951f175fbeb1b1a8502d14022015a338aa207b0c508b1c7d6c38e6a662716906a3252df1b77e1317152c5e07ad","0x60D01EC2D5E98Ac51C8B4cF84DfCCE98D527c747",false,false],["linea","kelpdao_restaked_eth","RSETH",18,"KelpDao Restaked ETH","3045022100a74967ce4659082e374cf94d9024ba0fc9b6e897d40d549d85877d429a63660802206144df7644e94b450ecdcb641949c74f0d44f1304349403f5142e982efb01246","0x4186BFC76E2E237523CBC30FD220FE055156b41F",false,false],["linea","kyber_network_crystal_v2","KNC",18,"Kyber Network Crystal v2","3045022100face43ea476de663747469bcaed9164603ded50e7cd6c8df8f1fc62f5f58c537022028d8eb64ad0703eefceaeeabe8b8243a447295ec2cdfa8ae445d5e449bdd3e76","0x3b2F62d42DB19B30588648bf1c184865D4C3B1D6",false,false],["linea","lido_dao_token","LDO",18,"Lido DAO Token","304402204d96558c07612cb48bae9b6ab937a8488714f83805243f15c9553108386bb99f02201dcc61fcec434a9cbd699470235e4c445daeaf7ba28913d56808cc2bbf2d2b6e","0x0e076AAFd86a71dCEAC65508DAF975425c9D0cB6",false,false],["linea","linda","LINDA",18,"Linda","3044022051ef69540c33b108717196bc4df71d4d9f6a7a18a7795e044ae0db9c98fbf09502206393b1d496bdd35788227eaabbd67fa988da1a502115f2fda8546ae0f1ded635","0x82cC61354d78b846016b559e3cCD766fa7E793D5",false,false],["linea","linea_voyage_xp","LXP",18,"Linea Voyage XP","3045022100d89eb7a59a5f119138ba1cbf1569e18e60c70af7a42b30ccf1dee0d89145c692022007aa01ef6bbdea30ef3ecd314185210c0b73b1de614ba02a3cdc2883057639b0","0xd83af4fbD77f3AB65C3B1Dc4B38D7e67AEcf599A",false,false],["linea","lube","LUBE",18,"LUBE","304402205ac40fc7a39b137e6423a7871b71698643696085d6d8a26b37330f2b728aff1102207555dc8d89ec001742f26af99d61bc5f20e917aeaf5ba235a166881bce5fde1a","0x1bE3735Dd0C0Eb229fB11094B6c277192349EBbf",false,false],["linea","lynex","LYNX",18,"Lynex","3045022100f18d435965c9936eb255a868c7fbe0ac41ddfbf32486f9ee9803a16148be676302206e721288237d63f8711520480475a735d74d426c8d9205a6aecf87f24f070643","0x1a51b19CE03dbE0Cb44C1528E34a7EDD7771E9Af",false,false],["linea","magic_internet_money","MIM",18,"Magic Internet Money","3045022100f3d0a218858823e4d7ec93000518fba09c96c2176255a2963f1f045577d944f602200c406c0c5cc56ae6e821f9363793c54058deca6cb7a64171a9718a4c3cffacea","0xDD3B8084AF79B9BaE3D1b668c0De08CCC2C9429A",false,false],["linea","mai_stablecoin","MAI",18,"Mai Stablecoin","30450221008e26672cf50b8c50513e06f6719407692c072dacb766fed1f65a17371c936f1602200f420f632c3e171e3e9054b03782519a94e696b4f82b373e4a28d4c0d3635989","0xf3B001D64C656e30a62fbaacA003B1336b4ce12A",false,false],["linea","maker","MKR",18,"Maker","3045022100cda10033e278effff3fd4aa9a79dbd35a57df5d2a52aa6a3a8a83b4826987100022027c854f86308b8e2d8996c62a4ffae239df7ff70e7d0ff5bd41a7d89ca15b636","0x2442Bd7AE83b51F6664De408A385375fe4a84F52",false,false],["linea","matic_token","MATIC",18,"Matic Token","30440220611c4746f1b2c0f9e85b6b07a2ca5d51b930930eda0037d0c4b11f13f066268a0220165f5d70b7add3cb88c540f2fe6001f6b9bebcb27a7dd4d0e4ca239a3a458528","0x265B25e22bcd7f10a5bD6E6410F10537Cc7567e8",false,false],["linea","mendi_finance","MENDI",18,"Mendi Finance","3044022057237eba5f29975245712f04bc14981ed38ac8fb6774ec1662f7aea89e774bc30220171e435b362fb32a78c084b06d8c0c4ea1282a342087f0edaccc227f20d49ba7","0x43E8809ea748EFf3204ee01F08872F063e44065f",false,false],["linea","merlin_btc","M-BTC",18,"Merlin BTC","304402205be0f17df95a0b1a3913997c461e6a587edc4bf57355026cd673fab3bc77db5802200ae05248d509de524b0a602324bad90a4cf16e6d4dac393aaf5e85f594a4a984","0xe4D584ae9b753e549cAE66200A6475d2f00705f7",false,false],["linea","meta_apes_peel","PEEL",18,"Meta Apes Peel","304502210087f3da6a0bc3068ee3b6190d682847b69c3595d6745bf99921920d0a8f8c56d4022006dc0f0a13fc64f5e0f9ea90e3335d08c4433dbafaddf367befbd2627802d535","0xA6eb75B11b36FB9175fB94C5b96959879A26C2A8",false,false],["linea","metalswap","XMT",18,"MetalSwap","30450221008f0fbfc6080c852c4b97e578de77c4be322378469321c0f0c1abe1f4222664940220613435e65da0e5e5f28ad844e38eb8271a8109c52250e0fc09144816a3be6485","0x3E5D9D8a63CC8a88748f229999CF59487e90721e",false,false],["linea","metavault_trade","MVX",18,"Metavault Trade","3045022100febebc0a812cbf3d49b5cbc6a7af4d88493839ae8a9331fd52676f28a6f41e3b02205fb5468e906ab06b0cfa998bc6f825d0f79e85d804aa3cb3f594606e22a094de","0x0018D96C579121a94307249d47F053E2D687b5e7",false,false],["linea","nile_token","NILE",18,"NILE Token","3045022100ff9c56dcfdba2917e8193b8813d9640d41093d7a29a4c327083d2d458c280ff802207899a85d76135b3d111547d9dd1b2d77abea902599735f5f157be76163e379bd","0xAAAac83751090C6ea42379626435f805DDF54DC8",false,false],["linea","notwifgary","NWG",18,"NotWifGary","3045022100f71dedc54f79280dbf8e8f2c45c0cc75f44a6cf023a92642c7f91434fdcf91c902204a2bd71ed63a6440685bca7df949ddfa9eef35e7f00b11a3d7385ccd04a18e9d","0xE2a6e74118E708f7652FC4c74D2F9Ee5Fa210563",false,false],["linea","onepunch","ONEPUNCH",18,"ONEPUNCH","304402200c415ffde6978e75d49b9c4b5120031f5b575fd72fd8298c813911efbbdc1dab022000c69f0f39fd9519f3ce34ea0c4161ab0acab7fcdf57f3c4f01b009cf66fb41a","0x1F63D0EC7193964142ef6B13d901462d0E5CbB50",false,false],["linea","pancakeswap_token","CAKE",18,"PancakeSwap Token","3045022100a1630d3d39e47100d21bbaa217119341ea9dac2ce21f031f7d7d94fd2e82ff9e0220640484705beb2bb83c7b63f1c6779ae026766073d012966437b1cc56af4e7be9","0x0D1E753a25eBda689453309112904807625bEFBe",false,false],["linea","pax_dollar","USDP",18,"Pax Dollar","304402204d0b7a439e94420c80c6a934724f5e20931a7a3d9954c112d125d7103220cc2f0220429fa97b2cbfbb8ce6671cdd011d1d9aef9df752e83b4af7a31173a98cbfa384","0xd2bc272EA0154A93bf00191c8a1DB23E67643EC5",false,false],["linea","pepe","PEPE",18,"Pepe","3045022100a9f5b0a23dec6527b0584c45cb00e6d81d9b909f7064d781c147aef667143316022009e97ede1e27fb113cc8cee47d3510b801fda3f46e8802fc18e11d451ead5b2c","0x7da14988E4f390C2E34ed41DF1814467D3aDe0c3",false,false],["linea","renzo_restaked_eth","EZETH",18,"Renzo Restaked ETH","3045022100a6c98ba5da2a3d77f6cffe5ca25e0048e2eb6fc9bff3a1279299da474f30f24102207b5399c4bd59c18dfd74150ec83c1ef37dd349cffd2e28c8eae78f27eebb123d","0x2416092f143378750bb29b79eD961ab195CcEea5",false,false],["linea","rsethwrapper","WRSETH",18,"rsETHWrapper","3045022100d7759a248f04d75fab1690171e02267a05ba6aaacbb134d2d95ffb440afb0235022035417365bb4aa45b319dffbc129f0cabf996f99b276fef815b37b71e2ced8124","0xD2671165570f41BBB3B0097893300b6EB6101E6C",false,false],["linea","scamfari","SCM",18,"Scamfari","30450221009ad66043f7776edfb40d931a0f79ce1a0b5333a34f92759f6f8c6f9c9fed8f7602205f4208fc784d72664ef10f46bbbb311c50b036ba36053cbf7b4877b9994dd59f","0x13a7F090D46C74acBA98c51786a5c46eD9A474F0",false,false],["linea","shiba_inu","SHIB",18,"SHIBA INU","3045022100ddbcaf3a28191f62103ef89593b4694e4b8d0fc9be8d4d0d253aee8d0fb0633e02205a80c022bf81969bcbdb52a64d55a11a2cae45a41febd6a87aff2b340210a2e0","0x99AD925C1Dc14Ac7cc6ca1244eeF8043C74E99d5",false,false],["linea","sparta","SPARTA",18,"SPARTA","30450221009bad5eb2bad490d19fdab5a8ffe197ced2d35d25c49b991714b430e22aebd15302204415d2760fcd3d8349bfd319f419b01e07245392b284c9401a174584529a0754","0x11F98c7E42A367DaB4f200d2fdc460fb445CE9a8",false,false],["linea","stakestone_ether","STONE",18,"StakeStone Ether","30450221009d7662eaeee4cb67b41be4a830d755e66bdc6c83458062343de872d8f205fd530220375ef8dd1f411966410ee91f0b108b5c5f24c7dc101c24ee1d9b8dfe3883c6eb","0x93F4d0ab6a8B4271f4a28Db399b5E30612D21116",false,false],["linea","stargatetoken","STG",18,"StargateToken","3045022100b449ad3ed58aa4216b38fbabbee80ab7d234b9c4f5e11354f21d2e737e7cf66b022071f43197a47f347eaacb71a535af0dade461af125dd2474423920a44437324c0","0x808d7c71ad2ba3FA531b068a2417C63106BC0949",false,false],["linea","symbiosis","SIS",18,"Symbiosis","3045022100dc33ad121ef8d3ae2cade9c2316ae6a9f2f35d3a41902efc39ceb2f7cb2453c402205357565b0126618655c8f2116f7e9da6678a932066ddef7036eefdc1bdfb8523","0x6EF95B6f3b0F39508e3E04054Be96D5eE39eDE0d",false,false],["linea","tether_usd","USDT",6,"Tether USD","3045022100a2dbf207be4c66c47863285b193cdbd27a2ae854f4e3b96a4f1a91ce5a4f588902205ed1e9b8ea183fa65f58b0b3843bdfb7d6626497e563c1ca9d94545dd80020fb","0xA219439258ca9da29E9Cc4cE5596924745e12B93",false,false],["linea","unfettered_ecosystem","SOULS",18,"Unfettered Ecosystem","3045022100fdc5e55d45a3462be780233ca7bfc3350c9b5a7631f192e5612efa3cd83c9ffa02203bd4d98c8d9ebc8d3ba463b759e8bddd6f80a0360fb7d12f5ef165d6c7410607","0xeC859566fC5d7ED84Ac823509F3f7db06C461b20",false,false],["linea","uniswap","UNI",18,"Uniswap","304402204551152f64058390d76498400d8d3d96ecde318c66db748a1f2b27bf00bd8b2102200f4c312fbf91f71f2e1429d6dbe63cc4f935f4f74b77728601702fcd3d267ddf","0x636B22bC471c955A8DB60f28D4795066a8201fa3",false,false],["linea","usdc_e","USDC",6,"USDC.e","304402204e2b253382163dfe90e9798a5fae0a2d93a1dce480f18dc3af6f93a852f1184e0220621ef53660de63060948f25caad0d8ca60bb754392417b392304de10814ac278","0x176211869cA2b568f2A7D4EE941E073a821EE1ff",false,false],["linea","usdplus","USD+",6,"USD+","3045022100d4e62411491244c95fcb015ff8ce73e40b3badcb6dc9dcf1b621f64e69df653e022004ff2698c47d042ea5a4839c57222bbcf7cb9dcccefc1d393a2f2d09d8bc1b87","0xB79DD08EA68A908A97220C76d19A6aA9cBDE4376",false,false],["linea","usdt","USDT+",6,"USDT+","3044022077648998c854aac63aaca7a3202b8978e8052357a9b52eddec84ca478c8ca01a0220646f3cf1e1ab7b59600b2655dcb16884e9be30cb0473a4d7dc3ed1eadc7aacf4","0x1E1F509963A6D33e169D9497b11c7DbFe73B7F13",false,false],["linea","wefi","WEFI",18,"WeFi","30440220431dbaec799a0bb440294874d9e5672f83987f092fe463ed3888bc91b97d800d022048a1a3cf71f4d44bf48508526f95020dfcb50aa60b188c3d2c92decf5b17e59a","0x60892e742d91d16Be2cB0ffE847e85445989e30B",false,false],["linea","wrapped_btc","WBTC",8,"Wrapped BTC","3045022100809eda0bc374fde92a9c71388ffa82abb9de78fb67bdf32b67335b835c53c7f502202c480a197ff5cee024d83507ab7e591dba942873a614c2b08f3b4b5f891209a5","0x3aAB2285ddcDdaD8edf438C1bAB47e1a9D05a9b4",false,false],["linea","wrapped_eeth","WEETH",18,"Wrapped eETH","304402201e7f460e9d702ed4a03ea91062e3c70a8aac0d926fc56d4f06055a475e78244a022019f48862e0fefb01ad19cae5473f0a3191f0d2a75749c0ccc80c98268c016967","0x1Bf74C010E6320bab11e2e5A532b5AC15e0b8aA6",false,false],["linea","wrapped_ether","WETH",18,"Wrapped Ether","304402205a99a1d5aaa167c4d477452a8720a6963b157ec09bab5cd3729dc3c6703b261c022036eae016353921b16e27fa682008e739cc2c5aa68553e3089f163421e2f03efc","0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f",false,false],["linea","wrapped_liquid_staked_ether_2_0","WSTETH",18,"Wrapped liquid staked Ether 2.0","3045022100fc09a87d3de5f986e08060216abedd601f4dca204494e7bc81e9991794daab73022048c9941b0b271d192b260fb1b1bf176ab1f05a6e2fa43a430f4b74d13e1cad3b","0xB5beDd42000b71FddE22D3eE8a79Bd49A568fC8F",false,false],["linea","xfit","XFIT",18,"XFIT","304402200846c32cdee367c6ed52d586d7815d4a209aa583ab46cd6d86f1d4aa86d9ce03022007196da9bb7f6e0ea53821f1701b441855b5e53446f7632080de958df24bc1c9","0x8C56017B172226fE024dEa197748FC1eaccC82B1",false,false],["linea","xrgb","XRGB",18,"XRGB","3045022100d0a9d57c05940562245854e5f342d80886852a9e772ad2494d2799ef05c038790220790a3ffa8d462bd5dbb603da0582b5698ec6829799f08bc50e7b2fb52c711d06","0x5cc5E64AB764A0f1E97F23984E20fD4528356a6a",false,false],["linea","yellow_duckies","DUCKIES",8,"Yellow Duckies","304402203512ed72fb11718c3b28799c67b2697041ca309032e157671d8dd97d29dfdf99022037c4ce178b548a6c05c8924a94e5604dd7242f22ebd6ce4c8ba563f17c2b96dc","0x796000FAd0d00B003B9dd8e531BA90cff39E01E0",false,false],["linea","zai_stablecoin_oft","USDZ",18,"ZAI Stablecoin (OFT)","304402205d672b225693c61c571a8fdbca0611cc63f5f718007f57b59709943b0106140602202bd1fdebf4635bbc87b7d322a745021f9e06741872709cb561a2f551ff18fd8e","0xDB9C83cC3E2c61217Ac1763232Ba508DA1064BA1",false,false],["linea","zerolend","ZERO",18,"ZeroLend","304402204a7456608e2c6bc9e38b1286bbaf024cf4718fc794e82de6dd24d919acfed5cc0220094f7d26b6e7690465838337e0f801449471fb5cb700202f376ca3e43e36e8d1","0x78354f8DcCB269a615A7e0a24f9B0718FDC3C7A7",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/81457/erc20.json
var _81457_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["blast","affine_ultraeths_2_0","ULTRAETHS",18,"Affine ultraETHs 2.0","3044022002afed82d5b6008a2edb24a34872189d1b527d2b0b3fa8659aa80d3454b70294022006caa4e9fe9955e02d069517312410eee178e81ada6124c374b152300b34781b","0xbb4e01B8940E8E2b3a95cED7941969D033786FF7",false,false],["blast","aircoin_on_blast","AIR",18,"AIRcoin On Blast","30440220572c241b6af7f91a50ecffc491c2f59098cb2043a4cd63c34910d8920a278468022070dd41e36ce70285b15686f0494e76d9365634327d6b9f3202347856fc397566","0x6Cc87c5ab2CFac0F2d582286f5BA69cA555FecB0",false,false],["blast","amc_entertainment_holdings_inc_dinari","AMC.D",18,"AMC ENTERTAINMENT HOLDINGS, INC. - Dinari","30440220103b89ae65dde749812953110c0ce76606522311f08aa8086e6d59b785ded844022077d22ed6984b2b60716e95b3e8eaee1040ca6f8c56b79248435ff1c0a377eefc","0x81100713096041923D65b9F9A2C8dbf8fd8dE691",false,false],["blast","andyblast","ANDY",9,"AndyBlast","3045022100968737629f2b34912c57ab50f3a41a10c3745e9068ff93f55ea81eccff4e86f80220736b1d0dcebd45aa79f0344265cc3673e21e87571dad43199dd357b21799d690","0xd43D8aDAC6A4C7d9Aeece7c3151FcA8f23752cf8",false,false],["blast","ankr_network","ANKR",18,"Ankr Network","304402203d3b3200481ac4035e1998d04c2b4c3060dab7745dc5047e653b130a809ae8cd02202e149fd846377df19acd7af6d06768cf24b1a71dbf9a10cbefa9ad16fe4c046c","0x3580ac35BED2981d6bDD671a5982c2467d301241",false,false],["blast","ankr_staked_eth","ANKRETH",18,"Ankr Staked ETH","3045022100f4224fc74a713bf8aa9c97a959826bfb649a4a556c5a4e4cb05e644fb4a2be2b02202a7afcceb4e0a46501b2b7767bff8cef786e97a691b8f62f042397eef378c4f7","0x049e6A52e2C9b7814c8178908F3630726c134c92",false,false],["blast","any_inu","AI",18,"Any Inu","3045022100f58be86d1492599ac2f10d51f91d2f9f5c9447610531c70bbcf2a4aab7e7671d02205ec48c4da334ab61f58d95a82de355075f409ab8185b122d9795c259b9c8ee6d","0x764933fbAd8f5D04Ccd088602096655c2ED9879F",false,false],["blast","aso_finance","ASO",18,"Aso Finance","30440220459ce905f9366337098393dc4a6f55de95e0126aaddfad7b94910bcf30b66bb202202c5c3041e52371574ca6083dde2aaf01f33ce027f642b3b2bbfd5fa66280cdb0","0x54E7780089AeE73EF98B8238B0866a517914254e",false,false],["blast","bac_games","BACGAMES",18,"BAC Games","3044022018c4d6d5bd69ac953c799d858c8bca96cbc067afef59c179f257918a95695b32022031d8d378ad562637a669ba4e0430d82d240994394c7ccf0f620c0c71ff97ad25","0xe20D45377370135C733876548de202040cfC0664",false,false],["blast","bag","BAG",18,"Bag","30440220575fadd89f88af2c4580f01ad7ea399789ea65ef4de3b37a6f82a2c6b29785db02200ccb8ff5a0e9da261fe8eb445600f41be568d4e0d18ca030a381f08087104b29","0xb9dfCd4CF589bB8090569cb52FaC1b88Dbe4981F",false,false],["blast","bladeswap","BLADE",18,"BladeSwap","304402206ba3774152d8dcad6bef6e46e7a1621bd5be09332b2cbd5ce53e40e539583e1a02201c7eba08414ffdf2a139fe51e2c69a9a060b8d03502be20ae86c2a50d2cf265c","0xD1FedD031b92f50a50c05E2C45aF1aDb4CEa82f4",false,false],["blast","blast","BLAST",18,"Blast","30450221009fc9f1599a2ffcee6797fc1f6354d8d89153af09dce5da152ba256213fde72870220757de03be9379b02fbe1928a5e4df3d16d75048e32e32b36e05dd2d823691d9a","0xb1a5700fA2358173Fe465e6eA4Ff52E36e88E2ad",false,false],["blast","blast_hoge","HOGE",18,"Blast Hoge","3045022100b2b18908f916d9276e7cd8d6c6672693d1369dbb5cba139eb0052bed68efbf6c022012b13342b3d42f5ef508586580cf25c3d45d946254c6fa7ec461b8f2ffca5eaf","0x548A6fE792015DD2A7827659D3Feb8Cf88cf1C79",false,false],["blast","blast_inu","BINU",9,"Blast Inu","304402202f828b4354cf11bfef2111f06d4fc9c30697625ee963b733e7e3a5626b6d19e8022063b20ba63eda4f8f9f4130ebffe6475eedccf033023b574cef528719825ecfce","0x34050224F9eA1859790b7CBBBe2264f1204771A6",false,false],["blast","blast_pepe","BEPE",18,"Blast Pepe","30450221008be949c8aa576aa7070c5dc57009995d5ffad1c6e5e4928e5c82a8a40b882b69022031ce3a689f6ccd91803c6daf0d8b76c6909a49b4f53b435e24cdb929c1f1c45a","0xB582Dc28968c725D2868130752aFa0c13EbF9b1a",false,false],["blast","blastardio","BTARD",18,"Blastardio","3045022100c149c60b3b8fc93e4903bddd47cd4a9015abc2b10f928d2f0d56d29fddce96ff0220293f1f1484d57719a7ec8d68396c5ae91d31b508418d2060e0640c85d3cffbfc","0x12AA089d5425aF22FFC34Ff86987caaf1091824f",false,false],["blast","blastcat","BCAT",18,"BlastCat","3045022100f527d3743874a677ccd90ac7ce7814a376728b59880dbeeca987a7302f20cc900220221350c889530cc8096bf96f5148818ea0108aa99f23e6da5c0c6fa53bce7232","0x9bD75c164dAf830733AC2EA71A0258f95aac7C57",false,false],["blast","blastdex","BD",18,"BlastDEX","3045022100b49418c0f540e4325c242f2a0e170c49020a52b08ca96a45014f7c72d960facc0220278621b25d739d255ddeb682bedbd137116c5ebf0c37a7e2371f308386e4b6a4","0x60701c37Cd9Fed322dDe7c17Dc1e356f09a35B88",false,false],["blast","blastin_pepes","BPEPE",18,"Blastin Pepes","3044022057f9b27aaa2e749548a3df5ba5e50fc9e724664f2c21cf211dcf28fd372aad1d022045ee3a7a4a7a625709e44dcbf6efe4ed0dcec9f122eeb65c041f802d44bd7e0b","0xB6e0d8A730C6e5c85c637b1cf7aD6fD07927b965",false,false],["blast","blastup_token","BLASTUP",18,"BlastUP Token","304402201d1dd26e90fff70e77e8de7803030c8e76f4ccfd8e661e3df919832a4dae3892022075584dbacfa48aa8b1e8cd6cc2e835c4394025d50917da42be49d49e8e9dafac","0x59c159e5a4F4d1C86F7aBDC94B7907B7473477F6",false,false],["blast","core_markets","CORE",18,"Core Markets","3045022100a3d8a08c9d89fff50d587f2a38a522ef2b0cd6e6a8dda82f350ff4120da2ae8e02206b5b3e344f1a84f5218a4ae14ec5fc5946bbf0fad27d9da8787ccd2a7440a01c","0x233b23DE890A8c21F6198D03425a2b986AE05536",false,false],["blast","crypto_valleys_yield_token","YIELD",18,"Crypto Valleys YIELD Token","304402200fa37526f4d53d556685a18dfd8c744d93b79144c28a48ca4f99df3b2b45536702205996109708652cd92f381a6d182c74ef82e9893b18627ec54db7fde5704cd734","0x67fa2887914fA3729e9EED7630294Fe124f417A0",false,false],["blast","cyberblast_token","CBR",18,"Cyberblast Token","3044022035e100d5af585a1313a60541c2710497d9f6634c95e1df55df4c5ad22a6367b9022015bec23573f07d6051de2ee61290c5dc82ac7208153c36bcbd00577d7c3405d8","0xE070B87c4d88826D4cD1b85BAbE186fdB14CD321",false,false],["blast","cybro_token","CYBRO",18,"Cybro Token","304502210097cbd347edf1a383cc76449ff79d51e2e829053aad6fa16787c5f5848f7f6ae10220718234fa761244e8f312e5a2a2f80c2f40e28281e4b6ba16f0f23e59037eae7a","0x963eec23618BbC8e1766661d5f263f18094Ae4d5",false,false],["blast","dackie_usd","DCKUSD",6,"Dackie USD","3045022100fab091af4d120a8d9702d8402bb1663b1620b643e8fdb88d87a6aa8a6220ba76022043a8ef1f488dc7e44ed08c1a0aea3f1785b49e0f3cd949efbc9ad0020b137ca4","0xf53C57338A304558709EF69fe53b518C5f62733E",false,false],["blast","dackieswap","DACKIE",18,"DackieSwap","3045022100adb3389a1d4fdce634e8f5e83ae7336fd89931eeed1d5e21858bfecdc2b86f7d02205ba6ecb9800a71558f7f8ce0eaa962383bb5335c8d6626e4a0a3d19897451ae6","0x47C337Bd5b9344a6F3D6f58C474D9D8cd419D8cA",false,false],["blast","davos_xyz_usd","DUSD",18,"Davos.xyz USD","30450221008c6ce0bbaab357c834c55b0c366d5c4f768cf3324a24026453bb1076cc13946b02203d65fca8900d65f5aefa8f4e9e8fd277aa3aab6dd12f0f452a7b45b30a0d1868","0x578122317baCa7A3C7BB5301460d2f4F96E9394A",false,false],["blast","digicask","DCASK",18,"DigiCask","30440220499c4556c563b9c33de298a0a00ea76ce6f182aa7cf100b1f0fa19ac021c8a7a02200e712660d0575a173701d2302d0e979dd6e9976bd7c80db24758270833b0c828","0x9306FC95b8becdC9166112Fd6cF86B39e2335f09",false,false],["blast","djenn","COIN",18,"DJENN","304402203c723de41437f659abc70fa4942e0363e366de307f4d1ba802d8fdf0ca068805022010784df1ffb643c0de2906983b0ddbf73d11497b58406e507b3be456d267382f","0xb73d8850510f2001FD4655c3bAF98F3dFb00c0CC",false,false],["blast","duckie_the_meme_token","$DUCKIE",18,"Duckie The Meme Token","3045022100a654a347d02050e37abe1daedf069deb10d476138877dd2f1e9b86fd5ac084f4022049e105cd1c065ddc91f2260b9d6785fdc9daa4ac82589b1b64dbd1dfdd8d2c73","0x1ba52A63ADF7e9425DDd85b378DdA25e3818E596",false,false],["blast","early","EARLY",18,"EARLY","3045022100b5423de105b48ff34ec355fd3d1edf1e9f532914971062abf2ae321f022d320b02204cf09ec4114f33688ac22381858ab7c398dec8d6a368ad56f07e19d5d480f1a9","0x7135B32e9903BdB4e19a8b1D22fC2038964B8451",false,false],["blast","eesee","ESE",18,"Eesee","304402202468951934dd09ff6ce8101617dd62d406afe0dd9cec9fcb6918907d83d52af60220723b1d1771bfc194127341294f9ae0efb0bbc51205611564879e5d77554a17ad","0x491e6DE43b55c8EAE702EDC263E32339da42f58c",false,false],["blast","finger_blast","FINGER",18,"Finger Blast","3045022100dde09435eafe666f52db36e56a4525178234e3842559c39ed04238017bde6870022035f14556a9482280d972efefa8ee2c7ff39ea8f8603a8bb512b8f786bbe78a79","0x7217124C626f0b7077bE91dF939195C9a8184ecC",false,false],["blast","gamestop_corp_class_a_dinari","GME.D",18,"GameStop Corp. Class A - Dinari","3045022100d01bf3d17cb7c6d70e5bfaa67ecaa5c124e2dd095902170e7e90715d81b7f22602200cc259de583cb2173110037f71f2ff39f65d6df1db523651979547f972db64e1","0xe2a8B9D1A129df339118c5b10EEeFE4dAB9334E1",false,false],["blast","hyperblast","HYPE",9,"HyperBlast","304402205b9fb3e1e4059d5f69fee49d2948316658081a851b3a4eaecc8ac06988f8d3a302207add066c3ca9331590f93354c6f45d10b04b1d6d63d27ca8badcabd3be642aab","0x9FE9991dAF6b9a5d79280F48cbb6827D46DE2EA4",false,false],["blast","inception_restaked_eth","INETH",18,"Inception Restaked ETH","3045022100ca0697fba90946cf506a4807c26a355e56d9952f49a0beca4b1838e9a172afd602206e9f634d43a08f1074ffeceb16c61ee1f3fec1de6dee810ded6c6bce482d17fb","0x5A7a183B6B44Dc4EC2E3d2eF43F98C5152b1d76d",false,false],["blast","juice_finance","JUICE",18,"Juice Finance","3045022100a6f6c2c1221cdf61bd9160cb28a1c644b8b1dceeff40e58c82a7c9e7e7a67f9a02206695d61dd9e2af61d6a335112e8ab472dc40b65643ea56db4d4f3170fa83c473","0x818a92bc81Aad0053d72ba753fb5Bc3d0C5C0923",false,false],["blast","kalax","KALA",18,"Kalax","304402203347f6fb17fda78b1f2861442a126bae0275de574bb0b3204afee092a166dbef02202c0053aab708cd8106f504809cadf1ac32f11cdeb50ea0b3b47c63a3994b6de2","0x2F67F59b3629Bf24962290DB9edE0CD4127e606D",false,false],["blast","kap_games","KAP",18,"KAP Games","304402200c79b2e3f419c43fbe948c48d321d07cda3704d31a264f6e260306cfaba80c3502205caa639f9b7e12e097e9c577d77b18bb50deab808baff8f911c0b3c194811b3b","0x15d24de366F69b835Be19f7Cf9447e770315DD80",false,false],["blast","kelpdao_bridged_rseth_blast","RSETH",18,"KelpDAO Bridged rsETH (Blast)","304402201c26c5680c89b4938d8ff4a3639378c73280f0bcfa339a50f45238dfcfdc686602200afc747f4515d74d0d4de6bca3d79b66bea2f8fba382317ef9a8c601225a37e8","0x4186BFC76E2E237523CBC30FD220FE055156b41F",false,false],["blast","magic_internet_money","MIM",18,"Magic Internet Money","304402204683da15a16429b50c3a747ced1facc3ec162b6815ac536e86607ab63d25783402207a0bdd7df536ad7848c119f110e379b23be0c69880bea9a67ef57137d1dc625a","0x76DA31D7C9CbEAE102aff34D3398bC450c8374c1",false,false],["blast","maha_xyz","MAHA",18,"MAHA.xyz","3045022100a96399f9d1124e31fab9839367eacd5934c07dc64005c7dee42fe5663f4a7140022074a8cf8502fbced58f162922592833c741550afc475c163b403b654a7f62d73a","0x6A661312938D22A2A0e27F585073E4406903990a",false,false],["blast","metastreet_v2_mwsteth_wpunks_20","PUNKETH-20",18,"MetaStreet V2 mwstETH-WPUNKS:20","30440220597a411256067355675fa3f28770c3ba61c22e02c1ed61ab5c831862344ff564022060b8fed45d34bc7e75922f5990fd7e7e1cf8eba5d66240af51b6f0fa21e7eb3f","0x9a50953716bA58e3d6719Ea5c437452ac578705F",false,false],["blast","mia","MIA",18,"Mia","3045022100acf535ffbd8f09d1a3179f939b42e31b0260c22576fa103f12da4f52d2c6b375022007765af6567868ed08c13f681630fa4e507c3cccd46a950acd07856b11f5eaae","0xA4C7aA67189EC5623121c6C94Ec757DfeD932D4B",false,false],["blast","monoswap_usd","MUSD",18,"MonoSwap USD","3044022010e63694589c25e252e53839899629d4230fe58ed8f8f36ae51c8d675319ce30022042b8c82ef95369681f8be38c63b1a8b40d7b478b1422e32c6c3ab69a19a25862","0x837fE561e9C5DFa73F607fDa679295DBC2Be5E40",false,false],["blast","neptunex","NPTX",18,"NeptuneX","3045022100f23c1f96aa528a372b808be1fb63f7b2536c6e44ebd895a00958307c10be831a022024f5f05e593465b5effdcef55798bc9286a9a09d42d224c01f41a08d87f33de5","0x75483179a38d21F3608E71bbEdE5EC1314F0067D",false,false],["blast","off","OFF",18,"OFF","304402202e0257c6c65c78b9cac9db57ee11d43d9ab36c2998c89cf5c5c39bae299b0fb702200b4333658c20233bff32369c2fd79bc3be6677c874606936d39c9e09f25a0cea","0xD55eDfc79c0d14084260D16f38BdA75e28AbFb6A",false,false],["blast","oh_no","OHNO",18,"Oh no","304402200bbb52c822a317cbb37483c841190bbb79ea9428c5ceb67834fc461af901df6502206e5e0e14fcaaea947a552a30652e142c55610e3e0ea751eea38dc3bc517c101c","0x000000dAA580e54635a043D2773f2c698593836a",false,false],["blast","omnicat","OMNI",18,"OmniCat","3045022100da24b990a627b58f49ae0ae3ad6aa7776ac4c7e2a71a7c683dfa43d2e4f658c402200bd549573869763168315f9ca5388c5493690e1d055997f31be4c52c247c0188","0x9e20461bc2c4c980f62f1B279D71734207a6A356",false,false],["blast","orbit_protocol","ORBIT",18,"Orbit Protocol","30450221008c73275451aeb8778d1dd94fc32aeffd62e24d491bfdc3ecd33387d198667c8202203f1761ba8926cd9ef8003ec0fc3b553f47d2da19f2b9fda75137d09d7107c47e","0x42E12D42b3d6C4A74a88A61063856756Ea2DB357",false,false],["blast","overnight_fi_usd","USD+",18,"Overnight.fi USD+","30450221009c0b23eab3690199d3edeffcfff4eb054bf4a162cdaafc17c694cad7faf3101f022035ba4765303d2abbfe334beaf8e0c5a7c8918009ebe5ba82e21b60b30d04b00c","0x4fEE793d435c6D2c10C135983BB9d6D4fC7B9BBd",false,false],["blast","overnight_fi_usdc","USDC+",18,"Overnight.fi USDC+","3045022100dd14874842733010f48c3fc6ab3dbb8fc3de15c1596cc7ae42bffc38015cce0702203fa1db0697a9634800e13610c1424c475b796fe845909719add387549fa1d39c","0x870a8F46b62B8BDeda4c02530C1750CddF2ED32e",false,false],["blast","ox_coin","OX",18,"OX Coin","3045022100cb19930c77617905f5bae493c341f93073cf48d3c039cea60b2510103c70d24702205f83e9017af273e4c8f31f1fa5a35efa37347e76c14e000c47be5e63ad3688bc","0xba0Dda8762C24dA9487f5FA026a9B64b695A07Ea",false,false],["blast","pacmoon","PAC",18,"PacMoon","304402202fe4c21cd0051c604e963867709bcda34d74714478c195c11a007c2976585852022006c4774f059751343b102da2091e1f7123018ab04aa56bdc3a4bc6be9eb0bfff","0x5ffd9EbD27f2fcAB044c0f0a26A45Cb62fa29c06",false,false],["blast","particle_trade","PTC",18,"Particle Trade","3045022100cf7e083c3d323e401c769ca7fbb0baea0d92fdc5d43e0ca349454ee713eb213f02207d6b85d89087bd5ff5df51e1d51ad9cb3eafb5a44ec791e2a46109e3892454ef","0xa027a3A04b44f79560153234E999b17C88e22DB9",false,false],["blast","petoshi","PETOSHI",18,"Petoshi","30440220503d0ac6d03f59eef8bf4a1618a2a326b5830541c5b631a0f2113ff39a38978c022035c373d45f3b19f8178a6f52bd63b0e48803f6fc9c75d8f25c9ff94554c64054","0x15bD262ede6E8aA04b2361a1Df697adF1Cf40e75",false,false],["blast","pstake_finance","PSTAKE",18,"pSTAKE Finance","30450221009b1ddc2f17c29b77a35900891001b3429eaa94cf483408b8eda8404cbc2a714a02202ea172635f4a33d805c7642790b4e9a136852ff8238d8220f432c0008f829a9b","0xcBf7B47E9da345812e3Bd732E3EE369a7203B5ae",false,false],["blast","pump","PUMP",18,"Pump","3044022073ef94bcc9006ef16b7866b4258a76a03bcc6da04f0eb945654aafafbce0629e022023a146e57761e5276d2943bf22fd7c9d7cfb700d30540e72bf33b1fb1aaf8337","0x216A5a1135A9dab49FA9Ad865E0f22FE22b5630A",false,false],["blast","quack_token","QUACK",18,"Quack Token","3045022100ba7142e0fcf5ebdf96d13ea0f5ddd011f026820f9e071ad446cdba9c0300e33702206b8de8a6c4e07152d215a067cf22d672cf7be7e19f37f80f1867eadfbb138f52","0x59DEBED8D46a0cB823D8BE8b957adD987eAd39aa",false,false],["blast","rabbitx","RBX",18,"RabbitX","304402203ea5d07f3964f687afb2e670e61d46b8d439dbdd7f3eba12e7055484fcf1a37c02205015bbd7afdea0522d18c32abd1acf25c9ea10dc7e3aad6dd9ffe055b49bb0e4","0x236bb48fcF61ce996B2C8C196a9258c176100c7d",false,false],["blast","reddit_inc_dinari","RDDT.D",18,"Reddit, Inc. - Dinari","3045022100d9cb08859f568df78d5e374f81c433460c14f5fab3d7cb2e1823724b20a76a51022078fddff2d8cca230bd0952616dbd9952a2351eefc28105c123f43e06639cff37","0xB66fb7A6baAeCe3edD6b4D506b0e2f0BAE5Fc6E0",false,false],["blast","renzo_restaked_eth","EZETH",18,"Renzo Restaked ETH","304402200aeb8a90f295de9b44a37dfc5a377e177c20ab4277c4b95354223cefc90b73ce02207c0f7069d05569de5e173259566b98982d3e36a835a2d58c34a36bb9d014d8ea","0x2416092f143378750bb29b79eD961ab195CcEea5",false,false],["blast","ring_protocol","RING",18,"Ring Protocol","30440220017b9a695ed188cffffe7d4d4a19954658360e0ef5b41720e692ee30f514313802200fc85e03a3ddce97036a33639289715efc1d180fd7191610b634db38efc20846","0x25F233C3E3676f9e900a89644a3FE5404d643c84",false,false],["blast","riot_platforms_inc_common_stock_dinari","RIOT.D",18,"Riot Platforms, Inc. Common Stock - Dinari","304402207ee74f57ed7e7be01414c9690e541a2029ce74fabff04565aad29dcd5d4c756b02204f698df24b1630b1a7737fa41b09235d4b0dd3ad4fe4b33bbe190686974b7f0a","0xA5de16db7c14Cd87fb35042Ed8E7A6f4f00b7f26",false,false],["blast","sekai_glory","GLORY",18,"Sekai Glory","304402201ef475223cf4f4bb1bf0aa444d326cec902ccfad8310ef44db58cbef4bde1e7e02201fe9bd3d3e337d941ee59c25ca0bef1c4e2e64139d967750274c4e6e76affb93","0xd582879453337BD149Ae53EC2092B0af5281d1D7",false,false],["blast","squadswap","SQUAD",18,"SquadSwap","30440220378958b83ec4d568ba6f461991d82c41eea5c2aaacecbe98d57e61d3b60872ef02200e311de033153903d9493691fba44c57052e3351223262f24aaec48e4f0cc3f5","0x08Ccb86a31270Fd97D927A4e17934C6262A68b7E",false,false],["blast","sss","SSS",18,"SSS","304402206b59e347c9fbbcaf39709abc58007dca8085087691b6e14e77367480fba1c4dd02206de96d791448186f9779ec6029adfea50e776184cc2433c10a3ad611aba211f0","0xfd4D19F9FBb9F730C3C88a21755832BD2455144e",false,false],["blast","staked_usdz","SUSDZ",18,"Staked USDz","3045022100b40ef9603ccbc38eac428630aeae5fd43f40f7134fbaaad3c44ab33e1933929502203dcdbf618a4d3037602d5d86066a48273810e487c68a8471877704c0b696e33f","0x73d23F3778a90Be8846E172354A115543dF2a7E4",false,false],["blast","swapblast_finance_token","SBF",18,"SwapBlast Finance Token","3045022100b4682e7fcb6b58d5cae891f4ea70031a9dfb4518cf1fc060e32e4b3277bd7652022063fd9b17f35f19975e4f3fb8cdab57f30b8e3e289382f933a8c568d861d45271","0xd07379a755A8f11B57610154861D694b2A0f615a",false,false],["blast","titan_trading_token","TES",18,"Titan Trading Token","30440220793e1799d3d7519832ddfbcf78f6325f8419ae70f82ad803f13077ea850002e702207adaeb3e288bc769ec73820bee57f903b4b0c561612223914f2d3d4c19006e8e","0x87E154E86Fb691AB8A27116e93Ed8d54e2b8C18C",false,false],["blast","uber_technologies_inc_dinari","UBER.D",18,"Uber Technologies, Inc. - Dinari","30440220575e02c3f9a5e02abb60cf41f7c27843030b0cc2931f913205a40a86a887db7902207c0c7ca6abc5bfc7cfdb04eb29bc33773959efdb9ae859e6fd706985a4d2f928","0x904EBA5084426b0BB5C2e88770ABc92155428Fc2",false,false],["blast","unvest","UNV",18,"Unvest","30440220708ac4a2b69a4cc5bef3583522b54764359bf9dc3fa8528b66d65645900e0f3b02207de8b73dd44ac5936e9faa66827053a63b643fc007168aaed0ce28ae7473aa7d","0x51707DC661630F8FD624b985FA6eF4f1d4D919Db",false,false],["blast","usdb","USDB",18,"USDB","3045022100efcb5ef263928fdb49179d224e6e26721eb06488e1e48d2d4802ab62ec9be5c102202583b646be47d3e3a1c678b3c17cb1d9435f6fb5668d9aad2d7bf8b8b03167ac","0x4300000000000000000000000000000000000003",false,false],["blast","usdz","USDZ",18,"USDz","304402202df70da0361935a9ef3ef30faa09e059c27e4b2f657476b17b568f2cbf626679022074e18ce360034c4663672e78522c90dfb815ba2b75b5e12a2ff4840a10591101","0x52056ED29Fe015f4Ba2e3b079D10C0B87f46e8c6",false,false],["blast","weth","WETH",18,"WETH","3045022100cce68c7309151dee4380adb695ff0db3381c4d7ce708410c444fa1f568f2a7a6022075eb3d33a2eff56403de0d735e2e634b0f0c0497695c9bc4f0ae1ce2b947e8d1","0x4300000000000000000000000000000000000004",false,false],["blast","wolf_game_wool","WOOL",18,"Wolf Game Wool","3045022100aa0d5f78e3fc99883f3f929b03acc19a25548b06ae73a070529a4963d369f4dc0220389023e1c000740e075bcb7703e677d51dfec352c4d1a88700dc1978f637e70b","0xb5A86030b64AfAa75c42c0D28f8d5ce5f9f61401",false,false],["blast","wrapped_rseth","WRSETH",18,"Wrapped rsETH","3045022100ee132b8e29761519d3b9d32f2318ccb49bd2a7fa8e523ed70eab89785a007f850220165babde177e1211fe6a550e1603bd65d7fb49835042d8cbe2c5ab4d21810b7e","0xe7903B1F75C534Dd8159b313d92cDCfbC62cB3Cd",false,false],["blast","xprt_native_asset","XPRT",6,"XPRT native asset","3045022100a1da1c06fea0d463a92fb7e58e68512aaeddba230c7cb11ad78c0a873d33e1da02205ddf9b6ccef219631bf55c38c4877617efc1e5ad3462b20cca651b473d301f41","0xc7Edf7B7b3667a06992508e7B156eff794a9e1c8",false,false],["blast","yeltoken","YEL",18,"YELToken","304402201e3a3179f4e8c5695c6bc3d65b47057b6d32198a1488ba4d8598732faaa0a91a022054ba9d9651edc24bbcb9697c2dae4b17c54493f254abe6a23b0f605fb2ed09b3","0x949185D3BE66775Ea648F4a306740EA9eFF9C567",false,false],["blast","yeth","YETH",24,"yETH","30440220722c509aff5f9cb5f7711f5f23f5116c1858f0a9f1c5fa5e66b727e388e0202e02200cd775dd515084ac9f1a6ff0961442d9dbb3659528c52a725cb490c8fcdc66fc","0xCf09205D04647B0dbF99fe702113358DF764cED3",false,false],["blast","yolo_games","YOLO",18,"YOLO Games","30450221008665893c3c52e5d7701b78498a626bc4b574b390c581de1d9fb01edd1b75403a02203eb5f784709e58092780349310d8c6f736fd1d1568f0d851326ce3dbb9ad96df","0xf77dd21c5ce38ac08786BE35Ef1d1DeC1a6a15F3",false,false],["blast","yyolo","YYOLO",24,"yYOLO","304402205b65aa4c27488e16c5117e1101982da46217c0dbbd211b613e5ba805cc06d2b60220254315a840ba053ed635eb082af5a83f8ca10c593d7682c510e8af9ddb45f505","0x8c3EDe5dB70719aB9191655994880b088DD03917",false,false],["blast","zaibot","ZAI",18,"Zaibot","304402200ed90a5b4a90780a180ccdc09bfd69e5932bea698ae95d427ea7342a67fd80cc02202caaf1fa349f4f70c2c1708967323209e22904f67781fa0048b535cfb47cd626","0x68449870EEa84453044Bd430822827E21Fd8F101",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/534352/erc20.json
var _534352_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["scroll","abcnuri","ABCNURI",18,"abcNURI","3045022100ec1cfbf59a5de3f261a1284ff596655f9b7b52c208434587a0b2470ae96be97d02206b26683fba7055d9caf4f5671226f4d398226f996db6f11962ad8c2a1c8ff8bc","0x330c43d22bD65a60FfeA93a197f04e87FaA27b70",false,false],["scroll","ankr_network","ANKR",18,"Ankr Network","3044022058f713487b2763a15dadd32c651a49e942e3569a72a56ea91673cb6ca7cd63d802204115be6868141c808a0d72cea3958cccbede9c2041564ccb78fc1fb5b6658a57","0xDF474B7109b73b7D57926d43598D5934131136b2",false,false],["scroll","ankr_staked_eth","ANKRETH",18,"Ankr Staked ETH","3045022100aac4f50a56ade8132949cd0d701f62c0f0aedc8c4e5e041aebcf3f0866993f0902202f244cc8f65c344bdf73a5dab8e26de6603a459d4f8a9a19bf9984e64d365fc4","0x12D8CE035c5DE3Ce39B1fDD4C1d5a745EAbA3b8C",false,false],["scroll","axelar_wrapped_usdc","AXLUSDC",6,"Axelar Wrapped USDC","3045022100a25a386dddc0e7d5b2e34f1e49774eb3c3ec6d0898f07bac0726464098c2bb1402206d3b1fb77e42884f965faf8ffec3b4ff362f3cc83cef377166bd0cf26adff7fa","0xEB466342C4d449BC9f53A865D5Cb90586f405215",false,false],["scroll","chi_usd","CHI",18,"Chi USD","3045022100e661187eb1feb3a63009d6eb4fe1fa053c43f23264be7b3bba0dacdd364109b7022034d8afef50d9ef743477d56eb4f97aa2acfa8319a0eb2ce9a19bce8869e5468c","0x2fC5cf65Fd0a660801f119832B2158756968266D",false,false],["scroll","dackie_oft_token","DACKIE",18,"Dackie OFT Token","30440220370932d9f6e8153ddb27948e08db73edf1ee0ee270c6d09fdcb0af94ee577b9902204a37cd61955d942141c736fbf7ef0683f1793cbfcb2589e0412010d7032a74af","0xB9010964301326160173da694c0697a2FcE82F39",false,false],["scroll","danjuan_cat","CAT",18,"Danjuan Cat","304402205b5ffa79771c578a8aee5ab826e7b47757aabafd33d27b31a09e114dce16e3a802204eddf41a7c8fba63b9185a5421931876368c9ec7f2128d6bc304cf7cad246741","0xdd6a49995ad38Fe7409B5d5Cb5539261Bd1bC901",false,false],["scroll","frax_ether","FRXETH",18,"Frax Ether","3044022075decf07e3d923e3f83fc67c477f9cd30c59b6ab33547c5555a41eee1e4c4968022047c31a23eba449933b3d7b96ef7caed86fa2d7e4a956467f410f89654876c5b6","0xEcc68d0451E20292406967Fe7C04280E5238Ac7D",false,false],["scroll","impermax","IBEX",18,"Impermax","304402204a73d99c01641b7c17f278218419ff9b325da4ae203b6ef52e0b818dc30524340220385446184b2980c45d3979fe4ad1be9d35bcc2999556f285e779d3e59c58014f","0x78Ab77F7D590FB101AA18affc238cbfEA31EAd5b",false,false],["scroll","interport_token","ITP",18,"Interport Token","3045022100ca875bb5fb4c03e8da90ccf4634bbc82975b41eb978fd26efc585e46f7c3c18d02202c09ff6eb55b80798a4d8e9be7fb38076d66cf6ef405136ad6c713e0c366a99a","0x2b1D36f5B61AdDAf7DA7ebbd11B35FD8cfb0DE31",false,false],["scroll","izumi_bond_usd","IUSD",18,"iZUMi Bond USD","3044022068de079c56ac1d5cb6fa6575bed64c3fa0974d8d73ab683bee0a944bf376b87e0220361bea295c93c604a44ba295b3838918fa15db1e127bfb4ee3f6fe8c7caa04b3","0x0A3BB08b3a15A19b4De82F8AcFc862606FB69A2D",false,false],["scroll","izumi_token","IZI",18,"izumi Token","3044022075acfd571512296c6e3dccd7c227b0196ca916c487340725ff7add6d6cf1219402203423cf2eadb8db472fa60ef45c29028b012e0dfad4344d96761127ca1583582f","0x60D01EC2D5E98Ac51C8B4cF84DfCCE98D527c747",false,false],["scroll","kelpdao_restaked_eth","RSETH",18,"KelpDao Restaked ETH","304402204a92c134384e908638ed978f4025aac1036e868eead70b66344001c5b820453e02201bc5cb7624c7028e116063b45a5001ddd8ffff16bb2aa76feb0821e11d8b9c70","0x65421ba909200b81640d98B979d07487C9781B66",false,false],["scroll","maha_xyz","MAHA",18,"MAHA.xyz","304402207746bd24f84f17fad9b072babbc800479d90bb8995c4c5d0894bdc78f35c4f3c0220198d13f14e58d0b50f599061a9375f1d8194af994e8556f7c7dec65957bb6236","0x6A661312938D22A2A0e27F585073E4406903990a",false,false],["scroll","metavault_trade","MVX",18,"Metavault Trade","3044022010e6e7b645650931a87f7ad9245d5f372a21a6ee64aca512dba901c6daf49ec40220317b6befb7bcfe21249c866edd584bde83dafb5dd43ba6a219ec554f0ff7b067","0x0018D96C579121a94307249d47F053E2D687b5e7",false,false],["scroll","nuri_token","NURI",18,"NURI Token","304402205af476c33d5872b56926db5c7369d61e6cb914e5ac86eef6092ab2cd4e7fa718022010651d6396cc508040cfe8811be533d5d64d6cead7ef8072b67d01bd9d54069a","0xAAAE8378809bb8815c08D3C59Eb0c7D1529aD769",false,false],["scroll","omnikingdoms_gold","OMKG",18,"OmniKingdoms Gold","304402206c81dfed16ca11be478f3515280291c0abda8b8cc9697a5d85b4fab07c5dac9602202546bb7217a9cd19b8e5aa0141c5e2af10f3b01cac7d85dda3dbaeb0282f64c4","0x6B7d1c9d519DFc3A5D8D1B7c15d4E5bbe8DdE1cF",false,false],["scroll","panda","PANDA",18,"PANDA","30450221009006f7a846073fe74ce1cffcf8b2ef629c3b89195df29029c31726fe85745d450220652aa79bbd62643337050b66b4aa5198b009c164265fb8607747caef4ebd90c2","0x61a9cC561b6c1F9C31bcDeb447aFeCf25f33Bbf9",false,false],["scroll","papyrus","PAPYRUS",18,"PAPYRUS","304402206b6ed8e03d056cd031b78063d8df974aa81cc194f47949bc14816836c4dd012e022005e9d034128b2859cdd9af0df459632def7f06e82558c5f6e964d2e57c416f44","0x0Fc479e2f9b7310BfB1Db606CF565deA6910eedc",false,false],["scroll","punkswap_token","PUNK",18,"PunkSwap Token","304402206694fcff6b4176e2a5fd4d2777af164d6a1bc05e940963d2f6ca8dca43a5cd40022021c08828798b768bea42924beffe1c03cee7cfca71202718f59642bab5bf2cc7","0xDdEB23905F6987d5f786A93C00bBED3d97Af1ccc",false,false],["scroll","rsethwrapper","WRSETH",18,"rsETHWrapper","3045022100f98ef813293c4307493ca8c1b1b6ca97917051ea8af32ff4faf42df35490b767022071493b42e4c07e4476263cb0eaa66db67a5cee2dc74db3a1f032e67a85be5de4","0xa25b25548B4C98B0c7d3d27dcA5D5ca743d68b7F",false,false],["scroll","scribes","SCRIBES",18,"SCRIBES","3044022023d09a182dee7a9464d70e0d7040c0874c48b33eb58635429232a8b0cce6aee9022060e10a3ad870925bdfdc01330af812bfdc5de1bca603ef6933d35f15cb6c553a","0x750351a9F75F98f2c2E91D4eDb3BeB14e719557E",false,false],["scroll","skydrome","SKY",18,"Skydrome","3045022100aebc8c51f0fc9ae98e74027ea51a53d526cd59197fe556b7e30838f2db41b64b02204187d0e27384a34f3dc65e4396f91b0740ee03bdf3da63cb41329f5928ea9606","0x95a52EC1d60e74CD3Eb002fE54A2c74b185A4C16",false,false],["scroll","stakestone_ether","STONE",18,"StakeStone Ether","3045022100a31aebdc92ec6a2e26e7a4cdba5ddb0d31f18a96639c830462d6a7df86c29f7d0220150ff94f69697ded33243dc916d39196f7609b858c61a6348dc99ad83d305746","0x80137510979822322193FC997d400D5A6C747bf7",false,false],["scroll","symbiosis","SIS",18,"Symbiosis","304402200145ca2f8b25aa5a73b6f8fd5f79f8f3352aac97339848efa5eb4618cfdae6af02205d389630c3aef70bf76b0bb3e04c66a07a1cb83443df8d6d941494395903cab7","0x1467b62A6AE5CdcB10A6a8173cfe187DD2C5a136",false,false],["scroll","tether_usd","USDT",6,"Tether USD","3044022028ed95bf81faeb1843f102e44cf9fee85815f6020c1a28cb7a2b9b7a97d753b702200acdc6353cf45485f4e9ee7067df0652d6d9580299c756d1f829d199caa88f3d","0xf55BEC9cafDbE8730f096Aa55dad6D22d44099Df",false,false],["scroll","tokan","TKN",18,"Tokan","3045022100c0d222ce7a6dc20bddc35e880582c031261335db8aa973e145e9c9512b9c5249022011407782464b6a4e48777f7a86a34dd8fe11699fb605a615de7cb4a1e1a528ce","0x1a2fCB585b327fAdec91f55D45829472B15f17a4",false,false],["scroll","usd_coin","USDC",6,"USD Coin","3044022038e3a2918006290cba10a9db778b039a55bbdf1a2d1f601237270c9cf08c95c8022005b87196aeb5a63ab2ae258330770ec9ea8cbc618a3718920591b44ba72773b1","0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4",false,false],["scroll","venium","VEN",18,"Venium","30450221009f29ac18832d364ec65916a0a9a5093a47b7b3bf3ca93e9f103145d29e0f443f022062d1dc0e77c72242dea54afd16a9b19487ae317df9d4f65533df4df8f3ce30d1","0x690F1D2DA47D9A759A93Dd2B0ACe3c1627f216BA",false,false],["scroll","wrapped_btc","WBTC",8,"Wrapped BTC","3045022100d57e06652620604afe2909b670ec6d05fc76b4e3cfb45d0d734c4a046fa5c0a002200c157603c6e337288759e6785159cd39f76e1849cd4745b005352ab6c8d03b89","0x3C1BCa5a656e69edCD0D4E36BEbb3FcDAcA60Cf1",false,false],["scroll","wrapped_ether","WETH",18,"Wrapped Ether","3045022100f1a60472ef27be7b14a239b643fccd9a50cf8a442246b3c280d887f4ae16076f022057d0297cc808f405fda3acb9b9fbcdda09988a6d094aae82180064d241ba7d75","0x5300000000000000000000000000000000000004",false,false],["scroll","wrapped_liquid_staked_ether_2_0","WSTETH",18,"Wrapped liquid staked Ether 2.0","30440220100ce70c0d7bdd79f779f175899ea6d4f08ae976e4ad60fe47cfce843f85558202205c2c61f259279fded681a49e5a60f4decbf70654a3bd1f163681b33a99b11b8d","0xf610A9dfB7C89644979b4A0f27063E9e7d7Cda32",false,false],["scroll","z_protocol","ZP",18,"Z Protocol","30450221009ab6d9cce37fb6b9b78882c5b159bb05aadb2bbf8ebb7c43edd84ea49bbe8ebc02204c3b5da7d14e85cdc7b9883946044942a3d3d3ada3550df6a2d02e3eeabee9fc","0x2147a89fb4608752807216D5070471c09A0DcE32",false,false],["scroll","zai_stablecoin","XUSDZ",18,"ZAI Stablecoin","304402200bbd94cfa524d45f99c9d63ff7525370ef36ad899a83e5f2f464cb075588684d02203a10284ab93317bfc0c8d2e0ad51d21f41e48ff479a436b3548159314a4cf3bc","0x44D4B627997b41aBd2BF2ea05B731fE535f01C3D",false,false],["scroll","zen","ZEN",18,"Zen","30440220359f50a5cfc82c3ce2c1519a3136cb4cca6a04c6fa0b0f4f6fd2f480ccb52ef7022039e46f9ef5ddedc718daa23aba9621530f4c92b696804b8986644450b3e72057","0x188B158CAf5Ea252012dbD6030AfC030329C4961",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/245022934/erc20.json
var _245022934_erc20_namespaceObject = /*#__PURE__*/JSON.parse('[["neon_evm","usd_coin","USDC",6,"USD Coin","3045022100bc8e76d1a47fd417544ecd4b38b1f30977f75c8711dc86d65a49bef8291fd3ba02204cb17b09fc2d4e5e3089469d5ad1e44eba07af1ce39b2724f315b6b7947a19d2","0xEA6B04272f9f62F997F666F07D3a974134f7FFb9",false,false],["neon_evm","usdt","USDT",6,"USDT","3045022100bf6c65cb5a4eb36f354f72182beb4d8adfb0b82984a64ed8119a68238e66072402205260c1fd0d27d2e9ba95b535b55917aaaaf45280e384f6a71a63f5f9ee0801ae","0x5f0155d08eF4aaE2B500AefB64A3419dA8bB611a",false,false],["neon_evm","wrapped_bitcoin","BTC",6,"Wrapped Bitcoin","3045022100d00aae92369376646a0ddb8fcb7531f720876dd4012f37ec33bff40a18e8297e022028aac8cac13ec1e3dca1cecb2bcb91f8dd1f7fe65dddb3515adfa038827b917b","0x54EcEC9D995A6CbFF3838F6a8F38099E518805d7",false,false],["neon_evm","wrapped_eth","WETH",8,"Wrapped ETH","30440220514fb7c54501ea53aa195e2817f7f8e8585ab5c213e6a332fd6fdac19e18ce430220500b7e7244e3bfa0e26932df533bad71aeed28b1672d5756ef8400bb15f5e1dc","0xcFFd84d468220c11be64dc9dF64eaFE02AF60e8A",false,false],["neon_evm","wrapped_neon","WNEON",18,"Wrapped NEON","30450221008a8dfa26824721b336757b18c36afb5ea8a6ee06c9a4a668c2f2bd9c4e7973ba02207642691dbdc8bef2ec63fb4baa71aa331f4eb2c992acfd8b5ead5b8c3ac2cbbc","0x202C35e517Fa803B537565c40F0a6965D7204609",false,false],["neon_evm","wrapped_sol","SOL",9,"Wrapped SOL","304402204b68791ab222a0c781912c0d6e70ac9accfe4aa40561f5f978717f6309cff44602202f88bf82a176797a23739fa655d3965c8c82cc12df1316a64c7bc5ea8503958e","0x5f38248f339Bf4e84A2caf4e4c0552862dC9F82a",false,false]]');
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/1/erc20-hash.json
var erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/10/erc20-hash.json
var _10_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/25/erc20-hash.json
var _25_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/40/erc20-hash.json
var _40_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/56/erc20-hash.json
var _56_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/57/erc20-hash.json
var _57_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/137/erc20-hash.json
var _137_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/199/erc20-hash.json
var _199_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/250/erc20-hash.json
var _250_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/592/erc20-hash.json
var _592_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/1101/erc20-hash.json
var _1101_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/1284/erc20-hash.json
var _1284_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/8453/erc20-hash.json
var _8453_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/42161/erc20-hash.json
var _42161_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/43114/erc20-hash.json
var _43114_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/59144/erc20-hash.json
var _59144_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/81457/erc20-hash.json
var _81457_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/534352/erc20-hash.json
var _534352_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/245022934/erc20-hash.json
var _245022934_erc20_hash_namespaceObject = "W/\"b825f6625e338d484a45063762b32c2b741454e6\"";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/1/erc20-signatures.json
var erc20_signatures_namespaceObject = "";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/10/erc20-signatures.json
var _10_erc20_signatures_namespaceObject = "";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/25/erc20-signatures.json
var _25_erc20_signatures_namespaceObject = "";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/40/erc20-signatures.json
var _40_erc20_signatures_namespaceObject = "AAAAagZCQU5BTkFmf9g+JModk102cX0wXVT6DKyZHAAAABIAAAAoMEUCIQC1YIQs9D3n3lLmBLNaGT3VegY8cOg56giB9fM4L+5ipQIgAwHFGoFv1RV8l3qMBIwuLqMFRPQXc6C0QcOUBVuI5HAAAABnBEFWQVh8WYyW0COY2J+8udQeqz3wwW8ifQAAABIAAAAoMEQCIGcXZLCPxvpWqc1Cp0g9m7ODawjhXhNzc+9DyDr1jFR2AiA6xq01JP1tVOHht4B9CNRdX2FpzwExGie/e27Ihec6AwAAAGcDQk5CLHjxtwzPY83uSfkjPp+qmdQ6oH4AAAASAAAAKDBFAiEAyf1QXn7qd9j3s6+bAWF3R+k2sk8l1sVeymWeFNt71WECIHto/yG0e1exvR4FmX0rHTc1W5IVR6I3qAlReOr7h8qTAAAAZwRMSU5LHMyhzmLGL3vpXUpnciqP2+1u7LQAAAASAAAAKDBEAiBRF4jgS+52eg/c0TSsqeCxBXMg924KoGTLiFOeH5UT3QIgMQEXY9f3WrGacI2ItiQoQpUWpyqF34ZlNwyl6UhlxswAAABnBERFQ09+HP4QlJpghqKMOKpKQ/3qs08ZigAAAAQAAAAoMEQCIBcofiS6faZOMHLIOz6b0wyJDf3GMYGVPhH/Xg+DfyeaAiBG6isqoczYgGKCFHCcTG2/k9eRwP9FB0xk7nu1tlX5GAAAAGcDRUxL7u7rV2QgQL5CGF9JxS9+mzj47u4AAAASAAAAKDBFAiEAg0spiaEuhsuQakJ6SVFWBsbDYAedQehwE/5gzxVXWPYCIEWz/7mhZ12Yc9aTs/0fq/n4CHCvmKvLU9ss860kiBtzAAAAZwNFVEj6k0PDiXMkSWoF/HWr7WusKfikDwAAABIAAAAoMEUCIQCKnkyb+XxOtOLXzOZ0/ZSvqmNNmoFt1I5fRLoqxU2/qwIgcqDF65vATGe91GQIgCosEIC8qRZ78ad14c2knUyEnWUAAABmA0ZUTcG+mk1dRb7qyuKWp71frb/BRgLEAAAAEgAAACgwRAIgevTBGn0tRMjDFAh+aZmehSulr4bamTUirzMhrNRvRvACIC2izh+YPZqEecMwTfVctCX6/Lklbt0ul605j2J+XC10AAAAaAVNQVRJQzMnMKT24D2cVYKUNfEDYOE8+kH/AAAAEgAAACgwRAIge16gj+W130LYkaCeHGC9r2aCgI66fVu2P27yb8vpa28CIDd19+E3guCDldk/TaBK6oDC6Rps1wtxydNZ59Ax67PTAAAAZwNSQk77MZ6l3e2M/ovPnHIO04C5iHS/YwAAAAYAAAAoMEUCIQDVvwPVmmUNBvySfeFyzTo3S6Suug5QKcHnExb6ZBrKzQIgAxJZWJf7jmwpB/5myNhicmQPwUcSjLivjtHbXbetDBEAAABpBVNUTE9TtLASFqW8jxyKM82ZChI5Aw5gyQUAAAASAAAAKDBFAiEAx5/BjbJDE0TvJn36cDXAX+jqTHiqv5TmecKvgVqsFmgCIEc2Wg0ZFxpfvAwLQVMeX8pf0/wrPkGwgLKzitGiIJqEAAAAaARVU0RDgY7Ap/4Y/5QmmQT87Wrj2ubW3AsAAAAGAAAAKDBFAiEAnTawskHThQR9wIdiC34r6wL+uywTUiMoSD2RKBlTs9cCIBDu8/tpm0ydY4P5EQO796D9D7YeHO9oTk8k9gkVpkSpAAAAaARXQlRD85CDDfgpzyLFPIhAVUuY6vxdy8IAAAAIAAAAKDBFAiEA/JoJ/9WSWAIadPMM2pUN5mxfwy0mBI13tVj1/xFVG98CIHN2jPhL5NCCJQfH50pdoC0tRjGa8mSKkhISYMBKtVmN";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/56/erc20-signatures.json
var _56_erc20_signatures_namespaceObject = "";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/57/erc20-signatures.json
var _57_erc20_signatures_namespaceObject = "AAAAaAREQUlt767uM08P0XEvmozDdfQn2c3UDXMAAAASAAAAOTBFAiEA1m4N01/cjbnD0AXcY+JL4Vk82Sg9228yWjDM2GVgIdQCIBPqOpcCdelHlSvx/s1B+IBBizCG02x8wwZLTan6c4XgAAAAZwRNQUltJhH6HK4qPiDtR/sbKTQ3wU9BsA8AAAASAAAAOTBEAiB3j1p7IwciDF5mbdcM1o/akVrTCyARm+W0uLQgJeV7VAIgZcR9o2q5bH1pV0/8scoO2bzPwX4dL9mAJPNsXAYsuDwAAABoBFBTWVPhjCAKcJCMif+hjGKP4bg6wAZepAAAABIAAAA5MEUCIQCOKk382M0ZC+0vSMFUXJThatiEHccAo2kRVw/1FQxF1AIgcsYlHQLL1u/oNKZCi0b0pCbJADScsLLM5sUdbmbzVEIAAABoBVVTRFRtki1kGkJtz/rvEWgOU1jzTZfREuEAAAAGAAAAOTBEAiAPE5k+APZwyUo+8NDM/pcPlpZMCHMoMNLwX8/0ScnqzAIgHS650qMYIemUe80Q4e9xaKZN68mEkPhn7eMw1pmQ1CoAAABoBVVTRENtK/m4ZM3Jewi215rUZj5xuKtlxFwAAAAGAAAAOTBEAiAvp3bkYVAk1dX1i/+ucJIuvKlDIkWQ2YjAGTxNEtvv1wIge6purDnJmot5pDWto4gSAoHAc0xS+DbfA76TMj7AK9IAAABoBVdCVENtybqoz93o4yh4fim0sHir8trcIFUAAAAIAAAAOTBEAiA32xL6BEzu8v+rKrSffxkWWHplzdPEPz215wuaZs+fUwIgA4/Qi1uSkIZqUlnCGR3wXQWP23MdESPvPXKOO7pG7kUAAABpBVdFVEhtfFmMltAjmNifvLnUHqs98MFvIn0AAAASAAAAOTBFAiEA9iUzz8B5bBqxyyUW1cMjcZHEII9fqE6GNCTlKB6lpGACIDOTGSbkRmcteVankjVi+la63nz63Z2c5mmHQjO+LQflAAAAZwRXU1lT0+gi8+8BHKXxfYLJVtlS2NfDobsAAAASAAAAOTBEAiBIomydfucdysHvNDAT4RAzfIqER5w+pJKxx7vrVIJVggIgCGsdeMrRxKvH2Q/pJOVBmnHflpHnRCi2fPd93UDVZKk=";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/137/erc20-signatures.json
var _137_erc20_signatures_namespaceObject = "";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/199/erc20-signatures.json
var _199_erc20_signatures_namespaceObject = "AAAAaQZVU0REX3QX8jX9WXQxjk4qXjeRmiCffDem0QAAABIAAADHMEQCIDDNTFknKzOqTKF/72sWGREuq6ZYzRwv1vzgPg0zFck8AiA+d9v31W0w6h82RrfiDgz82KValj3HzQUGXn42A82Z2gAAAGgEVE9SUhlcoioXfm7ZBcRp9PZM9n6Bn0nCAAAAEgAAAMcwRQIhAOPcyrJrgeOBoCvaf2aIb4gREWBCG2t2JC06wKHg4sfWAiAE2Q0yelh+g9AwmAxHeLQO05HS1vUd2hiuWw1eeXL6gAAAAGUCSk04jYGXJN1tcXYKOPANwB0xDYeXcQAAAAgAAADHMEQCIF1NgQChyOdnixKlKZ9sYDYknnBtK5rg99Lm/FQT35NqAiBlzKTMuQetYH3YJk9mVmN55FgBGhA1aGCsbu6w7jMdvgAAAGgFS05DX2IY+nLg7kxYChKbDOW9BpTXFsdEPgAAABIAAADHMEQCIGTDomddTzrmof4IfKQQZfVfs2TVtckSfe8d/73B0mSiAiAIXyagqYd0HZisctCyZoXmoF4ENI81hD6/v0piVPly2QAAAGgFS05DX2XkZ/eemGl1fdgY37hTUGgSD2vLlwAAABIAAADHMEQCIGj4g2xe4dJRUrnFssJdINaDMCtEKsWXnVr2P6MMOhQgAiBylPiKGPXwrbB/dYRLmix3B+svcNTTjLMJ/krZGJwjPAAAAGkGVVNEVF902yhxn3+ThQfb/k8OrlVmiQPTShUAAAAGAAAAxzBEAiBiuG3Qe7xNuoHEkRNbIAe5MeI0U3BdsaBCmgQ8lhfp/gIgI1VeiDZpwNzvvOhr4mdoPajCcjbs/Wf7vUpQr0q/zm8AAABnA1RSWO31MCaupg+PdfyiX4gwt+LWIAZiAAAABgAAAMcwRQIhAP3a2Pm4ziwyl1Zgk1l2vjyoeLY3Jo7sgBrLUrDMvQQCAiA2G1JlW4YSX7cvgvJpv6P1at7iF5R4wonmm8HW4QhsQQAAAGcEVVNUWGyMAo01krg9ah0PU2NVV/2N0xVFAAAABgAAAMcwRAIgG7ryqrb35plP0u/QtLnqvPuK9RfStu4d3+JVhVgV53QCIDqNqdznA0GIMeMAqvvskWsqt/4mlgwQJYD/RrxCSy/BAAAAZwRXQlRUIxgfId6lk24kFj/6uk6jsxa1fzwAAAASAAAAxzBEAiAQydRy125KT+qULSDaT5UBXdMgzuvsrndrAlk6+UumuAIgPgrZLjQl3it8Kt8EJY5/I9Tls1UVeR0Z6qjlQ87gm84=";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/250/erc20-signatures.json
var _250_erc20_signatures_namespaceObject = "";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/592/erc20-signatures.json
var _592_erc20_signatures_namespaceObject = "AAAAaARBUlNX3iV47exGabp/QcXV0jhjALzqRngAAAASAAACUDBFAiEAgTEhgbi2oTKxutOOdj6GoTmDkJwmJV1OcaSBVHK4ljICICJZpkIrtj42ijVg0jVpOxBamdGiiR560Bkxnst8O9ujAAAAaQVuQVNUUuUR7YhXXFd2e6+3K/0Qd1QT4/KwAAAAEgAAAlAwRQIhAI3kbIpmVKdKcvBw+fvWK9ukbdgdeZPvPgYY3sxDWPHHAiBZDCNfKze83OJLvLUfcR0eCU3l0ipJPPo3H09ZzoMtEgAAAGcDQkFJcz68xt+F+CZjSd79CYD4ztm0XzUAAAASAAACUDBFAiEAmWzBHNxp5B/B+JKmeaC2JM3KjObnn+L0bk4g7kKGLLcCIDY1pMhr7/V+lWRELVAUDGkuynBilLj0e6+loD/M+/M/AAAAZwRCVVNES/dpsF6DL83JBT//vHjKiJrLXh4AAAASAAACUDBEAiBTyzshRHjLteXxvAyoShBc5Ecj7Ue4IiWJErR81+QeEgIgW4i94YGc1IQeIm2KJwZBZkcDcPBmqcLu2DBPKPFaUjcAAABoBUNFUkVT5pWDti17fYpWjh7AjzS2SFifTPEAAAASAAACUDBEAiBTatu+uzkIlTBz0863/4rp+w5WFknmU2L7i2caFvO9tAIgVoFQPdxALBB6ijN7mU4RlQlRCoDXPdCtOOxzTuup050AAABmA0RBSW3jNpjp6beH4J0713ce9jVX4Ui7AAAAEgAAAlAwRAIgeP1c6VraaSUwd7c4p1AczOaAUlzZqMG9VnpDj2YC6SACIDD06qb3w3fBbdJv27Nby6bDecz+qfhiPcn1+wWmTvg9AAAAZwNERU+1FUHfBd4Hvjjc/EqAwFOJpUUCuwAAABIAAAJQMEUCIQDafggLJqO+Kfkm75xsmDbumZ5/C3ggxua+azsXWcXEtAIgdPZSYURZl0HUSAkuvGW9hTiCmAOaemptQp1GyM20ugkAAABnBElCVEP/////AAAAAAAAAAEAAAAAAAAABAAAAAgAAAJQMEQCIHlGTDe47Bjs7lzlTMbRbnXPo51j1n9safARgowCpTdIAiA5qSBkeZO4pw5jMnHuFSHy01lH1gdJCllggDtDL6LLiQAAAGcESlBZQ0MdXf8DEgr6S98zLGGm4XZu83vbAAAAEgAAAlAwRAIgXuJc5vhNG6N2frl2RYxaVyOxEWgjj67aC0WF21YBAh0CIC2/iLz+FDjfMUnIJYix5sPYdtSvPsChaCuWdqtThFL/AAAAZwNMQVnEM1sbdvptUod7MEbspo9ucIon3QAAABIAAAJQMEUCIQCDhVEXUXCctzqOYk+2uK2jSaulYSxNmyQ1GHfciBusWQIgXgdYDuoArINqInN27pHxam68SdqawDC3uMkAb776R3sAAABpBU1BVElD3ZDl6HoggdzwORkgho68L/uBoa8AAAASAAACUDBFAiEA+ck1uyzP8HqtHn4QyeAXaf/WXH0ktrX7bPWpt1Taw/MCIDooNis+S+BTi8ESkvOLqUa/xS2OuSpGcBtgHxQ3Vb9HAAAAaARvVVNEKfbknG4zl8OoT3FYhfnyM6RBFlwAAAASAAACUDBFAiEA7jever3b4B+oufHlXnFOfksgKKztPSkGANHxOdxs5SYCIHfKjY39ZdUXGczTzybDEbT+SB80fIvEKw6nXZFKSjwYAAAAZwNET1T//////////////////////////wAAAAoAAAJQMEUCIQCHQbteNOVFU0SxKaxsA3GsMySR9FRA7ultycVVCb9aAQIgOWd+pHG8K2qOL3sKvTd7rqAh7eDQxxdYxgcK7iBCpIAAAABnA1NETnU2TU93nQvQ+s2aIYxn+H3Zr/O0AAAAEgAAAlAwRQIhANhXrm5JSMFD5a61dQWvDS0CBe7rCti4Xoc2dGLZKPhmAiBuYwGb3Ipj1GueTS5QckHCn1EXtBILgpv2uTgeJWAUegAAAGcDU1JTlEhhBpZlnej3Lhgx05IhSuHKSDgAAAASAAACUDBFAiEApzv+tz/yruyzshzmZWQyFIMvLFDAQRyZao7jr2tYF7QCIGeevnXjOpXEN6eprA/zhb9tyyPFRrLXB4MwanvJnL7OAAAAaARTRUFO7oE4s70DkFz4Sv4QzNDcy4IO4I4AAAASAAACUDBFAiEA8qjVGO2pAVxGQd75oPSTxYJPS+/luJ1h0kfswzLaJnACICBwpfc+NIcYJhe+LrHyKcSVlxZ0TFL59vje4DPQcoI2AAAAaARVU0RUN5XDbn0SqMJSogxae0VffFe2AoMAAAAGAAACUDBFAiEAnQHUCXm9OgsJucQcrS7jFWH/h5oQPGm3wrSpM5VeYTcCIG24Mvr/nn/WCQqUq76ubwuEI2JGd9g8TLrHZWlMZV7YAAAAZwRVU0RDai0mLVZzXboZ3XBoKzn2vpqTHZgAAAAGAAACUDBEAiB0eVLf8YlnRES9MCPnqbobjcE9M0u2QYMhHkq3MnAF6wIgBbW+2HYftvp8k4gXB5oP34kmAmkEMShSgArY6W4uLDQAAABoBVdBU1RSrqrw4sga8mQQG5EpwA9EQMzw9yAAAAASAAACUDBEAiAiln9WApuoes9mngYNVPEWz3nMrbD+d/356M7kIBbyiwIgMf7z0KiwW7PQF14ULOBG8U/ngDqILt+2WUOzh1xonPQAAABnBFdCVEOtVD8Yz/hcd+FA4+Xjwzkva6nVygAAAAgAAAJQMEQCIHCZCJsiRu3ZLW03cjzZbIBBn4/kHg6NmzqJbJaYv+RTAiAxM+5YeAvvoJhhBT+6qodxyylN1f9Ffhz511SGvxJELwAAAGcEV0VUSIHsrA1r4FUKAP8GSk+d0kAFhf6cAAAAEgAAAlAwRAIgEtTE44X9bTpdJh0H6joL6RnLuLD803Bl7PEEz4W900ECIC/ViGcysW8r4NzwI7U+dggyYxyxoZeBvFQdIhID4FdEAAAAZwNaTEuZgILEiOVIgg+XDfUXO9IGHOkGNQAAABIAAAJQMEUCIQDWbZ273qtq/RNVixxWoLobxsO4QilIq0ynd3NzBh6kAQIgSM7FXxMbagdH/yHOyU68t03FZAYg+pHLG+NJgEXDns4=";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/1101/erc20-signatures.json
var _1101_erc20_signatures_namespaceObject = "AAAAZgNCQUwSDvWbgHdPAiEVY4NNjjtyyxZJ1gAAABIAAARNMEQCIBB4EHWXzxi0IEaKkiU7vFEpOXQy4kwo7grxi05jdFM1AiBs37YBxlu19iR51k/fpN30u2UgeRitvBufchx/oTn0MwAAAGgETElOS0sW5HUnEaer7DJ5nJdvPO/AER8rAAAAEgAABE0wRQIhAJyFhYbKOiKL902FRVdvBdelqGr52nFMJ7pLjsEe8facAiBj40fwSsKrd6Zzj2M0O7VfUCG4WTmeWTbRF92KHL9c8gAAAGYDREFJxQFbnZFh3KfhjjL28lxK2FBzH9QAAAASAAAETTBEAiAgYAvXuzxBW5h7nDtJ3hPq20jzMxH+0A093jUNRIjvXAIgDMmkKpFhyvZ4GqMuEuMXRVU2tcexb2aLbXFYn7hKFy4AAABoBEZSQVj/hUT+1Tedn/qNR6dM5rkeYyrETQAAABIAAARNMEUCIQCktWno8HwkSzraQQDYctbfnNgN9TsX1B0n10KImXznnwIgSB+968nJuwKCsBW3btN8JD5NYSX7dlv9g3Cg7nqJ8YkAAABpBmZyeEVUSM9+zuGF8Z4ulwowHuN/k1Nu1mF5AAAAEgAABE0wRAIgc1fxlBfnVIaosVMvNwIWFah0JF6qg5e3L6cnCtCnBw8CIE2iQy5MTsx1KtH86fv6Ib/ARSpTyxDcjl21KIqhXI3tAAAAZwNGWFNrhWoUzqHX3Pr4D6aTbAt1lyzKzgAAABIAAARNMEUCIQCseSwbWhBFxuvyicAucWtVsI6YxQON0zLL/Nj2ksuWNQIgeabGiTxs6DBTAx9DALL7Nf0wzNx1VZLuoLJfbIR9QKQAAABpBU1BVElDogNvBTgiGnejk38TeWmfRJRQGNAAAAASAAAETTBFAiEAz8Jk9BXmMsXDM6pU6cJiLahxs6eK6lCfPAcMf5Cr9jkCIB+zwWrWIzNYCR4PdonUr6Ic/YYg9BgNItUo6pcrzbpTAAAAawdzdE1BVElDg7h0weCdMWBZ2SnaQC3LGpjpIIIAAAASAAAETTBFAiEAjtQJtql2Mb5RpdCHtq8uSDIthM35+SG+tQqNOB/alQwCIGVyjASsFZXj0yuO9cnTdbnJeM0dAprBM2lvXP+1Md7AAAAAZwRVU0RUHkpZY6v9l12MkCHOSAtCGIhJ1B0AAAAGAAAETTBEAiAkReRQvtpKhTmSiRA6Zq9Q1WwuLDYsijR/0iUKPkjmwQIgKTct2VA0hZwxCQRfYahgeDWUndrIgt8d1E7xBP1Zwo4AAABnBFVTREOozoruIbwqSKXvZwr8ySdMe7vANQAAAAYAAARNMEQCIH8SEt5thaFGML5AICliF+kT/9rtL0TdCDdp0/sDdx4vAiAdz8Oyqtfg1z0RNVubxRHlipCgcKE83FqAUn+heCh4xwAAAGgEV0JUQ+oDT7AusYCMLMOtvBX0R7k8vgjhAAAACAAABE0wRQIhAJJ3ATVPz8uaLme6Rc4kBNCGOvJILg0TQkmsaZSSW/M/AiBrgi/QmGMs698KlE4s1l4Z2NxfiPluqhy+z8WKNBusWAAAAGcEV0VUSE+aDn/Sv2Bn22mUzxLkSV35OObpAAAAEgAABE0wRAIgOJQdkDAzH6gptH5gKPrESDotpg8iiriPAdyJ6HApXcgCIFCyHL6YCLQesMKkgrwrASIvjIyrh4gtm1pql/pIMKth";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/1284/erc20-signatures.json
var _1284_erc20_signatures_namespaceObject = "AAAAaQZ4Y2FVU0T/////UsVqkle7l/Sytvey1iTs2gAAAAwAAAUEMEQCIHzslOYINqYHf66Ag0XnJEUjFM0GOhtEVzRscNzWfBIoAiB5c821aN5GSpA5mzkAjxOeoMgvXyYqthduYbR8AeH5LQAAAGYDQUxNFYGSl3C+MnWoIGjBE1tt1ZxTNO0AAAASAAAFBDBEAiBf+K1716HlHP0e/i+hMrQkHwwSYVGE3EmerNkZwtQ/RwIgbIwCj2Y1RznIqUJ7mzF5tZEZh4dBYZNwuL5gzbySk4QAAABqBnhjTkNUUv////+Klza0Tr8YiXJyW+1nv2lOAAAAEgAABQQwRQIhAM1y4UlOiJe3T5bEGfwEQ7Wg+sYECet2mM7ZeNZ0mrEQAiAVj9wPjxEHhvJ7HvLAXJk6/cuIaSr6I/BOTm1YSHS55gAAAGgEQVZBWEeSwey5abA261EzDGO9J4maE9hOAAAAEgAABQQwRQIhANX2axHENksRsJwE2MXNMQzStFOkgmw0N/B6nPm5YIwDAiAs0/Y6NtqHlfqIn5cdssn0NBW0EYQQqu6PzEab3wpPJwAAAGsHYXhsVVNEQ8oBodCZNWUpEFHa/zkIklGKz606AAAABgAABQQwRQIhAI9Aqs4n+fJD1xNgzbiYko7aE1SKw6goVJMM1XIFOVIiAiBjLQLVDKJwzjN4gALUS+jPXOPPV3fHDWOUB0BF9SVfawAAAGkFR0xJTlTNO1HZhHjVP0UVowa+Vlxu6+8dWAAAABIAAAUEMEUCIQDiBrZc9NdO8rxPf6yH6DQN07Mc1oN7FTrN/qsJhBy3KQIgEZ087m8OMoffYKwDDryqyoO/7ANVTA26vdOVmTsJD0sAAABnBEJSTEH+sl8/3a0T+CxNbbwUgVFvYiNkKQAAABIAAAUEMEQCIFu1rV4eYx6C/MwWHkwyqUhuMbPtbMGMMbIrwX8/6xMZAiAa2Jlxw18hJrjDJYeQbc4vSy74c5SgMRh1/SKArPslBwAAAGcDREFJdlJ37r7KLjGRLJlG6uECEZmznGEAAAASAAAFBDBFAiEA3P89fARK4C3RpJLRzgFN4mRDobTvKCNvhkG8P9k7v+gCIAioxrRF3VWEhXDYTthU0dRPwRh5N1+tZ9gip8yUNQAxAAAAawhET1VCTE9PTidYtX48BSritmvi4XXI8ZgHI9evAAAAEgAABQQwRAIgeL8MaljcwYtvSfWfNONG3jYtXEWV9AByZL51pgzpmkICIGrvKFLdH7aKb8MmdSTeA9c/kX/qEOZFleF5topTqp6FAAAAZgNFRlSkI+futgVH2ce2UAVHe2OufOZ+YgAAABIAAAUEMEQCID+tMzSxsirtSQawQC5ROJ3Y6LitYm1tCfhYVob81WlQAiBauT+U4Ux1Ky3VguG6yd+dkQi1zFM2xGUX7LyBBNjE5wAAAGcDRVRI+pNDw4lzJElqBfx1q+1rrCn4pA8AAAASAAAFBDBFAiEA2yDeJZn7GlzqtNKinB5foeJRL7UknlciW6Ckh1aTgtYCIFiMPAjFcpNpsPXxdVIyceNxnJp3c/IUTBeODvCUMWEKAAAAaAVGTEFSRePkOIj6eAPNx76keKsyfPGg3BGnAAAAEgAABQQwRAIgHoWCRFQAOZKkyCz4M4ApBqFNDRsv83Nzq28nxie709sCIEtSUwDI7xIJs1YymKhAqgUf1lbFSgPMf/ug2ifxKxWyAAAAaARGUkFYMi6GhS5JKn7hfyinjGY9o4+zO/sAAAASAAAFBDBFAiEA8NCn8Y4E8EB+l5sHCNRFPnRwBFeLgP9BJLEk3i7IM0cCIAzQnoB+hTge6VhV/va80XJ7vsg/Ku/HV7fXpxki70ZqAAAAaQZmcnhFVEiCu9G29t4re7Y9PhVG5rFVNQi+mQAAABIAAAUEMEQCIGXvHcM/yGkt4XgtDp5oYhVf9IAqatqNMKl2fniTTVPBAiBCsT7XfaPeDeGTeVbKf/T8e9w079zGdDv5gu2mKCGsqAAAAGYDSFBPgj2CbTq2lWupNIk/Ml58Mj+q9soAAAASAAAFBDBEAiB+j7Xg8IJxT3+n6yUl291dspOVRhs+FCM8Mk9I7NNv/AIgcjbtVghwtTvJfP1qky21QIPez6hw82PKNAT4HPOVwD0AAABpBnhjSUJUQ/////9awfmlGpP1xSc4Xt9/6YpSAAAACAAABQQwRAIgS7yvnIeBvw6u2DcF8vJt1rkz8TT/DNn7Q2mZnzF2BGwCIEwLtQFddoDhI0ys11MEvhl+mkRmbpdw73HU23rLS+4bAAAAZgNNQUnfpGR4+eXqhtVzh4SVmNv7LpZLAgAAABIAAAUEMEQCIH0NCXpqtu2IUVSvddNq8xNkoITdcy6IJ8iBsU9NqBcAAiAeF4EX5BUhiftYDaJx8PzSol8SEDk83pXDdoDJCwWFFgAAAGkFTUFUSUM0BaG9RrhcXAKUg/vs8vPmEQJuRQAAABIAAAUEMEUCIQC2w1lfHUvzy//8Qv7WpE/0oJtaUVaOvKsLovpGUbLeTgIgHD8NMRYbp5qLffXW0mJNWLYMSHZY0lsRLvHTYYKiy6YAAABpBXhjUEhB/////2PSTsyOuKe10IA+kA97bO0AAAAMAAAFBDBFAiEA/U1APYEbTN4ydkHmGQYjc/e2xdnJusyOEJs1uEcoXDYCIB1/tOwt+wugfZWiwtSAO5fGApqMIhpvUF5z81zKw7uRAAAAaARSTVJLUk1SS0yTZr5wbTqQ3PcAdsoDeuMAAAASAAAFBDBFAiEAlnFK87euPT9MP+t/OTeLDnYs8sICzxF3HGWdjFGS6dQCIElvZ2U4z6HKS32DhDb+J986Hxn7N7jMnG1keErhmm5sAAAAawdzZnJ4RVRI7PkRFjSK8c/+M16YB/AFEzK+Eo0AAAASAAAFBDBFAiEApKuKw8E8bywlMkaW5gn60JUM3NvZztS9l8yFHM8oiOECIBUACY3j5SNPj4lD+ChWphldzhoni0xSsnyFOZgd560XAAAAaQZTVEVMTEEONYg4znLV5h4AGKL/rEvsX0yI0gAAABIAAAUEMEQCIAWd1no2wBPwt/1TvuD/9MOpWv7Yh5EZOOHEuZTBO2e3AiBkMYQq7Xu4TlOIb2847uZbElRIouEu3OtrA+10RLFgewAAAGgFeGNTVUL/////Q7RWC8DEUaM4bggr/1CskAAAAAoAAAUEMEQCIE5EwUwv2kQ3pPqEmg0JhS+7trMk4unOHpwUVsEeyZ1PAiAMmJwpf9U4RQDzEG+UAvYn3NLUss528W4LWzWnVV0cRQAAAGcDVEhPc1q+SOh4KUijfHdl7LdrmM3pew8AAAASAAAFBDBFAiEA/6/gDA17Cdd16G9ltoPHSN0oE9mxXx53hg029BxYb24CIGfCbd2/QY8IrnNae8wRMBLqsibVkmHD1s7aFTp9rNaGAAAAZwRVU0RDgY7Ap/4Y/5QmmQT87Wrj2ubW3AsAAAAGAAAFBDBEAiAwae5IW62nublcXXEdYb+nZ2v1n/GQ33WOfgUGjtK4dAIgCiGgXMwvEuav5SlPYRk9bk+g3RWqaafU6PcbOPPXm7EAAABoBFdFTExRGrU/eTaDdj5aiClzgwE2iiQR4wAAABIAAAUEMEUCIQCPbNUKkQSKssRe7t4e+cYmCHLELQGTovuwR46Q0MZYvwIgdLty8AHYBt5U3caArMrjcR1tgFHLoEDdxUouCU/gPXAAAABoBVdlbGxlg4nPW+jx5WIR0iZmiouPbK3mHuQAAAASAAAFBDBEAiB8C4xhOL9fmj5don3ohJdgFMQabRJXhA+gkcMLLyB+CAIgcu9q2gqi8YjTu77A6Wgz+UfKx1dPZhznWDxVrI3s6VAAAABoBFdFVEirPwJFuD/rEdFar/79etRlpZgX7QAAABIAAAUEMEUCIQC81r21CokLfBDD9mviTGvcRW1f9sfrBElsccfEvkvIoQIgYJuzriovmS5gEAxId/3zb/dZd/FlzDoW7Z07dvty938AAABpBVdHTE1SrMFdx0iAyZRHdUSDBLJj0ZHGB38AAAASAAAFBDBFAiEAiH4kp6TwTtixtmcGUKFfmBHh+B0KrFVjn6k8FI3DeF0CIFEP8dHZDB/Z2TUrjqLtHMUmRJpaaIax6Gjlia2O+oZCAAAAaAV4Y0RPVP////8fysvSGO3A66IPwjCMd4CAAAAACgAABQQwRAIgMkenBKxQqzMB6UTG2ovcg3udiOoVm4oC1+tZt12QmiICIDCfKo3ORdAiv8Yr5ZGN9lDxewSy+/CwC8hsNci3qw7U";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/8453/erc20-signatures.json
var _8453_erc20_signatures_namespaceObject = "";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/42161/erc20-signatures.json
var _42161_erc20_signatures_namespaceObject = "";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/43114/erc20-signatures.json
var _43114_erc20_signatures_namespaceObject = "";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/59144/erc20-signatures.json
var _59144_erc20_signatures_namespaceObject = "";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/81457/erc20-signatures.json
var _81457_erc20_signatures_namespaceObject = "";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/534352/erc20-signatures.json
var _534352_erc20_signatures_namespaceObject = "AAAAawdhYmNOVVJJMwxD0ivWWmD/6pOhl/BOh/qie3AAAAASAAgnUDBFAiEA7Bz79Zpd4/JhoShP9ZZlX5t7UsIIQ0WHoLJHCulr6X0CIGsmaD+6cFXZyvT1ZxIm9NOYIm+ZbbbxGWKtjCocj/i8AAAAZwRBTktS30dLcQm3O31Xkm1DWY1ZNBMRNrIAAAASAAgnUDBEAiBY9xNIeydjoV2t0yxlGknpQuNWmnKlbqkWc8tsp81j2AIgQRW+aGgUHICKDXLOo5WMzL7enCBBVkzLePwftbZlilcAAABrB2Fua3JFVEgS2M4DXF3jzjmx/dTB1adF6ro7jAAAABIACCdQMEUCIQCqxPUKVq3oEylJzQ1wH2LA8K7cjE5eBBrrzz8IZpk/CQIgLyRMyPZcNEvfc6XauOJt5mA6RZ1PipoZv5mE5k02X8QAAABrB2F4bFVTREPrRmNCxNRJvJ9TqGXVy5BYb0BSFQAAAAYACCdQMEUCIQCiWjht3cDn1bLjTx5Jd06zw+xtCJjwe6wHJkZAmMK7FAIgbTsft35CiE+WX6+P/sO0/zYvPMg87zdxZr0M8mrf9/oAAABnA0NISS/Fz2X9CmYIAfEZgyshWHVpaCZtAAAAEgAIJ1AwRQIhAOZhGH6x/rOmMAnW60/h+gU8Q/IyZL57O7oNrN02QQm3AiA02K/vUNnvdDR31W60+XqirPqDGaDrLOmhm86IaeVGjAAAAGkGREFDS0lFuQEJZDATJhYBc9ppTAaXovzoLzkAAAASAAgnUDBEAiA3CTLZ9ugVPdsnlI4I23Pt8e4O4nDG0J/csK+U7ld7mQIgSjfNYZVdlCFBxzb79+8Gg/F5PL/LJYngQSAQ1wMqdK8AAABmA0NBVN1qSZla04/nQJtdXLVTkmG9G8kBAAAAEgAIJ1AwRAIgW1/6eXccV4qK7lq4Jue0d1equv0z0nsxoJ4RTc4W46gCIE7d9Bp8j7pjuRhaVCGTGHY2jJ7H8hKNa8MEz3ytJGdBAAAAaQZmcnhFVEjsxo0EUeICkkBpZ/58BCgOUjisfQAAABIACCdQMEQCIHXezwfj2SPj+D/GfEd/nNMMWbarM1R8VVWkHu4eTEloAiBHwxoj66RJkzs9e5bvfK7Yb6LX5KlWRn9BD4llSHbFtgAAAGcESUJFWHird/fVkPsQGqGK/8I4y/6jHq1bAAAAEgAIJ1AwRAIgSnPZnAFkG3wX8nghhBn/mzJdpK4gO271LguBjcMFJDQCIDhURhhLKYDEXTl5/krRvp01vMKZlVbyhed50+WcWAFPAAAAZwNJVFArHTb1thrdr32n670Rs1/Yz7DeMQAAABIACCdQMEUCIQDKh1u1+0wD6NqQzPRjS7yCl1tB65eP0m78WF5G98PBjQIgLAn/brVbgHmKTY6b5/s4B21mz270BRNq1scT4MNmqZoAAABnBGlVU0QKO7CLOhWhm03oL4rPyGJgb7aaLQAAABIACCdQMEQCIGjeB5xWrB1ctvpldb7WTD+gl02Nc6toO+4KlEvzdrh+AiA2G+opXJPGBKRLopWzg4kY+hXbHhJ7+07j9v6MfKoEswAAAGYDaVppYNAewtXpisUci0z4TfzOmNUnx0cAAAASAAgnUDBEAiB1rP1XFRIpbG49zNfCJ7AZbKkWxIc0ByX/et1tbPEhlAIgNCPPLq2420cvpg70XCkCiwEuDfrUNE2WdhEnyhWDWC8AAABoBXJzRVRIZUIbqQkgC4FkDZi5edB0h8l4G2YAAAASAAgnUDBEAiBKksE0OE6Qhjjtl49AJarBA26GjurXC2Y0QAHFuCBFPgIgG8XLdiTHAo4RYGO0WlAB3dj//xa7Kqdv6wgh4R2LnHAAAABnBE1BSEFqZhMSk40ioqDif1hQc+RAaQOZCgAAABIACCdQMEQCIHdGvST4Txf62bByurvIAEedkLuJlcTF0IlL3HjzXE88AiAZjRPxTljQtQ9ZkGGpN18dgZSvmU6FVvfH3sZZV7tiNgAAAGYDTVZYABjZbFeRIalDBySdR/BT4taHtecAAAASAAgnUDBEAiAQ5ue2RWUJMah/etkkXV83KiGm7mSspRLbqQHG2vSexAIgMXtr77e8/iEknIZu3VhL3oPa+13UO6aiGexVTw/3sGcAAABnBE5VUkmqroN4gJu4gVwI08WesMfRUprXaQAAABIACCdQMEQCIFr0dsM9WHK1aSbbXHNp1h5suRTlrIbu9gkqss1Of6cYAiAQZR1jlsxQgEDP6IEb5TPV1k1s6tfvgHK2fQG9nVQGmgAAAGcET01LR2t9HJ1Rnfw6XY0bfBXU5bvo3eHPAAAAEgAIJ1AwRAIgbIHf7RbKEb5HjzUVKAKRwKvai4zJaXpdhbT6sHxdrJYCICVGu3IXqc0ZuOWqAUHF4q8Q87AcrH2F3aPbrrAoL2TEAAAAaQVQQU5EQWGpzFYbbB+cMbzetEev7PJfM7v5AAAAEgAIJ1AwRQIhAJAG96hGBz/nTOHP/Piy72KcO4kZXfKQKcMXJv6FdF1FAiBlKqebvWJkMzcFC2a0qlGYsAnBZCZfuGB3R8rvTr2QwgAAAGoHUEFQWVJVUw/EeeL5tzEL+x22Bs9WXeppEO7cAAAAEgAIJ1AwRAIga27Y4D0FbNAxt4Bj2N+XSqgcwZT0eUm8FIFoNsTdAS4CIAXp0DQSiyhZzdmvDfRZYy3vfwboJVjF9ulk0uV8QW9EAAAAZwRQVU5L3esjkF9ph9X3hqk8ALvtPZevHMwAAAASAAgnUDBEAiBmlPz/a0F24qX9TSd3rxZNahvAXpQJY9L2yo3KQ6XNQAIgIcCIKHmLdovqQpJL7/4cA87nz8pxICcY9ZZCurW/LMcAAABqBndyc0VUSKJbJVSLTJiwx9PSfcpdXKdD1ot/AAAAEgAIJ1AwRQIhAPmO+BMpPEMHSTyowbG2ypeRcFHqivMv9Pr0LfNUkLdnAiBxSTtC5MB+RHYmPLDqpm22elzuLcdNs6HwMuZ6hb5d5AAAAGoHU0NSSUJFU3UDUan3X5jywukdTts76xTnGVV+AAAAEgAIJ1AwRAIgI9CaGC3uepRk1w4NcEDAh0xIsz61hjVCkjKosMzmrukCIGDhCjrYcJJb39wBMwr4Er/cXeG8pgPvaTPTXxXLbFU6AAAAZwNTS1mVpS7B1g50zT6wAv5UosdLGFpMFgAAABIACCdQMEUCIQCuvIxR8Pya6Y50An6lGlPVJs1ZGX/lVrfjCDjy20G2SwIgQYfQ4nOEo089xl5DlvkbB0DuA73z2mPLQTKfWSjqlgYAAABpBVNUT05FgBN1EJeYIjIhk/yZfUANWmx0e/cAAAASAAgnUDBFAiEAoxrr3JLsai4m56TNul3bDTHxipZjnIMEYtan34bCn30CIBUP+U9paX3tMyQ9yRbTkZb3YJuFjGGmNI3Jmtg9MFdGAAAAZgNTSVMUZ7YqauXNyxCmqBc8/hh90sWhNgAAABIACCdQMEQCIAFFyi+LJapac7b4/V95+PM1KqyXM5hI76XrRhjP2uavAiBdOJYww673C/drC7PgTGagehy4NEPfjW2UFJQ5WQPKtwAAAGcEVVNEVPVb7Jyv2+hzDwlqpV2tbSLUQJnfAAAABgAIJ1AwRAIgKO2Vv4H66xhD8QLkTPn+6FgV9gIMGijLeiubepfXU7cCIArNxjU89FSF9OnucGffBlLW2VgCmcdW0fgp0ZnKqI89AAAAZwNUS04aL8tYWzJ/reyR9V1FgpRysV8XpAAAABIACCdQMEUCIQDA0iLOem3CC93DXogFgsAxJhM124qpc+FF6clRK5xSSQIgEUB3gkZLak5Id396hqNN2P4RaZ+2BaYV3ny0oeGlKM4AAABnBFVTREMG79v/KhSnyOFZRNH0pI+flfZjpAAAAAYACCdQMEQCIDjjopGABikMuhCp23eLA5pVu98aLR9gEjcnDJzwjJXIAiAFuHGWrrWmOrKuJYMwdw7J6oy8YYo3GJIFkbRLpydzsQAAAGcDVkVOaQ8dLaR9mnWak90rCs48FifyFroAAAASAAgnUDBFAiEAnymsGIMtNk7GWRagqaUJOke3s788qT6fEDFF0p4PRD8CIGLR3A53xyJC3qVK/RapsZSHrjF9+dT2VTPfTfjzzjDRAAAAaARXQlRDPBvKWmVuae3NDU42vrs/zaymDPEAAAAIAAgnUDBFAiEA1X4GZSYgYEr+KQm2cOxtBfx2tOPPtF0Nc0xKBG+lwKACIAwVdgPG4zcoh1nmeFFZzTn3bhhJzUdFsAU1KrbI0DuJAAAAaARXRVRIUwAAAAAAAAAAAAAAAAAAAAAAAAQAAAASAAgnUDBFAiEA8aYEcu8nvnsUojm2Q/zNmlDPikQiRrPCgNiH9K4WB28CIFfQKXzICPQF/aOsubn7zdoJmIptCUqughgAZNJBun11AAAAaQZ3c3RFVEj2EKnft8iWRJebSg8nBj6efXzaMgAAABIACCdQMEQCIBAM5wwNe91593nxdYmeptTwiul25K1g/kfPzoQ/hVWCAiBcLGHyWSef3taBpJ5aYPTey/cGVKO9HxY2gbM6mbEbjQAAAGYCWlAhR6iftGCHUoByFtUHBHHAmg3OMgAAABIACCdQMEUCIQCattnM43+2ubeIgsWxWbsFqtsrv467fEPt2E6km76OvAIgTDtdp9FOhc3HuYg5RgRJQqPT062jVQ32otAuPuq+6fwAAABoBXhVU0R6RNS2J5l7QavSvy6gW3Mf5TXwHD0AAAASAAgnUDBEAiALvZTPpSTUX5nJ1j/3UlNw7zatiZqD5fL0ZMsHVYhoTQIgOhAoSrkzF7/AyNLgrVHSH0Hkj/R5pDazVIFZMUpM87wAAABmA1pFThiLFYyvXqJSAS29YDCvwDAynElhAAAAEgAIJ1AwRAIgNZ9Qpc/ILDziwVGaMTbLTMpqBMb6Cw9Pb9L0gMy1LvcCIDnkb5713e3HGNqiOrqWIVMPTJK2loBLiYZkRFCz5yBX";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/245022934/erc20-signatures.json
var _245022934_erc20_signatures_namespaceObject = "AAAAaARVU0RD6msEJy+fYvmX9mbwfTqXQTT3/7kAAAAGDprA1jBFAiEAvI520aR/1BdUTs1LOLHzCXf3XIcR3IbWWkm++Ckf07oCIEyxewn8LU5eMIlGnVrR5E66B68c45snJPMVtreUehnSAAAAaARVU0RUXwFV0I70quK1AK77ZKNBnai7YRoAAAAGDprA1jBFAiEAv2xly1pOs281T3IYK+tNit+wuCmEpk7YEZpoI45mByQCIFJgwf0NJ9LpupW1NbVZF6qq9FKA44T2pxpj9fnuCAGuAAAAZwNCVENU7OydmVpsv/ODj2qPOAmeUYgF1wAAAAYOmsDWMEUCIQDQCq6SNpN2ZGoN24/LdTH3IIdt1AEvN+wzv/QKGOgpfgIgKKrIysE+wePcoc7LK8uR+N0ff+Zd3bNRWt+gOIJ7kXsAAABnBFdFVEjP/YTUaCIMEb5k3J32Tq/gKvYOigAAAAgOmsDWMEQCIFFPt8VFAepTqhleKBf3+OhYWrXCE+ajMv1v2sGeGM5DAiBQC35yROO/oOJpMt9TO61xru0osWctV1bvhAC7FfXh3AAAAGkFV05FT04gLDXlF/qAO1N1ZcQPCmll1yBGCQAAABIOmsDWMEUCIQCKjfomgkchszZ1exjDavteqKbuBsmkpmjC8r2cTnlzugIgdkJpHb3IvvLsY/tLqnGqMx9OssmSrP2LXq1bjDrCy7wAAABmA1NPTF84JI8zm/ToSiyvTkwFUoYtyfgqAAAACQ6awNYwRAIgS2h5GrIioMeBkSwNbnCsmsz+SqQFYfX5eHF/YwnP9EYCIC+Iv4Khdnl6I3OfplXTllyMgswS3xMWpkx7xeqFA5WO";
;// ./node_modules/@ledgerhq/cryptoassets-evm-signatures/lib-es/data/evm/index.js

























































const tokens = {
    1: erc20_namespaceObject,
    10: _10_erc20_namespaceObject,
    25: _25_erc20_namespaceObject,
    40: _40_erc20_namespaceObject,
    56: _56_erc20_namespaceObject,
    57: _57_erc20_namespaceObject,
    137: _137_erc20_namespaceObject,
    199: _199_erc20_namespaceObject,
    250: _250_erc20_namespaceObject,
    592: _592_erc20_namespaceObject,
    1101: _1101_erc20_namespaceObject,
    1284: _1284_erc20_namespaceObject,
    8453: _8453_erc20_namespaceObject,
    42161: _42161_erc20_namespaceObject,
    43114: _43114_erc20_namespaceObject,
    59144: _59144_erc20_namespaceObject,
    81457: _81457_erc20_namespaceObject,
    534352: _534352_erc20_namespaceObject,
    245022934: _245022934_erc20_namespaceObject,
};
const signatures = {
    1: erc20_signatures_namespaceObject,
    10: _10_erc20_signatures_namespaceObject,
    25: _25_erc20_signatures_namespaceObject,
    40: _40_erc20_signatures_namespaceObject,
    56: _56_erc20_signatures_namespaceObject,
    57: _57_erc20_signatures_namespaceObject,
    137: _137_erc20_signatures_namespaceObject,
    199: _199_erc20_signatures_namespaceObject,
    250: _250_erc20_signatures_namespaceObject,
    592: _592_erc20_signatures_namespaceObject,
    1101: _1101_erc20_signatures_namespaceObject,
    1284: _1284_erc20_signatures_namespaceObject,
    8453: _8453_erc20_signatures_namespaceObject,
    42161: _42161_erc20_signatures_namespaceObject,
    43114: _43114_erc20_signatures_namespaceObject,
    59144: _59144_erc20_signatures_namespaceObject,
    81457: _81457_erc20_signatures_namespaceObject,
    534352: _534352_erc20_signatures_namespaceObject,
    245022934: _245022934_erc20_signatures_namespaceObject,
};
const hashes = {
    1: erc20_hash_namespaceObject,
    10: _10_erc20_hash_namespaceObject,
    25: _25_erc20_hash_namespaceObject,
    40: _40_erc20_hash_namespaceObject,
    56: _56_erc20_hash_namespaceObject,
    57: _57_erc20_hash_namespaceObject,
    137: _137_erc20_hash_namespaceObject,
    199: _199_erc20_hash_namespaceObject,
    250: _250_erc20_hash_namespaceObject,
    592: _592_erc20_hash_namespaceObject,
    1101: _1101_erc20_hash_namespaceObject,
    1284: _1284_erc20_hash_namespaceObject,
    8453: _8453_erc20_hash_namespaceObject,
    42161: _42161_erc20_hash_namespaceObject,
    43114: _43114_erc20_hash_namespaceObject,
    59144: _59144_erc20_hash_namespaceObject,
    81457: _81457_erc20_hash_namespaceObject,
    534352: _534352_erc20_hash_namespaceObject,
    245022934: _245022934_erc20_hash_namespaceObject,
};
/* harmony default export */ var evm = ({
    tokens,
    signatures,
    hashes,
});
//# sourceMappingURL=index.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/services/ledger/loadConfig.js
const defaultLoadConfig = {
    nftExplorerBaseURL: "https://nft.api.live.ledger.com/v1/ethereum",
    pluginBaseURL: "https://cdn.live.ledger.com",
    extraPlugins: null,
    cryptoassetsBaseURL: "https://cdn.live.ledger.com/cryptoassets",
    calServiceURL: "https://crypto-assets-service.api.ledger.com",
};
function getLoadConfig(userLoadConfig) {
    return {
        ...defaultLoadConfig,
        ...userLoadConfig,
    };
}
//# sourceMappingURL=loadConfig.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/services/ledger/erc20.js
/* provided dependency */ var erc20_Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];




const asContractAddress = (addr) => {
    const a = addr.toLowerCase();
    return a.startsWith("0x") ? a : "0x" + a;
};
const findERC20SignaturesInfo = async (userLoadConfig, chainId) => {
    const { cryptoassetsBaseURL } = getLoadConfig(userLoadConfig);
    if (!cryptoassetsBaseURL)
        return null;
    const url = `${cryptoassetsBaseURL}/evm/${chainId}/erc20-signatures.json`;
    const blob = await axios_lib_axios
        .get(url)
        .then(({ data }) => {
        if (!data || typeof data !== "string") {
            throw new Error(`ERC20 signatures for chainId ${chainId} file is malformed ${url}`);
        }
        return data;
    })
        .catch(e => {
        (0,lib_es/* log */.Rm)("error", "could not fetch from " + url + ": " + String(e));
        return null;
    });
    return blob;
};
/**
 * Retrieve the token information by a given contract address if any
 */
const byContractAddressAndChainId = (contract, chainId, erc20SignaturesBlob) => {
    // If we are able to fetch data from s3 bucket that contains dynamic CAL
    if (erc20SignaturesBlob) {
        try {
            return erc20_parse(erc20SignaturesBlob).byContractAndChainId(asContractAddress(contract), chainId);
        }
        catch (e) {
            return get(chainId)?.byContractAndChainId(asContractAddress(contract), chainId);
        }
    }
    // the static fallback when dynamic cal is not provided
    return get(chainId)?.byContractAndChainId(asContractAddress(contract), chainId);
};
const erc20_parse = (erc20SignaturesBlob) => {
    const buf = erc20_Buffer.from(erc20SignaturesBlob, "base64");
    const map = {};
    const entries = [];
    let i = 0;
    while (i < buf.length) {
        const length = buf.readUInt32BE(i);
        i += 4;
        const item = buf.slice(i, i + length);
        let j = 0;
        const tickerLength = item.readUInt8(j);
        j += 1;
        const ticker = item.slice(j, j + tickerLength).toString("ascii");
        j += tickerLength;
        const contractAddress = asContractAddress(item.slice(j, j + 20).toString("hex"));
        j += 20;
        const decimals = item.readUInt32BE(j);
        j += 4;
        const chainId = item.readUInt32BE(j);
        j += 4;
        const signature = item.slice(j);
        const entry = {
            ticker,
            contractAddress,
            decimals,
            chainId,
            signature,
            data: item,
        };
        entries.push(entry);
        map[String(chainId) + ":" + contractAddress] = entry;
        i += length;
    }
    return {
        list: () => entries,
        byContractAndChainId: (contractAddress, chainId) => map[String(chainId) + ":" + contractAddress],
    };
};
// this internal get() will lazy load and cache the data from the erc20 data blob
const get = (() => {
    const cache = {};
    return chainId => {
        if (cache[chainId])
            return cache[chainId];
        const signatureBlob = signatures[chainId];
        if (!signatureBlob)
            return null;
        const api = erc20_parse(signatureBlob);
        cache[chainId] = api;
        return api;
    };
})();
//# sourceMappingURL=erc20.js.map
;// ./node_modules/@ledgerhq/evm-tools/lib-es/selectors/dappSelectors.js
// This selectors will have duplicate values, different signatures can have the same function name but it will have different parameters.
/* eslint-disable @typescript-eslint/no-duplicate-enum-values */
var ARBITRUM_CLEAR_SIGNED_SELECTORS;
(function (ARBITRUM_CLEAR_SIGNED_SELECTORS) {
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x016cba5f"] = "execute";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x0502b1c5"] = "unoswap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x0b86a4c1"] = "swapOnUniswapV2Fork";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x0d5f0e3b"] = "uniswapV3SwapTo";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x12a0ddc7"] = "PMMV2Swap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x12aa3caf"] = "swap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x2298207a"] = "simpleBuy";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x2521b930"] = "uniswapV3SwapToWithPermit";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x259f8d1a"] = "withdraw";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x2e95b6c8"] = "unoswap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x3c15fd91"] = "unoswapToWithPermit";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x3d21e25a"] = "swapBridgeToV2";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x3eca9c0a"] = "fillOrderRFQ";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x46c67b6d"] = "megaSwap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x4cc4a27b"] = "fillOrderRFQToWithPermit";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x4d447995"] = "deposit";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x54840d1a"] = "swapOnUniswap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x54e3f31b"] = "SimpleSwap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x617ba037"] = "supply";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x64466805"] = "swapOnZeroXv4";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x65ae14b5"] = "deleverageWithdraw";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x69328dec"] = "withdraw";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x6e553f65"] = "deposit";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x70ccbd31"] = "fillOrderRFQToWithPermit";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x7c025200"] = "swap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x81033120"] = "swapOnZeroXv2";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x84bd6d29"] = "clipperSwap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x935fb84b"] = "buyOnUniswap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x972250fe"] = "bridgeToV2";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0x9871efa4"] = "unxswapByOrderId";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xa1251d75"] = "unoswapWithPermit";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xa2922622"] = "withdrawWithSymbolCheck";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xa6886da9"] = "directUniV3Swap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xa94e78ef"] = "multiSwap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xaa2daba6"] = "depositWithSymbolCheck";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xb460af94"] = "withdraw";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xb80c2f09"] = "smartSwapByOrderId";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xbc80f1a8"] = "uniswapV3SwapTo";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xc03786b0"] = "buyOnUniswapFork";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xc805a666"] = "clipperSwapToWithPermit";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xd0a3b665"] = "fillOrderRFQ";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xe449022e"] = "uniswapV3Swap";
    ARBITRUM_CLEAR_SIGNED_SELECTORS["0xf5661034"] = "swapOnUniswapFork";
})(ARBITRUM_CLEAR_SIGNED_SELECTORS || (ARBITRUM_CLEAR_SIGNED_SELECTORS = {}));
var AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS;
(function (AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS) {
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0x016cba5f"] = "execute";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0x0d10d32c"] = "redeemOverdueShares";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0x0d5f0e3b"] = "uniswapV3SwapTo";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0x0f7e2048"] = "redeemOverdueShares";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0x12a0ddc7"] = "PMMV2Swap";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0x3d21e25a"] = "swapBridgeToV2";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0x5bcb2fc6"] = "submit";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0x617ba037"] = "supply";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0x69328dec"] = "withdraw";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0x972250fe"] = "bridgeToV2";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0x9871efa4"] = "unxswapByOrderId";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0xb80c2f09"] = "smartSwapByOrderId";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0xbe040fb0"] = "redeem";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0xc9d2ff9d"] = "requestUnlock";
    AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS["0xdb006a75"] = "redeem";
})(AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS || (AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS = {}));
var BASE_CLEAR_SIGNED_SELECTORS;
(function (BASE_CLEAR_SIGNED_SELECTORS) {
    BASE_CLEAR_SIGNED_SELECTORS["0x016cba5f"] = "execute";
    BASE_CLEAR_SIGNED_SELECTORS["0x0502b1c5"] = "unoswap";
    BASE_CLEAR_SIGNED_SELECTORS["0x095ea7b3"] = "approve";
    BASE_CLEAR_SIGNED_SELECTORS["0x0b86a4c1"] = "swapOnUniswapV2Fork";
    BASE_CLEAR_SIGNED_SELECTORS["0x0d5f0e3b"] = "uniswapV3SwapTo";
    BASE_CLEAR_SIGNED_SELECTORS["0x12a0ddc7"] = "PMMV2Swap";
    BASE_CLEAR_SIGNED_SELECTORS["0x12aa3caf"] = "swap";
    BASE_CLEAR_SIGNED_SELECTORS["0x20b76e81"] = "repay";
    BASE_CLEAR_SIGNED_SELECTORS["0x2298207a"] = "simpleBuy";
    BASE_CLEAR_SIGNED_SELECTORS["0x238d6579"] = "supplyCollateral";
    BASE_CLEAR_SIGNED_SELECTORS["0x3c15fd91"] = "unoswapToWithPermit";
    BASE_CLEAR_SIGNED_SELECTORS["0x3d21e25a"] = "swapBridgeToV2";
    BASE_CLEAR_SIGNED_SELECTORS["0x3eca9c0a"] = "fillOrderRFQ";
    BASE_CLEAR_SIGNED_SELECTORS["0x46c67b6d"] = "megaSwap";
    BASE_CLEAR_SIGNED_SELECTORS["0x50d8cd4b"] = "borrow";
    BASE_CLEAR_SIGNED_SELECTORS["0x54840d1a"] = "swapOnUniswap";
    BASE_CLEAR_SIGNED_SELECTORS["0x54e3f31b"] = "SimpleSwap";
    BASE_CLEAR_SIGNED_SELECTORS["0x5c2bea49"] = "withdraw";
    BASE_CLEAR_SIGNED_SELECTORS["0x64466805"] = "swapOnZeroXv4";
    BASE_CLEAR_SIGNED_SELECTORS["0x6e553f65"] = "deposit";
    BASE_CLEAR_SIGNED_SELECTORS["0x70ccbd31"] = "fillOrderRFQToWithPermit";
    BASE_CLEAR_SIGNED_SELECTORS["0x8069218f"] = "setAuthorizationWithSig";
    BASE_CLEAR_SIGNED_SELECTORS["0x81033120"] = "swapOnZeroXv2";
    BASE_CLEAR_SIGNED_SELECTORS["0x833947fd"] = "reallocateTo";
    BASE_CLEAR_SIGNED_SELECTORS["0x84bd6d29"] = "clipperSwap";
    BASE_CLEAR_SIGNED_SELECTORS["0x8720316d"] = "withdrawCollateral";
    BASE_CLEAR_SIGNED_SELECTORS["0x8c1358a2"] = "createMarket";
    BASE_CLEAR_SIGNED_SELECTORS["0x935fb84b"] = "buyOnUniswap";
    BASE_CLEAR_SIGNED_SELECTORS["0x94bf804d"] = "mint";
    BASE_CLEAR_SIGNED_SELECTORS["0x972250fe"] = "bridgeToV2";
    BASE_CLEAR_SIGNED_SELECTORS["0x9871efa4"] = "unxswapByOrderId";
    BASE_CLEAR_SIGNED_SELECTORS["0xa6886da9"] = "directUniV3Swap";
    BASE_CLEAR_SIGNED_SELECTORS["0xa94e78ef"] = "multiSwap";
    BASE_CLEAR_SIGNED_SELECTORS["0xa99aad89"] = "supply";
    BASE_CLEAR_SIGNED_SELECTORS["0xb460af94"] = "withdraw";
    BASE_CLEAR_SIGNED_SELECTORS["0xb80c2f09"] = "smartSwapByOrderId";
    BASE_CLEAR_SIGNED_SELECTORS["0xba087652"] = "redeem";
    BASE_CLEAR_SIGNED_SELECTORS["0xc03786b0"] = "buyOnUniswapFork";
    BASE_CLEAR_SIGNED_SELECTORS["0xc805a666"] = "clipperSwapToWithPermit";
    BASE_CLEAR_SIGNED_SELECTORS["0xe0232b42"] = "flashLoan";
    BASE_CLEAR_SIGNED_SELECTORS["0xeecea000"] = "setAuthorization";
    BASE_CLEAR_SIGNED_SELECTORS["0xf5661034"] = "swapOnUniswapFork";
})(BASE_CLEAR_SIGNED_SELECTORS || (BASE_CLEAR_SIGNED_SELECTORS = {}));
var BSC_CLEAR_SIGNED_SELECTORS;
(function (BSC_CLEAR_SIGNED_SELECTORS) {
    BSC_CLEAR_SIGNED_SELECTORS["0x016cba5f"] = "execute";
    BSC_CLEAR_SIGNED_SELECTORS["0x0863b7ac"] = "SwapOnUniswapFork";
    BSC_CLEAR_SIGNED_SELECTORS["0x0d57afa6"] = "requestWithdraw";
    BSC_CLEAR_SIGNED_SELECTORS["0x0d5f0e3b"] = "uniswapV3SwapTo";
    BSC_CLEAR_SIGNED_SELECTORS["0x12a0ddc7"] = "PMMV2Swap";
    BSC_CLEAR_SIGNED_SELECTORS["0x1e6d24c2"] = "dodoSwapV2TokenToETH";
    BSC_CLEAR_SIGNED_SELECTORS["0x2298207a"] = "simpleBuy";
    BSC_CLEAR_SIGNED_SELECTORS["0x23b872dd"] = "transferFrom";
    BSC_CLEAR_SIGNED_SELECTORS["0x26ef699d"] = "sendToken";
    BSC_CLEAR_SIGNED_SELECTORS["0x2e1a7d4d"] = "withdraw";
    BSC_CLEAR_SIGNED_SELECTORS["0x2e95b6c8"] = "unoswap";
    BSC_CLEAR_SIGNED_SELECTORS["0x33635226"] = "BuyOnUniswapFork";
    BSC_CLEAR_SIGNED_SELECTORS["0x3c659741"] = "bridgeCall";
    BSC_CLEAR_SIGNED_SELECTORS["0x3d21e25a"] = "swapBridgeToV2";
    BSC_CLEAR_SIGNED_SELECTORS["0x3f2e5fc3"] = "sendNative";
    BSC_CLEAR_SIGNED_SELECTORS["0x46c67b6d"] = "megaSwap";
    BSC_CLEAR_SIGNED_SELECTORS["0x4d99dd16"] = "undelegate";
    BSC_CLEAR_SIGNED_SELECTORS["0x5028bb95"] = "dodoSwapV2ETHToToken";
    BSC_CLEAR_SIGNED_SELECTORS["0x51227094"] = "processOutputOrders";
    BSC_CLEAR_SIGNED_SELECTORS["0x54840d1a"] = "swapOnUniswap";
    BSC_CLEAR_SIGNED_SELECTORS["0x54bacd13"] = "externalSwap";
    BSC_CLEAR_SIGNED_SELECTORS["0x54e3f31b"] = "SimpleSwap";
    BSC_CLEAR_SIGNED_SELECTORS["0x58b9d179"] = "SwapOnUniswap";
    BSC_CLEAR_SIGNED_SELECTORS["0x59491871"] = "redelegate";
    BSC_CLEAR_SIGNED_SELECTORS["0x64466805"] = "swapOnZeroXv4";
    BSC_CLEAR_SIGNED_SELECTORS["0x6d9634b7"] = "releaseTokens";
    BSC_CLEAR_SIGNED_SELECTORS["0x7617b389"] = "mixSwap";
    BSC_CLEAR_SIGNED_SELECTORS["0x7c025200"] = "swap";
    BSC_CLEAR_SIGNED_SELECTORS["0x81033120"] = "swapOnZeroXv2";
    BSC_CLEAR_SIGNED_SELECTORS["0x81791788"] = "dodoMutliSwap";
    BSC_CLEAR_SIGNED_SELECTORS["0x8ca3bf68"] = "callBridgeCall";
    BSC_CLEAR_SIGNED_SELECTORS["0x8f00eccb"] = "MultiSwap";
    BSC_CLEAR_SIGNED_SELECTORS["0x90e1aa69"] = "processInputOrders";
    BSC_CLEAR_SIGNED_SELECTORS["0x935fb84b"] = "buyOnUniswap";
    BSC_CLEAR_SIGNED_SELECTORS["0x972250fe"] = "bridgeToV2";
    BSC_CLEAR_SIGNED_SELECTORS["0x982ef0a7"] = "delegate";
    BSC_CLEAR_SIGNED_SELECTORS["0x9871efa4"] = "unxswapByOrderId";
    BSC_CLEAR_SIGNED_SELECTORS["0x9ddb511a"] = "delegate";
    BSC_CLEAR_SIGNED_SELECTORS["0xa21a9280"] = "withdraw";
    BSC_CLEAR_SIGNED_SELECTORS["0xa27e8b6b"] = "SimpleBuy";
    BSC_CLEAR_SIGNED_SELECTORS["0xa378534b"] = "create";
    BSC_CLEAR_SIGNED_SELECTORS["0xa5977fbb"] = "send";
    BSC_CLEAR_SIGNED_SELECTORS["0xa6886da9"] = "directUniV3Swap";
    BSC_CLEAR_SIGNED_SELECTORS["0xa94e78ef"] = "multiSwap";
    BSC_CLEAR_SIGNED_SELECTORS["0xaa7415f5"] = "transferOut";
    BSC_CLEAR_SIGNED_SELECTORS["0xaad3ec96"] = "claim";
    BSC_CLEAR_SIGNED_SELECTORS["0xb80c2f09"] = "smartSwapByOrderId";
    BSC_CLEAR_SIGNED_SELECTORS["0xbba9b10c"] = "destroy";
    BSC_CLEAR_SIGNED_SELECTORS["0xc03786b0"] = "buyOnUniswapFork";
    BSC_CLEAR_SIGNED_SELECTORS["0xcfc0afeb"] = "SimpleSwap";
    BSC_CLEAR_SIGNED_SELECTORS["0xd0e30db0"] = "deposit";
    BSC_CLEAR_SIGNED_SELECTORS["0xde790c7e"] = "burn";
    BSC_CLEAR_SIGNED_SELECTORS["0xec1d21dd"] = "MegaSwap";
    BSC_CLEAR_SIGNED_SELECTORS["0xf35af1f8"] = "callBridge";
    BSC_CLEAR_SIGNED_SELECTORS["0xf5661034"] = "swapOnUniswapFork";
    BSC_CLEAR_SIGNED_SELECTORS["0xf8444436"] = "claimWithdrawal";
    BSC_CLEAR_SIGNED_SELECTORS["0xf87dc1b7"] = "dodoSwapV2TokenToToken";
    BSC_CLEAR_SIGNED_SELECTORS["0xf9355f72"] = "BuyOnUniswap";
    BSC_CLEAR_SIGNED_SELECTORS["0xf95a49eb"] = "Buy";
})(BSC_CLEAR_SIGNED_SELECTORS || (BSC_CLEAR_SIGNED_SELECTORS = {}));
var ETHEREUM_CLEAR_SIGNED_SELECTORS;
(function (ETHEREUM_CLEAR_SIGNED_SELECTORS) {
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x00f714ce"] = "withdraw_to";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x016cba5f"] = "execute";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x01d523b6"] = "updateStateAndDepositAndMintOsToken";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x026e402b"] = "delegate";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x0502b1c5"] = "unoswap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x066055e0"] = "burnOsToken";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x074ee446"] = "mint";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x084fd9b4"] = "claimFromVault";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x0863b7ac"] = "swapOnUniswapFork";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x08dc9f42"] = "mint";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x095ea7b3"] = "approve";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x0968f264"] = "withdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x0b86a4c1"] = "swapOnUniswapV2Fork";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x0c0a769b"] = "supply";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x0d5f0e3b"] = "uniswapV3SwapTo";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x0dd8dd02"] = "queueWithdrawals";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x0e752702"] = "repayBorrow";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x0ffab6c2"] = "batchWithdrawCLFee";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x10f13a8c"] = "SetText";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x1249c58b"] = "mint";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x12a0ddc7"] = "PMMV2Swap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x12aa3caf"] = "swap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x148e23ce"] = "claimRewards";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x15373e3d"] = "castVote";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x1564da79"] = "submitPOL";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x16dc3ace"] = "swapExactAmountOut";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x1896f70a"] = "setResolver";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x18f72950"] = "updateStateAndDeposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x19aa6257"] = "requestWithdrawalsWstETH";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x1a7ff553"] = "updateState";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x1c4b774b"] = "getReward";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x1da649cf"] = "repay";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x1e6d24c2"] = "dodoSwapV2TokenToETH";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x1f7ec122"] = "requestWithdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x201b9eb5"] = "mintOsToken";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x224199c2"] = "ProveAndClaimWithResolver";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2298207a"] = "simpleBuy";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x22a775b6"] = "mintAndTransfer";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x23463624"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x23b872dd"] = "transferFrom";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x23e103a8"] = "withdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x242eba0e"] = "deletePendingValidators";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x24d83b79"] = "addToPerpetual";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2521b930"] = "uniswapV3SwapToWithPermit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x258d3c33"] = "redeemYield";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x259f8d1a"] = "withdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2608f818"] = "repayBorrowBehalf";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x26ef699d"] = "sendToken";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x27050d1f"] = "createToken";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2775d01c"] = "withdrawInstantly";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2aba2aeb"] = "addToken";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2ba03a79"] = "withdrawCLFee";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2c4b04fa"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2d8918d7"] = "addLiquidity";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2def6620"] = "unstake";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2e17de78"] = "unstake";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2e1a7d4d"] = "withdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2e2d2984"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x2e95b6c8"] = "unoswap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x304e6ade"] = "SetContentHash";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x3111e7b3"] = "claimRewards";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x31807e42"] = "depositYieldToken";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x32ca494b"] = "withdrawWstETH";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x32f73258"] = "updateOperatorControllingAddress";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x33404396"] = "completeQueuedWithdrawals";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x33635226"] = "buyOnUniswapFork";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x379607f5"] = "claim";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x388bbfd3"] = "redeem";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x3a4b66f1"] = "stake";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x3c15fd91"] = "unoswapToWithPermit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x3c659741"] = "bridgeCall";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x3ccfd60b"] = "withdraw_all";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x3d13f874"] = "claim";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x3d18b912"] = "getReward";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x3d21e25a"] = "swapBridgeToV2";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x3db397c6"] = "__ERC721Rarible_init";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x3e200d4b"] = "stakeRPL";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x3eca9c0a"] = "fillOrderRFQ";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x3f2e5fc3"] = "sendNative";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x42966c68"] = "burn";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x439370b1"] = "depositEth";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x43e82a79"] = "redeemOsToken";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x441a3e70"] = "withdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x46c67b6d"] = "megaSwap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x46e04a2f"] = "claimTokens";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x47e7ef24"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x4957677c"] = "increase_amount";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x4b8a3529"] = "borrow";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x4cc4a27b"] = "fillOrderRFQToWithPermit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x4d447995"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x4d5693ab"] = "depositUnderlying";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x4d99dd16"] = "undelegate";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x4e3c04bd"] = "getRSETHWithETH";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x4e71d92d"] = "claim";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x4f498c73"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x4faa8a26"] = "depositEtherFor";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x5028bb95"] = "dodoSwapV2ETHToToken";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x510ccb43"] = "getReward";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x51227094"] = "processOutputOrders";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x51a60b02"] = "withdrawDelegated";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x5243318f"] = "depositWstETH";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x5358fbda"] = "depositETH";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x54741d6d"] = "addOperator";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x54840d1a"] = "swapOnUniswap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x54bacd13"] = "externalSwap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x54e3f31b"] = "SimpleSwap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x55362f4d"] = "swapTo";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x573ade81"] = "repay";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x58b9d179"] = "swapOnUniswap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x5a3b74b9"] = "setUserUseReserveAsCollateral";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x5ae401dc"] = "multicall";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x5b0fc9c3"] = "setOwner";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x5b34b966"] = "incrementCounter";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x5c19a95c"] = "delegate";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x5ef2c7f0"] = "setSubnodeRecord";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x60ec5216"] = "addNewValidatorDetails";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x627cdcb9"] = "incrementNonce";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x64466805"] = "swapOnZeroXv4";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x657bb113"] = "mintSign";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x65ae14b5"] = "deleverageWithdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x65fc3873"] = "create_lock";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x66792ba1"] = "send";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x67dfd4c9"] = "leave";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x69328dec"] = "withdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x6ab15071"] = "buyVoucher";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x6b088d5c"] = "withdrawRPL";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x6d104216"] = "burn";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x6d9634b7"] = "releaseTokens";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x6e26b9f8"] = "depositRequest";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x6e553f65"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x6fc3f5d5"] = "deploySmartVault";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x70ccbd31"] = "fillOrderRFQToWithPermit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x71d6e892"] = "claimAlk";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x721c6513"] = "requestExit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x72c51c0b"] = "depositETH";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x73c2ad9c"] = "addToken";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x745400c9"] = "requestWithdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x74694a2b"] = "register";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x7617b389"] = "mixSwap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x7951b76f"] = "requestWithdrawalsWstETHWithPermit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x7b0472f0"] = "stake";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x7bde82f2"] = "redeem";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x7c025200"] = "swap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x7d41c86e"] = "requestRedeem";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x7e108d52"] = "initiateWithdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x7f60d338"] = "withdrawSelfApeCoin";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x81033120"] = "swapOnZeroXv2";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x81791788"] = "dodoMutliSwap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x827481ea"] = "preSaleMint";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x8279e760"] = "claimSelfApeCoin";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x832fbb29"] = "transferFromOrMint";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x833947fd"] = "reallocateTo";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x8340f549"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x84bd6d29"] = "clipperSwap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x852a12e3"] = "redeemUnderlying";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x85f6d155"] = "register";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x8697d2c2"] = "claimExitedAssets";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x87201b41"] = "fulfillAvailableAdvancedOrders";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x8759c234"] = "unstakeClaimTokens_newPOL";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x891407c0"] = "purchaseTo";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x8ab936b8"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x8b53f75e"] = "redeemInstant";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x8b95dd71"] = "SetAddr";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x8bbedf75"] = "ProveAndClaim";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x8ca3bf68"] = "callBridgeCall";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x8ceab9aa"] = "enterExitQueue";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x8f00eccb"] = "multiSwap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x90e1aa69"] = "processInputOrders";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x9343d9e1"] = "cooldownShares";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x935fb84b"] = "buyOnUniswap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x94ba89a2"] = "swapBorrowRateMode";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x94bf804d"] = "mint";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x972250fe"] = "bridgeToV2";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x9871efa4"] = "unxswapByOrderId";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x9aa3033a"] = "requestVoluntaryExit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x9dcaafb4"] = "depositSelfApeCoin";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0x9f5db69c"] = "updateOperatorName";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa0712d68"] = "mint";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa1251d75"] = "unoswapWithPermit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa1903eab"] = "submit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa21a9280"] = "withdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa22cb465"] = "setApprovalForAll";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa27e8b6b"] = "undefined";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa2922622"] = "withdrawWithSymbolCheck";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa378534b"] = "create";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa415bcad"] = "borrow";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa543ccea"] = "setWithdrawalAddress";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa5977fbb"] = "send";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa59f3e0c"] = "enter";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa62b2a3d"] = "openPerpetual";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa6886da9"] = "directUniV3Swap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa694fc3a"] = "stake";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa824ae8b"] = "swapFrom";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa8a41c70"] = "cancelOrder_";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa9059cbb"] = "transfer";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xa94e78ef"] = "multiSwap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xaa2daba6"] = "depositWithSymbolCheck";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xab834bab"] = "atomicMatch_";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xabdb5ea8"] = "repayBorrow";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xac9650d8"] = "Multicall";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xacf1a841"] = "renew";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xacf41e4d"] = "requestWithdrawalsWithPermit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xadcf1163"] = "claim";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xaf68b302"] = "mintToken";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xafc3083c"] = "removeLiquidity";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xb02029e0"] = "extendRewardEmission";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xb0431182"] = "clipperSwap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xb1a1a882"] = "depositETH";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xb3a34c4c"] = "fulfillOrder";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xb460af94"] = "withdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xb6b06dec"] = "requestValidatorsExit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xb6b55f25"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xb7034f7e"] = "claim";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xb7482509"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xb7ba18c7"] = "multiClaim";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xb80c2f09"] = "smartSwapByOrderId";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xb8aa0db9"] = "depositRsETH";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xba087652"] = "reedeem";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xbba9b10c"] = "destroy";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xbc80f1a8"] = "uniswapV3SwapTo";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xbd439126"] = "confirmWithdrawalAddress";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xbf509bd4"] = "withdrawELFee";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xbfc2d46a"] = "redeemRequest";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc02dd27a"] = "depositInstant";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc03786b0"] = "buyOnUniswapFork";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc111fb91"] = "preSaleMint";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc22fb4ef"] = "withdrawUnderlying";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc3953502"] = "usePubKeysForValidatorSetup";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc3ae1766"] = "depositAsset";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc47f0027"] = "setName";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc48ef844"] = "createVault";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc4d66de8"] = "initialize";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc5a67b01"] = "initiateWithdrawal";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc5ebeaec"] = "borrow";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc7b8981c"] = "withdrawRewards";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc7cdea37"] = "withdrawETH";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc805a666"] = "clipperSwapToWithPermit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xc83ec04d"] = "sellVoucher_new";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xca0bfcce"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xcb1c8321"] = "stakeRPLFor";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xcc8690ac"] = "depositCrvLp";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xccc143b8"] = "requestWithdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xcdac52ed"] = "cooldownAssets";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xcfc0afeb"] = "simpleSwap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xd0a3b665"] = "fillOrderRFQ";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xd0e30db0"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xd1e6044a"] = "compound";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xd3a86833"] = "completeWithdrawal";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xd5f73f5c"] = "redeemFiatRequest";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xd6681042"] = "requestWithdrawals";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xd6a92a5d"] = "clipperSwapToWithPermit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xd7b9d423"] = "withdrawFast";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xd99d32e3"] = "swapAndDeposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xda8be864"] = "undelegate";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xdb006a75"] = "redeem";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xdd307b99"] = "enableOperator";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xddd81f82"] = "registerProxy";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xde0e9a3e"] = "unwrap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xde5f6268"] = "depositAll";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe0db556b"] = "withdrawRewardsPOL";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe1c2eea6"] = "redeemFast";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe2864fe3"] = "cancel";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe2bbb158"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe3afe0a3"] = "claimWithdrawals";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe4457a8a"] = "buyVoucherPOL";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe449022e"] = "uniswapV3Swap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe5234c7a"] = "closePerpetual";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe570b78b"] = "sellVoucher_newPOL";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe61604cf"] = "liquidateBorrow";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe63697c8"] = "withdraw_to_with_slippage";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe69663f1"] = "ZapIn";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe7a050aa"] = "depositIntoStrategy";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe7acab24"] = "fulfillAdvancedOrder";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe7ffb5f7"] = "swapExactAmountIn";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe8a0c121"] = "batchWithdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe8c3516b"] = "getRSETHWithERC20";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe8d6dbb4"] = "RenewAll";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe8eda9df"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe8f28a6c"] = "updateOperatorRewardAddress";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe97fddc2"] = "unstakeClaimTokens_new";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe99454f5"] = "setWithdrawal";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe99a3f80"] = "matchOrders";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xe9fad8ee"] = "exit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xea598cb0"] = "wrap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xea99c2a6"] = "submit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xec1d21dd"] = "megaSwap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xecfe0521"] = "withdrawCrvLp";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xed98a574"] = "fulfillAvailableOrders";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xeda74e71"] = "deleteActiveValidators";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xeea9064b"] = "delegateTo";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xef5e4682"] = "batchWithdrawELFee";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xefef39a1"] = "purchase";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xeff7a612"] = "increase_unlock_time";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf14fcbc8"] = "commit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf2888dbb"] = "unstake";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf2b9fdb8"] = "supply";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf35af1f8"] = "callBridge";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf3fef3a3"] = "withdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf4de10ac"] = "getStakingRewards";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf4f3b200"] = "withdrawERC20";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf532e86a"] = "submit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf56408ed"] = "disableOperator";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf5661034"] = "swapOnUniswapFork";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf5e3c462"] = "liquidateBorrow";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf6326fb3"] = "depositETH";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf756fa21"] = "completeWithdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf7a16963"] = "registerWithConfig";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf8444436"] = "claimWithdrawal";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf87dc1b7"] = "dodoSwapV2TokenToToken";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf8a70486"] = "claimWithdrawal";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf9355f72"] = "buyOnUniswap";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf95a49eb"] = "buy";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xf9609f08"] = "deposit_all";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xfa15b91b"] = "deposit";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xfb0f3ee1"] = "fulfillBasicOrder";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xfb7e92ea"] = "claim";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xfd3c11a8"] = "withdraw";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xfd9f1e10"] = "cancel";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xfe784eaa"] = "swapTokens";
    ETHEREUM_CLEAR_SIGNED_SELECTORS["0xff3bf066"] = "zapInToPT";
})(ETHEREUM_CLEAR_SIGNED_SELECTORS || (ETHEREUM_CLEAR_SIGNED_SELECTORS = {}));
var ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS;
(function (ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS) {
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0x08dc9f42"] = "mint";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0x0968f264"] = "withdraw";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0x0ffab6c2"] = "batchWithdrawCLFee";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0x11413601"] = "stableMintSign";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0x1249c58b"] = "mint";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0x2ba03a79"] = "withdrawCLFee";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0x2c4b04fa"] = "deposit";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0x4f498c73"] = "deposit";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0x657bb113"] = "mintSign";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0x66792ba1"] = "send";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0x804b936f"] = "stableMint";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0x827481ea"] = "preSaleMint";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0xa0712d68"] = "mint";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0xb6b06dec"] = "requestValidatorsExit";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0xbf509bd4"] = "withdrawELFee";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0xc111fb91"] = "preSaleMint";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0xd0e30db0"] = "deposit";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0xe8a0c121"] = "batchWithdraw";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0xe99454f5"] = "setWithdrawal";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0xef5e4682"] = "batchWithdrawELFee";
    ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS["0xf39247a9"] = "mintSign";
})(ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS || (ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS = {}));
var ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS;
(function (ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS) {
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x01d523b6"] = "updateStateAndDepositAndMintOsToken";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x066055e0"] = "burnOsToken";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x0968f264"] = "withdraw";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x0dd8dd02"] = "queueWithdrawals";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x0ffab6c2"] = "batchWithdrawCLFee";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x18f72950"] = "updateStateAndDeposit";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x1a7ff553"] = "updateState";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x201b9eb5"] = "mintOsToken";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x2ba03a79"] = "withdrawCLFee";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x2c4b04fa"] = "deposit";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x33404396"] = "completeQueuedWithdrawals";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x3a4b66f1"] = "stake";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x4f498c73"] = "deposit";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x66792ba1"] = "send";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x721c6513"] = "requestExit";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x8697d2c2"] = "claimExitedAssets";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x8ceab9aa"] = "enterExitQueue";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0x9aa3033a"] = "requestVoluntaryExit";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xac9650d8"] = "multicall";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xadcf1163"] = "claim";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xb6b06dec"] = "requestValidatorsExit";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xb7ba18c7"] = "multiClaim";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xbf509bd4"] = "withdrawELFee";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xca0bfcce"] = "deposit";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xd0e30db0"] = "deposit";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xda8be864"] = "undelegate";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xe7a050aa"] = "depositIntoStrategy";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xe8a0c121"] = "batchWithdraw";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xe99454f5"] = "setWithdrawal";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xeea9064b"] = "delegateTo";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xef5e4682"] = "batchWithdrawELFee";
    ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS["0xf9609f08"] = "deposit";
})(ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS || (ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS = {}));
var ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS;
(function (ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS) {
    ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS["0x1249c58b"] = "mint";
    ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS["0x22a775b6"] = "mintAndTransfer";
    ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS["0x27050d1f"] = "createToken";
    ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS["0x3db397c6"] = "__ERC721Rarible_init";
    ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS["0x832fbb29"] = "transferFromOrMint";
    ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS["0xa22cb465"] = "setApprovalForAll";
    ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS["0xc111fb91"] = "preSaleMint";
    ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS["0xe2864fe3"] = "cancel";
    ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS["0xe99a3f80"] = "matchOrders";
})(ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS || (ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS = {}));
var FANTOM_CLEAR_SIGNED_SELECTORS;
(function (FANTOM_CLEAR_SIGNED_SELECTORS) {
    FANTOM_CLEAR_SIGNED_SELECTORS["0x00f714ce"] = "withdraw";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x016cba5f"] = "execute";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x0502b1c5"] = "unoswap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x0b86a4c1"] = "swapOnUniswapV2Fork";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x0d5f0e3b"] = "uniswapV3SwapTo";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x12a0ddc7"] = "PMMV2Swap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x12aa3caf"] = "swap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x2298207a"] = "simpleBuy";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x2521b930"] = "uniswapV3SwapToWithPermit";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x2e1a7d4d"] = "withdraw";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x2e95b6c8"] = "unoswap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x3c15fd91"] = "unoswapToWithPermit";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x3ccfd60b"] = "withdraw";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x3d21e25a"] = "swapBridgeToV2";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x3eca9c0a"] = "fillOrderRFQ";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x46c67b6d"] = "megaSwap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x4cc4a27b"] = "fillOrderRFQToWithPermit";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x54840d1a"] = "swapOnUniswap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x54e3f31b"] = "SimpleSwap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x64466805"] = "swapOnZeroXv4";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x6e553f65"] = "deposit";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x70ccbd31"] = "fillOrderRFQToWithPermit";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x7c025200"] = "swap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x81033120"] = "swapOnZeroXv2";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x84bd6d29"] = "clipperSwap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x935fb84b"] = "buyOnUniswap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x972250fe"] = "bridgeToV2";
    FANTOM_CLEAR_SIGNED_SELECTORS["0x9871efa4"] = "unxswapByOrderId";
    FANTOM_CLEAR_SIGNED_SELECTORS["0xa1251d75"] = "unoswapWithPermit";
    FANTOM_CLEAR_SIGNED_SELECTORS["0xa6886da9"] = "directUniV3Swap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0xa94e78ef"] = "multiSwap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0xb6b55f25"] = "deposit";
    FANTOM_CLEAR_SIGNED_SELECTORS["0xb80c2f09"] = "smartSwapByOrderId";
    FANTOM_CLEAR_SIGNED_SELECTORS["0xbc80f1a8"] = "uniswapV3SwapTo";
    FANTOM_CLEAR_SIGNED_SELECTORS["0xc03786b0"] = "buyOnUniswapFork";
    FANTOM_CLEAR_SIGNED_SELECTORS["0xc805a666"] = "clipperSwapToWithPermit";
    FANTOM_CLEAR_SIGNED_SELECTORS["0xd0a3b665"] = "fillOrderRFQ";
    FANTOM_CLEAR_SIGNED_SELECTORS["0xd0e30db0"] = "deposit";
    FANTOM_CLEAR_SIGNED_SELECTORS["0xe449022e"] = "uniswapV3Swap";
    FANTOM_CLEAR_SIGNED_SELECTORS["0xf5661034"] = "swapOnUniswapFork";
})(FANTOM_CLEAR_SIGNED_SELECTORS || (FANTOM_CLEAR_SIGNED_SELECTORS = {}));
var OPTIMISM_CLEAR_SIGNED_SELECTORS;
(function (OPTIMISM_CLEAR_SIGNED_SELECTORS) {
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x00f714ce"] = "withdraw";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x016cba5f"] = "execute";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x0502b1c5"] = "unoswap";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x0b86a4c1"] = "swapOnUniswapV2Fork";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x0d5f0e3b"] = "uniswapV3SwapTo";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x12a0ddc7"] = "PMMV2Swap";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x12aa3caf"] = "swap";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x2298207a"] = "simpleBuy";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x259f8d1a"] = "withdraw";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x2e1a7d4d"] = "withdraw";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x2e95b6c8"] = "unoswap";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x3c15fd91"] = "unoswapToWithPermit";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x3ccfd60b"] = "withdraw";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x3d21e25a"] = "swapBridgeToV2";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x3eca9c0a"] = "fillOrderRFQ";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x46c67b6d"] = "megaSwap";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x4d447995"] = "deposit";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x54840d1a"] = "swapOnUniswap";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x54e3f31b"] = "SimpleSwap";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x617ba037"] = "supply";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x64466805"] = "swapOnZeroXv4";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x65ae14b5"] = "deleverageWithdraw";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x69328dec"] = "withdraw";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x6e553f65"] = "deposit";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x70ccbd31"] = "fillOrderRFQToWithPermit";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x7c025200"] = "swap";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x81033120"] = "swapOnZeroXv2";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x84bd6d29"] = "clipperSwap";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x935fb84b"] = "buyOnUniswap";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x972250fe"] = "bridgeToV2";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0x9871efa4"] = "unxswapByOrderId";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0xa6886da9"] = "directUniV3Swap";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0xa94e78ef"] = "multiSwap";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0xb460af94"] = "withdraw";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0xb6b55f25"] = "deposit";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0xb80c2f09"] = "smartSwapByOrderId";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0xc03786b0"] = "buyOnUniswapFork";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0xc805a666"] = "clipperSwapToWithPermit";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0xd0e30db0"] = "deposit";
    OPTIMISM_CLEAR_SIGNED_SELECTORS["0xf5661034"] = "swapOnUniswapFork";
})(OPTIMISM_CLEAR_SIGNED_SELECTORS || (OPTIMISM_CLEAR_SIGNED_SELECTORS = {}));
var POLYGON_CLEAR_SIGNED_SELECTORS;
(function (POLYGON_CLEAR_SIGNED_SELECTORS) {
    POLYGON_CLEAR_SIGNED_SELECTORS["0x016cba5f"] = "execute";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x02751cec"] = "removeLiquidityETH";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x03388b4e"] = "sublet";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x0502b1c5"] = "unoswap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x0863b7ac"] = "undefined";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x0c65b39d"] = "unlink";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x0d5f0e3b"] = "uniswapV3SwapTo";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x1157decb"] = "endRental";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x11bcc81e"] = "downgrade";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x12a0ddc7"] = "PMMV2Swap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x12aa3caf"] = "swap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x160e8be3"] = "downgradeToETH";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x16dc3ace"] = "swapExactAmountOut";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x18cbafe5"] = "swapExactTokensForETH";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x1a674419"] = "buyCAPSA";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x1ae50184"] = "preSignRentalOffer";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x1beddfdd"] = "endSublet";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x1e6d24c2"] = "dodoSwapV2TokenToETH";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x1e9a6950"] = "redeem";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x20905506"] = "whitelist_profile_creator";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x2195995c"] = "removeLiquidityWithPermit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x2298207a"] = "simpleBuy";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x22a775b6"] = "mintAndTransfer";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x23463624"] = "deposit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x23b872dd"] = "transferFrom";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x2521b930"] = "uniswapV3SwapToWithPermit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x258d3c33"] = "redeemYield";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x26ef699d"] = "sendToken";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x27050d1f"] = "createToken";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x2d8918d7"] = "addLiquidity";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x2e1a7d4d"] = "withdraw";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x2e95b6c8"] = "unoswap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x33635226"] = "undefined";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x38ed1739"] = "swapExactTokensForTokens";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x39255d5b"] = "callAgreement";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x3c15fd91"] = "unoswapToWithPermit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x3c659741"] = "bridgeCall";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x3ce1108d"] = "sellToAMM";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x3d18b912"] = "getReward";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x3d21e25a"] = "swapBridgeToV2";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x3db397c6"] = "__ERC721Rarible_init";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x3eca9c0a"] = "fillOrderRFQ";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x3f2e5fc3"] = "sendNative";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x42966c68"] = "burn";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x441a3e70"] = "withdraw";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x45977d03"] = "upgrade";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x46c67b6d"] = "megaSwap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x4727ce3a"] = "collect";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x47e7ef24"] = "deposit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x48eaf6d6"] = "requestMaticXSwap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x4926c4ed"] = "change_del_exec_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x4a25d94a"] = "swapTokensForExactETH";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x4b7312a9"] = "follow";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x4cc4a27b"] = "fillOrderRFQToWithPermit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x4d7b35a0"] = "follow_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x5028bb95"] = "dodoSwapV2ETHToToken";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x51227094"] = "processOutputOrders";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x51c3659c"] = "change_del_exec_1";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x54506e92"] = "grind";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x54840d1a"] = "swapOnUniswap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x54bacd13"] = "externalSwap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x54e3f31b"] = "SimpleSwap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x560a4db1"] = "act";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x58b9d179"] = "swapOnUniswap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x5b0d5984"] = "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x5b34b966"] = "incrementCounter";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x5c11d795"] = "swapExactTokensForTokensSupportingFeeOnTransferTokens";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x617ba037"] = "supply";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x627cdcb9"] = "incrementNonce";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x6363e882"] = "registerAndRewardGameWithSignature";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x64466805"] = "swapOnZeroXv4";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x65f29f27"] = "quote_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x66b0dcd3"] = "post";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x69328dec"] = "withdraw";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x6ad3ca7d"] = "batchCall";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x6d0fd658"] = "metadata_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x6d9634b7"] = "releaseTokens";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x6dea40b3"] = "set_follow_mod";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x6e09f420"] = "cancelRentalOffer";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x70ccbd31"] = "fillOrderRFQToWithPermit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x7617b389"] = "mixSwap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x77baf209"] = "claimMaticXSwap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x791ac947"] = "swapExactTokensForETHSupportingFeeOnTransferTokens";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x7c025200"] = "swap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x7e502fe0"] = "link_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x7ff36ab5"] = "swapExactETHForTokens";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x809d8947"] = "unfollow_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x81033120"] = "swapOnZeroXv2";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x815ed04a"] = "unfollow";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x81791788"] = "dodoMutliSwap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x825ab164"] = "unlink_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x832fbb29"] = "transferFromOrMint";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x84bd6d29"] = "clipperSwap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x85149258"] = "exerciseOptions";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x86cf48e7"] = "link";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x87201b41"] = "fulfillAvailableAdvancedOrders";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x8803dbee"] = "swapTokensForExactTokens";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x8875eb84"] = "buyFromAMM";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x8ca3bf68"] = "callBridgeCall";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x8d259eb1"] = "rent";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x8f00eccb"] = "undefined";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x907cd7d2"] = "post_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x90e1aa69"] = "processInputOrders";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x935fb84b"] = "buyOnUniswap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x972250fe"] = "bridgeToV2";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x9871efa4"] = "unxswapByOrderId";
    POLYGON_CLEAR_SIGNED_SELECTORS["0x9f916c9f"] = "buyFromAMMWithReferrer";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xa1251d75"] = "unoswapWithPermit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xa21a9280"] = "withdraw";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xa22cb465"] = "setApprovalForAll";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xa27e8b6b"] = "undefined";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xa2922622"] = "withdrawWithSymbolCheck";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xa378534b"] = "create";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xa5977fbb"] = "send";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xa6886da9"] = "directUniV3Swap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xa694fc3a"] = "stake";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xa8a41c70"] = "cancelOrder_";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xa94e78ef"] = "multiSwap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xaa2daba6"] = "depositWithSymbolCheck";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xaf2979eb"] = "removeLiquidityETHSupportingFeeOnTransferTokens";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xafc3083c"] = "removeLiquidity";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xb273b4a7"] = "comment";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xb3a34c4c"] = "fulfillOrder";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xb42df51a"] = "comment_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xb60099b7"] = "craft";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xb6b55f25"] = "deposit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xb6f9de95"] = "swapExactETHForTokensSupportingFeeOnTransferTokens";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xb7034f7e"] = "claim";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xb7902e73"] = "collect_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xb80c2f09"] = "smartSwapByOrderId";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xbaa2abde"] = "removeLiquidity";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xbba9b10c"] = "destroy";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xbc80f1a8"] = "uniswapV3SwapTo";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xc03786b0"] = "buyOnUniswapFork";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xc1f4b40a"] = "change_del_exec_2";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xc5d5d96a"] = "act";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xc6d45944"] = "set_block_status_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xc78cf1a0"] = "swapMaticForMaticXViaInstantPool";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xc805a666"] = "clipperSwapToWithPermit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xc86642c7"] = "act_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xce30bb4f"] = "set_follow_mod_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xcf81464b"] = "upgradeByETH";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xcfc0afeb"] = "simpleSwap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xd06a750c"] = "exercisePositions";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xd0a3b665"] = "fillOrderRFQ";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xd0e30db0"] = "deposit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xde5f6268"] = "depositAll";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xded9382a"] = "removeLiquidityETHWithPermit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xe1649e8d"] = "endRentalPrematurely";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xe2864fe3"] = "cancel";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xe2bbb158"] = "deposit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xe449022e"] = "uniswapV3Swap";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xe6a402b5"] = "mirror_with_sign";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xe7acab24"] = "fulfillAdvancedOrder";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xe7ffb5f7"] = "swapExactAmountIn";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xe8e33700"] = "addLiquidity";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xe99a3f80"] = "matchOrders";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xe9fad8ee"] = "exit";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xea25e176"] = "claim";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xec1d21dd"] = "undefined";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xed98a574"] = "fulfillAvailableOrders";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xefe4fd83"] = "metadata";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xf08e8f5e"] = "mint";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xf0ba35f0"] = "quote";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xf2b9fdb8"] = "supply";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xf305d719"] = "addLiquidityETH";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xf35af1f8"] = "callBridge";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xf3fef3a3"] = "withdraw";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xf5661034"] = "swapOnUniswapFork";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xf87dc1b7"] = "dodoSwapV2TokenToToken";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xf90604d1"] = "mirror";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xf9355f72"] = "undefined";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xf95a49eb"] = "undefined";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xfb0f3ee1"] = "fulfillBasicOrder";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xfb3bdb41"] = "swapETHForExactTokens";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xfb827e82"] = "set_block_status";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xfd9f1e10"] = "cancel";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xfe9d8323"] = "sellCAPSA";
    POLYGON_CLEAR_SIGNED_SELECTORS["0xff3bf066"] = "zapInToPT";
})(POLYGON_CLEAR_SIGNED_SELECTORS || (POLYGON_CLEAR_SIGNED_SELECTORS = {}));
var POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS;
(function (POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS) {
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x016cba5f"] = "execute";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x0b86a4c1"] = "swapOnUniswapV2Fork";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x0d5f0e3b"] = "uniswapV3SwapTo";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x12a0ddc7"] = "PMMV2Swap";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x2298207a"] = "simpleBuy";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x3d21e25a"] = "swapBridgeToV2";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x46c67b6d"] = "megaSwap";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x54840d1a"] = "swapOnUniswap";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x54e3f31b"] = "SimpleSwap";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x64466805"] = "swapOnZeroXv4";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x81033120"] = "swapOnZeroXv2";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x935fb84b"] = "buyOnUniswap";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x972250fe"] = "bridgeToV2";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0x9871efa4"] = "unxswapByOrderId";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0xa6886da9"] = "directUniV3Swap";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0xa94e78ef"] = "multiSwap";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0xb80c2f09"] = "smartSwapByOrderId";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0xc03786b0"] = "buyOnUniswapFork";
    POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS["0xf5661034"] = "swapOnUniswapFork";
})(POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS || (POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS = {}));
var ZKSYNC_CLEAR_SIGNED_SELECTORS;
(function (ZKSYNC_CLEAR_SIGNED_SELECTORS) {
    ZKSYNC_CLEAR_SIGNED_SELECTORS["0x0502b1c5"] = "unoswap";
    ZKSYNC_CLEAR_SIGNED_SELECTORS["0x12aa3caf"] = "swap";
    ZKSYNC_CLEAR_SIGNED_SELECTORS["0x3c15fd91"] = "unoswapToWithPermit";
    ZKSYNC_CLEAR_SIGNED_SELECTORS["0x3eca9c0a"] = "fillOrderRFQ";
    ZKSYNC_CLEAR_SIGNED_SELECTORS["0x70ccbd31"] = "fillOrderRFQToWithPermit";
    ZKSYNC_CLEAR_SIGNED_SELECTORS["0x84bd6d29"] = "clipperSwap";
    ZKSYNC_CLEAR_SIGNED_SELECTORS["0xc805a666"] = "clipperSwapToWithPermit";
})(ZKSYNC_CLEAR_SIGNED_SELECTORS || (ZKSYNC_CLEAR_SIGNED_SELECTORS = {}));
//# sourceMappingURL=dappSelectors.js.map
;// ./node_modules/@ledgerhq/evm-tools/lib-es/selectors/index.js
/* istanbul ignore file: pure exports */
/**
 * List of selectors (hexadecimal representation of the used method's signature) related to
 * ERC20 (Tokens), ERC721/ERC1155 (NFT).
 * You can verify and/or get more info about them on http://4byte.directory
 */

var ERC20_CLEAR_SIGNED_SELECTORS;
(function (ERC20_CLEAR_SIGNED_SELECTORS) {
    ERC20_CLEAR_SIGNED_SELECTORS["APPROVE"] = "0x095ea7b3";
    ERC20_CLEAR_SIGNED_SELECTORS["TRANSFER"] = "0xa9059cbb";
})(ERC20_CLEAR_SIGNED_SELECTORS || (ERC20_CLEAR_SIGNED_SELECTORS = {}));
var ERC721_CLEAR_SIGNED_SELECTORS;
(function (ERC721_CLEAR_SIGNED_SELECTORS) {
    ERC721_CLEAR_SIGNED_SELECTORS["APPROVE"] = "0x095ea7b3";
    ERC721_CLEAR_SIGNED_SELECTORS["SET_APPROVAL_FOR_ALL"] = "0xa22cb465";
    ERC721_CLEAR_SIGNED_SELECTORS["TRANSFER_FROM"] = "0x23b872dd";
    ERC721_CLEAR_SIGNED_SELECTORS["SAFE_TRANSFER_FROM"] = "0x42842e0e";
    ERC721_CLEAR_SIGNED_SELECTORS["SAFE_TRANSFER_FROM_WITH_DATA"] = "0xb88d4fde";
})(ERC721_CLEAR_SIGNED_SELECTORS || (ERC721_CLEAR_SIGNED_SELECTORS = {}));
var ERC1155_CLEAR_SIGNED_SELECTORS;
(function (ERC1155_CLEAR_SIGNED_SELECTORS) {
    ERC1155_CLEAR_SIGNED_SELECTORS["SET_APPROVAL_FOR_ALL"] = "0xa22cb465";
    ERC1155_CLEAR_SIGNED_SELECTORS["SAFE_TRANSFER_FROM"] = "0xf242432a";
    ERC1155_CLEAR_SIGNED_SELECTORS["SAFE_BATCH_TRANSFER_FROM"] = "0x2eb2c2d6";
})(ERC1155_CLEAR_SIGNED_SELECTORS || (ERC1155_CLEAR_SIGNED_SELECTORS = {}));
const DAPP_SELECTORS = {
    ...ARBITRUM_CLEAR_SIGNED_SELECTORS,
    ...AVALANCHE_C_CHAIN_CLEAR_SIGNED_SELECTORS,
    ...BASE_CLEAR_SIGNED_SELECTORS,
    ...BSC_CLEAR_SIGNED_SELECTORS,
    ...ETHEREUM_CLEAR_SIGNED_SELECTORS,
    ...ETHEREUM_GOERLI_CLEAR_SIGNED_SELECTORS,
    ...ETHEREUM_HOLESKY_CLEAR_SIGNED_SELECTORS,
    ...ETHEREUM_ROPSTEN_CLEAR_SIGNED_SELECTORS,
    ...FANTOM_CLEAR_SIGNED_SELECTORS,
    ...OPTIMISM_CLEAR_SIGNED_SELECTORS,
    ...POLYGON_CLEAR_SIGNED_SELECTORS,
    ...POLYGON_ZK_EVM_CLEAR_SIGNED_SELECTORS,
    ...ZKSYNC_CLEAR_SIGNED_SELECTORS,
};
/* harmony default export */ var selectors = ({
    ERC20_CLEAR_SIGNED_SELECTORS,
    ERC721_CLEAR_SIGNED_SELECTORS,
    ERC1155_CLEAR_SIGNED_SELECTORS,
    DAPP_SELECTORS,
});
//# sourceMappingURL=index.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/utils.js
/* provided dependency */ var utils_Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];




const padHexString = (str) => {
    return str.length % 2 ? "0" + str : str;
};
function splitPath(path) {
    const splittedPath = [];
    const paths = path.split("/");
    paths.forEach(path => {
        let value = parseInt(path, 10);
        if (isNaN(value)) {
            return; // FIXME shouldn't it throws instead?
        }
        // Detect hardened paths
        if (path.length > 1 && path[path.length - 1] === "'") {
            value += 0x80000000;
        }
        splittedPath.push(value);
    });
    return splittedPath;
}
function hexBuffer(str) {
    if (!str)
        return utils_Buffer.alloc(0);
    const strWithoutPrefix = str.startsWith("0x") ? str.slice(2) : str;
    return utils_Buffer.from(padHexString(strWithoutPrefix), "hex");
}
function maybeHexBuffer(str) {
    if (!str)
        return null;
    return hexBuffer(str);
}
/**
 * @ignore for the README
 *
 * Helper to convert an integer as a hexadecimal string with the right amount of digits
 * to respect the number of bytes given as parameter
 *
 * @param int Integer
 * @param bytes Number of bytes it should be represented as (1 byte = 2 caraters)
 * @returns The given integer as an hexa string padded with the right number of 0
 */
const intAsHexBytes = (int, bytes) => int.toString(16).padStart(2 * bytes, "0");
const tokenSelectors = Object.values(ERC20_CLEAR_SIGNED_SELECTORS);
const nftSelectors = [
    ...Object.values(ERC721_CLEAR_SIGNED_SELECTORS),
    ...Object.values(ERC1155_CLEAR_SIGNED_SELECTORS),
];
const mergeResolutions = (resolutionsArray) => {
    const mergedResolutions = {
        nfts: [],
        erc20Tokens: [],
        externalPlugin: [],
        plugin: [],
        domains: [],
    };
    for (const resolutions of resolutionsArray) {
        for (const key in resolutions) {
            mergedResolutions[key].push(...resolutions[key]);
        }
    }
    return mergedResolutions;
};
/**
 * @ignore for the README
 *
 * Ledger devices are returning v with potentially EIP-155 already applied when using legacy transactions.
 * Because that v value is only represented as a single byte, we need to replicate what would be the
 * overflow happening on the device while applying EIP-155 and recover the original parity.
 *
 * @param vFromDevice
 * @param chainIdUint32
 * @returns
 */
const getParity = (vFromDevice, chainId, transactionType) => {
    if (transactionType)
        return vFromDevice;
    // The device use a 4 bytes integer to represent the chainId and keeps the highest bytes
    const chainIdUint32 = getChainIdAsUint32(chainId);
    // Then applies EIP-155 to this chainId
    const chainIdWithEIP155 = chainIdUint32 * 2 + 35;
    // Since it's a single byte, we need to apply the overflow after reaching the max 0xff value and starting again to 0x00
    // for both possible values, the chainId with EIP155 and a 0 or 1 parity included
    const chainIdWithOverflowZero = chainIdWithEIP155 % 256;
    const chainIdWithOverflowOne = (chainIdWithEIP155 + 1) % 256;
    if (chainIdWithOverflowZero === vFromDevice) {
        return 0;
    }
    else if (chainIdWithOverflowOne === vFromDevice) {
        return 1;
    }
    throw new Error("Invalid v value");
};
/**
 * @ignore for the README
 *
 * Helper to convert a chainId from a BigNumber to a 4 bytes integer.
 * ChainIds are uint256, but the device limits them to 4 bytes
 *
 * @param {Number|BigNumber} chainId
 * @returns {Number}
 */
const getChainIdAsUint32 = (chainId) => {
    const chainIdBuff = utils_Buffer.from(padHexString(new bignumber_BigNumber(chainId).toString(16)), "hex");
    const chainIdUint32 = chainIdBuff.subarray(0, 4);
    return parseInt(chainIdUint32.toString("hex"), 16);
};
/**
 * @ignore for the README
 *
 * Depending on the transaction type you're trying to sign with the device, the v value will be different.
 * For legacy transactions, the v value is used to store the chainId, and that chainId can be a uint256,
 * and some math operation should be applied to it in order to comply with EIP-155 for replay attacks.
 *
 * In order to prevent breaking changes at the time, the `v` value has been kept as a single byte
 * which forces us to replicate an overflow happening on the device to get the correct `v` value
 *
 * @param {number} vFromDevice
 * @param {BigNumber} chainId
 * @param {Transaction["type"]} transactionType
 * @returns {string} hexa string of the v value
 */
const getV = (vFromDevice, chainId, transactionType) => {
    if (chainId.isZero())
        return vFromDevice.toString(16);
    const parity = getParity(vFromDevice, chainId, transactionType);
    return !transactionType
        ? // Legacy transactions (type 0) should apply EIP-155
            // EIP-155: rlp[(nonce, gasprice, startgas, to, value, data, chainid, 0, 0)]
            padHexString(chainId.times(2).plus(35).plus(parity).toString(16))
        : // Transactions after type 1 should only use partity (00/01) as their v value
            // EIP-2930: 0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, *signatureYParity*, signatureR, signatureS])
            // EIP-1559: 0x02 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list, *signature_y_parity*, signature_r, signature_s])
            // EIP-4844: 0x03 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data, access_list, max_fee_per_blob_gas, blob_versioned_hashes, *y_parity*, r, s])
            // EIP-7702: 0x05 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, value, data, access_list, authorization_list, *signature_y_parity*, signature_r, signature_s])
            padHexString(parity.toString(16));
};
/**
 * @ignore for the README
 *
 * In order to prevent the device from considering a transaction RLP as complete before it actually is
 * we need to split the RLP into chunks which could not be mistaken for a complete transaction.
 * This is true for legacy transaction, where the `v` value is used to store the chainId
 *
 * @param {Buffer} transactionRlp
 * @param {Buffer }derivationPath
 * @param {Transaction["type"]} transactionType
 *
 * @returns {Buffer[]}
 */
const safeChunkTransaction = (transactionRlp, derivationPath, transactionType) => {
    const maxChunkSize = 255;
    // The full payload is the derivation path + the complete RLP of the transaction
    const payload = utils_Buffer.concat([derivationPath, transactionRlp]);
    if (payload.length <= maxChunkSize)
        return [payload];
    if (transactionType) {
        const chunks = Math.ceil(payload.length / maxChunkSize);
        return new Array(chunks)
            .fill(null)
            .map((_, i) => payload.subarray(i * maxChunkSize, (i + 1) * maxChunkSize));
    }
    // Decode the RLP of the full transaction and keep only the last 3 elements (v, r, s)
    const decodedVrs = decode(transactionRlp).slice(-3);
    // Encode those values back to RLP in order to get the length of this serialized list
    // Result should be something like [0xc0 + list payload length, list.map(rlp)]
    // since only v can be used to store the chainId in legacy transactions
    const encodedVrs = lib_esm_encode(decodedVrs);
    // Since chainIds are uint256, the list payload length can be 1B (v rlp description) + 32B (v) + 1B (r) + 1B (s) = 35B max (< 55B)
    // Therefore, the RLP of this vrs list should be prefixed by a value between [0xc1, 0xe3] (0xc0 + 35B = 0xe3 max)
    // @see https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/
    // `encodedVrs` is then everything but the first byte of this serialization
    const encodedVrsBuff = hexBuffer(encodedVrs).subarray(1);
    // Since we want to avoid chunking just before the v,r,s values,
    // we just check the size of that payload and detect
    // if it would fit perfectly in 255B chunks
    // if it does, we chunk smaller parts
    let chunkSize = 0;
    const lastChunkSize = payload.length % maxChunkSize;
    if (lastChunkSize === 0 || lastChunkSize > encodedVrsBuff.length) {
        chunkSize = maxChunkSize;
    }
    else {
        for (let i = 1; i <= maxChunkSize; i++) {
            const lastChunkSize = payload.length % (maxChunkSize - i);
            if (lastChunkSize === 0 || lastChunkSize > encodedVrsBuff.length) {
                chunkSize = maxChunkSize - i;
                break;
            }
        }
    }
    const chunks = Math.ceil(payload.length / chunkSize);
    return new Array(chunks)
        .fill(null)
        .map((_, i) => payload.subarray(i * chunkSize, (i + 1) * chunkSize));
};
//# sourceMappingURL=utils.js.map
;// ./node_modules/@ledgerhq/evm-tools/lib-es/message/index.js
/* istanbul ignore file: pure exports, test unecessary */

//# sourceMappingURL=index.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/modules/EIP712/utils.js
/* provided dependency */ var EIP712_utils_Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];



/**
 * @ignore for the README
 *
 * A Map of helpers to get the wanted binary value for
 * each type of array possible in a type definition
 */
var EIP712_ARRAY_TYPE_VALUE;
(function (EIP712_ARRAY_TYPE_VALUE) {
    EIP712_ARRAY_TYPE_VALUE[EIP712_ARRAY_TYPE_VALUE["DYNAMIC"] = 0] = "DYNAMIC";
    EIP712_ARRAY_TYPE_VALUE[EIP712_ARRAY_TYPE_VALUE["FIXED"] = 1] = "FIXED";
})(EIP712_ARRAY_TYPE_VALUE || (EIP712_ARRAY_TYPE_VALUE = {}));
/**
 * @ignore for the README
 *
 * A Map of helpers to get the id and size to return for each
 * type that can be used in EIP712
 */
const EIP712_TYPE_PROPERTIES = {
    CUSTOM: {
        key: () => 0,
        size: () => null,
    },
    INT: {
        key: () => 1,
        size: size => Number(size) / 8,
    },
    UINT: {
        key: () => 2,
        size: size => Number(size) / 8,
    },
    ADDRESS: {
        key: () => 3,
        size: () => null,
    },
    BOOL: {
        key: () => 4,
        size: () => null,
    },
    STRING: {
        key: () => 5,
        size: () => null,
    },
    BYTES: {
        key: size => (typeof size !== "undefined" ? 6 : 7),
        size: size => (typeof size !== "undefined" ? Number(size) : null),
    },
};
/**
 * @ignore for the README
 *
 * A Map of encoders to transform a value to formatted buffer
 */
const EIP712_TYPE_ENCODERS = {
    INT(value, size = 256) {
        const failSafeValue = value ?? "0";
        if (typeof failSafeValue === "string" && failSafeValue?.startsWith("0x")) {
            return hexBuffer(failSafeValue);
        }
        let valueAsBN = new bignumber(failSafeValue);
        // If negative we'll use `two's complement` method to
        // "reversibly convert a positive binary number into a negative binary number with equivalent (but negative) value".
        // thx wikipedia
        if (valueAsBN.lt(0)) {
            const sizeInBytes = size / 8;
            // Creates BN from a buffer serving as a mask filled by maximum value 0xff
            const maskAsBN = new bignumber(`0x${EIP712_utils_Buffer.alloc(sizeInBytes, 0xff).toString("hex")}`);
            // two's complement version of value
            valueAsBN = maskAsBN.plus(valueAsBN).plus(1);
        }
        const paddedHexString = valueAsBN.toString(16).length % 2 ? "0" + valueAsBN.toString(16) : valueAsBN.toString(16);
        return EIP712_utils_Buffer.from(paddedHexString, "hex");
    },
    UINT(value) {
        return this.INT(value);
    },
    BOOL(value) {
        return this.INT(typeof value === "boolean" ? Number(value).toString() : value);
    },
    ADDRESS(value) {
        // Only sending the first 10 bytes (why ?)
        return hexBuffer(value ?? "").slice(0, 20);
    },
    STRING(value) {
        return EIP712_utils_Buffer.from(value ?? "", "utf-8");
    },
    BYTES(value, size) {
        const failSafeValue = value ?? "";
        // Why slice again ?
        return hexBuffer(failSafeValue).slice(0, size ?? (failSafeValue?.length - 2) / 2);
    },
};
/**
 * @ignore for the README
 *
 * Helper parsing an EIP712 Type name to return its type and size(s)
 * if it's an array or nested arrays
 *
 * @see EIP712MessageTypes
 *
 * @example "uint8[2][][4]" => [{name: "uint", bits: 8}, [2, null, 4]]
 * @example "bool" => [{name: "bool", bits: null}, []]
 *
 * @param {String} typeName
 * @returns {[{ name: string; bits: Number | null }, Array<Number | null | undefined>]}
 */
const destructTypeFromString = (typeName) => {
    // Will split "any[][1][10]" in "any", "[][1][10]"
    const splitNameAndArraysRegex = new RegExp(/^([^[\]]*)(\[.*\])*/g);
    // Will match all numbers (or null) inside each array. [0][10][] => [0,10,null]
    const splitArraysRegex = new RegExp(/\[(\d*)\]/g);
    // Will separate the the name from the potential bits/bytes allocation. uint8 => [uint,8]
    const splitNameAndNumberRegex = new RegExp(/(?=u?int|bytes)([a-zA-Z-0-9]+?)(\d{1,3})$/g);
    const [, type, maybeArrays] = splitNameAndArraysRegex.exec(typeName || "") || [];
    const [, name = type, size] = splitNameAndNumberRegex.exec(type || "") || [];
    const typeDescription = name ? { name, size: size ? Number(size) : undefined } : null;
    const arrays = maybeArrays ? [...maybeArrays.matchAll(splitArraysRegex)] : [];
    // Parse each size to either a Number or null
    const arrayLengths = arrays.map(([, arrayLength]) => (arrayLength ? Number(arrayLength) : null));
    return [typeDescription, arrayLengths];
};
/**
 * @ignore for the README
 *
 * Helper to construct the hexadecimal ByteString for the description
 * of a field in an EIP712 Message
 *
 * @param isArray
 * @param typeSize
 * @param typeValue
 * @returns {String} HexByteString
 */
const constructTypeDescByteString = (isArray, typeSize, typeValue) => {
    if (typeValue >= 16) {
        throw new Error("Eth utils - constructTypeDescByteString - Cannot accept a typeValue >= 16 because the typeValue can only be 4 bits in binary" +
            { isArray, typeSize, typeValue });
    }
    // 1 is array, 0 is not array
    const isArrayBit = isArray ? "1" : "0";
    // 1 has type size, 0 has no type size
    const hasTypeSize = typeof typeSize === "number" ? "1" : "0";
    // 2 unused bits
    const unusedBits = "00";
    // type key as 4 bits
    const typeValueBits = typeValue.toString(2).padStart(4, "0");
    return intAsHexBytes(parseInt(isArrayBit + hasTypeSize + unusedBits + typeValueBits, 2), 1);
};
/**
 * @ignore for the README
 *
 * Helper to create the buffer to describe an EIP712 types' entry structure
 *
 * @param {EIP712MessageTypesEntry} entry
 * @returns {Buffer}
 */
const makeTypeEntryStructBuffer = ({ name, type }) => {
    const [typeDescription, arrSizes] = destructTypeFromString(type);
    const isTypeAnArray = Boolean(arrSizes.length);
    const typeProperties = EIP712_TYPE_PROPERTIES[typeDescription?.name?.toUpperCase() || ""] ||
        EIP712_TYPE_PROPERTIES.CUSTOM;
    const typeKey = typeProperties.key(typeDescription?.size);
    const typeSize = typeProperties.size(typeDescription?.size);
    const typeDescData = constructTypeDescByteString(isTypeAnArray, typeSize, typeKey);
    const bufferArray = [EIP712_utils_Buffer.from(typeDescData, "hex")];
    if (typeProperties === EIP712_TYPE_PROPERTIES.CUSTOM) {
        bufferArray.push(EIP712_utils_Buffer.from(intAsHexBytes(typeDescription?.name?.length ?? 0, 1), "hex"));
        bufferArray.push(EIP712_utils_Buffer.from(typeDescription?.name ?? "", "utf-8"));
    }
    if (typeof typeSize === "number") {
        bufferArray.push(EIP712_utils_Buffer.from(intAsHexBytes(typeSize, 1), "hex"));
    }
    if (isTypeAnArray) {
        bufferArray.push(EIP712_utils_Buffer.from(intAsHexBytes(arrSizes.length, 1), "hex"));
        arrSizes.forEach(size => {
            if (typeof size === "number") {
                bufferArray.push(EIP712_utils_Buffer.from(intAsHexBytes(EIP712_ARRAY_TYPE_VALUE.FIXED, 1), "hex"), EIP712_utils_Buffer.from(intAsHexBytes(size, 1), "hex"));
            }
            else {
                bufferArray.push(EIP712_utils_Buffer.from(intAsHexBytes(EIP712_ARRAY_TYPE_VALUE.DYNAMIC, 1), "hex"));
            }
        });
    }
    bufferArray.push(EIP712_utils_Buffer.from(intAsHexBytes(name.length, 1), "hex"), EIP712_utils_Buffer.from(name, "utf-8"));
    return EIP712_utils_Buffer.concat(bufferArray);
};
/**
 * @ignore for the README
 *
 * Creates a map for each token provided with a `provideERC20TokenInfo` APDU
 * in order to keep track of their index in the memory of the device
 *
 * @param {MessageFilters | undefined} filters
 * @param {boolean} shouldUseV1Filters
 * @param {EIP712Message} message
 * @returns {Record<number, { token: string; coinRefMemorySlot?: number }>}
 */
const getCoinRefTokensMap = (filters, shouldUseV1Filters, message) => {
    const coinRefsTokensMap = {};
    if (shouldUseV1Filters || !filters)
        return coinRefsTokensMap;
    const tokenFilters = filters.fields
        .filter(({ format }) => format === "token")
        .sort((a, b) => (a.coin_ref || 0) - (b.coin_ref || 0));
    const tokens = tokenFilters.reduce((acc, filter) => {
        const token = getValueFromPath(filter.path, message);
        if (Array.isArray(token)) {
            throw new Error("Array of tokens is not supported with a single coin ref");
        }
        return [...acc, { token, coinRef: filter.coin_ref }];
    }, []);
    for (const { token, coinRef } of tokens) {
        coinRefsTokensMap[coinRef] = { token };
    }
    // For some messages like a Permit has no token address in its message, only the amount is provided.
    // In those cases, we'll need to provide the verifying contract contained in the EIP712 domain
    // The verifying contract is refrerenced by the coinRef 255 (0xff) in CAL and in the device
    // independently of the token index returned by the app after a providerERC20TokenInfo
    const shouldUseVerifyingContract = filters.fields.some(filter => filter.format === "amount" && filter.coin_ref === 255);
    if (shouldUseVerifyingContract && message.domain.verifyingContract) {
        coinRefsTokensMap[255] = { token: message.domain.verifyingContract };
    }
    return coinRefsTokensMap;
};
/**
 * @ignore for the README
 *
 * Get the current application name loaded in Bolos and its version
 *
 * @param {Transport} transport
 * @returns {Promise<{name: string, version: string}>}
 */
const getAppAndVersion = async (transport) => {
    const appAndVersionHex = await transport.send(0xb0, 0x01, 0x00, 0x00);
    let offset = 1;
    const nameLength = appAndVersionHex[offset];
    offset += 1;
    const name = appAndVersionHex.subarray(offset, offset + nameLength).toString("ascii");
    offset += nameLength;
    const versionLength = appAndVersionHex[offset];
    offset += 1;
    const version = appAndVersionHex.subarray(offset, offset + versionLength).toString("ascii");
    return {
        name,
        version,
    };
};
/**
 * @ignore for the README
 *
 * Helper creating the buffer representing the display name and signature
 * of a filter which are prefixes & suffixes of a all V2 payloads
 *
 * @param {string} displayName
 * @param {string} sig
 * @returns {{ displayNameBuffer: Buffer; sigBuffer: Buffer }}
 */
const getFilterDisplayNameAndSigBuffers = (displayName, sig) => {
    const displayNameContentBuffer = EIP712_utils_Buffer.from(displayName);
    const displayNameLengthBuffer = EIP712_utils_Buffer.from(intAsHexBytes(displayNameContentBuffer.length, 1), "hex");
    const sigContentBuffer = EIP712_utils_Buffer.from(sig, "hex");
    const sigLengthBuffer = EIP712_utils_Buffer.from(intAsHexBytes(sigContentBuffer.length, 1), "hex");
    return {
        displayNameBuffer: EIP712_utils_Buffer.concat([displayNameLengthBuffer, displayNameContentBuffer]),
        sigBuffer: EIP712_utils_Buffer.concat([sigLengthBuffer, sigContentBuffer]),
    };
};
/**
 * @ignore for the README
 *
 * Creates the payload for V2 filters following the spec provided here:
 *
 * @see https://github.com/LedgerHQ/app-ethereum/blob/develop/doc/ethapp.adoc#if-p2--message-info
 *
 * @param {FilteringInfoShowField["format"]} format
 * @param {FilteringInfoShowField["coinRef"]} coinRef
 * @param {FilteringInfoShowField["coinRefsTokensMap"]} coinRefsTokensMap
 * @param {Buffer} displayNameBuffer
 * @param {Buffer} sigBuffer
 * @returns {Buffer}
 */
const getPayloadForFilterV2 = (format, coinRef, coinRefsTokensMap, displayNameBuffer, sigBuffer) => {
    switch (format) {
        case "raw":
        case "datetime":
            return EIP712_utils_Buffer.concat([displayNameBuffer, sigBuffer]);
        case "token": {
            const { deviceTokenIndex } = coinRefsTokensMap[coinRef];
            return EIP712_utils_Buffer.concat([
                EIP712_utils_Buffer.from(intAsHexBytes(deviceTokenIndex || coinRef || 0, 1), "hex"),
                sigBuffer,
            ]);
        }
        case "amount": {
            const { deviceTokenIndex } = coinRefsTokensMap[coinRef];
            return EIP712_utils_Buffer.concat([
                displayNameBuffer,
                EIP712_utils_Buffer.from(intAsHexBytes(deviceTokenIndex || coinRef || 0, 1), "hex"),
                sigBuffer,
            ]);
        }
        default:
            throw new Error("Invalid format");
    }
};
//# sourceMappingURL=utils.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/modules/EIP712/index.js
/* provided dependency */ var EIP712_Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];
/* eslint-disable @typescript-eslint/no-duplicate-enum-values */






/**
 * @ignore for the README
 *
 * Factory to create the recursive function that will pass on each
 * field level and APDUs to describe its struct implementation
 *
 * @param {Eth["sendStructImplem"]} sendStructImplem
 * @param {EIP712MessageTypes} types
 * @returns {void}
 */
const makeRecursiveFieldStructImplem = ({ transport, loadConfig, chainId, erc20SignaturesBlob, types, filters, shouldUseV1Filters, shouldUseDiscardedFields, coinRefsTokensMap, }) => {
    const typesMap = {};
    for (const type in types) {
        typesMap[type] = types[type]?.reduce((acc, curr) => ({ ...acc, [curr.name]: curr.type }), {});
    }
    // This recursion will call itself to handle each level of each field
    // in order to send APDUs for each of them
    const recursiveFieldStructImplem = async (destructedType, data, path = "") => {
        const [typeDescription, arrSizes] = destructedType;
        const [currSize, ...restSizes] = arrSizes;
        const isCustomType = !EIP712_TYPE_PROPERTIES[typeDescription?.name?.toUpperCase() || ""];
        if (Array.isArray(data) && typeof currSize !== "undefined") {
            await sendStructImplem(transport, {
                structType: "array",
                value: data.length,
            });
            const entryPath = `${path}.[]`;
            if (!data.length) {
                // If the array is empty and a filter exists, we need to let the app know that the filter can be discarded
                const entryFilters = filters?.fields.filter(f => f.path.startsWith(entryPath));
                if (entryFilters && shouldUseDiscardedFields) {
                    for (const entryFilter of entryFilters) {
                        await sendFilteringInfo(transport, "discardField", loadConfig, {
                            path: entryFilter.path,
                        });
                        await sendFilteringInfo(transport, "showField", loadConfig, {
                            displayName: entryFilter.label,
                            sig: entryFilter.signature,
                            format: entryFilter.format,
                            coinRef: entryFilter.coin_ref,
                            chainId,
                            erc20SignaturesBlob,
                            shouldUseV1Filters,
                            coinRefsTokensMap,
                            isDiscarded: true,
                        });
                    }
                }
            }
            // If the array is not empty, we need to send the struct implementation for each entry
            for (const entry of data) {
                await recursiveFieldStructImplem([typeDescription, restSizes], entry, entryPath);
            }
        }
        else if (isCustomType) {
            for (const fieldName of Object.keys(typesMap[typeDescription?.name || ""])) {
                const fieldValue = data[fieldName];
                const fieldType = typesMap[typeDescription?.name || ""]?.[fieldName];
                if (fieldType) {
                    await recursiveFieldStructImplem(destructTypeFromString(fieldType), fieldValue, `${path}.${fieldName}`);
                }
            }
        }
        else {
            const filter = filters?.fields.find(f => path === f.path);
            if (filter) {
                await sendFilteringInfo(transport, "showField", loadConfig, {
                    displayName: filter.label,
                    sig: filter.signature,
                    format: filter.format,
                    coinRef: filter.coin_ref,
                    chainId,
                    erc20SignaturesBlob,
                    shouldUseV1Filters,
                    coinRefsTokensMap,
                    isDiscarded: false,
                });
            }
            await sendStructImplem(transport, {
                structType: "field",
                value: {
                    data,
                    type: typeDescription?.name || "",
                    sizeInBits: typeDescription?.size,
                },
            });
        }
    };
    return recursiveFieldStructImplem;
};
/**
 * @ignore for the README
 *
 * This method is used to send the message definition with all its types.
 * This method should be used before the sendStructImplem one
 *
 * @param {String} structType
 * @param {String|Buffer} value
 * @returns {Promise<void>}
 */
const sendStructDef = (transport, structDef) => {
    let APDU_FIELDS;
    (function (APDU_FIELDS) {
        APDU_FIELDS[APDU_FIELDS["CLA"] = 224] = "CLA";
        APDU_FIELDS[APDU_FIELDS["INS"] = 26] = "INS";
        APDU_FIELDS[APDU_FIELDS["P1_complete"] = 0] = "P1_complete";
        APDU_FIELDS[APDU_FIELDS["P1_partial"] = 1] = "P1_partial";
        APDU_FIELDS[APDU_FIELDS["P2_name"] = 0] = "P2_name";
        APDU_FIELDS[APDU_FIELDS["P2_field"] = 255] = "P2_field";
    })(APDU_FIELDS || (APDU_FIELDS = {}));
    const { structType, value } = structDef;
    const data = structType === "name" && typeof value === "string"
        ? EIP712_Buffer.from(value, "utf-8")
        : value;
    return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_complete, structType === "name" ? APDU_FIELDS.P2_name : APDU_FIELDS.P2_field, data);
};
/**
 * @ignore for the README
 *
 * This method provides a trusted new display name to use for the upcoming field.
 * This method should be used after the sendStructDef one.
 *
 * If the method describes an empty name (length of 0), the upcoming field will be taken
 * into account but won’t be shown on the device.
 *
 * The signature is computed on :
 * json key length || json key || display name length || display name
 *
 * signed by the following secp256k1 public key:
 * 0482bbf2f34f367b2e5bc21847b6566f21f0976b22d3388a9a5e446ac62d25cf725b62a2555b2dd464a4da0ab2f4d506820543af1d242470b1b1a969a27578f353
 *
 * @param {String} structType "root" | "array" | "field"
 * @param {string | number | StructFieldData} value
 * @returns {Promise<Buffer | void>}
 */
const sendStructImplem = async (transport, structImplem) => {
    let APDU_FIELDS;
    (function (APDU_FIELDS) {
        APDU_FIELDS[APDU_FIELDS["CLA"] = 224] = "CLA";
        APDU_FIELDS[APDU_FIELDS["INS"] = 28] = "INS";
        APDU_FIELDS[APDU_FIELDS["P1_complete"] = 0] = "P1_complete";
        APDU_FIELDS[APDU_FIELDS["P1_partial"] = 1] = "P1_partial";
        APDU_FIELDS[APDU_FIELDS["P2_root"] = 0] = "P2_root";
        APDU_FIELDS[APDU_FIELDS["P2_array"] = 15] = "P2_array";
        APDU_FIELDS[APDU_FIELDS["P2_field"] = 255] = "P2_field";
    })(APDU_FIELDS || (APDU_FIELDS = {}));
    const { structType, value } = structImplem;
    if (structType === "root") {
        return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_complete, APDU_FIELDS.P2_root, EIP712_Buffer.from(value, "utf-8"));
    }
    if (structType === "array") {
        return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_complete, APDU_FIELDS.P2_array, EIP712_Buffer.from(intAsHexBytes(value, 1), "hex"));
    }
    if (structType === "field") {
        const { data: rawData, type, sizeInBits } = value;
        const encodedData = EIP712_TYPE_ENCODERS[type.toUpperCase()]?.(rawData, sizeInBits);
        if (encodedData) {
            // const dataLengthPer16Bits = (encodedData.length & 0xff00) >> 8;
            const dataLengthPer16Bits = Math.floor(encodedData.length / 256);
            // const dataLengthModulo16Bits = encodedData.length & 0xff;
            const dataLengthModulo16Bits = encodedData.length % 256;
            const data = EIP712_Buffer.concat([
                EIP712_Buffer.from(intAsHexBytes(dataLengthPer16Bits, 1), "hex"),
                EIP712_Buffer.from(intAsHexBytes(dataLengthModulo16Bits, 1), "hex"),
                encodedData,
            ]);
            const bufferSlices = new Array(Math.ceil(data.length / 256))
                .fill(null)
                .map((_, i) => data.subarray(i * 255, (i + 1) * 255));
            for (const bufferSlice of bufferSlices) {
                await transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, bufferSlice !== bufferSlices[bufferSlices.length - 1]
                    ? APDU_FIELDS.P1_partial
                    : APDU_FIELDS.P1_complete, APDU_FIELDS.P2_field, bufferSlice);
            }
        }
    }
    return Promise.resolve();
};
async function sendFilteringInfo(transport, type, loadConfig, data) {
    let APDU_FIELDS;
    (function (APDU_FIELDS) {
        APDU_FIELDS[APDU_FIELDS["CLA"] = 224] = "CLA";
        APDU_FIELDS[APDU_FIELDS["INS"] = 30] = "INS";
        APDU_FIELDS[APDU_FIELDS["P1_standard"] = 0] = "P1_standard";
        APDU_FIELDS[APDU_FIELDS["P1_discarded"] = 1] = "P1_discarded";
        APDU_FIELDS[APDU_FIELDS["P2_activate"] = 0] = "P2_activate";
        APDU_FIELDS[APDU_FIELDS["P2_discarded"] = 1] = "P2_discarded";
        APDU_FIELDS[APDU_FIELDS["P2_show_field"] = 255] = "P2_show_field";
        APDU_FIELDS[APDU_FIELDS["P2_message_info"] = 15] = "P2_message_info";
        APDU_FIELDS[APDU_FIELDS["P2_datetime"] = 252] = "P2_datetime";
        APDU_FIELDS[APDU_FIELDS["P2_amount_join_token"] = 253] = "P2_amount_join_token";
        APDU_FIELDS[APDU_FIELDS["P2_amount_join_value"] = 254] = "P2_amount_join_value";
        APDU_FIELDS[APDU_FIELDS["P2_raw"] = 255] = "P2_raw";
    })(APDU_FIELDS || (APDU_FIELDS = {}));
    switch (type) {
        case "activate":
            return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_discarded, APDU_FIELDS.P2_activate);
        case "contractName": {
            const { displayName, filtersCount, sig } = data;
            const { displayNameBuffer, sigBuffer } = getFilterDisplayNameAndSigBuffers(displayName, sig);
            const filtersCountBuffer = EIP712_Buffer.from(intAsHexBytes(filtersCount, 1), "hex");
            const payload = EIP712_Buffer.concat([displayNameBuffer, filtersCountBuffer, sigBuffer]);
            return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_standard, APDU_FIELDS.P2_message_info, payload);
        }
        case "showField": {
            const { displayName, sig, format, coinRef, chainId, coinRefsTokensMap, shouldUseV1Filters, erc20SignaturesBlob, isDiscarded, } = data;
            const { displayNameBuffer, sigBuffer } = getFilterDisplayNameAndSigBuffers(displayName, sig);
            if (shouldUseV1Filters) {
                const payload = EIP712_Buffer.concat([displayNameBuffer, sigBuffer]);
                return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_standard, APDU_FIELDS.P2_show_field, payload);
            }
            const isTokenAddress = format === "token";
            if (isTokenAddress && coinRef !== undefined) {
                const { token, deviceTokenIndex } = coinRefsTokensMap[coinRef];
                if (deviceTokenIndex === undefined) {
                    const payload = await byContractAddressAndChainId(token, chainId, erc20SignaturesBlob);
                    if (payload) {
                        let PROVIDE_TOKEN_INFOS_APDU_FIELDS;
                        (function (PROVIDE_TOKEN_INFOS_APDU_FIELDS) {
                            PROVIDE_TOKEN_INFOS_APDU_FIELDS[PROVIDE_TOKEN_INFOS_APDU_FIELDS["CLA"] = 224] = "CLA";
                            PROVIDE_TOKEN_INFOS_APDU_FIELDS[PROVIDE_TOKEN_INFOS_APDU_FIELDS["INS"] = 10] = "INS";
                            PROVIDE_TOKEN_INFOS_APDU_FIELDS[PROVIDE_TOKEN_INFOS_APDU_FIELDS["P1"] = 0] = "P1";
                            PROVIDE_TOKEN_INFOS_APDU_FIELDS[PROVIDE_TOKEN_INFOS_APDU_FIELDS["P2"] = 0] = "P2";
                        })(PROVIDE_TOKEN_INFOS_APDU_FIELDS || (PROVIDE_TOKEN_INFOS_APDU_FIELDS = {}));
                        const response = await transport.send(PROVIDE_TOKEN_INFOS_APDU_FIELDS.CLA, PROVIDE_TOKEN_INFOS_APDU_FIELDS.INS, PROVIDE_TOKEN_INFOS_APDU_FIELDS.P1, PROVIDE_TOKEN_INFOS_APDU_FIELDS.P2, payload.data);
                        coinRefsTokensMap[coinRef].deviceTokenIndex = response[0];
                    }
                }
            }
            // For some messages like a Permit has no token address in its message, only the amount is provided.
            // In those cases, we'll need to provide the verifying contract contained in the EIP712 domain
            // The verifying contract is refrerenced by the coinRef 255 (0xff) in CAL and in the device
            // independently of the token index returned by the app after a providerERC20TokenInfo
            const shouldUseVerifyingContract = format === "amount" && coinRef === 255;
            if (shouldUseVerifyingContract) {
                const { token } = coinRefsTokensMap[255];
                const payload = await byContractAddressAndChainId(token, chainId, erc20SignaturesBlob);
                if (payload) {
                    await transport.send(0xe0, 0x0a, 0x00, 0x00, payload.data);
                    coinRefsTokensMap[255].deviceTokenIndex = 255;
                }
            }
            if (!format) {
                throw new Error("Missing format");
            }
            const P2FormatMap = {
                raw: APDU_FIELDS.P2_raw,
                datetime: APDU_FIELDS.P2_datetime,
                token: APDU_FIELDS.P2_amount_join_token,
                amount: APDU_FIELDS.P2_amount_join_value,
            };
            const payload = getPayloadForFilterV2(format, coinRef, coinRefsTokensMap, displayNameBuffer, sigBuffer);
            return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, isDiscarded ? APDU_FIELDS.P1_discarded : APDU_FIELDS.P1_standard, P2FormatMap[format], payload);
        }
        case "discardField": {
            const { path } = data;
            const pathBuffer = EIP712_Buffer.from(path);
            const pathLengthBuffer = EIP712_Buffer.from(intAsHexBytes(pathBuffer.length, 1), "hex");
            const payload = EIP712_Buffer.concat([pathLengthBuffer, pathBuffer]);
            return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_standard, APDU_FIELDS.P2_discarded, payload);
        }
    }
}
/**
 * @ignore for the README
 *
 * Sign an EIP-721 formatted message following the specification here:
 * https://github.com/LedgerHQ/app-ethereum/blob/develop/doc/ethapp.asc#sign-eth-eip-712
 * @example
  eth.signEIP721Message("44'/60'/0'/0/0", {
    domain: {
      chainId: 69,
      name: "Da Domain",
      verifyingContract: "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC",
      version: "1"
    },
    types: {
      "EIP712Domain": [
            { name: "name", type: "string" },
            { name: "version", type: "string" },
            { name: "chainId", type: "uint256" },
            { name: "verifyingContract", type: "address" }
        ],
      "Test": [
        { name: "contents", type: "string" }
      ]
    },
    primaryType: "Test",
    message: {contents: "Hello, Bob!"},
  })
 *
 * @param {String} path derivationPath
 * @param {Object} typedMessage message to sign
 * @param {Boolean} fullImplem use the legacy implementation
 * @returns {Promise}
 */
const signEIP712Message = async (transport, path, typedMessage, fullImplem = false, loadConfig) => {
    let APDU_FIELDS;
    (function (APDU_FIELDS) {
        APDU_FIELDS[APDU_FIELDS["CLA"] = 224] = "CLA";
        APDU_FIELDS[APDU_FIELDS["INS"] = 12] = "INS";
        APDU_FIELDS[APDU_FIELDS["P1"] = 0] = "P1";
        APDU_FIELDS[APDU_FIELDS["P2_v0"] = 0] = "P2_v0";
        APDU_FIELDS[APDU_FIELDS["P2_full"] = 1] = "P2_full";
    })(APDU_FIELDS || (APDU_FIELDS = {}));
    const { primaryType, types: unsortedTypes, domain, message } = typedMessage;
    const { calServiceURL } = getLoadConfig(loadConfig);
    // Types are sorted by alphabetical order in order to get the same schema hash no matter the JSON format
    const types = sortObjectAlphabetically(unsortedTypes);
    const { version } = await getAppAndVersion(transport);
    const shouldUseV1Filters = !semver_default().gte(version, "1.11.1-0", { includePrerelease: true });
    const shouldUseDiscardedFields = semver_default().gte(version, "1.12.0-0", { includePrerelease: true });
    const filters = await getFiltersForMessage(typedMessage, shouldUseV1Filters, calServiceURL);
    const coinRefsTokensMap = getCoinRefTokensMap(filters, shouldUseV1Filters, typedMessage);
    const typeEntries = Object.entries(types);
    // Looping on all types entries and fields to send structs' definitions
    for (const [typeName, entries] of typeEntries) {
        await sendStructDef(transport, {
            structType: "name",
            value: typeName,
        });
        for (const { name, type } of entries) {
            const typeEntryBuffer = makeTypeEntryStructBuffer({ name, type });
            await sendStructDef(transport, {
                structType: "field",
                value: typeEntryBuffer,
            });
        }
    }
    if (filters) {
        await sendFilteringInfo(transport, "activate", loadConfig);
    }
    const erc20SignaturesBlob = !shouldUseV1Filters
        ? await findERC20SignaturesInfo(loadConfig, domain.chainId || 0)
        : undefined;
    // Create the recursion that should pass on each entry
    // of the domain fields and primaryType fields
    const recursiveFieldStructImplem = makeRecursiveFieldStructImplem({
        transport,
        loadConfig,
        chainId: domain.chainId || 0,
        erc20SignaturesBlob,
        types,
        filters,
        shouldUseV1Filters,
        shouldUseDiscardedFields,
        coinRefsTokensMap,
    });
    // Looping on all domain type's entries and fields to send
    // structs' implementations
    const domainName = "EIP712Domain";
    await sendStructImplem(transport, {
        structType: "root",
        value: domainName,
    });
    const domainTypeFields = types[domainName];
    for (const { name, type } of domainTypeFields) {
        const domainFieldValue = domain[name];
        await recursiveFieldStructImplem(destructTypeFromString(type), domainFieldValue);
    }
    if (filters) {
        const { contractName, fields } = filters;
        const contractNameInfos = {
            displayName: contractName.label,
            filtersCount: fields.length,
            sig: contractName.signature,
        };
        await sendFilteringInfo(transport, "contractName", loadConfig, contractNameInfos);
    }
    // Looping on all primaryType type's entries and fields to send
    // struct' implementations
    await sendStructImplem(transport, {
        structType: "root",
        value: primaryType,
    });
    const primaryTypeFields = types[primaryType];
    for (const { name, type } of primaryTypeFields) {
        const primaryTypeValue = message[name];
        await recursiveFieldStructImplem(destructTypeFromString(type), primaryTypeValue, name);
    }
    // Sending the final signature.
    const paths = splitPath(path);
    const signatureBuffer = EIP712_Buffer.alloc(1 + paths.length * 4);
    signatureBuffer[0] = paths.length;
    paths.forEach((element, index) => {
        signatureBuffer.writeUInt32BE(element, 1 + 4 * index);
    });
    return transport
        .send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1, fullImplem ? APDU_FIELDS.P2_v0 : APDU_FIELDS.P2_full, signatureBuffer)
        .then(response => {
        const v = response[0];
        const r = response.subarray(1, 1 + 32).toString("hex");
        const s = response.subarray(1 + 32, 1 + 32 + 32).toString("hex");
        return {
            v,
            r,
            s,
        };
    });
};
/**
 * @ignore for the README
 * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)
 * @example
 eth.signEIP712HashedMessage("44'/60'/0'/0/0", Buffer.from("0101010101010101010101010101010101010101010101010101010101010101").toString("hex"), Buffer.from("0202020202020202020202020202020202020202020202020202020202020202").toString("hex")).then(result => {
 var v = result['v'] - 27;
 v = v.toString(16);
 if (v.length < 2) {
   v = "0" + v;
 }
 console.log("Signature 0x" + result['r'] + result['s'] + v);
 })
 */
const signEIP712HashedMessage = (transport, path, domainSeparatorHex, hashStructMessageHex) => {
    const domainSeparator = hexBuffer(domainSeparatorHex);
    const hashStruct = hexBuffer(hashStructMessageHex);
    const paths = splitPath(path);
    const buffer = EIP712_Buffer.alloc(1 + paths.length * 4 + 32 + 32, 0);
    let offset = 0;
    buffer[0] = paths.length;
    paths.forEach((element, index) => {
        buffer.writeUInt32BE(element, 1 + 4 * index);
    });
    offset = 1 + 4 * paths.length;
    domainSeparator.copy(buffer, offset);
    offset += 32;
    hashStruct.copy(buffer, offset);
    return transport.send(0xe0, 0x0c, 0x00, 0x00, buffer).then(response => {
        const v = response[0];
        const r = response.subarray(1, 1 + 32).toString("hex");
        const s = response.subarray(1 + 32, 1 + 32 + 32).toString("hex");
        return {
            v,
            r,
            s,
        };
    });
};
//# sourceMappingURL=index.js.map
;// ./node_modules/@ethersproject/strings/lib.esm/_version.js
const strings_lib_esm_version_version = "strings/5.8.0";
//# sourceMappingURL=_version.js.map
;// ./node_modules/@ethersproject/strings/lib.esm/utf8.js




const utf8_logger = new lib_esm_Logger(strings_lib_esm_version_version);
///////////////////////////////
var UnicodeNormalizationForm;
(function (UnicodeNormalizationForm) {
    UnicodeNormalizationForm["current"] = "";
    UnicodeNormalizationForm["NFC"] = "NFC";
    UnicodeNormalizationForm["NFD"] = "NFD";
    UnicodeNormalizationForm["NFKC"] = "NFKC";
    UnicodeNormalizationForm["NFKD"] = "NFKD";
})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
;
var Utf8ErrorReason;
(function (Utf8ErrorReason) {
    // A continuation byte was present where there was nothing to continue
    // - offset = the index the codepoint began in
    Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
    // - offset = the index the codepoint began in
    Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
    // The string is too short to process the expected codepoint
    // - offset = the index the codepoint began in
    Utf8ErrorReason["OVERRUN"] = "string overrun";
    // A missing continuation byte was expected but not found
    // - offset = the index the continuation byte was expected at
    Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
    // The computed code point is outside the range for UTF-8
    // - offset       = start of this codepoint
    // - badCodepoint = the computed codepoint; outside the UTF-8 range
    Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
    // UTF-8 strings may not contain UTF-16 surrogate pairs
    // - offset       = start of this codepoint
    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
    Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
    // The string is an overlong representation
    // - offset       = start of this codepoint
    // - badCodepoint = the computed codepoint; already bounds checked
    Utf8ErrorReason["OVERLONG"] = "overlong representation";
})(Utf8ErrorReason || (Utf8ErrorReason = {}));
;
function errorFunc(reason, offset, bytes, output, badCodepoint) {
    return utf8_logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
        let i = 0;
        for (let o = offset + 1; o < bytes.length; o++) {
            if (bytes[o] >> 6 !== 0x02) {
                break;
            }
            i++;
        }
        return i;
    }
    // This byte runs us past the end of the string, so just jump to the end
    // (but the first byte was read already read and therefore skipped)
    if (reason === Utf8ErrorReason.OVERRUN) {
        return bytes.length - offset - 1;
    }
    // Nothing to skip
    return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
    // Overlong representations are otherwise "valid" code points; just non-deistingtished
    if (reason === Utf8ErrorReason.OVERLONG) {
        output.push(badCodepoint);
        return 0;
    }
    // Put the replacement character into the output
    output.push(0xfffd);
    // Otherwise, process as if ignoring errors
    return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
// Common error handing strategies
const Utf8ErrorFuncs = Object.freeze({
    error: errorFunc,
    ignore: ignoreFunc,
    replace: replaceFunc
});
// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
function getUtf8CodePoints(bytes, onError) {
    if (onError == null) {
        onError = Utf8ErrorFuncs.error;
    }
    bytes = lib_esm_arrayify(bytes);
    const result = [];
    let i = 0;
    // Invalid bytes are ignored
    while (i < bytes.length) {
        const c = bytes[i++];
        // 0xxx xxxx
        if (c >> 7 === 0) {
            result.push(c);
            continue;
        }
        // Multibyte; how many bytes left for this character?
        let extraLength = null;
        let overlongMask = null;
        // 110x xxxx 10xx xxxx
        if ((c & 0xe0) === 0xc0) {
            extraLength = 1;
            overlongMask = 0x7f;
            // 1110 xxxx 10xx xxxx 10xx xxxx
        }
        else if ((c & 0xf0) === 0xe0) {
            extraLength = 2;
            overlongMask = 0x7ff;
            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
        }
        else if ((c & 0xf8) === 0xf0) {
            extraLength = 3;
            overlongMask = 0xffff;
        }
        else {
            if ((c & 0xc0) === 0x80) {
                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
            }
            else {
                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
            }
            continue;
        }
        // Do we have enough bytes in our data?
        if (i - 1 + extraLength >= bytes.length) {
            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
            continue;
        }
        // Remove the length prefix from the char
        let res = c & ((1 << (8 - extraLength - 1)) - 1);
        for (let j = 0; j < extraLength; j++) {
            let nextChar = bytes[i];
            // Invalid continuation byte
            if ((nextChar & 0xc0) != 0x80) {
                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                res = null;
                break;
            }
            ;
            res = (res << 6) | (nextChar & 0x3f);
            i++;
        }
        // See above loop for invalid continuation byte
        if (res === null) {
            continue;
        }
        // Maximum code point
        if (res > 0x10ffff) {
            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
            continue;
        }
        // Reserved for UTF-16 surrogate halves
        if (res >= 0xd800 && res <= 0xdfff) {
            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
            continue;
        }
        // Check for overlong sequences (more bytes than needed)
        if (res <= overlongMask) {
            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
            continue;
        }
        result.push(res);
    }
    return result;
}
// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
    if (form != UnicodeNormalizationForm.current) {
        utf8_logger.checkNormalize();
        str = str.normalize(form);
    }
    let result = [];
    for (let i = 0; i < str.length; i++) {
        const c = str.charCodeAt(i);
        if (c < 0x80) {
            result.push(c);
        }
        else if (c < 0x800) {
            result.push((c >> 6) | 0xc0);
            result.push((c & 0x3f) | 0x80);
        }
        else if ((c & 0xfc00) == 0xd800) {
            i++;
            const c2 = str.charCodeAt(i);
            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                throw new Error("invalid utf-8 string");
            }
            // Surrogate Pair
            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
            result.push((pair >> 18) | 0xf0);
            result.push(((pair >> 12) & 0x3f) | 0x80);
            result.push(((pair >> 6) & 0x3f) | 0x80);
            result.push((pair & 0x3f) | 0x80);
        }
        else {
            result.push((c >> 12) | 0xe0);
            result.push(((c >> 6) & 0x3f) | 0x80);
            result.push((c & 0x3f) | 0x80);
        }
    }
    return lib_esm_arrayify(result);
}
;
function escapeChar(value) {
    const hex = ("0000" + value.toString(16));
    return "\\u" + hex.substring(hex.length - 4);
}
function _toEscapedUtf8String(bytes, onError) {
    return '"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {
        if (codePoint < 256) {
            switch (codePoint) {
                case 8: return "\\b";
                case 9: return "\\t";
                case 10: return "\\n";
                case 13: return "\\r";
                case 34: return "\\\"";
                case 92: return "\\\\";
            }
            if (codePoint >= 32 && codePoint < 127) {
                return String.fromCharCode(codePoint);
            }
        }
        if (codePoint <= 0xffff) {
            return escapeChar(codePoint);
        }
        codePoint -= 0x10000;
        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
    }).join("") + '"';
}
function _toUtf8String(codePoints) {
    return codePoints.map((codePoint) => {
        if (codePoint <= 0xffff) {
            return String.fromCharCode(codePoint);
        }
        codePoint -= 0x10000;
        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
    }).join("");
}
function toUtf8String(bytes, onError) {
    return _toUtf8String(getUtf8CodePoints(bytes, onError));
}
function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
    return getUtf8CodePoints(toUtf8Bytes(str, form));
}
//# sourceMappingURL=utf8.js.map
;// ./node_modules/@ethersproject/hash/lib.esm/id.js


function id(text) {
    return lib_esm_keccak256(toUtf8Bytes(text));
}
//# sourceMappingURL=id.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/_version.js
const abi_lib_esm_version_version = "abi/5.8.0";
//# sourceMappingURL=_version.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js






const abstract_coder_logger = new lib_esm_Logger(abi_lib_esm_version_version);
function checkResultErrors(result) {
    // Find the first error (if any)
    const errors = [];
    const checkErrors = function (path, object) {
        if (!Array.isArray(object)) {
            return;
        }
        for (let key in object) {
            const childPath = path.slice();
            childPath.push(key);
            try {
                checkErrors(childPath, object[key]);
            }
            catch (error) {
                errors.push({ path: childPath, error: error });
            }
        }
    };
    checkErrors([], result);
    return errors;
}
class Coder {
    constructor(name, type, localName, dynamic) {
        // @TODO: defineReadOnly these
        this.name = name;
        this.type = type;
        this.localName = localName;
        this.dynamic = dynamic;
    }
    _throwError(message, value) {
        abstract_coder_logger.throwArgumentError(message, this.localName, value);
    }
}
class Writer {
    constructor(wordSize) {
        defineReadOnly(this, "wordSize", wordSize || 32);
        this._data = [];
        this._dataLength = 0;
        this._padding = new Uint8Array(wordSize);
    }
    get data() {
        return hexConcat(this._data);
    }
    get length() { return this._dataLength; }
    _writeData(data) {
        this._data.push(data);
        this._dataLength += data.length;
        return data.length;
    }
    appendWriter(writer) {
        return this._writeData(lib_esm_concat(writer._data));
    }
    // Arrayish items; padded on the right to wordSize
    writeBytes(value) {
        let bytes = lib_esm_arrayify(value);
        const paddingOffset = bytes.length % this.wordSize;
        if (paddingOffset) {
            bytes = lib_esm_concat([bytes, this._padding.slice(paddingOffset)]);
        }
        return this._writeData(bytes);
    }
    _getValue(value) {
        let bytes = lib_esm_arrayify(lib_esm_bignumber_BigNumber.from(value));
        if (bytes.length > this.wordSize) {
            abstract_coder_logger.throwError("value out-of-bounds", lib_esm_Logger.errors.BUFFER_OVERRUN, {
                length: this.wordSize,
                offset: bytes.length
            });
        }
        if (bytes.length % this.wordSize) {
            bytes = lib_esm_concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
        }
        return bytes;
    }
    // BigNumberish items; padded on the left to wordSize
    writeValue(value) {
        return this._writeData(this._getValue(value));
    }
    writeUpdatableValue() {
        const offset = this._data.length;
        this._data.push(this._padding);
        this._dataLength += this.wordSize;
        return (value) => {
            this._data[offset] = this._getValue(value);
        };
    }
}
class Reader {
    constructor(data, wordSize, coerceFunc, allowLoose) {
        defineReadOnly(this, "_data", lib_esm_arrayify(data));
        defineReadOnly(this, "wordSize", wordSize || 32);
        defineReadOnly(this, "_coerceFunc", coerceFunc);
        defineReadOnly(this, "allowLoose", allowLoose);
        this._offset = 0;
    }
    get data() { return lib_esm_hexlify(this._data); }
    get consumed() { return this._offset; }
    // The default Coerce function
    static coerce(name, value) {
        let match = name.match("^u?int([0-9]+)$");
        if (match && parseInt(match[1]) <= 48) {
            value = value.toNumber();
        }
        return value;
    }
    coerce(name, value) {
        if (this._coerceFunc) {
            return this._coerceFunc(name, value);
        }
        return Reader.coerce(name, value);
    }
    _peekBytes(offset, length, loose) {
        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
        if (this._offset + alignedLength > this._data.length) {
            if (this.allowLoose && loose && this._offset + length <= this._data.length) {
                alignedLength = length;
            }
            else {
                abstract_coder_logger.throwError("data out-of-bounds", lib_esm_Logger.errors.BUFFER_OVERRUN, {
                    length: this._data.length,
                    offset: this._offset + alignedLength
                });
            }
        }
        return this._data.slice(this._offset, this._offset + alignedLength);
    }
    subReader(offset) {
        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
    }
    readBytes(length, loose) {
        let bytes = this._peekBytes(0, length, !!loose);
        this._offset += bytes.length;
        // @TODO: Make sure the length..end bytes are all 0?
        return bytes.slice(0, length);
    }
    readValue() {
        return lib_esm_bignumber_BigNumber.from(this.readBytes(this.wordSize));
    }
}
//# sourceMappingURL=abstract-coder.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/coders/address.js




class AddressCoder extends Coder {
    constructor(localName) {
        super("address", "address", localName, false);
    }
    defaultValue() {
        return "0x0000000000000000000000000000000000000000";
    }
    encode(writer, value) {
        try {
            value = getAddress(value);
        }
        catch (error) {
            this._throwError(error.message, value);
        }
        return writer.writeValue(value);
    }
    decode(reader) {
        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
    }
}
//# sourceMappingURL=address.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js


// Clones the functionality of an existing Coder, but without a localName
class AnonymousCoder extends Coder {
    constructor(coder) {
        super(coder.name, coder.type, undefined, coder.dynamic);
        this.coder = coder;
    }
    defaultValue() {
        return this.coder.defaultValue();
    }
    encode(writer, value) {
        return this.coder.encode(writer, value);
    }
    decode(reader) {
        return this.coder.decode(reader);
    }
}
//# sourceMappingURL=anonymous.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/coders/array.js



const array_logger = new lib_esm_Logger(abi_lib_esm_version_version);


function pack(writer, coders, values) {
    let arrayValues = null;
    if (Array.isArray(values)) {
        arrayValues = values;
    }
    else if (values && typeof (values) === "object") {
        let unique = {};
        arrayValues = coders.map((coder) => {
            const name = coder.localName;
            if (!name) {
                array_logger.throwError("cannot encode object for signature with missing names", lib_esm_Logger.errors.INVALID_ARGUMENT, {
                    argument: "values",
                    coder: coder,
                    value: values
                });
            }
            if (unique[name]) {
                array_logger.throwError("cannot encode object for signature with duplicate names", lib_esm_Logger.errors.INVALID_ARGUMENT, {
                    argument: "values",
                    coder: coder,
                    value: values
                });
            }
            unique[name] = true;
            return values[name];
        });
    }
    else {
        array_logger.throwArgumentError("invalid tuple value", "tuple", values);
    }
    if (coders.length !== arrayValues.length) {
        array_logger.throwArgumentError("types/value length mismatch", "tuple", values);
    }
    let staticWriter = new Writer(writer.wordSize);
    let dynamicWriter = new Writer(writer.wordSize);
    let updateFuncs = [];
    coders.forEach((coder, index) => {
        let value = arrayValues[index];
        if (coder.dynamic) {
            // Get current dynamic offset (for the future pointer)
            let dynamicOffset = dynamicWriter.length;
            // Encode the dynamic value into the dynamicWriter
            coder.encode(dynamicWriter, value);
            // Prepare to populate the correct offset once we are done
            let updateFunc = staticWriter.writeUpdatableValue();
            updateFuncs.push((baseOffset) => {
                updateFunc(baseOffset + dynamicOffset);
            });
        }
        else {
            coder.encode(staticWriter, value);
        }
    });
    // Backfill all the dynamic offsets, now that we know the static length
    updateFuncs.forEach((func) => { func(staticWriter.length); });
    let length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
}
function unpack(reader, coders) {
    let values = [];
    // A reader anchored to this base
    let baseReader = reader.subReader(0);
    coders.forEach((coder) => {
        let value = null;
        if (coder.dynamic) {
            let offset = reader.readValue();
            let offsetReader = baseReader.subReader(offset.toNumber());
            try {
                value = coder.decode(offsetReader);
            }
            catch (error) {
                // Cannot recover from this
                if (error.code === lib_esm_Logger.errors.BUFFER_OVERRUN) {
                    throw error;
                }
                value = error;
                value.baseType = coder.name;
                value.name = coder.localName;
                value.type = coder.type;
            }
        }
        else {
            try {
                value = coder.decode(reader);
            }
            catch (error) {
                // Cannot recover from this
                if (error.code === lib_esm_Logger.errors.BUFFER_OVERRUN) {
                    throw error;
                }
                value = error;
                value.baseType = coder.name;
                value.name = coder.localName;
                value.type = coder.type;
            }
        }
        if (value != undefined) {
            values.push(value);
        }
    });
    // We only output named properties for uniquely named coders
    const uniqueNames = coders.reduce((accum, coder) => {
        const name = coder.localName;
        if (name) {
            if (!accum[name]) {
                accum[name] = 0;
            }
            accum[name]++;
        }
        return accum;
    }, {});
    // Add any named parameters (i.e. tuples)
    coders.forEach((coder, index) => {
        let name = coder.localName;
        if (!name || uniqueNames[name] !== 1) {
            return;
        }
        if (name === "length") {
            name = "_length";
        }
        if (values[name] != null) {
            return;
        }
        const value = values[index];
        if (value instanceof Error) {
            Object.defineProperty(values, name, {
                enumerable: true,
                get: () => { throw value; }
            });
        }
        else {
            values[name] = value;
        }
    });
    for (let i = 0; i < values.length; i++) {
        const value = values[i];
        if (value instanceof Error) {
            Object.defineProperty(values, i, {
                enumerable: true,
                get: () => { throw value; }
            });
        }
    }
    return Object.freeze(values);
}
class ArrayCoder extends Coder {
    constructor(coder, length, localName) {
        const type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
        const dynamic = (length === -1 || coder.dynamic);
        super("array", type, localName, dynamic);
        this.coder = coder;
        this.length = length;
    }
    defaultValue() {
        // Verifies the child coder is valid (even if the array is dynamic or 0-length)
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for (let i = 0; i < this.length; i++) {
            result.push(defaultChild);
        }
        return result;
    }
    encode(writer, value) {
        if (!Array.isArray(value)) {
            this._throwError("expected array value", value);
        }
        let count = this.length;
        if (count === -1) {
            count = value.length;
            writer.writeValue(value.length);
        }
        array_logger.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
        let coders = [];
        for (let i = 0; i < value.length; i++) {
            coders.push(this.coder);
        }
        return pack(writer, coders, value);
    }
    decode(reader) {
        let count = this.length;
        if (count === -1) {
            count = reader.readValue().toNumber();
            // Check that there is *roughly* enough data to ensure
            // stray random data is not being read as a length. Each
            // slot requires at least 32 bytes for their value (or 32
            // bytes as a link to the data). This could use a much
            // tighter bound, but we are erroring on the side of safety.
            if (count * 32 > reader._data.length) {
                array_logger.throwError("insufficient data length", lib_esm_Logger.errors.BUFFER_OVERRUN, {
                    length: reader._data.length,
                    count: count
                });
            }
        }
        let coders = [];
        for (let i = 0; i < count; i++) {
            coders.push(new AnonymousCoder(this.coder));
        }
        return reader.coerce(this.name, unpack(reader, coders));
    }
}
//# sourceMappingURL=array.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js


class BooleanCoder extends Coder {
    constructor(localName) {
        super("bool", "bool", localName, false);
    }
    defaultValue() {
        return false;
    }
    encode(writer, value) {
        return writer.writeValue(value ? 1 : 0);
    }
    decode(reader) {
        return reader.coerce(this.type, !reader.readValue().isZero());
    }
}
//# sourceMappingURL=boolean.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js



class DynamicBytesCoder extends Coder {
    constructor(type, localName) {
        super(type, type, localName, true);
    }
    defaultValue() {
        return "0x";
    }
    encode(writer, value) {
        value = lib_esm_arrayify(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
    }
    decode(reader) {
        return reader.readBytes(reader.readValue().toNumber(), true);
    }
}
class BytesCoder extends DynamicBytesCoder {
    constructor(localName) {
        super("bytes", localName);
    }
    decode(reader) {
        return reader.coerce(this.name, lib_esm_hexlify(super.decode(reader)));
    }
}
//# sourceMappingURL=bytes.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js



// @TODO: Merge this with bytes
class FixedBytesCoder extends Coder {
    constructor(size, localName) {
        let name = "bytes" + String(size);
        super(name, name, localName, false);
        this.size = size;
    }
    defaultValue() {
        return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
    }
    encode(writer, value) {
        let data = lib_esm_arrayify(value);
        if (data.length !== this.size) {
            this._throwError("incorrect data length", value);
        }
        return writer.writeBytes(data);
    }
    decode(reader) {
        return reader.coerce(this.name, lib_esm_hexlify(reader.readBytes(this.size)));
    }
}
//# sourceMappingURL=fixed-bytes.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/coders/null.js


class NullCoder extends Coder {
    constructor(localName) {
        super("null", "", localName, false);
    }
    defaultValue() {
        return null;
    }
    encode(writer, value) {
        if (value != null) {
            this._throwError("not null", value);
        }
        return writer.writeBytes([]);
    }
    decode(reader) {
        reader.readBytes(0);
        return reader.coerce(this.name, null);
    }
}
//# sourceMappingURL=null.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/coders/number.js




class NumberCoder extends Coder {
    constructor(size, signed, localName) {
        const name = ((signed ? "int" : "uint") + (size * 8));
        super(name, name, localName, false);
        this.size = size;
        this.signed = signed;
    }
    defaultValue() {
        return 0;
    }
    encode(writer, value) {
        let v = lib_esm_bignumber_BigNumber.from(value);
        // Check bounds are safe for encoding
        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
        if (this.signed) {
            let bounds = maxUintValue.mask(this.size * 8 - 1);
            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {
                this._throwError("value out-of-bounds", value);
            }
        }
        else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
            this._throwError("value out-of-bounds", value);
        }
        v = v.toTwos(this.size * 8).mask(this.size * 8);
        if (this.signed) {
            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
        }
        return writer.writeValue(v);
    }
    decode(reader) {
        let value = reader.readValue().mask(this.size * 8);
        if (this.signed) {
            value = value.fromTwos(this.size * 8);
        }
        return reader.coerce(this.name, value);
    }
}
//# sourceMappingURL=number.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/coders/string.js



class StringCoder extends DynamicBytesCoder {
    constructor(localName) {
        super("string", localName);
    }
    defaultValue() {
        return "";
    }
    encode(writer, value) {
        return super.encode(writer, toUtf8Bytes(value));
    }
    decode(reader) {
        return toUtf8String(super.decode(reader));
    }
}
//# sourceMappingURL=string.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js



class TupleCoder extends Coder {
    constructor(coders, localName) {
        let dynamic = false;
        const types = [];
        coders.forEach((coder) => {
            if (coder.dynamic) {
                dynamic = true;
            }
            types.push(coder.type);
        });
        const type = ("tuple(" + types.join(",") + ")");
        super("tuple", type, localName, dynamic);
        this.coders = coders;
    }
    defaultValue() {
        const values = [];
        this.coders.forEach((coder) => {
            values.push(coder.defaultValue());
        });
        // We only output named properties for uniquely named coders
        const uniqueNames = this.coders.reduce((accum, coder) => {
            const name = coder.localName;
            if (name) {
                if (!accum[name]) {
                    accum[name] = 0;
                }
                accum[name]++;
            }
            return accum;
        }, {});
        // Add named values
        this.coders.forEach((coder, index) => {
            let name = coder.localName;
            if (!name || uniqueNames[name] !== 1) {
                return;
            }
            if (name === "length") {
                name = "_length";
            }
            if (values[name] != null) {
                return;
            }
            values[name] = values[index];
        });
        return Object.freeze(values);
    }
    encode(writer, value) {
        return pack(writer, this.coders, value);
    }
    decode(reader) {
        return reader.coerce(this.name, unpack(reader, this.coders));
    }
}
//# sourceMappingURL=tuple.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/fragments.js





const fragments_logger = new lib_esm_Logger(abi_lib_esm_version_version);
;
const fragments_constructorGuard = {};
let ModifiersBytes = { calldata: true, memory: true, storage: true };
let ModifiersNest = { calldata: true, memory: true };
function checkModifier(type, name) {
    if (type === "bytes" || type === "string") {
        if (ModifiersBytes[name]) {
            return true;
        }
    }
    else if (type === "address") {
        if (name === "payable") {
            return true;
        }
    }
    else if (type.indexOf("[") >= 0 || type === "tuple") {
        if (ModifiersNest[name]) {
            return true;
        }
    }
    if (ModifiersBytes[name] || name === "payable") {
        fragments_logger.throwArgumentError("invalid modifier", "name", name);
    }
    return false;
}
// @TODO: Make sure that children of an indexed tuple are marked with a null indexed
function parseParamType(param, allowIndexed) {
    let originalParam = param;
    function throwError(i) {
        fragments_logger.throwArgumentError(`unexpected character at position ${i}`, "param", param);
    }
    param = param.replace(/\s/g, " ");
    function newNode(parent) {
        let node = { type: "", name: "", parent: parent, state: { allowType: true } };
        if (allowIndexed) {
            node.indexed = false;
        }
        return node;
    }
    let parent = { type: "", name: "", state: { allowType: true } };
    let node = parent;
    for (let i = 0; i < param.length; i++) {
        let c = param[i];
        switch (c) {
            case "(":
                if (node.state.allowType && node.type === "") {
                    node.type = "tuple";
                }
                else if (!node.state.allowParams) {
                    throwError(i);
                }
                node.state.allowType = false;
                node.type = verifyType(node.type);
                node.components = [newNode(node)];
                node = node.components[0];
                break;
            case ")":
                delete node.state;
                if (node.name === "indexed") {
                    if (!allowIndexed) {
                        throwError(i);
                    }
                    node.indexed = true;
                    node.name = "";
                }
                if (checkModifier(node.type, node.name)) {
                    node.name = "";
                }
                node.type = verifyType(node.type);
                let child = node;
                node = node.parent;
                if (!node) {
                    throwError(i);
                }
                delete child.parent;
                node.state.allowParams = false;
                node.state.allowName = true;
                node.state.allowArray = true;
                break;
            case ",":
                delete node.state;
                if (node.name === "indexed") {
                    if (!allowIndexed) {
                        throwError(i);
                    }
                    node.indexed = true;
                    node.name = "";
                }
                if (checkModifier(node.type, node.name)) {
                    node.name = "";
                }
                node.type = verifyType(node.type);
                let sibling = newNode(node.parent);
                //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
                node.parent.components.push(sibling);
                delete node.parent;
                node = sibling;
                break;
            // Hit a space...
            case " ":
                // If reading type, the type is done and may read a param or name
                if (node.state.allowType) {
                    if (node.type !== "") {
                        node.type = verifyType(node.type);
                        delete node.state.allowType;
                        node.state.allowName = true;
                        node.state.allowParams = true;
                    }
                }
                // If reading name, the name is done
                if (node.state.allowName) {
                    if (node.name !== "") {
                        if (node.name === "indexed") {
                            if (!allowIndexed) {
                                throwError(i);
                            }
                            if (node.indexed) {
                                throwError(i);
                            }
                            node.indexed = true;
                            node.name = "";
                        }
                        else if (checkModifier(node.type, node.name)) {
                            node.name = "";
                        }
                        else {
                            node.state.allowName = false;
                        }
                    }
                }
                break;
            case "[":
                if (!node.state.allowArray) {
                    throwError(i);
                }
                node.type += c;
                node.state.allowArray = false;
                node.state.allowName = false;
                node.state.readArray = true;
                break;
            case "]":
                if (!node.state.readArray) {
                    throwError(i);
                }
                node.type += c;
                node.state.readArray = false;
                node.state.allowArray = true;
                node.state.allowName = true;
                break;
            default:
                if (node.state.allowType) {
                    node.type += c;
                    node.state.allowParams = true;
                    node.state.allowArray = true;
                }
                else if (node.state.allowName) {
                    node.name += c;
                    delete node.state.allowArray;
                }
                else if (node.state.readArray) {
                    node.type += c;
                }
                else {
                    throwError(i);
                }
        }
    }
    if (node.parent) {
        fragments_logger.throwArgumentError("unexpected eof", "param", param);
    }
    delete parent.state;
    if (node.name === "indexed") {
        if (!allowIndexed) {
            throwError(originalParam.length - 7);
        }
        if (node.indexed) {
            throwError(originalParam.length - 7);
        }
        node.indexed = true;
        node.name = "";
    }
    else if (checkModifier(node.type, node.name)) {
        node.name = "";
    }
    parent.type = verifyType(parent.type);
    return parent;
}
function populate(object, params) {
    for (let key in params) {
        defineReadOnly(object, key, params[key]);
    }
}
const FormatTypes = Object.freeze({
    // Bare formatting, as is needed for computing a sighash of an event or function
    sighash: "sighash",
    // Human-Readable with Minimal spacing and without names (compact human-readable)
    minimal: "minimal",
    // Human-Readable with nice spacing, including all names
    full: "full",
    // JSON-format a la Solidity
    json: "json"
});
const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
class ParamType {
    constructor(constructorGuard, params) {
        if (constructorGuard !== fragments_constructorGuard) {
            fragments_logger.throwError("use fromString", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new ParamType()"
            });
        }
        populate(this, params);
        let match = this.type.match(paramTypeArray);
        if (match) {
            populate(this, {
                arrayLength: parseInt(match[2] || "-1"),
                arrayChildren: ParamType.fromObject({
                    type: match[1],
                    components: this.components
                }),
                baseType: "array"
            });
        }
        else {
            populate(this, {
                arrayLength: null,
                arrayChildren: null,
                baseType: ((this.components != null) ? "tuple" : this.type)
            });
        }
        this._isParamType = true;
        Object.freeze(this);
    }
    // Format the parameter fragment
    //   - sighash: "(uint256,address)"
    //   - minimal: "tuple(uint256,address) indexed"
    //   - full:    "tuple(uint256 foo, address bar) indexed baz"
    format(format) {
        if (!format) {
            format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
            fragments_logger.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
            let result = {
                type: ((this.baseType === "tuple") ? "tuple" : this.type),
                name: (this.name || undefined)
            };
            if (typeof (this.indexed) === "boolean") {
                result.indexed = this.indexed;
            }
            if (this.components) {
                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));
            }
            return JSON.stringify(result);
        }
        let result = "";
        // Array
        if (this.baseType === "array") {
            result += this.arrayChildren.format(format);
            result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
        }
        else {
            if (this.baseType === "tuple") {
                if (format !== FormatTypes.sighash) {
                    result += this.type;
                }
                result += "(" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ")";
            }
            else {
                result += this.type;
            }
        }
        if (format !== FormatTypes.sighash) {
            if (this.indexed === true) {
                result += " indexed";
            }
            if (format === FormatTypes.full && this.name) {
                result += " " + this.name;
            }
        }
        return result;
    }
    static from(value, allowIndexed) {
        if (typeof (value) === "string") {
            return ParamType.fromString(value, allowIndexed);
        }
        return ParamType.fromObject(value);
    }
    static fromObject(value) {
        if (ParamType.isParamType(value)) {
            return value;
        }
        return new ParamType(fragments_constructorGuard, {
            name: (value.name || null),
            type: verifyType(value.type),
            indexed: ((value.indexed == null) ? null : !!value.indexed),
            components: (value.components ? value.components.map(ParamType.fromObject) : null)
        });
    }
    static fromString(value, allowIndexed) {
        function ParamTypify(node) {
            return ParamType.fromObject({
                name: node.name,
                type: node.type,
                indexed: node.indexed,
                components: node.components
            });
        }
        return ParamTypify(parseParamType(value, !!allowIndexed));
    }
    static isParamType(value) {
        return !!(value != null && value._isParamType);
    }
}
;
function parseParams(value, allowIndex) {
    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
}
class Fragment {
    constructor(constructorGuard, params) {
        if (constructorGuard !== fragments_constructorGuard) {
            fragments_logger.throwError("use a static from method", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new Fragment()"
            });
        }
        populate(this, params);
        this._isFragment = true;
        Object.freeze(this);
    }
    static from(value) {
        if (Fragment.isFragment(value)) {
            return value;
        }
        if (typeof (value) === "string") {
            return Fragment.fromString(value);
        }
        return Fragment.fromObject(value);
    }
    static fromObject(value) {
        if (Fragment.isFragment(value)) {
            return value;
        }
        switch (value.type) {
            case "function":
                return FunctionFragment.fromObject(value);
            case "event":
                return EventFragment.fromObject(value);
            case "constructor":
                return ConstructorFragment.fromObject(value);
            case "error":
                return ErrorFragment.fromObject(value);
            case "fallback":
            case "receive":
                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
                return null;
        }
        return fragments_logger.throwArgumentError("invalid fragment object", "value", value);
    }
    static fromString(value) {
        // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
        value = value.replace(/\s/g, " ");
        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
        value = value.trim();
        if (value.split(" ")[0] === "event") {
            return EventFragment.fromString(value.substring(5).trim());
        }
        else if (value.split(" ")[0] === "function") {
            return FunctionFragment.fromString(value.substring(8).trim());
        }
        else if (value.split("(")[0].trim() === "constructor") {
            return ConstructorFragment.fromString(value.trim());
        }
        else if (value.split(" ")[0] === "error") {
            return ErrorFragment.fromString(value.substring(5).trim());
        }
        return fragments_logger.throwArgumentError("unsupported fragment", "value", value);
    }
    static isFragment(value) {
        return !!(value && value._isFragment);
    }
}
class EventFragment extends Fragment {
    format(format) {
        if (!format) {
            format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
            fragments_logger.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
            return JSON.stringify({
                type: "event",
                anonymous: this.anonymous,
                name: this.name,
                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
            });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
            result += "event ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
            if (this.anonymous) {
                result += "anonymous ";
            }
        }
        return result.trim();
    }
    static from(value) {
        if (typeof (value) === "string") {
            return EventFragment.fromString(value);
        }
        return EventFragment.fromObject(value);
    }
    static fromObject(value) {
        if (EventFragment.isEventFragment(value)) {
            return value;
        }
        if (value.type !== "event") {
            fragments_logger.throwArgumentError("invalid event object", "value", value);
        }
        const params = {
            name: verifyIdentifier(value.name),
            anonymous: value.anonymous,
            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
            type: "event"
        };
        return new EventFragment(fragments_constructorGuard, params);
    }
    static fromString(value) {
        let match = value.match(regexParen);
        if (!match) {
            fragments_logger.throwArgumentError("invalid event string", "value", value);
        }
        let anonymous = false;
        match[3].split(" ").forEach((modifier) => {
            switch (modifier.trim()) {
                case "anonymous":
                    anonymous = true;
                    break;
                case "":
                    break;
                default:
                    fragments_logger.warn("unknown modifier: " + modifier);
            }
        });
        return EventFragment.fromObject({
            name: match[1].trim(),
            anonymous: anonymous,
            inputs: parseParams(match[2], true),
            type: "event"
        });
    }
    static isEventFragment(value) {
        return (value && value._isFragment && value.type === "event");
    }
}
function parseGas(value, params) {
    params.gas = null;
    let comps = value.split("@");
    if (comps.length !== 1) {
        if (comps.length > 2) {
            fragments_logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
        }
        if (!comps[1].match(/^[0-9]+$/)) {
            fragments_logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
        }
        params.gas = lib_esm_bignumber_BigNumber.from(comps[1]);
        return comps[0];
    }
    return value;
}
function parseModifiers(value, params) {
    params.constant = false;
    params.payable = false;
    params.stateMutability = "nonpayable";
    value.split(" ").forEach((modifier) => {
        switch (modifier.trim()) {
            case "constant":
                params.constant = true;
                break;
            case "payable":
                params.payable = true;
                params.stateMutability = "payable";
                break;
            case "nonpayable":
                params.payable = false;
                params.stateMutability = "nonpayable";
                break;
            case "pure":
                params.constant = true;
                params.stateMutability = "pure";
                break;
            case "view":
                params.constant = true;
                params.stateMutability = "view";
                break;
            case "external":
            case "public":
            case "":
                break;
            default:
                console.log("unknown modifier: " + modifier);
        }
    });
}
function verifyState(value) {
    let result = {
        constant: false,
        payable: true,
        stateMutability: "payable"
    };
    if (value.stateMutability != null) {
        result.stateMutability = value.stateMutability;
        // Set (and check things are consistent) the constant property
        result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
        if (value.constant != null) {
            if ((!!value.constant) !== result.constant) {
                fragments_logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
            }
        }
        // Set (and check things are consistent) the payable property
        result.payable = (result.stateMutability === "payable");
        if (value.payable != null) {
            if ((!!value.payable) !== result.payable) {
                fragments_logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
            }
        }
    }
    else if (value.payable != null) {
        result.payable = !!value.payable;
        // If payable we can assume non-constant; otherwise we can't assume
        if (value.constant == null && !result.payable && value.type !== "constructor") {
            fragments_logger.throwArgumentError("unable to determine stateMutability", "value", value);
        }
        result.constant = !!value.constant;
        if (result.constant) {
            result.stateMutability = "view";
        }
        else {
            result.stateMutability = (result.payable ? "payable" : "nonpayable");
        }
        if (result.payable && result.constant) {
            fragments_logger.throwArgumentError("cannot have constant payable function", "value", value);
        }
    }
    else if (value.constant != null) {
        result.constant = !!value.constant;
        result.payable = !result.constant;
        result.stateMutability = (result.constant ? "view" : "payable");
    }
    else if (value.type !== "constructor") {
        fragments_logger.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    return result;
}
class ConstructorFragment extends Fragment {
    format(format) {
        if (!format) {
            format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
            fragments_logger.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
            return JSON.stringify({
                type: "constructor",
                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                payable: this.payable,
                gas: (this.gas ? this.gas.toNumber() : undefined),
                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
            });
        }
        if (format === FormatTypes.sighash) {
            fragments_logger.throwError("cannot format a constructor for sighash", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "format(sighash)"
            });
        }
        let result = "constructor(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
        if (this.stateMutability && this.stateMutability !== "nonpayable") {
            result += this.stateMutability + " ";
        }
        return result.trim();
    }
    static from(value) {
        if (typeof (value) === "string") {
            return ConstructorFragment.fromString(value);
        }
        return ConstructorFragment.fromObject(value);
    }
    static fromObject(value) {
        if (ConstructorFragment.isConstructorFragment(value)) {
            return value;
        }
        if (value.type !== "constructor") {
            fragments_logger.throwArgumentError("invalid constructor object", "value", value);
        }
        let state = verifyState(value);
        if (state.constant) {
            fragments_logger.throwArgumentError("constructor cannot be constant", "value", value);
        }
        const params = {
            name: null,
            type: value.type,
            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
            payable: state.payable,
            stateMutability: state.stateMutability,
            gas: (value.gas ? lib_esm_bignumber_BigNumber.from(value.gas) : null)
        };
        return new ConstructorFragment(fragments_constructorGuard, params);
    }
    static fromString(value) {
        let params = { type: "constructor" };
        value = parseGas(value, params);
        let parens = value.match(regexParen);
        if (!parens || parens[1].trim() !== "constructor") {
            fragments_logger.throwArgumentError("invalid constructor string", "value", value);
        }
        params.inputs = parseParams(parens[2].trim(), false);
        parseModifiers(parens[3].trim(), params);
        return ConstructorFragment.fromObject(params);
    }
    static isConstructorFragment(value) {
        return (value && value._isFragment && value.type === "constructor");
    }
}
class FunctionFragment extends ConstructorFragment {
    format(format) {
        if (!format) {
            format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
            fragments_logger.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
            return JSON.stringify({
                type: "function",
                name: this.name,
                constant: this.constant,
                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                payable: this.payable,
                gas: (this.gas ? this.gas.toNumber() : undefined),
                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),
            });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
            result += "function ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
            if (this.stateMutability) {
                if (this.stateMutability !== "nonpayable") {
                    result += (this.stateMutability + " ");
                }
            }
            else if (this.constant) {
                result += "view ";
            }
            if (this.outputs && this.outputs.length) {
                result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
            }
            if (this.gas != null) {
                result += "@" + this.gas.toString() + " ";
            }
        }
        return result.trim();
    }
    static from(value) {
        if (typeof (value) === "string") {
            return FunctionFragment.fromString(value);
        }
        return FunctionFragment.fromObject(value);
    }
    static fromObject(value) {
        if (FunctionFragment.isFunctionFragment(value)) {
            return value;
        }
        if (value.type !== "function") {
            fragments_logger.throwArgumentError("invalid function object", "value", value);
        }
        let state = verifyState(value);
        const params = {
            type: value.type,
            name: verifyIdentifier(value.name),
            constant: state.constant,
            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),
            payable: state.payable,
            stateMutability: state.stateMutability,
            gas: (value.gas ? lib_esm_bignumber_BigNumber.from(value.gas) : null)
        };
        return new FunctionFragment(fragments_constructorGuard, params);
    }
    static fromString(value) {
        let params = { type: "function" };
        value = parseGas(value, params);
        let comps = value.split(" returns ");
        if (comps.length > 2) {
            fragments_logger.throwArgumentError("invalid function string", "value", value);
        }
        let parens = comps[0].match(regexParen);
        if (!parens) {
            fragments_logger.throwArgumentError("invalid function signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
            verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        parseModifiers(parens[3].trim(), params);
        // We have outputs
        if (comps.length > 1) {
            let returns = comps[1].match(regexParen);
            if (returns[1].trim() != "" || returns[3].trim() != "") {
                fragments_logger.throwArgumentError("unexpected tokens", "value", value);
            }
            params.outputs = parseParams(returns[2], false);
        }
        else {
            params.outputs = [];
        }
        return FunctionFragment.fromObject(params);
    }
    static isFunctionFragment(value) {
        return (value && value._isFragment && value.type === "function");
    }
}
//export class StructFragment extends Fragment {
//}
function checkForbidden(fragment) {
    const sig = fragment.format();
    if (sig === "Error(string)" || sig === "Panic(uint256)") {
        fragments_logger.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
    }
    return fragment;
}
class ErrorFragment extends Fragment {
    format(format) {
        if (!format) {
            format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
            fragments_logger.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
            return JSON.stringify({
                type: "error",
                name: this.name,
                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
            });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
            result += "error ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
        return result.trim();
    }
    static from(value) {
        if (typeof (value) === "string") {
            return ErrorFragment.fromString(value);
        }
        return ErrorFragment.fromObject(value);
    }
    static fromObject(value) {
        if (ErrorFragment.isErrorFragment(value)) {
            return value;
        }
        if (value.type !== "error") {
            fragments_logger.throwArgumentError("invalid error object", "value", value);
        }
        const params = {
            type: value.type,
            name: verifyIdentifier(value.name),
            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])
        };
        return checkForbidden(new ErrorFragment(fragments_constructorGuard, params));
    }
    static fromString(value) {
        let params = { type: "error" };
        let parens = value.match(regexParen);
        if (!parens) {
            fragments_logger.throwArgumentError("invalid error signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
            verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        return checkForbidden(ErrorFragment.fromObject(params));
    }
    static isErrorFragment(value) {
        return (value && value._isFragment && value.type === "error");
    }
}
function verifyType(type) {
    // These need to be transformed to their full description
    if (type.match(/^uint($|[^1-9])/)) {
        type = "uint256" + type.substring(4);
    }
    else if (type.match(/^int($|[^1-9])/)) {
        type = "int256" + type.substring(3);
    }
    // @TODO: more verification
    return type;
}
// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
function verifyIdentifier(value) {
    if (!value || !value.match(regexIdentifier)) {
        fragments_logger.throwArgumentError(`invalid identifier "${value}"`, "value", value);
    }
    return value;
}
const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
function splitNesting(value) {
    value = value.trim();
    let result = [];
    let accum = "";
    let depth = 0;
    for (let offset = 0; offset < value.length; offset++) {
        let c = value[offset];
        if (c === "," && depth === 0) {
            result.push(accum);
            accum = "";
        }
        else {
            accum += c;
            if (c === "(") {
                depth++;
            }
            else if (c === ")") {
                depth--;
                if (depth === -1) {
                    fragments_logger.throwArgumentError("unbalanced parenthesis", "value", value);
                }
            }
        }
    }
    if (accum) {
        result.push(accum);
    }
    return result;
}
//# sourceMappingURL=fragments.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/abi-coder.js

// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI




const abi_coder_logger = new lib_esm_Logger(abi_lib_esm_version_version);











const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
class AbiCoder {
    constructor(coerceFunc) {
        defineReadOnly(this, "coerceFunc", coerceFunc || null);
    }
    _getCoder(param) {
        switch (param.baseType) {
            case "address":
                return new AddressCoder(param.name);
            case "bool":
                return new BooleanCoder(param.name);
            case "string":
                return new StringCoder(param.name);
            case "bytes":
                return new BytesCoder(param.name);
            case "array":
                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
            case "tuple":
                return new TupleCoder((param.components || []).map((component) => {
                    return this._getCoder(component);
                }), param.name);
            case "":
                return new NullCoder(param.name);
        }
        // u?int[0-9]*
        let match = param.type.match(paramTypeNumber);
        if (match) {
            let size = parseInt(match[2] || "256");
            if (size === 0 || size > 256 || (size % 8) !== 0) {
                abi_coder_logger.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
            }
            return new NumberCoder(size / 8, (match[1] === "int"), param.name);
        }
        // bytes[0-9]+
        match = param.type.match(paramTypeBytes);
        if (match) {
            let size = parseInt(match[1]);
            if (size === 0 || size > 32) {
                abi_coder_logger.throwArgumentError("invalid bytes length", "param", param);
            }
            return new FixedBytesCoder(size, param.name);
        }
        return abi_coder_logger.throwArgumentError("invalid type", "type", param.type);
    }
    _getWordSize() { return 32; }
    _getReader(data, allowLoose) {
        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
    }
    _getWriter() {
        return new Writer(this._getWordSize());
    }
    getDefaultValue(types) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.defaultValue();
    }
    encode(types, values) {
        if (types.length !== values.length) {
            abi_coder_logger.throwError("types/values length mismatch", lib_esm_Logger.errors.INVALID_ARGUMENT, {
                count: { types: types.length, values: values.length },
                value: { types: types, values: values }
            });
        }
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = (new TupleCoder(coders, "_"));
        const writer = this._getWriter();
        coder.encode(writer, values);
        return writer.data;
    }
    decode(types, data, loose) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.decode(this._getReader(lib_esm_arrayify(data), loose));
    }
}
const defaultAbiCoder = new AbiCoder();
//# sourceMappingURL=abi-coder.js.map
;// ./node_modules/@ethersproject/abi/lib.esm/interface.js












const interface_logger = new lib_esm_Logger(abi_lib_esm_version_version);

class LogDescription extends Description {
}
class TransactionDescription extends Description {
}
class ErrorDescription extends Description {
}
class Indexed extends Description {
    static isIndexed(value) {
        return !!(value && value._isIndexed);
    }
}
const BuiltinErrors = {
    "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
    "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
};
function wrapAccessError(property, error) {
    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
    wrap.error = error;
    return wrap;
}
/*
function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
    params.reduce((accum, param) => {
        if (param.name) {
            if (accum[param.name]) {
                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
            }
            accum[param.name] = true;
        }
        return accum;
    }, <{ [ name: string ]: boolean }>{ });
}
*/
class Interface {
    constructor(fragments) {
        let abi = [];
        if (typeof (fragments) === "string") {
            abi = JSON.parse(fragments);
        }
        else {
            abi = fragments;
        }
        defineReadOnly(this, "fragments", abi.map((fragment) => {
            return Fragment.from(fragment);
        }).filter((fragment) => (fragment != null)));
        defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "errors", {});
        defineReadOnly(this, "events", {});
        defineReadOnly(this, "structs", {});
        // Add all fragments by their signature
        this.fragments.forEach((fragment) => {
            let bucket = null;
            switch (fragment.type) {
                case "constructor":
                    if (this.deploy) {
                        interface_logger.warn("duplicate definition - constructor");
                        return;
                    }
                    //checkNames(fragment, "input", fragment.inputs);
                    defineReadOnly(this, "deploy", fragment);
                    return;
                case "function":
                    //checkNames(fragment, "input", fragment.inputs);
                    //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
                    bucket = this.functions;
                    break;
                case "event":
                    //checkNames(fragment, "input", fragment.inputs);
                    bucket = this.events;
                    break;
                case "error":
                    bucket = this.errors;
                    break;
                default:
                    return;
            }
            let signature = fragment.format();
            if (bucket[signature]) {
                interface_logger.warn("duplicate definition - " + signature);
                return;
            }
            bucket[signature] = fragment;
        });
        // If we do not have a constructor add a default
        if (!this.deploy) {
            defineReadOnly(this, "deploy", ConstructorFragment.from({
                payable: false,
                type: "constructor"
            }));
        }
        defineReadOnly(this, "_isInterface", true);
    }
    format(format) {
        if (!format) {
            format = FormatTypes.full;
        }
        if (format === FormatTypes.sighash) {
            interface_logger.throwArgumentError("interface does not support formatting sighash", "format", format);
        }
        const abi = this.fragments.map((fragment) => fragment.format(format));
        // We need to re-bundle the JSON fragments a bit
        if (format === FormatTypes.json) {
            return JSON.stringify(abi.map((j) => JSON.parse(j)));
        }
        return abi;
    }
    // Sub-classes can override these to handle other blockchains
    static getAbiCoder() {
        return defaultAbiCoder;
    }
    static getAddress(address) {
        return getAddress(address);
    }
    static getSighash(fragment) {
        return lib_esm_hexDataSlice(id(fragment.format()), 0, 4);
    }
    static getEventTopic(eventFragment) {
        return id(eventFragment.format());
    }
    // Find a function definition by any means necessary (unless it is ambiguous)
    getFunction(nameOrSignatureOrSighash) {
        if (lib_esm_isHexString(nameOrSignatureOrSighash)) {
            for (const name in this.functions) {
                if (nameOrSignatureOrSighash === this.getSighash(name)) {
                    return this.functions[name];
                }
            }
            interface_logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
        }
        // It is a bare name, look up the function (will return null if ambiguous)
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
            const name = nameOrSignatureOrSighash.trim();
            const matching = Object.keys(this.functions).filter((f) => (f.split("(" /* fix:) */)[0] === name));
            if (matching.length === 0) {
                interface_logger.throwArgumentError("no matching function", "name", name);
            }
            else if (matching.length > 1) {
                interface_logger.throwArgumentError("multiple matching functions", "name", name);
            }
            return this.functions[matching[0]];
        }
        // Normalize the signature and lookup the function
        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
            interface_logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
        }
        return result;
    }
    // Find an event definition by any means necessary (unless it is ambiguous)
    getEvent(nameOrSignatureOrTopic) {
        if (lib_esm_isHexString(nameOrSignatureOrTopic)) {
            const topichash = nameOrSignatureOrTopic.toLowerCase();
            for (const name in this.events) {
                if (topichash === this.getEventTopic(name)) {
                    return this.events[name];
                }
            }
            interface_logger.throwArgumentError("no matching event", "topichash", topichash);
        }
        // It is a bare name, look up the function (will return null if ambiguous)
        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
            const name = nameOrSignatureOrTopic.trim();
            const matching = Object.keys(this.events).filter((f) => (f.split("(" /* fix:) */)[0] === name));
            if (matching.length === 0) {
                interface_logger.throwArgumentError("no matching event", "name", name);
            }
            else if (matching.length > 1) {
                interface_logger.throwArgumentError("multiple matching events", "name", name);
            }
            return this.events[matching[0]];
        }
        // Normalize the signature and lookup the function
        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
        if (!result) {
            interface_logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
        }
        return result;
    }
    // Find a function definition by any means necessary (unless it is ambiguous)
    getError(nameOrSignatureOrSighash) {
        if (lib_esm_isHexString(nameOrSignatureOrSighash)) {
            const getSighash = getStatic(this.constructor, "getSighash");
            for (const name in this.errors) {
                const error = this.errors[name];
                if (nameOrSignatureOrSighash === getSighash(error)) {
                    return this.errors[name];
                }
            }
            interface_logger.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
        }
        // It is a bare name, look up the function (will return null if ambiguous)
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
            const name = nameOrSignatureOrSighash.trim();
            const matching = Object.keys(this.errors).filter((f) => (f.split("(" /* fix:) */)[0] === name));
            if (matching.length === 0) {
                interface_logger.throwArgumentError("no matching error", "name", name);
            }
            else if (matching.length > 1) {
                interface_logger.throwArgumentError("multiple matching errors", "name", name);
            }
            return this.errors[matching[0]];
        }
        // Normalize the signature and lookup the function
        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
            interface_logger.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
        }
        return result;
    }
    // Get the sighash (the bytes4 selector) used by Solidity to identify a function
    getSighash(fragment) {
        if (typeof (fragment) === "string") {
            try {
                fragment = this.getFunction(fragment);
            }
            catch (error) {
                try {
                    fragment = this.getError(fragment);
                }
                catch (_) {
                    throw error;
                }
            }
        }
        return getStatic(this.constructor, "getSighash")(fragment);
    }
    // Get the topic (the bytes32 hash) used by Solidity to identify an event
    getEventTopic(eventFragment) {
        if (typeof (eventFragment) === "string") {
            eventFragment = this.getEvent(eventFragment);
        }
        return getStatic(this.constructor, "getEventTopic")(eventFragment);
    }
    _decodeParams(params, data) {
        return this._abiCoder.decode(params, data);
    }
    _encodeParams(params, values) {
        return this._abiCoder.encode(params, values);
    }
    encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
    }
    decodeErrorResult(fragment, data) {
        if (typeof (fragment) === "string") {
            fragment = this.getError(fragment);
        }
        const bytes = lib_esm_arrayify(data);
        if (lib_esm_hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
            interface_logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", lib_esm_hexlify(bytes));
        }
        return this._decodeParams(fragment.inputs, bytes.slice(4));
    }
    encodeErrorResult(fragment, values) {
        if (typeof (fragment) === "string") {
            fragment = this.getError(fragment);
        }
        return lib_esm_hexlify(lib_esm_concat([
            this.getSighash(fragment),
            this._encodeParams(fragment.inputs, values || [])
        ]));
    }
    // Decode the data for a function call (e.g. tx.data)
    decodeFunctionData(functionFragment, data) {
        if (typeof (functionFragment) === "string") {
            functionFragment = this.getFunction(functionFragment);
        }
        const bytes = lib_esm_arrayify(data);
        if (lib_esm_hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
            interface_logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", lib_esm_hexlify(bytes));
        }
        return this._decodeParams(functionFragment.inputs, bytes.slice(4));
    }
    // Encode the data for a function call (e.g. tx.data)
    encodeFunctionData(functionFragment, values) {
        if (typeof (functionFragment) === "string") {
            functionFragment = this.getFunction(functionFragment);
        }
        return lib_esm_hexlify(lib_esm_concat([
            this.getSighash(functionFragment),
            this._encodeParams(functionFragment.inputs, values || [])
        ]));
    }
    // Decode the result from a function call (e.g. from eth_call)
    decodeFunctionResult(functionFragment, data) {
        if (typeof (functionFragment) === "string") {
            functionFragment = this.getFunction(functionFragment);
        }
        let bytes = lib_esm_arrayify(data);
        let reason = null;
        let message = "";
        let errorArgs = null;
        let errorName = null;
        let errorSignature = null;
        switch (bytes.length % this._abiCoder._getWordSize()) {
            case 0:
                try {
                    return this._abiCoder.decode(functionFragment.outputs, bytes);
                }
                catch (error) { }
                break;
            case 4: {
                const selector = lib_esm_hexlify(bytes.slice(0, 4));
                const builtin = BuiltinErrors[selector];
                if (builtin) {
                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
                    errorName = builtin.name;
                    errorSignature = builtin.signature;
                    if (builtin.reason) {
                        reason = errorArgs[0];
                    }
                    if (errorName === "Error") {
                        message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
                    }
                    else if (errorName === "Panic") {
                        message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
                    }
                }
                else {
                    try {
                        const error = this.getError(selector);
                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                        errorName = error.name;
                        errorSignature = error.format();
                    }
                    catch (error) { }
                }
                break;
            }
        }
        return interface_logger.throwError("call revert exception" + message, lib_esm_Logger.errors.CALL_EXCEPTION, {
            method: functionFragment.format(),
            data: lib_esm_hexlify(data), errorArgs, errorName, errorSignature, reason
        });
    }
    // Encode the result for a function call (e.g. for eth_call)
    encodeFunctionResult(functionFragment, values) {
        if (typeof (functionFragment) === "string") {
            functionFragment = this.getFunction(functionFragment);
        }
        return lib_esm_hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
    }
    // Create the filter for the event with search criteria (e.g. for eth_filterLog)
    encodeFilterTopics(eventFragment, values) {
        if (typeof (eventFragment) === "string") {
            eventFragment = this.getEvent(eventFragment);
        }
        if (values.length > eventFragment.inputs.length) {
            interface_logger.throwError("too many arguments for " + eventFragment.format(), lib_esm_Logger.errors.UNEXPECTED_ARGUMENT, {
                argument: "values",
                value: values
            });
        }
        let topics = [];
        if (!eventFragment.anonymous) {
            topics.push(this.getEventTopic(eventFragment));
        }
        const encodeTopic = (param, value) => {
            if (param.type === "string") {
                return id(value);
            }
            else if (param.type === "bytes") {
                return lib_esm_keccak256(lib_esm_hexlify(value));
            }
            if (param.type === "bool" && typeof (value) === "boolean") {
                value = (value ? "0x01" : "0x00");
            }
            if (param.type.match(/^u?int/)) {
                value = lib_esm_bignumber_BigNumber.from(value).toHexString();
            }
            // Check addresses are valid
            if (param.type === "address") {
                this._abiCoder.encode(["address"], [value]);
            }
            return hexZeroPad(lib_esm_hexlify(value), 32);
        };
        values.forEach((value, index) => {
            let param = eventFragment.inputs[index];
            if (!param.indexed) {
                if (value != null) {
                    interface_logger.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
                }
                return;
            }
            if (value == null) {
                topics.push(null);
            }
            else if (param.baseType === "array" || param.baseType === "tuple") {
                interface_logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
            }
            else if (Array.isArray(value)) {
                topics.push(value.map((value) => encodeTopic(param, value)));
            }
            else {
                topics.push(encodeTopic(param, value));
            }
        });
        // Trim off trailing nulls
        while (topics.length && topics[topics.length - 1] === null) {
            topics.pop();
        }
        return topics;
    }
    encodeEventLog(eventFragment, values) {
        if (typeof (eventFragment) === "string") {
            eventFragment = this.getEvent(eventFragment);
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!eventFragment.anonymous) {
            topics.push(this.getEventTopic(eventFragment));
        }
        if (values.length !== eventFragment.inputs.length) {
            interface_logger.throwArgumentError("event arguments/values mismatch", "values", values);
        }
        eventFragment.inputs.forEach((param, index) => {
            const value = values[index];
            if (param.indexed) {
                if (param.type === "string") {
                    topics.push(id(value));
                }
                else if (param.type === "bytes") {
                    topics.push(lib_esm_keccak256(value));
                }
                else if (param.baseType === "tuple" || param.baseType === "array") {
                    // @TODO
                    throw new Error("not implemented");
                }
                else {
                    topics.push(this._abiCoder.encode([param.type], [value]));
                }
            }
            else {
                dataTypes.push(param);
                dataValues.push(value);
            }
        });
        return {
            data: this._abiCoder.encode(dataTypes, dataValues),
            topics: topics
        };
    }
    // Decode a filter for the event and the search criteria
    decodeEventLog(eventFragment, data, topics) {
        if (typeof (eventFragment) === "string") {
            eventFragment = this.getEvent(eventFragment);
        }
        if (topics != null && !eventFragment.anonymous) {
            let topicHash = this.getEventTopic(eventFragment);
            if (!lib_esm_isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
                interface_logger.throwError("fragment/topic mismatch", lib_esm_Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
            }
            topics = topics.slice(1);
        }
        let indexed = [];
        let nonIndexed = [];
        let dynamic = [];
        eventFragment.inputs.forEach((param, index) => {
            if (param.indexed) {
                if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                    indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
                    dynamic.push(true);
                }
                else {
                    indexed.push(param);
                    dynamic.push(false);
                }
            }
            else {
                nonIndexed.push(param);
                dynamic.push(false);
            }
        });
        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, lib_esm_concat(topics)) : null;
        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
        let result = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        eventFragment.inputs.forEach((param, index) => {
            if (param.indexed) {
                if (resultIndexed == null) {
                    result[index] = new Indexed({ _isIndexed: true, hash: null });
                }
                else if (dynamic[index]) {
                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
                }
                else {
                    try {
                        result[index] = resultIndexed[indexedIndex++];
                    }
                    catch (error) {
                        result[index] = error;
                    }
                }
            }
            else {
                try {
                    result[index] = resultNonIndexed[nonIndexedIndex++];
                }
                catch (error) {
                    result[index] = error;
                }
            }
            // Add the keyword argument if named and safe
            if (param.name && result[param.name] == null) {
                const value = result[index];
                // Make error named values throw on access
                if (value instanceof Error) {
                    Object.defineProperty(result, param.name, {
                        enumerable: true,
                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }
                    });
                }
                else {
                    result[param.name] = value;
                }
            }
        });
        // Make all error indexed values throw on access
        for (let i = 0; i < result.length; i++) {
            const value = result[i];
            if (value instanceof Error) {
                Object.defineProperty(result, i, {
                    enumerable: true,
                    get: () => { throw wrapAccessError(`index ${i}`, value); }
                });
            }
        }
        return Object.freeze(result);
    }
    // Given a transaction, find the matching function fragment (if any) and
    // determine all its properties and call parameters
    parseTransaction(tx) {
        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
        if (!fragment) {
            return null;
        }
        return new TransactionDescription({
            args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
            functionFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            sighash: this.getSighash(fragment),
            value: lib_esm_bignumber_BigNumber.from(tx.value || "0"),
        });
    }
    // @TODO
    //parseCallResult(data: BytesLike): ??
    // Given an event log, find the matching event fragment (if any) and
    // determine all its properties and values
    parseLog(log) {
        let fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) {
            return null;
        }
        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
        //        Probably not, because just because it is the only event in the ABI does
        //        not mean we have the full ABI; maybe just a fragment?
        return new LogDescription({
            eventFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            topic: this.getEventTopic(fragment),
            args: this.decodeEventLog(fragment, log.data, log.topics)
        });
    }
    parseError(data) {
        const hexData = lib_esm_hexlify(data);
        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
        if (!fragment) {
            return null;
        }
        return new ErrorDescription({
            args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
            errorFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            sighash: this.getSighash(fragment),
        });
    }
    /*
    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
        if (Interface.isInterface(value)) {
            return value;
        }
        if (typeof(value) === "string") {
            return new Interface(JSON.parse(value));
        }
        return new Interface(value);
    }
    */
    static isInterface(value) {
        return !!(value && value._isInterface);
    }
}
//# sourceMappingURL=interface.js.map
;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/bind.js


function helpers_bind_bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/utils.js
/* provided dependency */ var lib_utils_process = __webpack_require__("process/browser");




// utils is a library of generic helper functions non-specific to axios

const {toString: axios_lib_utils_toString} = Object.prototype;
const {getPrototypeOf: lib_utils_getPrototypeOf} = Object;

const lib_utils_kindOf = (cache => thing => {
    const str = axios_lib_utils_toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const lib_utils_kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => lib_utils_kindOf(thing) === type
}

const lib_utils_typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray: lib_utils_isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const lib_utils_isUndefined = lib_utils_typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function lib_utils_isBuffer(val) {
  return val !== null && !lib_utils_isUndefined(val) && val.constructor !== null && !lib_utils_isUndefined(val.constructor)
    && lib_utils_isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const lib_utils_isArrayBuffer = lib_utils_kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function lib_utils_isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (lib_utils_isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const lib_utils_isString = lib_utils_typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const lib_utils_isFunction = lib_utils_typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const lib_utils_isNumber = lib_utils_typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const lib_utils_isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const lib_utils_isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const lib_utils_isPlainObject = (val) => {
  if (lib_utils_kindOf(val) !== 'object') {
    return false;
  }

  const prototype = lib_utils_getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
}

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const lib_utils_isDate = lib_utils_kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const lib_utils_isFile = lib_utils_kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const lib_utils_isBlob = lib_utils_kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const lib_utils_isFileList = lib_utils_kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const lib_utils_isStream = (val) => lib_utils_isObject(val) && lib_utils_isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const lib_utils_isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      lib_utils_isFunction(thing.append) && (
        (kind = lib_utils_kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && lib_utils_isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const lib_utils_isURLSearchParams = lib_utils_kindOfTest('URLSearchParams');

const [lib_utils_isReadableStream, lib_utils_isRequest, lib_utils_isResponse, lib_utils_isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(lib_utils_kindOfTest);

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const lib_utils_trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function lib_utils_forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (lib_utils_isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function lib_utils_findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const lib_utils_global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : ({}))
})();

const lib_utils_isContextDefined = (context) => !lib_utils_isUndefined(context) && context !== lib_utils_global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function lib_utils_merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = lib_utils_isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && lib_utils_findKey(result, key) || key;
    if (lib_utils_isPlainObject(result[targetKey]) && lib_utils_isPlainObject(val)) {
      result[targetKey] = lib_utils_merge(result[targetKey], val);
    } else if (lib_utils_isPlainObject(val)) {
      result[targetKey] = lib_utils_merge({}, val);
    } else if (lib_utils_isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  }

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && lib_utils_forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const lib_utils_extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  lib_utils_forEach(b, (val, key) => {
    if (thisArg && lib_utils_isFunction(val)) {
      a[key] = helpers_bind_bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const lib_utils_stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const lib_utils_inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const lib_utils_toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && lib_utils_getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const lib_utils_endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const lib_utils_toArray = (thing) => {
  if (!thing) return null;
  if (lib_utils_isArray(thing)) return thing;
  let i = thing.length;
  if (!lib_utils_isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const lib_utils_isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && lib_utils_getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const lib_utils_forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
}

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const lib_utils_matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
}

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const lib_utils_isHTMLForm = lib_utils_kindOfTest('HTMLFormElement');

const lib_utils_toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const axios_lib_utils_hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const lib_utils_isRegExp = lib_utils_kindOfTest('RegExp');

const lib_utils_reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  lib_utils_forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
}

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const lib_utils_freezeMethods = (obj) => {
  lib_utils_reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (lib_utils_isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!lib_utils_isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
}

const lib_utils_toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  }

  lib_utils_isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
}

const lib_utils_noop = () => {}

const lib_utils_toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
}

const lib_utils_ALPHA = 'abcdefghijklmnopqrstuvwxyz'

const lib_utils_DIGIT = '0123456789';

const lib_utils_ALPHABET = {
  DIGIT: lib_utils_DIGIT,
  ALPHA: lib_utils_ALPHA,
  ALPHA_DIGIT: lib_utils_ALPHA + lib_utils_ALPHA.toUpperCase() + lib_utils_DIGIT
}

const lib_utils_generateString = (size = 16, alphabet = lib_utils_ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0]
  }

  return str;
}

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function lib_utils_isSpecCompliantForm(thing) {
  return !!(thing && lib_utils_isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const lib_utils_toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (lib_utils_isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = lib_utils_isArray(source) ? [] : {};

        lib_utils_forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !lib_utils_isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  }

  return visit(obj, 0);
}

const lib_utils_isAsyncFn = lib_utils_kindOfTest('AsyncFunction');

const lib_utils_isThenable = (thing) =>
  thing && (lib_utils_isObject(thing) || lib_utils_isFunction(thing)) && lib_utils_isFunction(thing.then) && lib_utils_isFunction(thing.catch);

// original code
// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

const lib_utils_setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }

  return postMessageSupported ? ((token, callbacks) => {
    lib_utils_global.addEventListener("message", ({source, data}) => {
      if (source === lib_utils_global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);

    return (cb) => {
      callbacks.push(cb);
      lib_utils_global.postMessage(token, "*");
    }
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === 'function',
  lib_utils_isFunction(lib_utils_global.postMessage)
);

const lib_utils_asap = typeof queueMicrotask !== 'undefined' ?
  queueMicrotask.bind(lib_utils_global) : ( typeof lib_utils_process !== 'undefined' && lib_utils_process.nextTick || lib_utils_setImmediate);

// *********************

/* harmony default export */ var axios_lib_utils = ({
  isArray: lib_utils_isArray,
  isArrayBuffer: lib_utils_isArrayBuffer,
  isBuffer: lib_utils_isBuffer,
  isFormData: lib_utils_isFormData,
  isArrayBufferView: lib_utils_isArrayBufferView,
  isString: lib_utils_isString,
  isNumber: lib_utils_isNumber,
  isBoolean: lib_utils_isBoolean,
  isObject: lib_utils_isObject,
  isPlainObject: lib_utils_isPlainObject,
  isReadableStream: lib_utils_isReadableStream,
  isRequest: lib_utils_isRequest,
  isResponse: lib_utils_isResponse,
  isHeaders: lib_utils_isHeaders,
  isUndefined: lib_utils_isUndefined,
  isDate: lib_utils_isDate,
  isFile: lib_utils_isFile,
  isBlob: lib_utils_isBlob,
  isRegExp: lib_utils_isRegExp,
  isFunction: lib_utils_isFunction,
  isStream: lib_utils_isStream,
  isURLSearchParams: lib_utils_isURLSearchParams,
  isTypedArray: lib_utils_isTypedArray,
  isFileList: lib_utils_isFileList,
  forEach: lib_utils_forEach,
  merge: lib_utils_merge,
  extend: lib_utils_extend,
  trim: lib_utils_trim,
  stripBOM: lib_utils_stripBOM,
  inherits: lib_utils_inherits,
  toFlatObject: lib_utils_toFlatObject,
  kindOf: lib_utils_kindOf,
  kindOfTest: lib_utils_kindOfTest,
  endsWith: lib_utils_endsWith,
  toArray: lib_utils_toArray,
  forEachEntry: lib_utils_forEachEntry,
  matchAll: lib_utils_matchAll,
  isHTMLForm: lib_utils_isHTMLForm,
  hasOwnProperty: axios_lib_utils_hasOwnProperty,
  hasOwnProp: axios_lib_utils_hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors: lib_utils_reduceDescriptors,
  freezeMethods: lib_utils_freezeMethods,
  toObjectSet: lib_utils_toObjectSet,
  toCamelCase: lib_utils_toCamelCase,
  noop: lib_utils_noop,
  toFiniteNumber: lib_utils_toFiniteNumber,
  findKey: lib_utils_findKey,
  global: lib_utils_global,
  isContextDefined: lib_utils_isContextDefined,
  ALPHABET: lib_utils_ALPHABET,
  generateString: lib_utils_generateString,
  isSpecCompliantForm: lib_utils_isSpecCompliantForm,
  toJSONObject: lib_utils_toJSONObject,
  isAsyncFn: lib_utils_isAsyncFn,
  isThenable: lib_utils_isThenable,
  setImmediate: lib_utils_setImmediate,
  asap: lib_utils_asap
});

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/core/AxiosError.js




/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function core_AxiosError_AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}

axios_lib_utils.inherits(core_AxiosError_AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: axios_lib_utils.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});

const lib_core_AxiosError_prototype = core_AxiosError_AxiosError.prototype;
const core_AxiosError_descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  core_AxiosError_descriptors[code] = {value: code};
});

Object.defineProperties(core_AxiosError_AxiosError, core_AxiosError_descriptors);
Object.defineProperty(lib_core_AxiosError_prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
core_AxiosError_AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(lib_core_AxiosError_prototype);

  axios_lib_utils.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  core_AxiosError_AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

/* harmony default export */ var axios_lib_core_AxiosError = (core_AxiosError_AxiosError);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/null.js
// eslint-disable-next-line strict
/* harmony default export */ var axios_lib_helpers_null = (null);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/toFormData.js
/* provided dependency */ var helpers_toFormData_Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];




// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored


/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function helpers_toFormData_isVisitable(thing) {
  return axios_lib_utils.isPlainObject(thing) || axios_lib_utils.isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function helpers_toFormData_removeBrackets(key) {
  return axios_lib_utils.endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function helpers_toFormData_renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = helpers_toFormData_removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function helpers_toFormData_isFlatArray(arr) {
  return axios_lib_utils.isArray(arr) && !arr.some(helpers_toFormData_isVisitable);
}

const helpers_toFormData_predicates = axios_lib_utils.toFlatObject(axios_lib_utils, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function helpers_toFormData_toFormData(obj, formData, options) {
  if (!axios_lib_utils.isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (axios_lib_helpers_null || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = axios_lib_utils.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !axios_lib_utils.isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && axios_lib_utils.isSpecCompliantForm(formData);

  if (!axios_lib_utils.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (axios_lib_utils.isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && axios_lib_utils.isBlob(value)) {
      throw new axios_lib_core_AxiosError('Blob is not supported. Use a Buffer instead.');
    }

    if (axios_lib_utils.isArrayBuffer(value) || axios_lib_utils.isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : helpers_toFormData_Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (axios_lib_utils.endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (axios_lib_utils.isArray(value) && helpers_toFormData_isFlatArray(value)) ||
        ((axios_lib_utils.isFileList(value) || axios_lib_utils.endsWith(key, '[]')) && (arr = axios_lib_utils.toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = helpers_toFormData_removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(axios_lib_utils.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? helpers_toFormData_renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (helpers_toFormData_isVisitable(value)) {
      return true;
    }

    formData.append(helpers_toFormData_renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(helpers_toFormData_predicates, {
    defaultVisitor,
    convertValue,
    isVisitable: helpers_toFormData_isVisitable
  });

  function build(value, path) {
    if (axios_lib_utils.isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    axios_lib_utils.forEach(value, function each(el, key) {
      const result = !(axios_lib_utils.isUndefined(el) || el === null) && visitor.call(
        formData, el, axios_lib_utils.isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!axios_lib_utils.isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/* harmony default export */ var axios_lib_helpers_toFormData = (helpers_toFormData_toFormData);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/AxiosURLSearchParams.js




/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function lib_helpers_AxiosURLSearchParams_encode(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function helpers_AxiosURLSearchParams_AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && axios_lib_helpers_toFormData(params, this, options);
}

const lib_helpers_AxiosURLSearchParams_prototype = helpers_AxiosURLSearchParams_AxiosURLSearchParams.prototype;

lib_helpers_AxiosURLSearchParams_prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

lib_helpers_AxiosURLSearchParams_prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, lib_helpers_AxiosURLSearchParams_encode);
  } : lib_helpers_AxiosURLSearchParams_encode;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/* harmony default export */ var axios_lib_helpers_AxiosURLSearchParams = (helpers_AxiosURLSearchParams_AxiosURLSearchParams);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/buildURL.js





/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function lib_helpers_buildURL_encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */
function helpers_buildURL_buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || lib_helpers_buildURL_encode;

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = axios_lib_utils.isURLSearchParams(params) ?
      params.toString() :
      new axios_lib_helpers_AxiosURLSearchParams(params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/core/InterceptorManager.js




class core_InterceptorManager_InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    axios_lib_utils.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

/* harmony default export */ var axios_lib_core_InterceptorManager = (core_InterceptorManager_InterceptorManager);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/defaults/transitional.js


/* harmony default export */ var axios_lib_defaults_transitional = ({
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
});

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js



/* harmony default export */ var platform_browser_classes_URLSearchParams = (typeof URLSearchParams !== 'undefined' ? URLSearchParams : axios_lib_helpers_AxiosURLSearchParams);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/platform/browser/classes/FormData.js


/* harmony default export */ var platform_browser_classes_FormData = (typeof FormData !== 'undefined' ? FormData : null);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/platform/browser/classes/Blob.js


/* harmony default export */ var platform_browser_classes_Blob = (typeof Blob !== 'undefined' ? Blob : null);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/platform/browser/index.js




/* harmony default export */ var lib_platform_browser = ({
  isBrowser: true,
  classes: {
    URLSearchParams: platform_browser_classes_URLSearchParams,
    FormData: platform_browser_classes_FormData,
    Blob: platform_browser_classes_Blob
  },
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
});

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/platform/common/utils.js
const common_utils_hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

const common_utils_navigator = typeof navigator === 'object' && navigator || undefined;

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const common_utils_hasStandardBrowserEnv = common_utils_hasBrowserEnv &&
  (!common_utils_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(common_utils_navigator.product) < 0);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const common_utils_hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();

const common_utils_origin = common_utils_hasBrowserEnv && window.location.href || 'http://localhost';



;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/platform/index.js



/* harmony default export */ var axios_lib_platform = ({
  ...lib_platform_common_utils_namespaceObject,
  ...lib_platform_browser
});

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/toURLEncodedForm.js






function helpers_toURLEncodedForm_toURLEncodedForm(data, options) {
  return axios_lib_helpers_toFormData(data, new axios_lib_platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (axios_lib_platform.isNode && axios_lib_utils.isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/formDataToJSON.js




/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function helpers_formDataToJSON_parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return axios_lib_utils.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function helpers_formDataToJSON_arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function helpers_formDataToJSON_formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && axios_lib_utils.isArray(target) ? target.length : name;

    if (isLast) {
      if (axios_lib_utils.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !axios_lib_utils.isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && axios_lib_utils.isArray(target[name])) {
      target[name] = helpers_formDataToJSON_arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (axios_lib_utils.isFormData(formData) && axios_lib_utils.isFunction(formData.entries)) {
    const obj = {};

    axios_lib_utils.forEachEntry(formData, (name, value) => {
      buildPath(helpers_formDataToJSON_parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/* harmony default export */ var axios_lib_helpers_formDataToJSON = (helpers_formDataToJSON_formDataToJSON);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/defaults/index.js










/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function lib_defaults_stringifySafely(rawValue, parser, encoder) {
  if (axios_lib_utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return axios_lib_utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const lib_defaults_defaults = {

  transitional: axios_lib_defaults_transitional,

  adapter: ['xhr', 'http', 'fetch'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = axios_lib_utils.isObject(data);

    if (isObjectPayload && axios_lib_utils.isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = axios_lib_utils.isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify(axios_lib_helpers_formDataToJSON(data)) : data;
    }

    if (axios_lib_utils.isArrayBuffer(data) ||
      axios_lib_utils.isBuffer(data) ||
      axios_lib_utils.isStream(data) ||
      axios_lib_utils.isFile(data) ||
      axios_lib_utils.isBlob(data) ||
      axios_lib_utils.isReadableStream(data)
    ) {
      return data;
    }
    if (axios_lib_utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (axios_lib_utils.isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return helpers_toURLEncodedForm_toURLEncodedForm(data, this.formSerializer).toString();
      }

      if ((isFileList = axios_lib_utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return axios_lib_helpers_toFormData(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return lib_defaults_stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || lib_defaults_defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (axios_lib_utils.isResponse(data) || axios_lib_utils.isReadableStream(data)) {
      return data;
    }

    if (data && axios_lib_utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw axios_lib_core_AxiosError.from(e, axios_lib_core_AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: axios_lib_platform.classes.FormData,
    Blob: axios_lib_platform.classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

axios_lib_utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  lib_defaults_defaults.headers[method] = {};
});

/* harmony default export */ var node_modules_axios_lib_defaults = (lib_defaults_defaults);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/parseHeaders.js




// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const helpers_parseHeaders_ignoreDuplicateOf = axios_lib_utils.toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
/* harmony default export */ var lib_helpers_parseHeaders = (rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && helpers_parseHeaders_ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
});

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/core/AxiosHeaders.js





const core_AxiosHeaders_$internals = Symbol('internals');

function core_AxiosHeaders_normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function core_AxiosHeaders_normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return axios_lib_utils.isArray(value) ? value.map(core_AxiosHeaders_normalizeValue) : String(value);
}

function core_AxiosHeaders_parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const core_AxiosHeaders_isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function core_AxiosHeaders_matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (axios_lib_utils.isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!axios_lib_utils.isString(value)) return;

  if (axios_lib_utils.isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (axios_lib_utils.isRegExp(filter)) {
    return filter.test(value);
  }
}

function core_AxiosHeaders_formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function core_AxiosHeaders_buildAccessors(obj, header) {
  const accessorName = axios_lib_utils.toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class core_AxiosHeaders_AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = core_AxiosHeaders_normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = axios_lib_utils.findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = core_AxiosHeaders_normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      axios_lib_utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (axios_lib_utils.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite)
    } else if(axios_lib_utils.isString(header) && (header = header.trim()) && !core_AxiosHeaders_isValidHeaderName(header)) {
      setHeaders(lib_helpers_parseHeaders(header), valueOrRewrite);
    } else if (axios_lib_utils.isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = core_AxiosHeaders_normalizeHeader(header);

    if (header) {
      const key = axios_lib_utils.findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return core_AxiosHeaders_parseTokens(value);
        }

        if (axios_lib_utils.isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (axios_lib_utils.isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = core_AxiosHeaders_normalizeHeader(header);

    if (header) {
      const key = axios_lib_utils.findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || core_AxiosHeaders_matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = core_AxiosHeaders_normalizeHeader(_header);

      if (_header) {
        const key = axios_lib_utils.findKey(self, _header);

        if (key && (!matcher || core_AxiosHeaders_matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (axios_lib_utils.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || core_AxiosHeaders_matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    axios_lib_utils.forEach(this, (value, header) => {
      const key = axios_lib_utils.findKey(headers, header);

      if (key) {
        self[key] = core_AxiosHeaders_normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? core_AxiosHeaders_formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = core_AxiosHeaders_normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    axios_lib_utils.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && axios_lib_utils.isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[core_AxiosHeaders_$internals] = (this[core_AxiosHeaders_$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = core_AxiosHeaders_normalizeHeader(_header);

      if (!accessors[lHeader]) {
        core_AxiosHeaders_buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    axios_lib_utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

core_AxiosHeaders_AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
axios_lib_utils.reduceDescriptors(core_AxiosHeaders_AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

axios_lib_utils.freezeMethods(core_AxiosHeaders_AxiosHeaders);

/* harmony default export */ var axios_lib_core_AxiosHeaders = (core_AxiosHeaders_AxiosHeaders);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/core/transformData.js






/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function core_transformData_transformData(fns, response) {
  const config = this || node_modules_axios_lib_defaults;
  const context = response || config;
  const headers = axios_lib_core_AxiosHeaders.from(context.headers);
  let data = context.data;

  axios_lib_utils.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/cancel/isCancel.js


function cancel_isCancel_isCancel(value) {
  return !!(value && value.__CANCEL__);
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/cancel/CanceledError.js





/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function cancel_CanceledError_CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  axios_lib_core_AxiosError.call(this, message == null ? 'canceled' : message, axios_lib_core_AxiosError.ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

axios_lib_utils.inherits(cancel_CanceledError_CanceledError, axios_lib_core_AxiosError, {
  __CANCEL__: true
});

/* harmony default export */ var axios_lib_cancel_CanceledError = (cancel_CanceledError_CanceledError);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/core/settle.js




/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function core_settle_settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new axios_lib_core_AxiosError(
      'Request failed with status code ' + response.status,
      [axios_lib_core_AxiosError.ERR_BAD_REQUEST, axios_lib_core_AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/parseProtocol.js


function helpers_parseProtocol_parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/speedometer.js


/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function helpers_speedometer_speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/* harmony default export */ var axios_lib_helpers_speedometer = (helpers_speedometer_speedometer);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/throttle.js
/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */
function helpers_throttle_throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1000 / freq;
  let lastArgs;
  let timer;

  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  }

  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if ( passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs)
        }, threshold - passed);
      }
    }
  }

  const flush = () => lastArgs && invoke(lastArgs);

  return [throttled, flush];
}

/* harmony default export */ var axios_lib_helpers_throttle = (helpers_throttle_throttle);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/progressEventReducer.js




const helpers_progressEventReducer_progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = axios_lib_helpers_speedometer(50, 250);

  return axios_lib_helpers_throttle(e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? 'download' : 'upload']: true
    };

    listener(data);
  }, freq);
}

const helpers_progressEventReducer_progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;

  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
}

const helpers_progressEventReducer_asyncDecorator = (fn) => (...args) => axios_lib_utils.asap(() => fn(...args));

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/isURLSameOrigin.js





/* harmony default export */ var lib_helpers_isURLSameOrigin = (axios_lib_platform.hasStandardBrowserEnv ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    const msie = axios_lib_platform.navigator && /(msie|trident)/i.test(axios_lib_platform.navigator.userAgent);
    const urlParsingNode = document.createElement('a');
    let originURL;

    /**
    * Parse a URL to discover its components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      let href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
          urlParsingNode.pathname :
          '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      const parsed = (axios_lib_utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
          parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })());

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/cookies.js



/* harmony default export */ var lib_helpers_cookies = (axios_lib_platform.hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      axios_lib_utils.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      axios_lib_utils.isString(path) && cookie.push('path=' + path);

      axios_lib_utils.isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  });


;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/isAbsoluteURL.js


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function helpers_isAbsoluteURL_isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/combineURLs.js


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function helpers_combineURLs_combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/core/buildFullPath.js





/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function core_buildFullPath_buildFullPath(baseURL, requestedURL) {
  if (baseURL && !helpers_isAbsoluteURL_isAbsoluteURL(requestedURL)) {
    return helpers_combineURLs_combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/core/mergeConfig.js





const core_mergeConfig_headersToObject = (thing) => thing instanceof axios_lib_core_AxiosHeaders ? { ...thing } : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function core_mergeConfig_mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, caseless) {
    if (axios_lib_utils.isPlainObject(target) && axios_lib_utils.isPlainObject(source)) {
      return axios_lib_utils.merge.call({caseless}, target, source);
    } else if (axios_lib_utils.isPlainObject(source)) {
      return axios_lib_utils.merge({}, source);
    } else if (axios_lib_utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, caseless) {
    if (!axios_lib_utils.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!axios_lib_utils.isUndefined(a)) {
      return getMergedValue(undefined, a, caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!axios_lib_utils.isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!axios_lib_utils.isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!axios_lib_utils.isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(core_mergeConfig_headersToObject(a), core_mergeConfig_headersToObject(b), true)
  };

  axios_lib_utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (axios_lib_utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/resolveConfig.js









/* harmony default export */ var lib_helpers_resolveConfig = ((config) => {
  const newConfig = core_mergeConfig_mergeConfig({}, config);

  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

  newConfig.headers = headers = axios_lib_core_AxiosHeaders.from(headers);

  newConfig.url = helpers_buildURL_buildURL(core_buildFullPath_buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);

  // HTTP basic authentication
  if (auth) {
    headers.set('Authorization', 'Basic ' +
      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
    );
  }

  let contentType;

  if (axios_lib_utils.isFormData(data)) {
    if (axios_lib_platform.hasStandardBrowserEnv || axios_lib_platform.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(undefined); // Let the browser set it
    } else if ((contentType = headers.getContentType()) !== false) {
      // fix semicolon duplication issue for ReactNative FormData implementation
      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
    }
  }

  // Add xsrf header
  // This is only done if running in a standard browser environment.
  // Specifically not if we're in a web worker, or react-native.

  if (axios_lib_platform.hasStandardBrowserEnv) {
    withXSRFToken && axios_lib_utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

    if (withXSRFToken || (withXSRFToken !== false && lib_helpers_isURLSameOrigin(newConfig.url))) {
      // Add xsrf header
      const xsrfValue = xsrfHeaderName && xsrfCookieName && lib_helpers_cookies.read(xsrfCookieName);

      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }

  return newConfig;
});


;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/adapters/xhr.js











const adapters_xhr_isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

/* harmony default export */ var lib_adapters_xhr = (adapters_xhr_isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = lib_helpers_resolveConfig(config);
    let requestData = _config.data;
    const requestHeaders = axios_lib_core_AxiosHeaders.from(_config.headers).normalize();
    let {responseType, onUploadProgress, onDownloadProgress} = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;

    function done() {
      flushUpload && flushUpload(); // flush events
      flushDownload && flushDownload(); // flush events

      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);

      _config.signal && _config.signal.removeEventListener('abort', onCanceled);
    }

    let request = new XMLHttpRequest();

    request.open(_config.method.toUpperCase(), _config.url, true);

    // Set the request timeout in MS
    request.timeout = _config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = axios_lib_core_AxiosHeaders.from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      core_settle_settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new axios_lib_core_AxiosError('Request aborted', axios_lib_core_AxiosError.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new axios_lib_core_AxiosError('Network Error', axios_lib_core_AxiosError.ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = _config.transitional || axios_lib_defaults_transitional;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new axios_lib_core_AxiosError(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? axios_lib_core_AxiosError.ETIMEDOUT : axios_lib_core_AxiosError.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      axios_lib_utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!axios_lib_utils.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = _config.responseType;
    }

    // Handle progress if needed
    if (onDownloadProgress) {
      ([downloadThrottled, flushDownload] = helpers_progressEventReducer_progressEventReducer(onDownloadProgress, true));
      request.addEventListener('progress', downloadThrottled);
    }

    // Not all browsers support upload events
    if (onUploadProgress && request.upload) {
      ([uploadThrottled, flushUpload] = helpers_progressEventReducer_progressEventReducer(onUploadProgress));

      request.upload.addEventListener('progress', uploadThrottled);

      request.upload.addEventListener('loadend', flushUpload);
    }

    if (_config.cancelToken || _config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new axios_lib_cancel_CanceledError(null, config, request) : cancel);
        request.abort();
        request = null;
      };

      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = helpers_parseProtocol_parseProtocol(_config.url);

    if (protocol && axios_lib_platform.protocols.indexOf(protocol) === -1) {
      reject(new axios_lib_core_AxiosError('Unsupported protocol ' + protocol + ':', axios_lib_core_AxiosError.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
});

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/composeSignals.js




const helpers_composeSignals_composeSignals = (signals, timeout) => {
  const {length} = (signals = signals ? signals.filter(Boolean) : []);

  if (timeout || length) {
    let controller = new AbortController();

    let aborted;

    const onabort = function (reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof axios_lib_core_AxiosError ? err : new axios_lib_cancel_CanceledError(err instanceof Error ? err.message : err));
      }
    }

    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new axios_lib_core_AxiosError(`timeout ${timeout} of ms exceeded`, axios_lib_core_AxiosError.ETIMEDOUT))
    }, timeout)

    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach(signal => {
          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);
        });
        signals = null;
      }
    }

    signals.forEach((signal) => signal.addEventListener('abort', onabort));

    const {signal} = controller;

    signal.unsubscribe = () => axios_lib_utils.asap(unsubscribe);

    return signal;
  }
}

/* harmony default export */ var axios_lib_helpers_composeSignals = (helpers_composeSignals_composeSignals);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/trackStream.js

const helpers_trackStream_streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;

  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }

  let pos = 0;
  let end;

  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
}

const helpers_trackStream_readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of helpers_trackStream_readStream(iterable)) {
    yield* helpers_trackStream_streamChunk(chunk, chunkSize);
  }
}

const helpers_trackStream_readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }

  const reader = stream.getReader();
  try {
    for (;;) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
}

const helpers_trackStream_trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator = helpers_trackStream_readBytes(stream, chunkSize);

  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  }

  return new ReadableStream({
    async pull(controller) {
      try {
        const {done, value} = await iterator.next();

        if (done) {
         _onFinish();
          controller.close();
          return;
        }

        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  })
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/adapters/fetch.js










const adapters_fetch_isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
const adapters_fetch_isReadableStreamSupported = adapters_fetch_isFetchSupported && typeof ReadableStream === 'function';

// used only inside the fetch adapter
const adapters_fetch_encodeText = adapters_fetch_isFetchSupported && (typeof TextEncoder === 'function' ?
    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
    async (str) => new Uint8Array(await new Response(str).arrayBuffer())
);

const adapters_fetch_test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false
  }
}

const adapters_fetch_supportsRequestStream = adapters_fetch_isReadableStreamSupported && adapters_fetch_test(() => {
  let duplexAccessed = false;

  const hasContentType = new Request(axios_lib_platform.origin, {
    body: new ReadableStream(),
    method: 'POST',
    get duplex() {
      duplexAccessed = true;
      return 'half';
    },
  }).headers.has('Content-Type');

  return duplexAccessed && !hasContentType;
});

const adapters_fetch_DEFAULT_CHUNK_SIZE = 64 * 1024;

const adapters_fetch_supportsResponseStream = adapters_fetch_isReadableStreamSupported &&
  adapters_fetch_test(() => axios_lib_utils.isReadableStream(new Response('').body));


const adapters_fetch_resolvers = {
  stream: adapters_fetch_supportsResponseStream && ((res) => res.body)
};

adapters_fetch_isFetchSupported && (((res) => {
  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
    !adapters_fetch_resolvers[type] && (adapters_fetch_resolvers[type] = axios_lib_utils.isFunction(res[type]) ? (res) => res[type]() :
      (_, config) => {
        throw new axios_lib_core_AxiosError(`Response type '${type}' is not supported`, axios_lib_core_AxiosError.ERR_NOT_SUPPORT, config);
      })
  });
})(new Response));

const adapters_fetch_getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }

  if(axios_lib_utils.isBlob(body)) {
    return body.size;
  }

  if(axios_lib_utils.isSpecCompliantForm(body)) {
    const _request = new Request(axios_lib_platform.origin, {
      method: 'POST',
      body,
    });
    return (await _request.arrayBuffer()).byteLength;
  }

  if(axios_lib_utils.isArrayBufferView(body) || axios_lib_utils.isArrayBuffer(body)) {
    return body.byteLength;
  }

  if(axios_lib_utils.isURLSearchParams(body)) {
    body = body + '';
  }

  if(axios_lib_utils.isString(body)) {
    return (await adapters_fetch_encodeText(body)).byteLength;
  }
}

const adapters_fetch_resolveBodyLength = async (headers, body) => {
  const length = axios_lib_utils.toFiniteNumber(headers.getContentLength());

  return length == null ? adapters_fetch_getBodyLength(body) : length;
}

/* harmony default export */ var axios_lib_adapters_fetch = (adapters_fetch_isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = 'same-origin',
    fetchOptions
  } = lib_helpers_resolveConfig(config);

  responseType = responseType ? (responseType + '').toLowerCase() : 'text';

  let composedSignal = axios_lib_helpers_composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);

  let request;

  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
  });

  let requestContentLength;

  try {
    if (
      onUploadProgress && adapters_fetch_supportsRequestStream && method !== 'get' && method !== 'head' &&
      (requestContentLength = await adapters_fetch_resolveBodyLength(headers, data)) !== 0
    ) {
      let _request = new Request(url, {
        method: 'POST',
        body: data,
        duplex: "half"
      });

      let contentTypeHeader;

      if (axios_lib_utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
        headers.setContentType(contentTypeHeader)
      }

      if (_request.body) {
        const [onProgress, flush] = helpers_progressEventReducer_progressEventDecorator(
          requestContentLength,
          helpers_progressEventReducer_progressEventReducer(helpers_progressEventReducer_asyncDecorator(onUploadProgress))
        );

        data = helpers_trackStream_trackStream(_request.body, adapters_fetch_DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }

    if (!axios_lib_utils.isString(withCredentials)) {
      withCredentials = withCredentials ? 'include' : 'omit';
    }

    // Cloudflare Workers throws when credentials are defined
    // see https://github.com/cloudflare/workerd/issues/902
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : undefined
    });

    let response = await fetch(request);

    const isStreamResponse = adapters_fetch_supportsResponseStream && (responseType === 'stream' || responseType === 'response');

    if (adapters_fetch_supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {
      const options = {};

      ['status', 'statusText', 'headers'].forEach(prop => {
        options[prop] = response[prop];
      });

      const responseContentLength = axios_lib_utils.toFiniteNumber(response.headers.get('content-length'));

      const [onProgress, flush] = onDownloadProgress && helpers_progressEventReducer_progressEventDecorator(
        responseContentLength,
        helpers_progressEventReducer_progressEventReducer(helpers_progressEventReducer_asyncDecorator(onDownloadProgress), true)
      ) || [];

      response = new Response(
        helpers_trackStream_trackStream(response.body, adapters_fetch_DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }

    responseType = responseType || 'text';

    let responseData = await adapters_fetch_resolvers[axios_lib_utils.findKey(adapters_fetch_resolvers, responseType) || 'text'](response, config);

    !isStreamResponse && unsubscribe && unsubscribe();

    return await new Promise((resolve, reject) => {
      core_settle_settle(resolve, reject, {
        data: responseData,
        headers: axios_lib_core_AxiosHeaders.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      })
    })
  } catch (err) {
    unsubscribe && unsubscribe();

    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {
      throw Object.assign(
        new axios_lib_core_AxiosError('Network Error', axios_lib_core_AxiosError.ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      )
    }

    throw axios_lib_core_AxiosError.from(err, err && err.code, config, request);
  }
}));



;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/adapters/adapters.js






const adapters_adapters_knownAdapters = {
  http: axios_lib_helpers_null,
  xhr: lib_adapters_xhr,
  fetch: axios_lib_adapters_fetch
}

axios_lib_utils.forEach(adapters_adapters_knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const adapters_adapters_renderReason = (reason) => `- ${reason}`;

const adapters_adapters_isResolvedHandle = (adapter) => axios_lib_utils.isFunction(adapter) || adapter === null || adapter === false;

/* harmony default export */ var lib_adapters_adapters = ({
  getAdapter: (adapters) => {
    adapters = axios_lib_utils.isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!adapters_adapters_isResolvedHandle(nameOrAdapter)) {
        adapter = adapters_adapters_knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new axios_lib_core_AxiosError(`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(adapters_adapters_renderReason).join('\n') : ' ' + adapters_adapters_renderReason(reasons[0])) :
        'as no adapter specified';

      throw new axios_lib_core_AxiosError(
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: adapters_adapters_knownAdapters
});

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/core/dispatchRequest.js









/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function core_dispatchRequest_throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new axios_lib_cancel_CanceledError(null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function core_dispatchRequest_dispatchRequest(config) {
  core_dispatchRequest_throwIfCancellationRequested(config);

  config.headers = axios_lib_core_AxiosHeaders.from(config.headers);

  // Transform request data
  config.data = core_transformData_transformData.call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = lib_adapters_adapters.getAdapter(config.adapter || node_modules_axios_lib_defaults.adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    core_dispatchRequest_throwIfCancellationRequested(config);

    // Transform response data
    response.data = core_transformData_transformData.call(
      config,
      config.transformResponse,
      response
    );

    response.headers = axios_lib_core_AxiosHeaders.from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!cancel_isCancel_isCancel(reason)) {
      core_dispatchRequest_throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = core_transformData_transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = axios_lib_core_AxiosHeaders.from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/env/data.js
const env_data_VERSION = "1.7.7";
;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/validator.js





const helpers_validator_validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  helpers_validator_validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const helpers_validator_deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
helpers_validator_validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + env_data_VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new axios_lib_core_AxiosError(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        axios_lib_core_AxiosError.ERR_DEPRECATED
      );
    }

    if (version && !helpers_validator_deprecatedWarnings[opt]) {
      helpers_validator_deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function helpers_validator_assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new axios_lib_core_AxiosError('options must be an object', axios_lib_core_AxiosError.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new axios_lib_core_AxiosError('option ' + opt + ' must be ' + result, axios_lib_core_AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new axios_lib_core_AxiosError('Unknown option ' + opt, axios_lib_core_AxiosError.ERR_BAD_OPTION);
    }
  }
}

/* harmony default export */ var lib_helpers_validator = ({
  assertOptions: helpers_validator_assertOptions,
  validators: helpers_validator_validators
});

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/core/Axios.js











const lib_core_Axios_validators = lib_helpers_validator.validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class core_Axios_Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new axios_lib_core_InterceptorManager(),
      response: new axios_lib_core_InterceptorManager()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;

        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
        try {
          if (!err.stack) {
            err.stack = stack;
            // match without the 2 top stack lines
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
            err.stack += '\n' + stack
          }
        } catch (e) {
          // ignore the case where "stack" is an un-writable property
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = core_mergeConfig_mergeConfig(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      lib_helpers_validator.assertOptions(transitional, {
        silentJSONParsing: lib_core_Axios_validators.transitional(lib_core_Axios_validators.boolean),
        forcedJSONParsing: lib_core_Axios_validators.transitional(lib_core_Axios_validators.boolean),
        clarifyTimeoutError: lib_core_Axios_validators.transitional(lib_core_Axios_validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (axios_lib_utils.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        }
      } else {
        lib_helpers_validator.assertOptions(paramsSerializer, {
          encode: lib_core_Axios_validators.function,
          serialize: lib_core_Axios_validators.function
        }, true);
      }
    }

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && axios_lib_utils.merge(
      headers.common,
      headers[config.method]
    );

    headers && axios_lib_utils.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = axios_lib_core_AxiosHeaders.concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [core_dispatchRequest_dispatchRequest.bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = core_dispatchRequest_dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = core_mergeConfig_mergeConfig(this.defaults, config);
    const fullPath = core_buildFullPath_buildFullPath(config.baseURL, config.url);
    return helpers_buildURL_buildURL(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
axios_lib_utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  core_Axios_Axios.prototype[method] = function(url, config) {
    return this.request(core_mergeConfig_mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

axios_lib_utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(core_mergeConfig_mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  core_Axios_Axios.prototype[method] = generateHTTPMethod();

  core_Axios_Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

/* harmony default export */ var axios_lib_core_Axios = (core_Axios_Axios);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/cancel/CancelToken.js




/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class cancel_CancelToken_CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new axios_lib_cancel_CanceledError(message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  toAbortSignal() {
    const controller = new AbortController();

    const abort = (err) => {
      controller.abort(err);
    };

    this.subscribe(abort);

    controller.signal.unsubscribe = () => this.unsubscribe(abort);

    return controller.signal;
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new cancel_CancelToken_CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

/* harmony default export */ var axios_lib_cancel_CancelToken = (cancel_CancelToken_CancelToken);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/spread.js


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function helpers_spread_spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/isAxiosError.js




/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function helpers_isAxiosError_isAxiosError(payload) {
  return axios_lib_utils.isObject(payload) && (payload.isAxiosError === true);
}

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/helpers/HttpStatusCode.js
const helpers_HttpStatusCode_HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(helpers_HttpStatusCode_HttpStatusCode).forEach(([key, value]) => {
  helpers_HttpStatusCode_HttpStatusCode[value] = key;
});

/* harmony default export */ var axios_lib_helpers_HttpStatusCode = (helpers_HttpStatusCode_HttpStatusCode);

;// ./node_modules/@ledgerhq/domain-service/node_modules/axios/lib/axios.js




















/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function lib_axios_createInstance(defaultConfig) {
  const context = new axios_lib_core_Axios(defaultConfig);
  const instance = helpers_bind_bind(axios_lib_core_Axios.prototype.request, context);

  // Copy axios.prototype to instance
  axios_lib_utils.extend(instance, axios_lib_core_Axios.prototype, context, {allOwnKeys: true});

  // Copy context to instance
  axios_lib_utils.extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return lib_axios_createInstance(core_mergeConfig_mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const lib_axios_axios = lib_axios_createInstance(node_modules_axios_lib_defaults);

// Expose Axios class to allow class inheritance
lib_axios_axios.Axios = axios_lib_core_Axios;

// Expose Cancel & CancelToken
lib_axios_axios.CanceledError = axios_lib_cancel_CanceledError;
lib_axios_axios.CancelToken = axios_lib_cancel_CancelToken;
lib_axios_axios.isCancel = cancel_isCancel_isCancel;
lib_axios_axios.VERSION = env_data_VERSION;
lib_axios_axios.toFormData = axios_lib_helpers_toFormData;

// Expose AxiosError class
lib_axios_axios.AxiosError = axios_lib_core_AxiosError;

// alias for CanceledError for backward compatibility
lib_axios_axios.Cancel = lib_axios_axios.CanceledError;

// Expose all/spread
lib_axios_axios.all = function all(promises) {
  return Promise.all(promises);
};

lib_axios_axios.spread = helpers_spread_spread;

// Expose isAxiosError
lib_axios_axios.isAxiosError = helpers_isAxiosError_isAxiosError;

// Expose mergeConfig
lib_axios_axios.mergeConfig = core_mergeConfig_mergeConfig;

lib_axios_axios.AxiosHeaders = axios_lib_core_AxiosHeaders;

lib_axios_axios.formToJSON = thing => axios_lib_helpers_formDataToJSON(axios_lib_utils.isHTMLForm(thing) ? new FormData(thing) : thing);

lib_axios_axios.getAdapter = lib_adapters_adapters.getAdapter;

lib_axios_axios.HttpStatusCode = axios_lib_helpers_HttpStatusCode;

lib_axios_axios.default = lib_axios_axios;

// this module should only have a default export
/* harmony default export */ var node_modules_axios_lib_axios = (lib_axios_axios);

;// ./node_modules/@ledgerhq/domain-service/lib-es/registries/index.js
const REGISTRIES = [
    {
        name: "ens",
        resolvers: {
            forward: "https://explorers.api.live.ledger.com/blockchain/v4/eth/ens/resolve/{name}",
            reverse: "https://explorers.api.live.ledger.com/blockchain/v4/eth/ens/reverse-resolve/{address}",
        },
        signatures: {
            forward: "https://nft.api.live.ledger.com/v1/names/ens/forward/{name}?challenge={challenge}",
            reverse: "https://nft.api.live.ledger.com/v1/names/ens/reverse/{address}?challenge={challenge}",
        },
        patterns: {
            forward: new RegExp("\\.eth$"),
            reverse: new RegExp("^0x[0-9a-fA-F]{40}$"),
        },
        coinTypes: [60],
    },
];
/**
 * Method is voluntarly made async so it can be replaced by a backend call once implemented
 */
const getRegistries = async () => REGISTRIES;
/**
 * Get an array of registries compatible with a given domain
 *
 * @param {string} domain
 * @returns {Promise<AddressResolutionResponse[]>}
 */
const getRegistriesForDomain = async (domain) => {
    const registries = await getRegistries();
    return registries.filter(registry => registry.patterns.forward.test(domain));
};
/**
 * Get an array of registries compatible with a given address
 *
 * @param {string} address
 * @returns {Promise<AddressResolutionResponse[]>}
 */
const getRegistriesForAddress = async (address) => {
    const registries = await getRegistries();
    return registries.filter(registry => registry.patterns.reverse.test(address));
};
//# sourceMappingURL=index.js.map
;// ./node_modules/@ledgerhq/domain-service/lib-es/utils/index.js
/**
 * Needed polyfill for Promise.allSettled as it doesn't exist on RN.
 */
const allSettled = (promises) => {
    return Promise.all(promises.map(p => {
        return p
            .then(value => {
            return {
                status: "fulfilled",
                value,
            };
        })
            .catch((reason) => {
            return {
                status: "rejected",
                reason,
            };
        });
    }));
};
/**
 * Helper to know in advance if a domain is compatible with the nano
 *
 * @param domain string representing the domain
 * @returns {Boolean}
 */
const validateDomain = (domain) => {
    if (typeof domain !== "string") {
        return false;
    }
    const lengthIsValid = domain.length > 0 && Number(domain.length) < 30;
    const containsOnlyValidChars = new RegExp("^[a-zA-Z0-9\\-\\_\\.]+$").test(domain);
    return lengthIsValid && containsOnlyValidChars;
};
//# sourceMappingURL=index.js.map
;// ./node_modules/@ledgerhq/domain-service/lib-es/signers/index.js




/**
 * Get an APDU to sign a domain resolution on the nano
 *
 * @param {string} domain
 * @param {SupportedRegistries} registryName
 * @param {string} challenge
 * @returns {Promise<AddressResolutionResponse[]>}
 */
const signDomainResolution = async (domain, registryName, challenge) => {
    if (!validateDomain(domain)) {
        throw new Error(`Domains with more than 255 caracters or with unicode are not supported on the nano. Domain: ${domain}`);
    }
    const registries = await getRegistries();
    const registry = registries.find(r => r.name === registryName);
    if (!registry)
        return null;
    const url = registry.signatures.forward
        .replace("{name}", domain)
        .replace("{challenge}", challenge);
    return node_modules_axios_lib_axios
        .request({
        method: "GET",
        url,
    })
        .then(({ data }) => data.payload)
        .catch(error => {
        /* istanbul ignore next: don't test logs */
        if (error.status !== 404) {
            (0,lib_es/* log */.Rm)("domain-service", "failed to get APDU for a domain", {
                domain,
                error,
            });
        }
        return null;
    });
};
/**
 * Get an APDU to sign an address resolve resolution on the nano
 *
 * @param {string} address
 * @param {SupportedRegistries} registryName
 * @param {string} challenge
 * @returns {Promise<AddressResolutionResponse[]>}
 */
const signAddressResolution = async (address, registryName, challenge) => {
    const registries = await getRegistries();
    const registry = registries.find(r => r.name === registryName);
    if (!registry)
        return null;
    const url = registry.signatures.reverse
        .replace("{address}", address)
        .replace("{challenge}", challenge);
    return node_modules_axios_lib_axios
        .request({
        method: "GET",
        url,
    })
        .then(({ data }) => data.payload)
        .catch(error => {
        /* istanbul ignore next: don't test logs */
        if (error.status !== 404) {
            (0,lib_es/* log */.Rm)("domain-service", "failed to get APDU for an address", {
                address,
                error,
            });
        }
        return null;
    });
};
//# sourceMappingURL=index.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/modules/Uniswap/constants.js
const UNISWAP_UNIVERSAL_ROUTER_ADDRESS = "0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad";
const UNISWAP_EXECUTE_SELECTOR = "0x3593564c";
const WETH_PER_CHAIN_ID = {
    // Ethereum Mainnet
    1: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    // Ethereum Goerli
    5: "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    // Ethereum Sepolia
    11155111: "0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14",
    // Arbitrum One
    42161: "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    // Arbitrum Goerli
    421613: "0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3",
    // Avalanche C-Chain
    43114: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    // BSC
    56: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
    // Base
    8453: "0x4200000000000000000000000000000000000006",
    // Base Goerli
    84531: "0x44D627f900da8AdaC7561bD73aA745F132450798",
    // Blast
    23888: "0x4300000000000000000000000000000000000004",
    // Celo
    42220: new Error("Celo isn't supporting wrapping Eth"),
    // Celo Alfajores
    44787: new Error("Celo Alfajores isn't supporting wrapping Eth"),
    // Optimism
    10: "0x4200000000000000000000000000000000000006",
    // Optimism Goerli
    420: "0x4200000000000000000000000000000000000006",
    // Polygon
    137: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    // Polygon Mumbai
    80001: "0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",
};
const UNISWAP_COMMANDS = {
    "0x08": "V2_SWAP_EXACT_IN",
    "0x09": "V2_SWAP_EXACT_OUT",
    "0x00": "V3_SWAP_EXACT_IN",
    "0x01": "V3_SWAP_EXACT_OUT",
    "0x0b": "WRAP_ETH",
    "0x0c": "UNWRAP_ETH",
    "0x0a": "PERMIT2_PERMIT",
    "0x0d": "PERMIT2_TRANSFER_FROM",
    "0x02": "PERMIT2_PERMIT_BATCH",
    "0x03": "PERMIT2_TRANSFER_FROM_BATCH",
    "0x06": "PAY_PORTION",
    "0x04": "SWEEP",
};
const SWAP_COMMANDS = [
    "V2_SWAP_EXACT_IN",
    "V2_SWAP_EXACT_OUT",
    "V3_SWAP_EXACT_IN",
    "V3_SWAP_EXACT_OUT",
];
//# sourceMappingURL=constants.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/modules/Uniswap/decoders.js
/* provided dependency */ var decoders_Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];


const swapV2Decoder = (input) => {
    const [, , , addresses] = defaultAbiCoder.decode(["address", "uint256", "uint256", "address[]", "bool"], input);
    return addresses.map(address => address.toLowerCase());
};
const swapV3Decoder = (input) => {
    const [, , , path] = defaultAbiCoder.decode(["address", "uint256", "uint256", "bytes", "bool"], input);
    // Path is at least 43 bytes long for 2 times 20B addresses + 3B fee in between
    // Example for the pattern pattern: 20B address + 3B fee + 20B address
    // more addresses can be included after another 3B space
    const pathBuffer = decoders_Buffer.from(path.slice(2), "hex");
    const tokens = [];
    let i = 0;
    while (i < pathBuffer.length) {
        tokens.push(`0x${pathBuffer
            .subarray(i, i + 20)
            .toString("hex")
            .toLowerCase()}`);
        // Skip 20B address + 3B fee
        i += 23;
    }
    return tokens;
};
const wrapEthDecoder = (input, chainId) => {
    const contract = WETH_PER_CHAIN_ID[chainId];
    return contract instanceof Error ? [] : [contract.toLowerCase()];
};
const sweepDecoder = (input) => {
    const [token] = defaultAbiCoder.decode(["address", "address", "uint256"], input);
    return [token.toLowerCase()];
};
const noDecoder = () => [];
const UniswapDecoders = {
    V2_SWAP_EXACT_IN: swapV2Decoder,
    V2_SWAP_EXACT_OUT: swapV2Decoder,
    V3_SWAP_EXACT_IN: swapV3Decoder,
    V3_SWAP_EXACT_OUT: swapV3Decoder,
    WRAP_ETH: wrapEthDecoder,
    UNWRAP_ETH: wrapEthDecoder,
    PERMIT2_PERMIT: noDecoder,
    PERMIT2_TRANSFER_FROM: noDecoder,
    PERMIT2_PERMIT_BATCH: noDecoder,
    PERMIT2_TRANSFER_FROM_BATCH: noDecoder,
    PAY_PORTION: noDecoder,
    SWEEP: sweepDecoder,
};
//# sourceMappingURL=decoders.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/modules/Uniswap/index.js
/* provided dependency */ var Uniswap_Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];





/**
 * @ignore for external documentation
 *
 * Indicates if the given calldata is supported by the Uniswap plugin
 * applying some basic checks and testing some assumptions
 * specific to the Uniswap plugin internals
 *
 * @param {`0x${string}`} calldata
 * @param {string | undefined} to
 * @param {number} chainId
 * @param {CommandsAndTokens} commandsAndTokens
 * @returns {boolean}
 */
const isSupported = (calldata, to, chainId, commandsAndTokens) => {
    const selector = calldata.slice(0, 10);
    const contractAddress = to?.toLowerCase();
    if (selector !== UNISWAP_EXECUTE_SELECTOR ||
        contractAddress !== UNISWAP_UNIVERSAL_ROUTER_ADDRESS ||
        !commandsAndTokens.length) {
        return false;
    }
    let endingAsset;
    for (let i = 0; i < commandsAndTokens.length; i++) {
        const [command, tokens] = commandsAndTokens[i];
        if (!command)
            return false;
        if (!SWAP_COMMANDS.includes(command))
            continue;
        const poolVersion = command.slice(0, 2);
        if (endingAsset &&
            // Chained swaps should work as a pipe regarding the traded assets:
            // The last asset of swap 1 should be the first asset of swap 2
            // and the same pool version should be used for both swaps
            (endingAsset.asset !== tokens[0] || endingAsset.poolVersion !== poolVersion)) {
            return false;
        }
        else {
            endingAsset = {
                poolVersion,
                asset: tokens[tokens.length - 1],
            };
        }
    }
    return true;
};
/**
 * @ignore for external documentation
 *
 * Provides a list of commands and associated tokens for a given Uniswap calldata
 *
 * @param {`0x${string}`} calldata
 * @param {number} chainId
 * @returns {CommandsAndTokens}
 */
const getCommandsAndTokensFromUniswapCalldata = (calldata, chainId) => {
    try {
        const [commands, inputs] = new Interface([
            "function execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline) external payable",
        ]).decodeFunctionData("execute", calldata);
        const commandsBuffer = Uniswap_Buffer.from(commands.slice(2), "hex");
        return commandsBuffer.reduce((acc, curr, i) => {
            const commandName = UNISWAP_COMMANDS[`0x${curr.toString(16).padStart(2, "0")}`];
            if (!commandName)
                return [...acc, [undefined, []]];
            const commandDecoder = UniswapDecoders[commandName];
            return [...acc, [commandName, commandDecoder(inputs[i], chainId)]];
        }, []);
    }
    catch (e) {
        (0,lib_es/* log */.Rm)("Uniswap", "Error decoding Uniswap calldata", e);
        return [];
    }
};
/**
 * @ignore for external documentation
 *
 * Returns the necessary APDUs to load the Uniswap plugin
 * and the token descriptors for a transaction
 *
 * @param {Transaction} transaction
 * @param {number} chainId
 * @param {LoadConfig} userConfig
 * @returns {Promise<{ pluginData?: Buffer; tokenDescriptors?: Buffer[] }>}
 */
const loadInfosForUniswap = async (transaction, chainId, userConfig) => {
    const selector = transaction.data.slice(0, 10);
    const commandsAndTokens = getCommandsAndTokensFromUniswapCalldata(transaction.data, chainId);
    if (!isSupported(selector, transaction.to, chainId, commandsAndTokens)) {
        return {};
    }
    const uniqueTokens = Array.from(new Set(commandsAndTokens.flatMap(([, tokens]) => tokens)));
    const tokenDescriptorsPromises = Promise.all(uniqueTokens.map(async (token) => {
        const erc20SignaturesBlob = await findERC20SignaturesInfo(userConfig || {}, chainId);
        return byContractAddressAndChainId(token, chainId, erc20SignaturesBlob)?.data;
    }));
    const tokenDescriptors = await tokenDescriptorsPromises.then(descriptors => descriptors.filter((descriptor) => !!descriptor));
    const pluginName = "Uniswap";
    // 1 byte for the length of the plugin name
    const lengthBuff = Uniswap_Buffer.alloc(1);
    lengthBuff.writeUIntBE(pluginName.length, 0, 1);
    // dynamic length bytes for the plugin name
    const pluginNameBuff = Uniswap_Buffer.from(pluginName);
    // 20 bytes for the contract address
    const contractAddressBuff = Uniswap_Buffer.from(UNISWAP_UNIVERSAL_ROUTER_ADDRESS.slice(2), "hex");
    // 4 bytes for the selector
    const selectorBuff = Uniswap_Buffer.from(UNISWAP_EXECUTE_SELECTOR.slice(2), "hex");
    // 70 bytes for the signature
    const signature = Uniswap_Buffer.from(
    // Signature is hardcoded as it would create issues by being in the CAL ethereum.json file
    "3044022014391e8f355867a57fe88f6a5a4dbcb8bf8f888a9db3ff3449caf72d120396bd02200c13d9c3f79400fe0aa0434ac54d59b79503c9964a4abc3e8cd22763e0242935", "hex");
    const pluginData = Uniswap_Buffer.concat([
        lengthBuff,
        pluginNameBuff,
        contractAddressBuff,
        selectorBuff,
        signature,
    ]);
    return {
        pluginData,
        tokenDescriptors,
    };
};
//# sourceMappingURL=index.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/services/ledger/contracts.js



/**
 * Retrieve the metadatas a given contract address and a method selector
 */
const loadInfosForContractMethod = async (contractAddress, selector, chainId, userLoadConfig) => {
    const { pluginBaseURL, extraPlugins } = getLoadConfig(userLoadConfig);
    let data = {};
    if (pluginBaseURL) {
        const url = `${pluginBaseURL}/plugins/ethereum.json`;
        data = await axios_lib_axios
            .get(`${pluginBaseURL}/plugins/ethereum.json`)
            .then(r => r.data)
            .catch(e => {
            (0,lib_es/* log */.Rm)("error", "could not fetch from " + url + ": " + String(e));
            return null;
        });
    }
    if (extraPlugins) {
        data = { ...data, ...extraPlugins };
    }
    if (!data)
        return;
    const lcSelector = selector.toLowerCase();
    const lcContractAddress = contractAddress.toLowerCase();
    if (lcContractAddress in data) {
        const contractSelectors = data[lcContractAddress];
        if (lcSelector in contractSelectors) {
            return {
                payload: contractSelectors[lcSelector]["serialized_data"],
                signature: contractSelectors[lcSelector]["signature"],
                plugin: contractSelectors[lcSelector]["plugin"],
                erc20OfInterest: contractSelectors[lcSelector]["erc20OfInterest"],
                abi: contractSelectors["abi"],
            };
        }
    }
};
//# sourceMappingURL=contracts.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/services/ledger/nfts.js



const getNFTInfo = async (contractAddress, chainId, userLoadConfig) => {
    const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);
    if (!nftExplorerBaseURL)
        return;
    const url = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}`;
    const response = await axios_lib_axios
        .get(url)
        .then(r => r.data)
        .catch(e => {
        (0,lib_es/* log */.Rm)("error", "could not fetch from " + url + ": " + String(e));
        return null;
    });
    if (!response)
        return;
    // APDU response specification: https://ledgerhq.atlassian.net/wiki/spaces/WALLETCO/pages/3269984297/NFT-1+NFT+Backend+design#NFT-Metadata-BLOB
    const payload = response["payload"];
    // Collection name length position: 3rd byte -> caracter 4 to 6
    const collectionNameLength = parseInt(payload.slice(4, 6), 16);
    const collectionNameHex = payload.substr(6, collectionNameLength * 2);
    const collectionName = collectionNameHex
        .match(/.{2}/g) // split every 2 characters
        ?.reduce((acc, curr) => (acc += String.fromCharCode(parseInt(curr, 16))), ""); // convert hex to string
    return {
        contractAddress,
        collectionName: collectionName || "",
        data: payload,
    };
};
const loadNftPlugin = async (contractAddress, selector, chainId, userLoadConfig) => {
    const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);
    if (!nftExplorerBaseURL)
        return;
    const url = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}/plugin-selector/${selector}`;
    const response = await axios_lib_axios
        .get(url)
        .then(r => r.data)
        .catch(e => {
        (0,lib_es/* log */.Rm)("error", "could not fetch from " + url + ": " + String(e));
        return null;
    });
    if (!response)
        return;
    const payload = response["payload"];
    return payload;
};
//# sourceMappingURL=nfts.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/services/ledger/index.js
/* provided dependency */ var ledger_Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];










/**
 * @ignore for external documentation
 *
 * Providing additionnal data for some transactions (Token or NFT related) can enable clear signing
 * of initially impossible to decode data.
 * This method will add necessary APDUs to the resolution paramter in order to provide this data to the nano app
 */
const getAdditionalDataForContract = async (contractAddress, chainIdUint32, loadConfig, shouldResolve) => {
    const resolution = {
        nfts: [],
        erc20Tokens: [],
    };
    if (shouldResolve.nft) {
        const nftInfo = await getNFTInfo(contractAddress, chainIdUint32, loadConfig);
        if (nftInfo) {
            (0,lib_es/* log */.Rm)("ethereum", "loaded nft info for " + nftInfo.contractAddress + " (" + nftInfo.collectionName + ")");
            resolution.nfts.push(nftInfo.data);
        }
        else {
            (0,lib_es/* log */.Rm)("ethereum", "couldn't load nft info for " + contractAddress);
        }
    }
    if (shouldResolve.token) {
        const erc20SignaturesBlob = await findERC20SignaturesInfo(loadConfig, chainIdUint32);
        const erc20Info = byContractAddressAndChainId(contractAddress, chainIdUint32, erc20SignaturesBlob);
        if (erc20Info) {
            (0,lib_es/* log */.Rm)("ethereum", "loaded erc20token info for " + erc20Info.contractAddress + " (" + erc20Info.ticker + ")");
            resolution.erc20Tokens.push(erc20Info.data.toString("hex"));
        }
        else {
            (0,lib_es/* log */.Rm)("ethereum", "couldn't load erc20token info for " + contractAddress);
        }
    }
    return resolution;
};
/**
 * @ignore for external documentation
 *
 * Depending on the transaction, it might be necessary to load internal plugins in the nano app
 * in order to clear sign it.
 * This method will add necessary APDUs to the resolution parameter in order to load those internal plugins
 */
const loadNanoAppPlugins = async (contractAddress, selector, parsedTransaction, chainIdUint32, loadConfig, shouldResolve) => {
    let resolution = {
        externalPlugin: [],
        plugin: [],
        nfts: [],
        erc20Tokens: [],
        domains: [],
    };
    if (shouldResolve.nft) {
        const nftPluginPayload = await loadNftPlugin(contractAddress, selector, chainIdUint32, loadConfig);
        if (nftPluginPayload) {
            resolution.plugin.push(nftPluginPayload);
        }
        else {
            (0,lib_es/* log */.Rm)("ethereum", "no NFT plugin payload for selector " + selector + " and address " + contractAddress);
        }
    }
    // Uniswap has its own way of working, so we need to handle it separately
    // This will prevent an error if we add Uniswap to the CAL service
    if (shouldResolve.externalPlugins && contractAddress !== UNISWAP_UNIVERSAL_ROUTER_ADDRESS) {
        const contractMethodInfos = await loadInfosForContractMethod(contractAddress, selector, chainIdUint32, loadConfig);
        if (contractMethodInfos) {
            const { plugin, payload, signature, erc20OfInterest, abi } = contractMethodInfos;
            if (plugin) {
                (0,lib_es/* log */.Rm)("ethereum", `found plugin (${plugin}) for selector: ${selector}`);
                resolution.externalPlugin.push({ payload, signature });
            }
            if (erc20OfInterest && erc20OfInterest.length && abi) {
                const contract = new Interface(abi);
                const args = contract.parseTransaction(parsedTransaction).args;
                for (const path of erc20OfInterest) {
                    const erc20ContractAddress = path.split(".").reduce((value, seg) => {
                        if (seg === "-1" && Array.isArray(value)) {
                            return value[value.length - 1];
                        }
                        return value[seg];
                    }, args); // impossible(?) to type correctly as the initializer is different from the returned type
                    const externalPluginResolution = await getAdditionalDataForContract(erc20ContractAddress, chainIdUint32, loadConfig, {
                        nft: false,
                        externalPlugins: false,
                        token: true, // enforcing resolution of tokens for external plugins that need info on assets (e.g. for a swap)
                        uniswapV3: false,
                    });
                    resolution = mergeResolutions([resolution, externalPluginResolution]);
                }
            }
        }
        else {
            (0,lib_es/* log */.Rm)("ethereum", "no infos for selector " + selector);
        }
    }
    if (shouldResolve.uniswapV3) {
        const { pluginData, tokenDescriptors } = await loadInfosForUniswap(parsedTransaction, chainIdUint32);
        if (pluginData && tokenDescriptors) {
            resolution.externalPlugin.push({
                payload: pluginData.toString("hex"),
                signature: "",
            });
            resolution.erc20Tokens.push(...tokenDescriptors.map(d => d.toString("hex")));
        }
    }
    return resolution;
};
/**
 * @ignore for external documentation
 *
 * In charge of collecting the different APDUs necessary for clear signing
 * a transaction based on a specified configuration.
 */
const resolveTransaction = async (rawTxHex, loadConfig, resolutionConfig) => {
    const rawTx = ledger_Buffer.from(rawTxHex, "hex");
    const parsedTransaction = parse(`0x${rawTx.toString("hex")}`);
    const chainIdUint32 = getChainIdAsUint32(parsedTransaction.chainId);
    const { domains } = resolutionConfig;
    const contractAddress = parsedTransaction.to?.toLowerCase();
    if (!contractAddress)
        return {
            nfts: [],
            erc20Tokens: [],
            externalPlugin: [],
            plugin: [],
            domains: [],
        };
    const selector = parsedTransaction.data.length >= 10 && parsedTransaction.data.substring(0, 10);
    const resolutions = [];
    if (selector) {
        const shouldResolve = {
            token: resolutionConfig.erc20 && tokenSelectors.includes(selector),
            nft: resolutionConfig.nft &&
                nftSelectors.includes(selector),
            externalPlugins: resolutionConfig.externalPlugins,
            uniswapV3: resolutionConfig.uniswapV3,
        };
        const pluginsResolution = await loadNanoAppPlugins(contractAddress, selector, parsedTransaction, chainIdUint32, loadConfig, shouldResolve);
        if (pluginsResolution) {
            resolutions.push(pluginsResolution);
        }
        const contractResolution = await getAdditionalDataForContract(contractAddress, chainIdUint32, loadConfig, shouldResolve);
        if (contractResolution) {
            resolutions.push(contractResolution);
        }
    }
    // Passthrough to be accessible to the Domains module
    if (domains) {
        const domainResolutions = {
            domains,
        };
        resolutions.push(domainResolutions);
    }
    return mergeResolutions(resolutions);
};
/* harmony default export */ var ledger = ({
    resolveTransaction,
    signDomainResolution: signDomainResolution,
    signAddressResolution: signAddressResolution,
});
//# sourceMappingURL=index.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/modules/Domains/index.js

/**
 * @ignore for the README
 *
 * This method will execute the pipeline of actions necessary for clear signing domains.
 * Signature is provided by the backend used in @ledgerhq/domain-service
 */
const domainResolutionFlow = async (appBinding, domainDescriptor) => {
    if (!domainDescriptor)
        return;
    const { domain, address, registry, type } = domainDescriptor;
    const challenge = await appBinding.getChallenge();
    const domainAPDU = type === "forward"
        ? await ledger.signDomainResolution(domain, registry, challenge)
        : await ledger.signAddressResolution(address, registry, challenge);
    if (domainAPDU) {
        await appBinding.provideDomainName(domainAPDU);
    }
};
//# sourceMappingURL=index.js.map
;// ./node_modules/@ledgerhq/hw-app-eth/lib-es/Eth.js
/* provided dependency */ var Eth_Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];
/* eslint-disable @typescript-eslint/no-duplicate-enum-values */










const starkQuantizationTypeMap = {
    eth: 1,
    erc20: 2,
    erc721: 3,
    erc20mintable: 4,
    erc721mintable: 5,
};
const remapTransactionRelatedErrors = e => {
    if (e && e.statusCode === 0x6a80) {
        return new EthAppPleaseEnableContractData("Please enable Blind signing or Contract data in the Ethereum app Settings");
    }
    return e;
};
/**
 * Ethereum API
 *
 * @example
 * import Eth from "@ledgerhq/hw-app-eth";
 * const eth = new Eth(transport)
 */
class Eth {
    transport;
    loadConfig;
    setLoadConfig(loadConfig) {
        this.loadConfig = loadConfig;
    }
    constructor(transport, scrambleKey = "w0w", loadConfig = {}) {
        this.transport = transport;
        this.loadConfig = loadConfig;
        transport.decorateAppAPIMethods(this, [
            // "getChallange",                  | ⚠️
            // "provideERC20TokenInformation",  | Those methods are not decorated as they're
            // "setExternalPlugin",             | being used inside of the `signTransaction` flow
            // "setPlugin",                     | and shouldn't be locking the transport
            // "provideDomainName",             | ⚠️
            // "provideNFTInformation",         |
            "getAddress",
            "signTransaction",
            "signPersonalMessage",
            "getAppConfiguration",
            "signEIP712Message",
            "signEIP712HashedMessage",
            "starkGetPublicKey",
            "starkSignOrder",
            "starkSignOrder_v2",
            "starkSignTransfer",
            "starkSignTransfer_v2",
            "starkProvideQuantum",
            "starkProvideQuantum_v2",
            "starkUnsafeSign",
            "eth2GetPublicKey",
            "eth2SetWithdrawalIndex",
            "getEIP1024PublicEncryptionKey",
            "getEIP1024SharedSecret",
        ], scrambleKey);
    }
    /**
     * get Ethereum address for a given BIP 32 path.
     * @param path a path in BIP 32 format
     * @option boolDisplay optionally enable or not the display
     * @option boolChaincode optionally enable or not the chaincode request
     * @option chainId optionally display the network clearly on a Stax device
     * @return an object with a publicKey, address and (optionally) chainCode
     * @example
     * eth.getAddress("44'/60'/0'/0/0").then(o => o.address)
     */
    getAddress(path, boolDisplay, boolChaincode, chainId) {
        const paths = splitPath(path);
        let buffer = Eth_Buffer.alloc(1 + paths.length * 4);
        buffer[0] = paths.length;
        paths.forEach((element, index) => {
            buffer.writeUInt32BE(element, 1 + 4 * index);
        });
        if (chainId) {
            const chainIdBufferMask = Eth_Buffer.alloc(8, 0);
            const chainIdBuffer = Eth_Buffer.from(padHexString(new bignumber_BigNumber(chainId).toString(16)), "hex");
            chainIdBufferMask.write(chainIdBuffer.toString("hex"), chainIdBufferMask.length - chainIdBuffer.length, "hex");
            buffer = Eth_Buffer.concat([buffer, chainIdBufferMask]);
        }
        return this.transport
            .send(0xe0, 0x02, boolDisplay ? 0x01 : 0x00, boolChaincode ? 0x01 : 0x00, buffer)
            .then(response => {
            const publicKeyLength = response[0];
            const addressLength = response[1 + publicKeyLength];
            return {
                publicKey: response.slice(1, 1 + publicKeyLength).toString("hex"),
                address: "0x" +
                    response
                        .slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength)
                        .toString("ascii"),
                chainCode: boolChaincode
                    ? response
                        .slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32)
                        .toString("hex")
                    : undefined,
            };
        });
    }
    /**
     * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign.
     *
     * @param path: the BIP32 path to sign the transaction on
     * @param rawTxHex: the raw ethereum transaction in hexadecimal to sign
     * @param resolution: resolution is an object with all "resolved" metadata necessary to allow the device to clear sign information. This includes: ERC20 token information, plugins, contracts, NFT signatures,... You must explicitly provide something to avoid having a warning. By default, you can use Ledger's service or your own resolution service. See services/types.js for the contract. Setting the value to "null" will fallback everything to blind signing but will still allow the device to sign the transaction.
     * @example
     import { ledgerService } from "@ledgerhq/hw-app-eth"
     const tx = "e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080"; // raw tx to sign
     const resolution = await ledgerService.resolveTransaction(tx);
     const result = eth.signTransaction("44'/60'/0'/0/0", tx, resolution);
     console.log(result);
     */
    async signTransaction(path, rawTxHex, resolution) {
        let APDU_FIELDS;
        (function (APDU_FIELDS) {
            APDU_FIELDS[APDU_FIELDS["CLA"] = 224] = "CLA";
            APDU_FIELDS[APDU_FIELDS["INS"] = 4] = "INS";
            APDU_FIELDS[APDU_FIELDS["P1_FIRST_CHUNK"] = 0] = "P1_FIRST_CHUNK";
            APDU_FIELDS[APDU_FIELDS["P1_FOLLOWING_CHUNK"] = 128] = "P1_FOLLOWING_CHUNK";
            APDU_FIELDS[APDU_FIELDS["P2"] = 0] = "P2";
        })(APDU_FIELDS || (APDU_FIELDS = {}));
        if (resolution === undefined) {
            console.warn("hw-app-eth: signTransaction(path, rawTxHex, resolution): " +
                "please provide the 'resolution' parameter. " +
                "See https://github.com/LedgerHQ/ledgerjs/blob/master/packages/hw-app-eth/README.md " +
                "– the previous signature is deprecated and providing the 3rd 'resolution' parameter explicitly will become mandatory so you have the control on the resolution and the fallback mecanism (e.g. fallback to blind signing or not)." +
                "// Possible solution:\n" +
                " + import { ledgerService } from '@ledgerhq/hw-app-eth';\n" +
                " + const resolution = await ledgerService.resolveTransaction(rawTxHex);");
            resolution = await ledger
                .resolveTransaction(rawTxHex, this.loadConfig, {
                externalPlugins: true,
                erc20: true,
                uniswapV3: false,
            })
                .catch(e => {
                console.warn("an error occurred in resolveTransaction => fallback to blind signing: " + String(e));
                return null;
            });
        }
        // provide to the device resolved information to make it clear sign the signature
        if (resolution) {
            for (const domainDescriptor of resolution.domains) {
                await domainResolutionFlow(this, domainDescriptor).catch(e => {
                    // error during the domain flow shouldn't be blocking the signature in case of failure
                    (0,lib_es/* log */.Rm)("error", "domainResolutionFlow failed", {
                        domainDescriptor,
                        error: e,
                    });
                });
            }
            for (const plugin of resolution.plugin) {
                await this.setPlugin(plugin);
            }
            for (const { payload, signature } of resolution.externalPlugin) {
                await this.setExternalPlugin(payload, signature);
            }
            for (const nft of resolution.nfts) {
                await this.provideNFTInformation(nft);
            }
            for (const data of resolution.erc20Tokens) {
                await this.provideERC20TokenInformation(data);
            }
        }
        const rawTx = Eth_Buffer.from(rawTxHex, "hex");
        const parsedTransaction = parse(`0x${rawTx.toString("hex")}`);
        const chainId = new bignumber_BigNumber(parsedTransaction.chainId);
        const paths = splitPath(path);
        const derivationPathBuff = Eth_Buffer.alloc(1 + paths.length * 4);
        derivationPathBuff[0] = paths.length;
        paths.forEach((element, index) => {
            derivationPathBuff.writeUInt32BE(element, 1 + 4 * index);
        });
        const payloadChunks = safeChunkTransaction(rawTx, derivationPathBuff, parsedTransaction.type);
        let response;
        for (const chunk of payloadChunks) {
            const isFirstChunk = chunk === payloadChunks[0];
            response = await this.transport
                .send(APDU_FIELDS.CLA, APDU_FIELDS.INS, isFirstChunk ? APDU_FIELDS.P1_FIRST_CHUNK : APDU_FIELDS.P1_FOLLOWING_CHUNK, APDU_FIELDS.P2, chunk)
                .catch(e => {
                throw remapTransactionRelatedErrors(e);
            });
        }
        const v = getV(response[0], chainId, parsedTransaction.type);
        const r = response.subarray(1, 1 + 32).toString("hex");
        const s = response.subarray(1 + 32, 1 + 32 + 32).toString("hex");
        return { v, r, s };
    }
    /**
     * Helper to get resolution and signature of a transaction in a single method
     *
     * @param path: the BIP32 path to sign the transaction on
     * @param rawTxHex: the raw ethereum transaction in hexadecimal to sign
     * @param resolutionConfig: configuration about what should be clear signed in the transaction
     * @param throwOnError: optional parameter to determine if a failing resolution of the transaction should throw an error or not
     * @example
     const tx = "e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080"; // raw tx to sign
     const result = eth.clearSignTransaction("44'/60'/0'/0/0", tx, { erc20: true, externalPlugins: true, nft: true});
     console.log(result);
     */
    async clearSignTransaction(path, rawTxHex, resolutionConfig, throwOnError = false) {
        const resolution = await ledger
            .resolveTransaction(rawTxHex, this.loadConfig, resolutionConfig)
            .catch(e => {
            console.warn("an error occurred in resolveTransaction => fallback to blind signing: " + String(e));
            if (throwOnError) {
                throw e;
            }
            return null;
        });
        return this.signTransaction(path, rawTxHex, resolution);
    }
    /**
     */
    getAppConfiguration() {
        return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {
            return {
                arbitraryDataEnabled: response[0] & 0x01,
                erc20ProvisioningNecessary: response[0] & 0x02,
                starkEnabled: response[0] & 0x04,
                starkv2Supported: response[0] & 0x08,
                version: "" + response[1] + "." + response[2] + "." + response[3],
            };
        });
    }
    /**
    * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.
    * @example
    eth.signPersonalMessage("44'/60'/0'/0/0", Buffer.from("test").toString("hex")).then(result => {
    var v = result['v'] - 27;
    v = v.toString(16);
    if (v.length < 2) {
      v = "0" + v;
    }
    console.log("Signature 0x" + result['r'] + result['s'] + v);
    })
     */
    async signPersonalMessage(path, messageHex) {
        const paths = splitPath(path);
        let offset = 0;
        const message = Eth_Buffer.from(messageHex, "hex");
        let response;
        while (offset !== message.length) {
            const maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;
            const chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;
            const buffer = Eth_Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);
            if (offset === 0) {
                buffer[0] = paths.length;
                paths.forEach((element, index) => {
                    buffer.writeUInt32BE(element, 1 + 4 * index);
                });
                buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);
                message.copy(buffer, 1 + 4 * paths.length + 4, offset, offset + chunkSize);
            }
            else {
                message.copy(buffer, 0, offset, offset + chunkSize);
            }
            response = await this.transport.send(0xe0, 0x08, offset === 0 ? 0x00 : 0x80, 0x00, buffer);
            offset += chunkSize;
        }
        const v = response[0];
        const r = response.slice(1, 1 + 32).toString("hex");
        const s = response.slice(1 + 32, 1 + 32 + 32).toString("hex");
        return { v, r, s };
    }
    /**
    * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)
    * @example
    eth.signEIP712HashedMessage("44'/60'/0'/0/0", Buffer.from("0101010101010101010101010101010101010101010101010101010101010101").toString("hex"), Buffer.from("0202020202020202020202020202020202020202020202020202020202020202").toString("hex")).then(result => {
    var v = result['v'] - 27;
    v = v.toString(16);
    if (v.length < 2) {
      v = "0" + v;
    }
    console.log("Signature 0x" + result['r'] + result['s'] + v);
    })
     */
    signEIP712HashedMessage(path, domainSeparatorHex, hashStructMessageHex) {
        return signEIP712HashedMessage(this.transport, path, domainSeparatorHex, hashStructMessageHex);
    }
    /**
     * Sign an EIP-721 formatted message following the specification here:
     * https://github.com/LedgerHQ/app-ethereum/blob/develop/doc/ethapp.asc#sign-eth-eip-712
     * ⚠️ This method is not compatible with nano S (LNS). Make sure to use a try/catch to fallback on the signEIP712HashedMessage method ⚠️
     @example
     eth.signEIP721Message("44'/60'/0'/0/0", {
        domain: {
          chainId: 69,
          name: "Da Domain",
          verifyingContract: "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC",
          version: "1"
        },
        types: {
          "EIP712Domain": [
                { name: "name", type: "string" },
                { name: "version", type: "string" },
                { name: "chainId", type: "uint256" },
                { name: "verifyingContract", type: "address" }
            ],
          "Test": [
            { name: "contents", type: "string" }
          ]
        },
        primaryType: "Test",
        message: {contents: "Hello, Bob!"},
      })
     *
     * @param {String} path derivationPath
     * @param {Object} jsonMessage message to sign
     * @param {Boolean} fullImplem use the legacy implementation
     * @returns {Promise}
     */
    async signEIP712Message(path, jsonMessage, fullImplem = false) {
        return signEIP712Message(this.transport, path, jsonMessage, fullImplem, this.loadConfig);
    }
    /**
     * Method returning a 4 bytes TLV challenge as an hexa string
     *
     * @returns {Promise<string>}
     */
    async getChallenge() {
        let APDU_FIELDS;
        (function (APDU_FIELDS) {
            APDU_FIELDS[APDU_FIELDS["CLA"] = 224] = "CLA";
            APDU_FIELDS[APDU_FIELDS["INS"] = 32] = "INS";
            APDU_FIELDS[APDU_FIELDS["P1"] = 0] = "P1";
            APDU_FIELDS[APDU_FIELDS["P2"] = 0] = "P2";
            APDU_FIELDS[APDU_FIELDS["LC"] = 0] = "LC";
        })(APDU_FIELDS || (APDU_FIELDS = {}));
        return this.transport
            .send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1, APDU_FIELDS.P2)
            .then(res => {
            const [, fourBytesChallenge, statusCode] = new RegExp("(.*)(.{4}$)").exec(res.toString("hex")) || [];
            if (statusCode !== "9000") {
                throw new Error(`An error happened while generating the challenge. Status code: ${statusCode}`);
            }
            return `0x${fourBytesChallenge}`;
        })
            .catch(e => {
            (0,lib_es/* log */.Rm)("error", "couldn't request a challenge", e);
            throw e;
        });
    }
    /**
     * get Stark public key for a given BIP 32 path.
     * @param path a path in BIP 32 format
     * @option boolDisplay optionally enable or not the display
     * @return the Stark public key
     */
    starkGetPublicKey(path, boolDisplay) {
        const paths = splitPath(path);
        const buffer = Eth_Buffer.alloc(1 + paths.length * 4);
        buffer[0] = paths.length;
        paths.forEach((element, index) => {
            buffer.writeUInt32BE(element, 1 + 4 * index);
        });
        return this.transport
            .send(0xf0, 0x02, boolDisplay ? 0x01 : 0x00, 0x00, buffer)
            .then(response => {
            return response.slice(0, response.length - 2);
        });
    }
    /**
     * sign a Stark order
     * @param path a path in BIP 32 format
     * @option sourceTokenAddress contract address of the source token (not present for ETH)
     * @param sourceQuantization quantization used for the source token
     * @option destinationTokenAddress contract address of the destination token (not present for ETH)
     * @param destinationQuantization quantization used for the destination token
     * @param sourceVault ID of the source vault
     * @param destinationVault ID of the destination vault
     * @param amountSell amount to sell
     * @param amountBuy amount to buy
     * @param nonce transaction nonce
     * @param timestamp transaction validity timestamp
     * @return the signature
     */
    starkSignOrder(path, sourceTokenAddress, sourceQuantization, destinationTokenAddress, destinationQuantization, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {
        const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);
        const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);
        const paths = splitPath(path);
        const buffer = Eth_Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);
        let offset = 0;
        buffer[0] = paths.length;
        paths.forEach((element, index) => {
            buffer.writeUInt32BE(element, 1 + 4 * index);
        });
        offset = 1 + 4 * paths.length;
        if (sourceTokenAddressHex) {
            sourceTokenAddressHex.copy(buffer, offset);
        }
        offset += 20;
        Eth_Buffer.from(sourceQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);
        offset += 32;
        if (destinationTokenAddressHex) {
            destinationTokenAddressHex.copy(buffer, offset);
        }
        offset += 20;
        Eth_Buffer.from(destinationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);
        offset += 32;
        buffer.writeUInt32BE(sourceVault, offset);
        offset += 4;
        buffer.writeUInt32BE(destinationVault, offset);
        offset += 4;
        Eth_Buffer.from(amountSell.toString(16).padStart(16, "0"), "hex").copy(buffer, offset);
        offset += 8;
        Eth_Buffer.from(amountBuy.toString(16).padStart(16, "0"), "hex").copy(buffer, offset);
        offset += 8;
        buffer.writeUInt32BE(nonce, offset);
        offset += 4;
        buffer.writeUInt32BE(timestamp, offset);
        return this.transport.send(0xf0, 0x04, 0x01, 0x00, buffer).then(response => {
            const r = response.slice(1, 1 + 32).toString("hex");
            const s = response.slice(1 + 32, 1 + 32 + 32).toString("hex");
            return {
                r,
                s,
            };
        });
    }
    /**
     * sign a Stark order using the Starkex V2 protocol
     * @param path a path in BIP 32 format
     * @option sourceTokenAddress contract address of the source token (not present for ETH)
     * @param sourceQuantizationType quantization type used for the source token
     * @option sourceQuantization quantization used for the source token (not present for erc 721 or mintable erc 721)
     * @option sourceMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the source token
     * @option destinationTokenAddress contract address of the destination token (not present for ETH)
     * @param destinationQuantizationType quantization type used for the destination token
     * @option destinationQuantization quantization used for the destination token (not present for erc 721 or mintable erc 721)
     * @option destinationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the destination token
     * @param sourceVault ID of the source vault
     * @param destinationVault ID of the destination vault
     * @param amountSell amount to sell
     * @param amountBuy amount to buy
     * @param nonce transaction nonce
     * @param timestamp transaction validity timestamp
     * @return the signature
     */
    starkSignOrder_v2(path, sourceTokenAddress, sourceQuantizationType, sourceQuantization, sourceMintableBlobOrTokenId, destinationTokenAddress, destinationQuantizationType, destinationQuantization, destinationMintableBlobOrTokenId, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {
        const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);
        const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);
        if (!(sourceQuantizationType in starkQuantizationTypeMap)) {
            throw new Error("eth.starkSignOrderv2 invalid source quantization type=" + sourceQuantizationType);
        }
        if (!(destinationQuantizationType in starkQuantizationTypeMap)) {
            throw new Error("eth.starkSignOrderv2 invalid destination quantization type=" + destinationQuantizationType);
        }
        const paths = splitPath(path);
        const buffer = Eth_Buffer.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 1 + 20 + 32 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);
        let offset = 0;
        buffer[0] = paths.length;
        paths.forEach((element, index) => {
            buffer.writeUInt32BE(element, 1 + 4 * index);
        });
        offset = 1 + 4 * paths.length;
        buffer[offset] = starkQuantizationTypeMap[sourceQuantizationType];
        offset++;
        if (sourceTokenAddressHex) {
            sourceTokenAddressHex.copy(buffer, offset);
        }
        offset += 20;
        if (sourceQuantization) {
            Eth_Buffer.from(sourceQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);
        }
        offset += 32;
        if (sourceMintableBlobOrTokenId) {
            Eth_Buffer.from(sourceMintableBlobOrTokenId.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);
        }
        offset += 32;
        buffer[offset] = starkQuantizationTypeMap[destinationQuantizationType];
        offset++;
        if (destinationTokenAddressHex) {
            destinationTokenAddressHex.copy(buffer, offset);
        }
        offset += 20;
        if (destinationQuantization) {
            Eth_Buffer.from(destinationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);
        }
        offset += 32;
        if (destinationMintableBlobOrTokenId) {
            Eth_Buffer.from(destinationMintableBlobOrTokenId.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);
        }
        offset += 32;
        buffer.writeUInt32BE(sourceVault, offset);
        offset += 4;
        buffer.writeUInt32BE(destinationVault, offset);
        offset += 4;
        Eth_Buffer.from(amountSell.toString(16).padStart(16, "0"), "hex").copy(buffer, offset);
        offset += 8;
        Eth_Buffer.from(amountBuy.toString(16).padStart(16, "0"), "hex").copy(buffer, offset);
        offset += 8;
        buffer.writeUInt32BE(nonce, offset);
        offset += 4;
        buffer.writeUInt32BE(timestamp, offset);
        return this.transport.send(0xf0, 0x04, 0x03, 0x00, buffer).then(response => {
            const r = response.slice(1, 1 + 32).toString("hex");
            const s = response.slice(1 + 32, 1 + 32 + 32).toString("hex");
            return {
                r,
                s,
            };
        });
    }
    /**
     * sign a Stark transfer
     * @param path a path in BIP 32 format
     * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)
     * @param transferQuantization quantization used for the token to be transferred
     * @param targetPublicKey target Stark public key
     * @param sourceVault ID of the source vault
     * @param destinationVault ID of the destination vault
     * @param amountTransfer amount to transfer
     * @param nonce transaction nonce
     * @param timestamp transaction validity timestamp
     * @return the signature
     */
    starkSignTransfer(path, transferTokenAddress, transferQuantization, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp) {
        const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);
        const targetPublicKeyHex = hexBuffer(targetPublicKey);
        const paths = splitPath(path);
        const buffer = Eth_Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4, 0);
        let offset = 0;
        buffer[0] = paths.length;
        paths.forEach((element, index) => {
            buffer.writeUInt32BE(element, 1 + 4 * index);
        });
        offset = 1 + 4 * paths.length;
        if (transferTokenAddressHex) {
            transferTokenAddressHex.copy(buffer, offset);
        }
        offset += 20;
        Eth_Buffer.from(transferQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);
        offset += 32;
        targetPublicKeyHex.copy(buffer, offset);
        offset += 32;
        buffer.writeUInt32BE(sourceVault, offset);
        offset += 4;
        buffer.writeUInt32BE(destinationVault, offset);
        offset += 4;
        Eth_Buffer.from(amountTransfer.toString(16).padStart(16, "0"), "hex").copy(buffer, offset);
        offset += 8;
        buffer.writeUInt32BE(nonce, offset);
        offset += 4;
        buffer.writeUInt32BE(timestamp, offset);
        return this.transport.send(0xf0, 0x04, 0x02, 0x00, buffer).then(response => {
            const r = response.slice(1, 1 + 32).toString("hex");
            const s = response.slice(1 + 32, 1 + 32 + 32).toString("hex");
            return {
                r,
                s,
            };
        });
    }
    /**
     * sign a Stark transfer or conditional transfer using the Starkex V2 protocol
     * @param path a path in BIP 32 format
     * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)
     * @param transferQuantizationType quantization type used for the token to be transferred
     * @option transferQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)
     * @option transferMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the token to be transferred
     * @param targetPublicKey target Stark public key
     * @param sourceVault ID of the source vault
     * @param destinationVault ID of the destination vault
     * @param amountTransfer amount to transfer
     * @param nonce transaction nonce
     * @param timestamp transaction validity timestamp
     * @option conditionalTransferAddress onchain address of the condition for a conditional transfer
     * @option conditionalTransferFact fact associated to the condition for a conditional transfer
     * @return the signature
     */
    starkSignTransfer_v2(path, transferTokenAddress, transferQuantizationType, transferQuantization, transferMintableBlobOrTokenId, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp, conditionalTransferAddress, conditionalTransferFact) {
        const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);
        const targetPublicKeyHex = hexBuffer(targetPublicKey);
        const conditionalTransferAddressHex = maybeHexBuffer(conditionalTransferAddress);
        if (!(transferQuantizationType in starkQuantizationTypeMap)) {
            throw new Error("eth.starkSignTransferv2 invalid quantization type=" + transferQuantizationType);
        }
        const paths = splitPath(path);
        const buffer = Eth_Buffer.alloc(1 +
            paths.length * 4 +
            1 +
            20 +
            32 +
            32 +
            32 +
            4 +
            4 +
            8 +
            4 +
            4 +
            (conditionalTransferAddressHex ? 32 + 20 : 0), 0);
        let offset = 0;
        buffer[0] = paths.length;
        paths.forEach((element, index) => {
            buffer.writeUInt32BE(element, 1 + 4 * index);
        });
        offset = 1 + 4 * paths.length;
        buffer[offset] = starkQuantizationTypeMap[transferQuantizationType];
        offset++;
        if (transferTokenAddressHex) {
            transferTokenAddressHex.copy(buffer, offset);
        }
        offset += 20;
        if (transferQuantization) {
            Eth_Buffer.from(transferQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);
        }
        offset += 32;
        if (transferMintableBlobOrTokenId) {
            Eth_Buffer.from(transferMintableBlobOrTokenId.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);
        }
        offset += 32;
        targetPublicKeyHex.copy(buffer, offset);
        offset += 32;
        buffer.writeUInt32BE(sourceVault, offset);
        offset += 4;
        buffer.writeUInt32BE(destinationVault, offset);
        offset += 4;
        Eth_Buffer.from(amountTransfer.toString(16).padStart(16, "0"), "hex").copy(buffer, offset);
        offset += 8;
        buffer.writeUInt32BE(nonce, offset);
        offset += 4;
        buffer.writeUInt32BE(timestamp, offset);
        if (conditionalTransferAddressHex && conditionalTransferFact) {
            offset += 4;
            Eth_Buffer.from(conditionalTransferFact.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);
            offset += 32;
            conditionalTransferAddressHex.copy(buffer, offset);
        }
        return this.transport
            .send(0xf0, 0x04, conditionalTransferAddressHex ? 0x05 : 0x04, 0x00, buffer)
            .then(response => {
            const r = response.slice(1, 1 + 32).toString("hex");
            const s = response.slice(1 + 32, 1 + 32 + 32).toString("hex");
            return {
                r,
                s,
            };
        });
    }
    /**
     * provide quantization information before singing a deposit or withdrawal Stark powered contract call
     *
     * It shall be run following a provideERC20TokenInformation call for the given contract
     *
     * @param operationContract contract address of the token to be transferred (not present for ETH)
     * @param operationQuantization quantization used for the token to be transferred
     */
    starkProvideQuantum(operationContract, operationQuantization) {
        const operationContractHex = maybeHexBuffer(operationContract);
        const buffer = Eth_Buffer.alloc(20 + 32, 0);
        if (operationContractHex) {
            operationContractHex.copy(buffer, 0);
        }
        Eth_Buffer.from(operationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer, 20);
        return this.transport.send(0xf0, 0x08, 0x00, 0x00, buffer).then(() => true, e => {
            if (e && e.statusCode === 0x6d00) {
                // this case happen for ETH application versions not supporting Stark extensions
                return false;
            }
            throw e;
        });
    }
    /**
     * provide quantization information before singing a deposit or withdrawal Stark powered contract call using the Starkex V2 protocol
     *
     * It shall be run following a provideERC20TokenInformation call for the given contract
     *
     * @param operationContract contract address of the token to be transferred (not present for ETH)
     * @param operationQuantizationType quantization type of the token to be transferred
     * @option operationQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)
     * @option operationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) of the token to be transferred
     */
    starkProvideQuantum_v2(operationContract, operationQuantizationType, operationQuantization, operationMintableBlobOrTokenId) {
        const operationContractHex = maybeHexBuffer(operationContract);
        if (!(operationQuantizationType in starkQuantizationTypeMap)) {
            throw new Error("eth.starkProvideQuantumV2 invalid quantization type=" + operationQuantizationType);
        }
        const buffer = Eth_Buffer.alloc(20 + 32 + 32, 0);
        let offset = 0;
        if (operationContractHex) {
            operationContractHex.copy(buffer, offset);
        }
        offset += 20;
        if (operationQuantization) {
            Eth_Buffer.from(operationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);
        }
        offset += 32;
        if (operationMintableBlobOrTokenId) {
            Eth_Buffer.from(operationMintableBlobOrTokenId.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);
        }
        return this.transport
            .send(0xf0, 0x08, starkQuantizationTypeMap[operationQuantizationType], 0x00, buffer)
            .then(() => true, e => {
            if (e && e.statusCode === 0x6d00) {
                // this case happen for ETH application versions not supporting Stark extensions
                return false;
            }
            throw e;
        });
    }
    /**
     * sign the given hash over the Stark curve
     * It is intended for speed of execution in case an unknown Stark model is pushed and should be avoided as much as possible.
     * @param path a path in BIP 32 format
     * @param hash hexadecimal hash to sign
     * @return the signature
     */
    starkUnsafeSign(path, hash) {
        const hashHex = hexBuffer(hash);
        const paths = splitPath(path);
        const buffer = Eth_Buffer.alloc(1 + paths.length * 4 + 32);
        let offset = 0;
        buffer[0] = paths.length;
        paths.forEach((element, index) => {
            buffer.writeUInt32BE(element, 1 + 4 * index);
        });
        offset = 1 + 4 * paths.length;
        hashHex.copy(buffer, offset);
        return this.transport.send(0xf0, 0x0a, 0x00, 0x00, buffer).then(response => {
            const r = response.slice(1, 1 + 32).toString("hex");
            const s = response.slice(1 + 32, 1 + 32 + 32).toString("hex");
            return {
                r,
                s,
            };
        });
    }
    /**
     * get an Ethereum 2 BLS-12 381 public key for a given BIP 32 path.
     * @param path a path in BIP 32 format
     * @option boolDisplay optionally enable or not the display
     * @return an object with a publicKey
     * @example
     * eth.eth2GetPublicKey("12381/3600/0/0").then(o => o.publicKey)
     */
    eth2GetPublicKey(path, boolDisplay) {
        const paths = splitPath(path);
        const buffer = Eth_Buffer.alloc(1 + paths.length * 4);
        buffer[0] = paths.length;
        paths.forEach((element, index) => {
            buffer.writeUInt32BE(element, 1 + 4 * index);
        });
        return this.transport
            .send(0xe0, 0x0e, boolDisplay ? 0x01 : 0x00, 0x00, buffer)
            .then(response => {
            return {
                publicKey: response.slice(0, -2).toString("hex"),
            };
        });
    }
    /**
     * Set the index of a Withdrawal key used as withdrawal credentials in an ETH 2 deposit contract call signature
     *
     * It shall be run before the ETH 2 deposit transaction is signed. If not called, the index is set to 0
     *
     * @param withdrawalIndex index path in the EIP 2334 path m/12381/3600/withdrawalIndex/0
     * @return True if the method was executed successfully
     */
    eth2SetWithdrawalIndex(withdrawalIndex) {
        const buffer = Eth_Buffer.alloc(4, 0);
        buffer.writeUInt32BE(withdrawalIndex, 0);
        return this.transport.send(0xe0, 0x10, 0x00, 0x00, buffer).then(() => true, e => {
            if (e && e.statusCode === 0x6d00) {
                // this case happen for ETH application versions not supporting ETH 2
                return false;
            }
            throw e;
        });
    }
    /**
     * get a public encryption key on Curve25519 according to EIP 1024
     * @param path a path in BIP 32 format
     * @option boolDisplay optionally enable or not the display
     * @return an object with a publicKey
     * @example
     * eth.getEIP1024PublicEncryptionKey("44'/60'/0'/0/0").then(o => o.publicKey)
     */
    getEIP1024PublicEncryptionKey(path, boolDisplay) {
        const paths = splitPath(path);
        const buffer = Eth_Buffer.alloc(1 + paths.length * 4);
        buffer[0] = paths.length;
        paths.forEach((element, index) => {
            buffer.writeUInt32BE(element, 1 + 4 * index);
        });
        return this.transport
            .send(0xe0, 0x18, boolDisplay ? 0x01 : 0x00, 0x00, buffer)
            .then(response => {
            return {
                publicKey: response.slice(0, -2).toString("hex"),
            };
        });
    }
    /**
     * get a shared secret on Curve25519 according to EIP 1024
     * @param path a path in BIP 32 format
     * @param remotePublicKeyHex remote Curve25519 public key
     * @option boolDisplay optionally enable or not the display
     * @return an object with a shared secret
     * @example
     * eth.getEIP1024SharedSecret("44'/60'/0'/0/0", "87020e80af6e07a6e4697f091eacadb9e7e6629cb7e5a8a371689a3ed53b3d64").then(o => o.sharedSecret)
     */
    getEIP1024SharedSecret(path, remotePublicKeyHex, boolDisplay) {
        const paths = splitPath(path);
        const remotePublicKey = hexBuffer(remotePublicKeyHex);
        const buffer = Eth_Buffer.alloc(1 + paths.length * 4 + 32);
        let offset = 0;
        buffer[0] = paths.length;
        paths.forEach((element, index) => {
            buffer.writeUInt32BE(element, 1 + 4 * index);
        });
        offset = 1 + 4 * paths.length;
        remotePublicKey.copy(buffer, offset);
        return this.transport
            .send(0xe0, 0x18, boolDisplay ? 0x01 : 0x00, 0x01, buffer)
            .then(response => {
            return {
                sharedSecret: response.slice(0, -2).toString("hex"),
            };
        });
    }
    /**
     * provides a trusted description of an ERC 20 token to associate a contract address with a ticker and number of decimals.
     *
     * @param data stringified buffer of ERC20 signature
     * @returns a boolean
     */
    provideERC20TokenInformation(data) {
        const buffer = Eth_Buffer.from(data, "hex");
        return this.transport.send(0xe0, 0x0a, 0x00, 0x00, buffer).then(() => true, e => {
            if (e && e.statusCode === 0x6d00) {
                // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.
                // we return a flag to know if the call was effective or not
                return false;
            }
            throw e;
        });
    }
    /**
     * provides the name of a trusted binding of a plugin with a contract address and a supported method selector. This plugin will be called to interpret contract data in the following transaction signing command.
     *
     * @param payload external plugin data
     * @option signature optionally signature for the plugin
     * @returns a boolean
     */
    setExternalPlugin(payload, signature) {
        const payloadBuffer = Eth_Buffer.from(payload, "hex");
        const signatureBuffer = Eth_Buffer.from(signature ?? "", "hex");
        const buffer = Eth_Buffer.concat([payloadBuffer, signatureBuffer]);
        return this.transport.send(0xe0, 0x12, 0x00, 0x00, buffer).then(() => true, e => {
            if (e && e.statusCode === 0x6a80) {
                // this case happen when the plugin name is too short or too long
                return false;
            }
            else if (e && e.statusCode === 0x6984) {
                // this case happen when the plugin requested is not installed on the device
                return false;
            }
            else if (e && e.statusCode === 0x6d00) {
                // this case happen for older version of ETH app
                return false;
            }
            throw e;
        });
    }
    /**
     * provides the name of a trusted binding of a plugin with a contract address and a supported method selector. This plugin will be called to interpret contract data in the following transaction signing command.
     *
     * @param data stringified buffer of plugin signature
     * @returns a boolean
     */
    setPlugin(data) {
        const buffer = Eth_Buffer.from(data, "hex");
        return this.transport.send(0xe0, 0x16, 0x00, 0x00, buffer).then(() => true, e => {
            if (e && e.statusCode === 0x6a80) {
                // this case happen when the plugin name is too short or too long
                return false;
            }
            else if (e && e.statusCode === 0x6984) {
                // this case happen when the plugin requested is not installed on the device
                return false;
            }
            else if (e && e.statusCode === 0x6d00) {
                // this case happen for older version of ETH app
                return false;
            }
            throw e;
        });
    }
    /**
     *  provides a trusted description of an NFT to associate a contract address with a collectionName.
     *
     * @param data stringified buffer of the NFT description
     * @returns a boolean
     */
    provideNFTInformation(data) {
        const buffer = Eth_Buffer.from(data, "hex");
        return this.transport.send(0xe0, 0x14, 0x00, 0x00, buffer).then(() => true, e => {
            if (e && e.statusCode === 0x6d00) {
                // older version of ETH app => error because we don't allow blind sign when NFT is explicitly requested to be resolved.
                throw new EthAppNftNotSupported();
            }
            throw e;
        });
    }
    /**
     * provides a domain name (like ENS) to be displayed during transactions in place of the address it is associated to. It shall be run just before a transaction involving the associated address that would be displayed on the device.
     *
     * @param data an stringied buffer of some TLV encoded data to represent the domain
     * @returns a boolean
     */
    async provideDomainName(data) {
        let APDU_FIELDS;
        (function (APDU_FIELDS) {
            APDU_FIELDS[APDU_FIELDS["CLA"] = 224] = "CLA";
            APDU_FIELDS[APDU_FIELDS["INS"] = 34] = "INS";
            APDU_FIELDS[APDU_FIELDS["P1_FIRST_CHUNK"] = 1] = "P1_FIRST_CHUNK";
            APDU_FIELDS[APDU_FIELDS["P1_FOLLOWING_CHUNK"] = 0] = "P1_FOLLOWING_CHUNK";
            APDU_FIELDS[APDU_FIELDS["P2"] = 0] = "P2";
        })(APDU_FIELDS || (APDU_FIELDS = {}));
        const buffer = Eth_Buffer.from(data, "hex");
        const payload = Eth_Buffer.concat([Eth_Buffer.from(intAsHexBytes(buffer.length, 2), "hex"), buffer]);
        const bufferChunks = new Array(Math.ceil(payload.length / 256))
            .fill(null)
            .map((_, i) => payload.slice(i * 255, (i + 1) * 255));
        for (const chunk of bufferChunks) {
            const isFirstChunk = chunk === bufferChunks[0];
            await this.transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, isFirstChunk ? APDU_FIELDS.P1_FIRST_CHUNK : APDU_FIELDS.P1_FOLLOWING_CHUNK, APDU_FIELDS.P2, chunk);
        }
        return true;
    }
}
//# sourceMappingURL=Eth.js.map

/***/ }),

/***/ "./node_modules/@ledgerhq/logs/lib-es/index.js":
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PR: function() { return /* binding */ LocalTracer; },
/* harmony export */   Rm: function() { return /* binding */ log; }
/* harmony export */ });
/* unused harmony exports trace, listen */
let id = 0;
const subscribers = [];
/**
 * Logs something
 *
 * @param type a namespaced identifier of the log (it is not a level like "debug", "error" but more like "apdu-in", "apdu-out", etc...)
 * @param message a clear message of the log associated to the type
 */
const log = (type, message, data) => {
    const obj = {
        type,
        id: String(++id),
        date: new Date(),
    };
    if (message)
        obj.message = message;
    if (data)
        obj.data = data;
    dispatch(obj);
};
/**
 * A simple tracer function, only expanding the existing log function
 *
 * Its goal is to capture more context than a log function.
 * This is simple for now, but can be improved later.
 *
 * @param context Anything representing the context where the log occurred
 */
const trace = ({ type, message, data, context, }) => {
    const obj = {
        type,
        id: String(++id),
        date: new Date(),
    };
    if (message)
        obj.message = message;
    if (data)
        obj.data = data;
    if (context)
        obj.context = context;
    dispatch(obj);
};
/**
 * A simple tracer class, that can be used to avoid repetition when using the `trace` function
 *
 * Its goal is to capture more context than a log function.
 * This is simple for now, but can be improved later.
 *
 * @param type A given type (not level) for the current local tracer ("hw", "withDevice", etc.)
 * @param context Anything representing the context where the log occurred
 */
class LocalTracer {
    type;
    context;
    constructor(type, context) {
        this.type = type;
        this.context = context;
    }
    trace(message, data) {
        trace({
            type: this.type,
            message,
            data,
            context: this.context,
        });
    }
    getContext() {
        return this.context;
    }
    setContext(context) {
        this.context = context;
    }
    updateContext(contextToAdd) {
        this.context = { ...this.context, ...contextToAdd };
    }
    getType() {
        return this.type;
    }
    setType(type) {
        this.type = type;
    }
    /**
     * Create a new instance of the LocalTracer with an updated `type`
     *
     * It does not mutate the calling instance, but returns a new LocalTracer,
     * following a simple builder pattern.
     */
    withType(type) {
        return new LocalTracer(type, this.context);
    }
    /**
     * Create a new instance of the LocalTracer with a new `context`
     *
     * It does not mutate the calling instance, but returns a new LocalTracer,
     * following a simple builder pattern.
     *
     * @param context A TraceContext, that can undefined to reset the context
     */
    withContext(context) {
        return new LocalTracer(this.type, context);
    }
    /**
     * Create a new instance of the LocalTracer with an updated `context`,
     * on which an additional context is merged with the existing one.
     *
     * It does not mutate the calling instance, but returns a new LocalTracer,
     * following a simple builder pattern.
     */
    withUpdatedContext(contextToAdd) {
        return new LocalTracer(this.type, { ...this.context, ...contextToAdd });
    }
}
/**
 * Adds a subscribers to the emitted logs.
 *
 * @param cb that is called for each future log() with the Log object
 * @return a function that can be called to unsubscribe the listener
 */
const listen = (cb) => {
    subscribers.push(cb);
    return () => {
        const i = subscribers.indexOf(cb);
        if (i !== -1) {
            // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952
            subscribers[i] = subscribers[subscribers.length - 1];
            subscribers.pop();
        }
    };
};
function dispatch(log) {
    for (let i = 0; i < subscribers.length; i++) {
        try {
            subscribers[i](log);
        }
        catch (e) {
            console.error(e);
        }
    }
}
if (typeof window !== "undefined") {
    window.__ledgerLogsListen = listen;
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/js-sha3/src/sha3.js":
/***/ (function(module, exports, __webpack_require__) {

/* provided dependency */ var process = __webpack_require__("process/browser");
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
/*jslint bitwise: true */
(function () {
  'use strict';

  var INPUT_ERROR = 'input is invalid type';
  var FINALIZE_ERROR = 'finalize already called';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};
  if (root.JS_SHA3_NO_WINDOW) {
    WINDOW = false;
  }
  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = ({});
  } else if (WEB_WORKER) {
    root = self;
  }
  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && "object" === 'object' && module.exports;
  var AMD =  true && __webpack_require__.amdO;
  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var PADDING = [6, 1536, 393216, 100663296];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  var BITS = [224, 256, 384, 512];
  var SHAKE_BITS = [128, 256];
  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
  var CSHAKE_BYTEPAD = {
    '128': 168,
    '256': 136
  };

  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function (bits, padding, outputType) {
    return function (message) {
      return new Keccak(bits, padding, bits).update(message)[outputType]();
    };
  };

  var createShakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits) {
      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    };
  };

  var createCshakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits, n, s) {
      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
    };
  };

  var createKmacOutputMethod = function (bits, padding, outputType) {
    return function (key, message, outputBits, s) {
      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
    };
  };

  var createOutputMethods = function (method, createMethod, bits, padding) {
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createMethod(bits, padding, type);
    }
    return method;
  };

  var createMethod = function (bits, padding) {
    var method = createOutputMethod(bits, padding, 'hex');
    method.create = function () {
      return new Keccak(bits, padding, bits);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    return createOutputMethods(method, createOutputMethod, bits, padding);
  };

  var createShakeMethod = function (bits, padding) {
    var method = createShakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits) {
      return new Keccak(bits, padding, outputBits);
    };
    method.update = function (message, outputBits) {
      return method.create(outputBits).update(message);
    };
    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
  };

  var createCshakeMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createCshakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits, n, s) {
      if (!n && !s) {
        return methods['shake' + bits].create(outputBits);
      } else {
        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
      }
    };
    method.update = function (message, outputBits, n, s) {
      return method.create(outputBits, n, s).update(message);
    };
    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
  };

  var createKmacMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createKmacOutputMethod(bits, padding, 'hex');
    method.create = function (key, outputBits, s) {
      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
    };
    method.update = function (key, message, outputBits, s) {
      return method.create(key, outputBits, s).update(message);
    };
    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
  };

  var algorithms = [
    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
  ];

  var methods = {}, methodNames = [];

  for (var i = 0; i < algorithms.length; ++i) {
    var algorithm = algorithms[i];
    var bits = algorithm.bits;
    for (var j = 0; j < bits.length; ++j) {
      var methodName = algorithm.name + '_' + bits[j];
      methodNames.push(methodName);
      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
      if (algorithm.name !== 'sha3') {
        var newMethodName = algorithm.name + bits[j];
        methodNames.push(newMethodName);
        methods[newMethodName] = methods[methodName];
      }
    }
  }

  function Keccak(bits, padding, outputBits) {
    this.blocks = [];
    this.s = [];
    this.padding = padding;
    this.outputBits = outputBits;
    this.reset = true;
    this.finalized = false;
    this.block = 0;
    this.start = 0;
    this.blockCount = (1600 - (bits << 1)) >> 5;
    this.byteCount = this.blockCount << 2;
    this.outputBlocks = outputBits >> 5;
    this.extraBytes = (outputBits & 31) >> 3;

    for (var i = 0; i < 50; ++i) {
      this.s[i] = 0;
    }
  }

  Keccak.prototype.update = function (message) {
    if (this.finalized) {
      throw new Error(FINALIZE_ERROR);
    }
    var notString, type = typeof message;
    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
      blockCount = this.blockCount, index = 0, s = this.s, i, code;

    while (index < length) {
      if (this.reset) {
        this.reset = false;
        blocks[0] = this.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (notString) {
        for (i = this.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }
      this.lastByteIndex = i;
      if (i >= byteCount) {
        this.start = i - byteCount;
        this.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        this.reset = true;
      } else {
        this.start = i;
      }
    }
    return this;
  };

  Keccak.prototype.encode = function (x, right) {
    var o = x & 255, n = 1;
    var bytes = [o];
    x = x >> 8;
    o = x & 255;
    while (o > 0) {
      bytes.unshift(o);
      x = x >> 8;
      o = x & 255;
      ++n;
    }
    if (right) {
      bytes.push(n);
    } else {
      bytes.unshift(n);
    }
    this.update(bytes);
    return bytes.length;
  };

  Keccak.prototype.encodeString = function (str) {
    var notString, type = typeof str;
    if (type !== 'string') {
      if (type === 'object') {
        if (str === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
          str = new Uint8Array(str);
        } else if (!Array.isArray(str)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var bytes = 0, length = str.length;
    if (notString) {
      bytes = length;
    } else {
      for (var i = 0; i < str.length; ++i) {
        var code = str.charCodeAt(i);
        if (code < 0x80) {
          bytes += 1;
        } else if (code < 0x800) {
          bytes += 2;
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes += 3;
        } else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
          bytes += 4;
        }
      }
    }
    bytes += this.encode(bytes * 8);
    this.update(str);
    return bytes;
  };

  Keccak.prototype.bytepad = function (strs, w) {
    var bytes = this.encode(w);
    for (var i = 0; i < strs.length; ++i) {
      bytes += this.encodeString(strs[i]);
    }
    var paddingBytes = w - bytes % w;
    var zeros = [];
    zeros.length = paddingBytes;
    this.update(zeros);
    return this;
  };

  Keccak.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
    blocks[i >> 2] |= this.padding[i & 3];
    if (this.lastByteIndex === this.byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f(s);
  };

  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var hex = '', block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
      }
      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }
    if (extraBytes) {
      block = s[i];
      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
      if (extraBytes > 1) {
        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
      }
      if (extraBytes > 2) {
        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
      }
    }
    return hex;
  };

  Keccak.prototype.arrayBuffer = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var bytes = this.outputBits >> 3;
    var buffer;
    if (extraBytes) {
      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
    } else {
      buffer = new ArrayBuffer(bytes);
    }
    var array = new Uint32Array(buffer);
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        array[j] = s[i];
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      array[i] = s[i];
      buffer = buffer.slice(0, bytes);
    }
    return buffer;
  };

  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

  Keccak.prototype.digest = Keccak.prototype.array = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var array = [], offset, block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        array[offset + 1] = (block >> 8) & 0xFF;
        array[offset + 2] = (block >> 16) & 0xFF;
        array[offset + 3] = (block >> 24) & 0xFF;
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      offset = j << 2;
      block = s[i];
      array[offset] = block & 0xFF;
      if (extraBytes > 1) {
        array[offset + 1] = (block >> 8) & 0xFF;
      }
      if (extraBytes > 2) {
        array[offset + 2] = (block >> 16) & 0xFF;
      }
    }
    return array;
  };

  function Kmac(bits, padding, outputBits) {
    Keccak.call(this, bits, padding, outputBits);
  }

  Kmac.prototype = new Keccak();

  Kmac.prototype.finalize = function () {
    this.encode(this.outputBits, true);
    return Keccak.prototype.finalize.call(this);
  };

  var f = function (s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = (s[11] << 4) | (s[10] >>> 28);
      b33 = (s[10] << 4) | (s[11] >>> 28);
      b14 = (s[20] << 3) | (s[21] >>> 29);
      b15 = (s[21] << 3) | (s[20] >>> 29);
      b46 = (s[31] << 9) | (s[30] >>> 23);
      b47 = (s[30] << 9) | (s[31] >>> 23);
      b28 = (s[40] << 18) | (s[41] >>> 14);
      b29 = (s[41] << 18) | (s[40] >>> 14);
      b20 = (s[2] << 1) | (s[3] >>> 31);
      b21 = (s[3] << 1) | (s[2] >>> 31);
      b2 = (s[13] << 12) | (s[12] >>> 20);
      b3 = (s[12] << 12) | (s[13] >>> 20);
      b34 = (s[22] << 10) | (s[23] >>> 22);
      b35 = (s[23] << 10) | (s[22] >>> 22);
      b16 = (s[33] << 13) | (s[32] >>> 19);
      b17 = (s[32] << 13) | (s[33] >>> 19);
      b48 = (s[42] << 2) | (s[43] >>> 30);
      b49 = (s[43] << 2) | (s[42] >>> 30);
      b40 = (s[5] << 30) | (s[4] >>> 2);
      b41 = (s[4] << 30) | (s[5] >>> 2);
      b22 = (s[14] << 6) | (s[15] >>> 26);
      b23 = (s[15] << 6) | (s[14] >>> 26);
      b4 = (s[25] << 11) | (s[24] >>> 21);
      b5 = (s[24] << 11) | (s[25] >>> 21);
      b36 = (s[34] << 15) | (s[35] >>> 17);
      b37 = (s[35] << 15) | (s[34] >>> 17);
      b18 = (s[45] << 29) | (s[44] >>> 3);
      b19 = (s[44] << 29) | (s[45] >>> 3);
      b10 = (s[6] << 28) | (s[7] >>> 4);
      b11 = (s[7] << 28) | (s[6] >>> 4);
      b42 = (s[17] << 23) | (s[16] >>> 9);
      b43 = (s[16] << 23) | (s[17] >>> 9);
      b24 = (s[26] << 25) | (s[27] >>> 7);
      b25 = (s[27] << 25) | (s[26] >>> 7);
      b6 = (s[36] << 21) | (s[37] >>> 11);
      b7 = (s[37] << 21) | (s[36] >>> 11);
      b38 = (s[47] << 24) | (s[46] >>> 8);
      b39 = (s[46] << 24) | (s[47] >>> 8);
      b30 = (s[8] << 27) | (s[9] >>> 5);
      b31 = (s[9] << 27) | (s[8] >>> 5);
      b12 = (s[18] << 20) | (s[19] >>> 12);
      b13 = (s[19] << 20) | (s[18] >>> 12);
      b44 = (s[29] << 7) | (s[28] >>> 25);
      b45 = (s[28] << 7) | (s[29] >>> 25);
      b26 = (s[38] << 8) | (s[39] >>> 24);
      b27 = (s[39] << 8) | (s[38] >>> 24);
      b8 = (s[48] << 14) | (s[49] >>> 18);
      b9 = (s[49] << 14) | (s[48] >>> 18);

      s[0] = b0 ^ (~b2 & b4);
      s[1] = b1 ^ (~b3 & b5);
      s[10] = b10 ^ (~b12 & b14);
      s[11] = b11 ^ (~b13 & b15);
      s[20] = b20 ^ (~b22 & b24);
      s[21] = b21 ^ (~b23 & b25);
      s[30] = b30 ^ (~b32 & b34);
      s[31] = b31 ^ (~b33 & b35);
      s[40] = b40 ^ (~b42 & b44);
      s[41] = b41 ^ (~b43 & b45);
      s[2] = b2 ^ (~b4 & b6);
      s[3] = b3 ^ (~b5 & b7);
      s[12] = b12 ^ (~b14 & b16);
      s[13] = b13 ^ (~b15 & b17);
      s[22] = b22 ^ (~b24 & b26);
      s[23] = b23 ^ (~b25 & b27);
      s[32] = b32 ^ (~b34 & b36);
      s[33] = b33 ^ (~b35 & b37);
      s[42] = b42 ^ (~b44 & b46);
      s[43] = b43 ^ (~b45 & b47);
      s[4] = b4 ^ (~b6 & b8);
      s[5] = b5 ^ (~b7 & b9);
      s[14] = b14 ^ (~b16 & b18);
      s[15] = b15 ^ (~b17 & b19);
      s[24] = b24 ^ (~b26 & b28);
      s[25] = b25 ^ (~b27 & b29);
      s[34] = b34 ^ (~b36 & b38);
      s[35] = b35 ^ (~b37 & b39);
      s[44] = b44 ^ (~b46 & b48);
      s[45] = b45 ^ (~b47 & b49);
      s[6] = b6 ^ (~b8 & b0);
      s[7] = b7 ^ (~b9 & b1);
      s[16] = b16 ^ (~b18 & b10);
      s[17] = b17 ^ (~b19 & b11);
      s[26] = b26 ^ (~b28 & b20);
      s[27] = b27 ^ (~b29 & b21);
      s[36] = b36 ^ (~b38 & b30);
      s[37] = b37 ^ (~b39 & b31);
      s[46] = b46 ^ (~b48 & b40);
      s[47] = b47 ^ (~b49 & b41);
      s[8] = b8 ^ (~b0 & b2);
      s[9] = b9 ^ (~b1 & b3);
      s[18] = b18 ^ (~b10 & b12);
      s[19] = b19 ^ (~b11 & b13);
      s[28] = b28 ^ (~b20 & b22);
      s[29] = b29 ^ (~b21 & b23);
      s[38] = b38 ^ (~b30 & b32);
      s[39] = b39 ^ (~b31 & b33);
      s[48] = b48 ^ (~b40 & b42);
      s[49] = b49 ^ (~b41 & b43);

      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  if (COMMON_JS) {
    module.exports = methods;
  } else {
    for (i = 0; i < methodNames.length; ++i) {
      root[methodNames[i]] = methods[methodNames[i]];
    }
    if (AMD) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return methods;
      }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
})();


/***/ }),

/***/ "./node_modules/semver/classes/comparator.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const ANY = Symbol('SemVer ANY')
// hoisted class for cyclic dependency
class Comparator {
  static get ANY () {
    return ANY
  }

  constructor (comp, options) {
    options = parseOptions(options)

    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp
      } else {
        comp = comp.value
      }
    }

    comp = comp.trim().split(/\s+/).join(' ')
    debug('comparator', comp, options)
    this.options = options
    this.loose = !!options.loose
    this.parse(comp)

    if (this.semver === ANY) {
      this.value = ''
    } else {
      this.value = this.operator + this.semver.version
    }

    debug('comp', this)
  }

  parse (comp) {
    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
    const m = comp.match(r)

    if (!m) {
      throw new TypeError(`Invalid comparator: ${comp}`)
    }

    this.operator = m[1] !== undefined ? m[1] : ''
    if (this.operator === '=') {
      this.operator = ''
    }

    // if it literally is just '>' or '' then allow anything.
    if (!m[2]) {
      this.semver = ANY
    } else {
      this.semver = new SemVer(m[2], this.options.loose)
    }
  }

  toString () {
    return this.value
  }

  test (version) {
    debug('Comparator.test', version, this.options.loose)

    if (this.semver === ANY || version === ANY) {
      return true
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    return cmp(version, this.operator, this.semver, this.options)
  }

  intersects (comp, options) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError('a Comparator is required')
    }

    if (this.operator === '') {
      if (this.value === '') {
        return true
      }
      return new Range(comp.value, options).test(this.value)
    } else if (comp.operator === '') {
      if (comp.value === '') {
        return true
      }
      return new Range(this.value, options).test(comp.semver)
    }

    options = parseOptions(options)

    // Special cases where nothing can possibly be lower
    if (options.includePrerelease &&
      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {
      return false
    }
    if (!options.includePrerelease &&
      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {
      return false
    }

    // Same direction increasing (> or >=)
    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
      return true
    }
    // Same direction decreasing (< or <=)
    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
      return true
    }
    // same SemVer and both sides are inclusive (<= or >=)
    if (
      (this.semver.version === comp.semver.version) &&
      this.operator.includes('=') && comp.operator.includes('=')) {
      return true
    }
    // opposite directions less than
    if (cmp(this.semver, '<', comp.semver, options) &&
      this.operator.startsWith('>') && comp.operator.startsWith('<')) {
      return true
    }
    // opposite directions greater than
    if (cmp(this.semver, '>', comp.semver, options) &&
      this.operator.startsWith('<') && comp.operator.startsWith('>')) {
      return true
    }
    return false
  }
}

module.exports = Comparator

const parseOptions = __webpack_require__("./node_modules/semver/internal/parse-options.js")
const { safeRe: re, t } = __webpack_require__("./node_modules/semver/internal/re.js")
const cmp = __webpack_require__("./node_modules/semver/functions/cmp.js")
const debug = __webpack_require__("./node_modules/semver/internal/debug.js")
const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const Range = __webpack_require__("./node_modules/semver/classes/range.js")


/***/ }),

/***/ "./node_modules/semver/classes/range.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SPACE_CHARACTERS = /\s+/g

// hoisted class for cyclic dependency
class Range {
  constructor (range, options) {
    options = parseOptions(options)

    if (range instanceof Range) {
      if (
        range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease
      ) {
        return range
      } else {
        return new Range(range.raw, options)
      }
    }

    if (range instanceof Comparator) {
      // just put it in the set and return
      this.raw = range.value
      this.set = [[range]]
      this.formatted = undefined
      return this
    }

    this.options = options
    this.loose = !!options.loose
    this.includePrerelease = !!options.includePrerelease

    // First reduce all whitespace as much as possible so we do not have to rely
    // on potentially slow regexes like \s*. This is then stored and used for
    // future error messages as well.
    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')

    // First, split on ||
    this.set = this.raw
      .split('||')
      // map the range to a 2d array of comparators
      .map(r => this.parseRange(r.trim()))
      // throw out any comparator lists that are empty
      // this generally means that it was not a valid range, which is allowed
      // in loose mode, but will still throw if the WHOLE range is invalid.
      .filter(c => c.length)

    if (!this.set.length) {
      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)
    }

    // if we have any that are not the null set, throw out null sets.
    if (this.set.length > 1) {
      // keep the first one, in case they're all null sets
      const first = this.set[0]
      this.set = this.set.filter(c => !isNullSet(c[0]))
      if (this.set.length === 0) {
        this.set = [first]
      } else if (this.set.length > 1) {
        // if we have any that are *, then the range is just *
        for (const c of this.set) {
          if (c.length === 1 && isAny(c[0])) {
            this.set = [c]
            break
          }
        }
      }
    }

    this.formatted = undefined
  }

  get range () {
    if (this.formatted === undefined) {
      this.formatted = ''
      for (let i = 0; i < this.set.length; i++) {
        if (i > 0) {
          this.formatted += '||'
        }
        const comps = this.set[i]
        for (let k = 0; k < comps.length; k++) {
          if (k > 0) {
            this.formatted += ' '
          }
          this.formatted += comps[k].toString().trim()
        }
      }
    }
    return this.formatted
  }

  format () {
    return this.range
  }

  toString () {
    return this.range
  }

  parseRange (range) {
    // memoize range parsing for performance.
    // this is a very hot path, and fully deterministic.
    const memoOpts =
      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |
      (this.options.loose && FLAG_LOOSE)
    const memoKey = memoOpts + ':' + range
    const cached = cache.get(memoKey)
    if (cached) {
      return cached
    }

    const loose = this.options.loose
    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]
    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))
    debug('hyphen replace', range)

    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)
    debug('comparator trim', range)

    // `~ 1.2.3` => `~1.2.3`
    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)
    debug('tilde trim', range)

    // `^ 1.2.3` => `^1.2.3`
    range = range.replace(re[t.CARETTRIM], caretTrimReplace)
    debug('caret trim', range)

    // At this point, the range is completely trimmed and
    // ready to be split into comparators.

    let rangeList = range
      .split(' ')
      .map(comp => parseComparator(comp, this.options))
      .join(' ')
      .split(/\s+/)
      // >=0.0.0 is equivalent to *
      .map(comp => replaceGTE0(comp, this.options))

    if (loose) {
      // in loose mode, throw out any that are not valid comparators
      rangeList = rangeList.filter(comp => {
        debug('loose invalid filter', comp, this.options)
        return !!comp.match(re[t.COMPARATORLOOSE])
      })
    }
    debug('range list', rangeList)

    // if any comparators are the null set, then replace with JUST null set
    // if more than one comparator, remove any * comparators
    // also, don't include the same comparator more than once
    const rangeMap = new Map()
    const comparators = rangeList.map(comp => new Comparator(comp, this.options))
    for (const comp of comparators) {
      if (isNullSet(comp)) {
        return [comp]
      }
      rangeMap.set(comp.value, comp)
    }
    if (rangeMap.size > 1 && rangeMap.has('')) {
      rangeMap.delete('')
    }

    const result = [...rangeMap.values()]
    cache.set(memoKey, result)
    return result
  }

  intersects (range, options) {
    if (!(range instanceof Range)) {
      throw new TypeError('a Range is required')
    }

    return this.set.some((thisComparators) => {
      return (
        isSatisfiable(thisComparators, options) &&
        range.set.some((rangeComparators) => {
          return (
            isSatisfiable(rangeComparators, options) &&
            thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options)
              })
            })
          )
        })
      )
    })
  }

  // if ANY of the sets match ALL of its comparators, then pass
  test (version) {
    if (!version) {
      return false
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    for (let i = 0; i < this.set.length; i++) {
      if (testSet(this.set[i], version, this.options)) {
        return true
      }
    }
    return false
  }
}

module.exports = Range

const LRU = __webpack_require__("./node_modules/semver/internal/lrucache.js")
const cache = new LRU()

const parseOptions = __webpack_require__("./node_modules/semver/internal/parse-options.js")
const Comparator = __webpack_require__("./node_modules/semver/classes/comparator.js")
const debug = __webpack_require__("./node_modules/semver/internal/debug.js")
const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const {
  safeRe: re,
  t,
  comparatorTrimReplace,
  tildeTrimReplace,
  caretTrimReplace,
} = __webpack_require__("./node_modules/semver/internal/re.js")
const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = __webpack_require__("./node_modules/semver/internal/constants.js")

const isNullSet = c => c.value === '<0.0.0-0'
const isAny = c => c.value === ''

// take a set of comparators and determine whether there
// exists a version which can satisfy it
const isSatisfiable = (comparators, options) => {
  let result = true
  const remainingComparators = comparators.slice()
  let testComparator = remainingComparators.pop()

  while (result && remainingComparators.length) {
    result = remainingComparators.every((otherComparator) => {
      return testComparator.intersects(otherComparator, options)
    })

    testComparator = remainingComparators.pop()
  }

  return result
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const parseComparator = (comp, options) => {
  debug('comp', comp, options)
  comp = replaceCarets(comp, options)
  debug('caret', comp)
  comp = replaceTildes(comp, options)
  debug('tildes', comp)
  comp = replaceXRanges(comp, options)
  debug('xrange', comp)
  comp = replaceStars(comp, options)
  debug('stars', comp)
  return comp
}

const isX = id => !id || id.toLowerCase() === 'x' || id === '*'

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
// ~0.0.1 --> >=0.0.1 <0.1.0-0
const replaceTildes = (comp, options) => {
  return comp
    .trim()
    .split(/\s+/)
    .map((c) => replaceTilde(c, options))
    .join(' ')
}

const replaceTilde = (comp, options) => {
  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('tilde', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0-0
      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`
    } else if (pr) {
      debug('replaceTilde pr', pr)
      ret = `>=${M}.${m}.${p}-${pr
      } <${M}.${+m + 1}.0-0`
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0-0
      ret = `>=${M}.${m}.${p
      } <${M}.${+m + 1}.0-0`
    }

    debug('tilde return', ret)
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
// ^0.0.1 --> >=0.0.1 <0.0.2-0
// ^0.1.0 --> >=0.1.0 <0.2.0-0
const replaceCarets = (comp, options) => {
  return comp
    .trim()
    .split(/\s+/)
    .map((c) => replaceCaret(c, options))
    .join(' ')
}

const replaceCaret = (comp, options) => {
  debug('caret', comp, options)
  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]
  const z = options.includePrerelease ? '-0' : ''
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('caret', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      if (M === '0') {
        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`
      } else {
        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`
      }
    } else if (pr) {
      debug('replaceCaret pr', pr)
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p}-${pr
        } <${+M + 1}.0.0-0`
      }
    } else {
      debug('no pr')
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p
        } <${+M + 1}.0.0-0`
      }
    }

    debug('caret return', ret)
    return ret
  })
}

const replaceXRanges = (comp, options) => {
  debug('replaceXRanges', comp, options)
  return comp
    .split(/\s+/)
    .map((c) => replaceXRange(c, options))
    .join(' ')
}

const replaceXRange = (comp, options) => {
  comp = comp.trim()
  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]
  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
    debug('xRange', comp, ret, gtlt, M, m, p, pr)
    const xM = isX(M)
    const xm = xM || isX(m)
    const xp = xm || isX(p)
    const anyX = xp

    if (gtlt === '=' && anyX) {
      gtlt = ''
    }

    // if we're including prereleases in the match, then we need
    // to fix this to -0, the lowest possible prerelease value
    pr = options.includePrerelease ? '-0' : ''

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0-0'
      } else {
        // nothing is forbidden
        ret = '*'
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0
      }
      p = 0

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        gtlt = '>='
        if (xm) {
          M = +M + 1
          m = 0
          p = 0
        } else {
          m = +m + 1
          p = 0
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<'
        if (xm) {
          M = +M + 1
        } else {
          m = +m + 1
        }
      }

      if (gtlt === '<') {
        pr = '-0'
      }

      ret = `${gtlt + M}.${m}.${p}${pr}`
    } else if (xm) {
      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`
    } else if (xp) {
      ret = `>=${M}.${m}.0${pr
      } <${M}.${+m + 1}.0-0`
    }

    debug('xRange return', ret)

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const replaceStars = (comp, options) => {
  debug('replaceStars', comp, options)
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp
    .trim()
    .replace(re[t.STAR], '')
}

const replaceGTE0 = (comp, options) => {
  debug('replaceGTE0', comp, options)
  return comp
    .trim()
    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')
}

// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
// TODO build?
const hyphenReplace = incPr => ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr) => {
  if (isX(fM)) {
    from = ''
  } else if (isX(fm)) {
    from = `>=${fM}.0.0${incPr ? '-0' : ''}`
  } else if (isX(fp)) {
    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`
  } else if (fpr) {
    from = `>=${from}`
  } else {
    from = `>=${from}${incPr ? '-0' : ''}`
  }

  if (isX(tM)) {
    to = ''
  } else if (isX(tm)) {
    to = `<${+tM + 1}.0.0-0`
  } else if (isX(tp)) {
    to = `<${tM}.${+tm + 1}.0-0`
  } else if (tpr) {
    to = `<=${tM}.${tm}.${tp}-${tpr}`
  } else if (incPr) {
    to = `<${tM}.${tm}.${+tp + 1}-0`
  } else {
    to = `<=${to}`
  }

  return `${from} ${to}`.trim()
}

const testSet = (set, version, options) => {
  for (let i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (let i = 0; i < set.length; i++) {
      debug(set[i].semver)
      if (set[i].semver === Comparator.ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        const allowed = set[i].semver
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}


/***/ }),

/***/ "./node_modules/semver/classes/semver.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const debug = __webpack_require__("./node_modules/semver/internal/debug.js")
const { MAX_LENGTH, MAX_SAFE_INTEGER } = __webpack_require__("./node_modules/semver/internal/constants.js")
const { safeRe: re, t } = __webpack_require__("./node_modules/semver/internal/re.js")

const parseOptions = __webpack_require__("./node_modules/semver/internal/parse-options.js")
const { compareIdentifiers } = __webpack_require__("./node_modules/semver/internal/identifiers.js")
class SemVer {
  constructor (version, options) {
    options = parseOptions(options)

    if (version instanceof SemVer) {
      if (version.loose === !!options.loose &&
        version.includePrerelease === !!options.includePrerelease) {
        return version
      } else {
        version = version.version
      }
    } else if (typeof version !== 'string') {
      throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`)
    }

    if (version.length > MAX_LENGTH) {
      throw new TypeError(
        `version is longer than ${MAX_LENGTH} characters`
      )
    }

    debug('SemVer', version, options)
    this.options = options
    this.loose = !!options.loose
    // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.
    this.includePrerelease = !!options.includePrerelease

    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])

    if (!m) {
      throw new TypeError(`Invalid Version: ${version}`)
    }

    this.raw = version

    // these are actually numbers
    this.major = +m[1]
    this.minor = +m[2]
    this.patch = +m[3]

    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version')
    }

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version')
    }

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version')
    }

    // numberify any prerelease numeric ids
    if (!m[4]) {
      this.prerelease = []
    } else {
      this.prerelease = m[4].split('.').map((id) => {
        if (/^[0-9]+$/.test(id)) {
          const num = +id
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num
          }
        }
        return id
      })
    }

    this.build = m[5] ? m[5].split('.') : []
    this.format()
  }

  format () {
    this.version = `${this.major}.${this.minor}.${this.patch}`
    if (this.prerelease.length) {
      this.version += `-${this.prerelease.join('.')}`
    }
    return this.version
  }

  toString () {
    return this.version
  }

  compare (other) {
    debug('SemVer.compare', this.version, this.options, other)
    if (!(other instanceof SemVer)) {
      if (typeof other === 'string' && other === this.version) {
        return 0
      }
      other = new SemVer(other, this.options)
    }

    if (other.version === this.version) {
      return 0
    }

    return this.compareMain(other) || this.comparePre(other)
  }

  compareMain (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    return (
      compareIdentifiers(this.major, other.major) ||
      compareIdentifiers(this.minor, other.minor) ||
      compareIdentifiers(this.patch, other.patch)
    )
  }

  comparePre (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length) {
      return -1
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0
    }

    let i = 0
    do {
      const a = this.prerelease[i]
      const b = other.prerelease[i]
      debug('prerelease compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  compareBuild (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    let i = 0
    do {
      const a = this.build[i]
      const b = other.build[i]
      debug('build compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  inc (release, identifier, identifierBase) {
    if (release.startsWith('pre')) {
      if (!identifier && identifierBase === false) {
        throw new Error('invalid increment argument: identifier is empty')
      }
      // Avoid an invalid semver results
      if (identifier) {
        const match = `-${identifier}`.match(this.options.loose ? re[t.PRERELEASELOOSE] : re[t.PRERELEASE])
        if (!match || match[1] !== identifier) {
          throw new Error(`invalid identifier: ${identifier}`)
        }
      }
    }

    switch (release) {
      case 'premajor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor = 0
        this.major++
        this.inc('pre', identifier, identifierBase)
        break
      case 'preminor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor++
        this.inc('pre', identifier, identifierBase)
        break
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0
        this.inc('patch', identifier, identifierBase)
        this.inc('pre', identifier, identifierBase)
        break
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0) {
          this.inc('patch', identifier, identifierBase)
        }
        this.inc('pre', identifier, identifierBase)
        break
      case 'release':
        if (this.prerelease.length === 0) {
          throw new Error(`version ${this.raw} is not a prerelease`)
        }
        this.prerelease.length = 0
        break

      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (
          this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0
        ) {
          this.major++
        }
        this.minor = 0
        this.patch = 0
        this.prerelease = []
        break
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++
        }
        this.patch = 0
        this.prerelease = []
        break
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0) {
          this.patch++
        }
        this.prerelease = []
        break
      // This probably shouldn't be used publicly.
      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
      case 'pre': {
        const base = Number(identifierBase) ? 1 : 0

        if (this.prerelease.length === 0) {
          this.prerelease = [base]
        } else {
          let i = this.prerelease.length
          while (--i >= 0) {
            if (typeof this.prerelease[i] === 'number') {
              this.prerelease[i]++
              i = -2
            }
          }
          if (i === -1) {
            // didn't increment anything
            if (identifier === this.prerelease.join('.') && identifierBase === false) {
              throw new Error('invalid increment argument: identifier already exists')
            }
            this.prerelease.push(base)
          }
        }
        if (identifier) {
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          let prerelease = [identifier, base]
          if (identifierBase === false) {
            prerelease = [identifier]
          }
          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = prerelease
            }
          } else {
            this.prerelease = prerelease
          }
        }
        break
      }
      default:
        throw new Error(`invalid increment argument: ${release}`)
    }
    this.raw = this.format()
    if (this.build.length) {
      this.raw += `+${this.build.join('.')}`
    }
    return this
  }
}

module.exports = SemVer


/***/ }),

/***/ "./node_modules/semver/functions/clean.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const parse = __webpack_require__("./node_modules/semver/functions/parse.js")
const clean = (version, options) => {
  const s = parse(version.trim().replace(/^[=v]+/, ''), options)
  return s ? s.version : null
}
module.exports = clean


/***/ }),

/***/ "./node_modules/semver/functions/cmp.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const eq = __webpack_require__("./node_modules/semver/functions/eq.js")
const neq = __webpack_require__("./node_modules/semver/functions/neq.js")
const gt = __webpack_require__("./node_modules/semver/functions/gt.js")
const gte = __webpack_require__("./node_modules/semver/functions/gte.js")
const lt = __webpack_require__("./node_modules/semver/functions/lt.js")
const lte = __webpack_require__("./node_modules/semver/functions/lte.js")

const cmp = (a, op, b, loose) => {
  switch (op) {
    case '===':
      if (typeof a === 'object') {
        a = a.version
      }
      if (typeof b === 'object') {
        b = b.version
      }
      return a === b

    case '!==':
      if (typeof a === 'object') {
        a = a.version
      }
      if (typeof b === 'object') {
        b = b.version
      }
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError(`Invalid operator: ${op}`)
  }
}
module.exports = cmp


/***/ }),

/***/ "./node_modules/semver/functions/coerce.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const parse = __webpack_require__("./node_modules/semver/functions/parse.js")
const { safeRe: re, t } = __webpack_require__("./node_modules/semver/internal/re.js")

const coerce = (version, options) => {
  if (version instanceof SemVer) {
    return version
  }

  if (typeof version === 'number') {
    version = String(version)
  }

  if (typeof version !== 'string') {
    return null
  }

  options = options || {}

  let match = null
  if (!options.rtl) {
    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE])
  } else {
    // Find the right-most coercible string that does not share
    // a terminus with a more left-ward coercible string.
    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
    //
    // Walk through the string checking with a /g regexp
    // Manually set the index so as to pick up overlapping matches.
    // Stop when we get a match that ends at the string end, since no
    // coercible string can be more right-ward without the same terminus.
    const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL]
    let next
    while ((next = coerceRtlRegex.exec(version)) &&
        (!match || match.index + match[0].length !== version.length)
    ) {
      if (!match ||
            next.index + next[0].length !== match.index + match[0].length) {
        match = next
      }
      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length
    }
    // leave it in a clean state
    coerceRtlRegex.lastIndex = -1
  }

  if (match === null) {
    return null
  }

  const major = match[2]
  const minor = match[3] || '0'
  const patch = match[4] || '0'
  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : ''
  const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''

  return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)
}
module.exports = coerce


/***/ }),

/***/ "./node_modules/semver/functions/compare-build.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const compareBuild = (a, b, loose) => {
  const versionA = new SemVer(a, loose)
  const versionB = new SemVer(b, loose)
  return versionA.compare(versionB) || versionA.compareBuild(versionB)
}
module.exports = compareBuild


/***/ }),

/***/ "./node_modules/semver/functions/compare-loose.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const compare = __webpack_require__("./node_modules/semver/functions/compare.js")
const compareLoose = (a, b) => compare(a, b, true)
module.exports = compareLoose


/***/ }),

/***/ "./node_modules/semver/functions/compare.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const compare = (a, b, loose) =>
  new SemVer(a, loose).compare(new SemVer(b, loose))

module.exports = compare


/***/ }),

/***/ "./node_modules/semver/functions/diff.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const parse = __webpack_require__("./node_modules/semver/functions/parse.js")

const diff = (version1, version2) => {
  const v1 = parse(version1, null, true)
  const v2 = parse(version2, null, true)
  const comparison = v1.compare(v2)

  if (comparison === 0) {
    return null
  }

  const v1Higher = comparison > 0
  const highVersion = v1Higher ? v1 : v2
  const lowVersion = v1Higher ? v2 : v1
  const highHasPre = !!highVersion.prerelease.length
  const lowHasPre = !!lowVersion.prerelease.length

  if (lowHasPre && !highHasPre) {
    // Going from prerelease -> no prerelease requires some special casing

    // If the low version has only a major, then it will always be a major
    // Some examples:
    // 1.0.0-1 -> 1.0.0
    // 1.0.0-1 -> 1.1.1
    // 1.0.0-1 -> 2.0.0
    if (!lowVersion.patch && !lowVersion.minor) {
      return 'major'
    }

    // If the main part has no difference
    if (lowVersion.compareMain(highVersion) === 0) {
      if (lowVersion.minor && !lowVersion.patch) {
        return 'minor'
      }
      return 'patch'
    }
  }

  // add the `pre` prefix if we are going to a prerelease version
  const prefix = highHasPre ? 'pre' : ''

  if (v1.major !== v2.major) {
    return prefix + 'major'
  }

  if (v1.minor !== v2.minor) {
    return prefix + 'minor'
  }

  if (v1.patch !== v2.patch) {
    return prefix + 'patch'
  }

  // high and low are preleases
  return 'prerelease'
}

module.exports = diff


/***/ }),

/***/ "./node_modules/semver/functions/eq.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const compare = __webpack_require__("./node_modules/semver/functions/compare.js")
const eq = (a, b, loose) => compare(a, b, loose) === 0
module.exports = eq


/***/ }),

/***/ "./node_modules/semver/functions/gt.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const compare = __webpack_require__("./node_modules/semver/functions/compare.js")
const gt = (a, b, loose) => compare(a, b, loose) > 0
module.exports = gt


/***/ }),

/***/ "./node_modules/semver/functions/gte.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const compare = __webpack_require__("./node_modules/semver/functions/compare.js")
const gte = (a, b, loose) => compare(a, b, loose) >= 0
module.exports = gte


/***/ }),

/***/ "./node_modules/semver/functions/inc.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")

const inc = (version, release, options, identifier, identifierBase) => {
  if (typeof (options) === 'string') {
    identifierBase = identifier
    identifier = options
    options = undefined
  }

  try {
    return new SemVer(
      version instanceof SemVer ? version.version : version,
      options
    ).inc(release, identifier, identifierBase).version
  } catch (er) {
    return null
  }
}
module.exports = inc


/***/ }),

/***/ "./node_modules/semver/functions/lt.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const compare = __webpack_require__("./node_modules/semver/functions/compare.js")
const lt = (a, b, loose) => compare(a, b, loose) < 0
module.exports = lt


/***/ }),

/***/ "./node_modules/semver/functions/lte.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const compare = __webpack_require__("./node_modules/semver/functions/compare.js")
const lte = (a, b, loose) => compare(a, b, loose) <= 0
module.exports = lte


/***/ }),

/***/ "./node_modules/semver/functions/major.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const major = (a, loose) => new SemVer(a, loose).major
module.exports = major


/***/ }),

/***/ "./node_modules/semver/functions/minor.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const minor = (a, loose) => new SemVer(a, loose).minor
module.exports = minor


/***/ }),

/***/ "./node_modules/semver/functions/neq.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const compare = __webpack_require__("./node_modules/semver/functions/compare.js")
const neq = (a, b, loose) => compare(a, b, loose) !== 0
module.exports = neq


/***/ }),

/***/ "./node_modules/semver/functions/parse.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const parse = (version, options, throwErrors = false) => {
  if (version instanceof SemVer) {
    return version
  }
  try {
    return new SemVer(version, options)
  } catch (er) {
    if (!throwErrors) {
      return null
    }
    throw er
  }
}

module.exports = parse


/***/ }),

/***/ "./node_modules/semver/functions/patch.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const patch = (a, loose) => new SemVer(a, loose).patch
module.exports = patch


/***/ }),

/***/ "./node_modules/semver/functions/prerelease.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const parse = __webpack_require__("./node_modules/semver/functions/parse.js")
const prerelease = (version, options) => {
  const parsed = parse(version, options)
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
}
module.exports = prerelease


/***/ }),

/***/ "./node_modules/semver/functions/rcompare.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const compare = __webpack_require__("./node_modules/semver/functions/compare.js")
const rcompare = (a, b, loose) => compare(b, a, loose)
module.exports = rcompare


/***/ }),

/***/ "./node_modules/semver/functions/rsort.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const compareBuild = __webpack_require__("./node_modules/semver/functions/compare-build.js")
const rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))
module.exports = rsort


/***/ }),

/***/ "./node_modules/semver/functions/satisfies.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const Range = __webpack_require__("./node_modules/semver/classes/range.js")
const satisfies = (version, range, options) => {
  try {
    range = new Range(range, options)
  } catch (er) {
    return false
  }
  return range.test(version)
}
module.exports = satisfies


/***/ }),

/***/ "./node_modules/semver/functions/sort.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const compareBuild = __webpack_require__("./node_modules/semver/functions/compare-build.js")
const sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))
module.exports = sort


/***/ }),

/***/ "./node_modules/semver/functions/valid.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const parse = __webpack_require__("./node_modules/semver/functions/parse.js")
const valid = (version, options) => {
  const v = parse(version, options)
  return v ? v.version : null
}
module.exports = valid


/***/ }),

/***/ "./node_modules/semver/index.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


// just pre-load all the stuff that index.js lazily exports
const internalRe = __webpack_require__("./node_modules/semver/internal/re.js")
const constants = __webpack_require__("./node_modules/semver/internal/constants.js")
const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const identifiers = __webpack_require__("./node_modules/semver/internal/identifiers.js")
const parse = __webpack_require__("./node_modules/semver/functions/parse.js")
const valid = __webpack_require__("./node_modules/semver/functions/valid.js")
const clean = __webpack_require__("./node_modules/semver/functions/clean.js")
const inc = __webpack_require__("./node_modules/semver/functions/inc.js")
const diff = __webpack_require__("./node_modules/semver/functions/diff.js")
const major = __webpack_require__("./node_modules/semver/functions/major.js")
const minor = __webpack_require__("./node_modules/semver/functions/minor.js")
const patch = __webpack_require__("./node_modules/semver/functions/patch.js")
const prerelease = __webpack_require__("./node_modules/semver/functions/prerelease.js")
const compare = __webpack_require__("./node_modules/semver/functions/compare.js")
const rcompare = __webpack_require__("./node_modules/semver/functions/rcompare.js")
const compareLoose = __webpack_require__("./node_modules/semver/functions/compare-loose.js")
const compareBuild = __webpack_require__("./node_modules/semver/functions/compare-build.js")
const sort = __webpack_require__("./node_modules/semver/functions/sort.js")
const rsort = __webpack_require__("./node_modules/semver/functions/rsort.js")
const gt = __webpack_require__("./node_modules/semver/functions/gt.js")
const lt = __webpack_require__("./node_modules/semver/functions/lt.js")
const eq = __webpack_require__("./node_modules/semver/functions/eq.js")
const neq = __webpack_require__("./node_modules/semver/functions/neq.js")
const gte = __webpack_require__("./node_modules/semver/functions/gte.js")
const lte = __webpack_require__("./node_modules/semver/functions/lte.js")
const cmp = __webpack_require__("./node_modules/semver/functions/cmp.js")
const coerce = __webpack_require__("./node_modules/semver/functions/coerce.js")
const Comparator = __webpack_require__("./node_modules/semver/classes/comparator.js")
const Range = __webpack_require__("./node_modules/semver/classes/range.js")
const satisfies = __webpack_require__("./node_modules/semver/functions/satisfies.js")
const toComparators = __webpack_require__("./node_modules/semver/ranges/to-comparators.js")
const maxSatisfying = __webpack_require__("./node_modules/semver/ranges/max-satisfying.js")
const minSatisfying = __webpack_require__("./node_modules/semver/ranges/min-satisfying.js")
const minVersion = __webpack_require__("./node_modules/semver/ranges/min-version.js")
const validRange = __webpack_require__("./node_modules/semver/ranges/valid.js")
const outside = __webpack_require__("./node_modules/semver/ranges/outside.js")
const gtr = __webpack_require__("./node_modules/semver/ranges/gtr.js")
const ltr = __webpack_require__("./node_modules/semver/ranges/ltr.js")
const intersects = __webpack_require__("./node_modules/semver/ranges/intersects.js")
const simplifyRange = __webpack_require__("./node_modules/semver/ranges/simplify.js")
const subset = __webpack_require__("./node_modules/semver/ranges/subset.js")
module.exports = {
  parse,
  valid,
  clean,
  inc,
  diff,
  major,
  minor,
  patch,
  prerelease,
  compare,
  rcompare,
  compareLoose,
  compareBuild,
  sort,
  rsort,
  gt,
  lt,
  eq,
  neq,
  gte,
  lte,
  cmp,
  coerce,
  Comparator,
  Range,
  satisfies,
  toComparators,
  maxSatisfying,
  minSatisfying,
  minVersion,
  validRange,
  outside,
  gtr,
  ltr,
  intersects,
  simplifyRange,
  subset,
  SemVer,
  re: internalRe.re,
  src: internalRe.src,
  tokens: internalRe.t,
  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
  RELEASE_TYPES: constants.RELEASE_TYPES,
  compareIdentifiers: identifiers.compareIdentifiers,
  rcompareIdentifiers: identifiers.rcompareIdentifiers,
}


/***/ }),

/***/ "./node_modules/semver/internal/constants.js":
/***/ (function(module) {

"use strict";


// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = '2.0.0'

const MAX_LENGTH = 256
const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
/* istanbul ignore next */ 9007199254740991

// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16

// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6

const RELEASE_TYPES = [
  'major',
  'premajor',
  'minor',
  'preminor',
  'patch',
  'prepatch',
  'prerelease',
]

module.exports = {
  MAX_LENGTH,
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_SAFE_INTEGER,
  RELEASE_TYPES,
  SEMVER_SPEC_VERSION,
  FLAG_INCLUDE_PRERELEASE: 0b001,
  FLAG_LOOSE: 0b010,
}


/***/ }),

/***/ "./node_modules/semver/internal/debug.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/* provided dependency */ var process = __webpack_require__("process/browser");


const debug = (
  typeof process === 'object' &&
  process.env &&
  process.env.NODE_DEBUG &&
  /\bsemver\b/i.test(process.env.NODE_DEBUG)
) ? (...args) => console.error('SEMVER', ...args)
  : () => {}

module.exports = debug


/***/ }),

/***/ "./node_modules/semver/internal/identifiers.js":
/***/ (function(module) {

"use strict";


const numeric = /^[0-9]+$/
const compareIdentifiers = (a, b) => {
  const anum = numeric.test(a)
  const bnum = numeric.test(b)

  if (anum && bnum) {
    a = +a
    b = +b
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

const rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)

module.exports = {
  compareIdentifiers,
  rcompareIdentifiers,
}


/***/ }),

/***/ "./node_modules/semver/internal/lrucache.js":
/***/ (function(module) {

"use strict";


class LRUCache {
  constructor () {
    this.max = 1000
    this.map = new Map()
  }

  get (key) {
    const value = this.map.get(key)
    if (value === undefined) {
      return undefined
    } else {
      // Remove the key from the map and add it to the end
      this.map.delete(key)
      this.map.set(key, value)
      return value
    }
  }

  delete (key) {
    return this.map.delete(key)
  }

  set (key, value) {
    const deleted = this.delete(key)

    if (!deleted && value !== undefined) {
      // If cache is full, delete the least recently used item
      if (this.map.size >= this.max) {
        const firstKey = this.map.keys().next().value
        this.delete(firstKey)
      }

      this.map.set(key, value)
    }

    return this
  }
}

module.exports = LRUCache


/***/ }),

/***/ "./node_modules/semver/internal/parse-options.js":
/***/ (function(module) {

"use strict";


// parse out just the options we care about
const looseOption = Object.freeze({ loose: true })
const emptyOpts = Object.freeze({ })
const parseOptions = options => {
  if (!options) {
    return emptyOpts
  }

  if (typeof options !== 'object') {
    return looseOption
  }

  return options
}
module.exports = parseOptions


/***/ }),

/***/ "./node_modules/semver/internal/re.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_LENGTH,
} = __webpack_require__("./node_modules/semver/internal/constants.js")
const debug = __webpack_require__("./node_modules/semver/internal/debug.js")
exports = module.exports = {}

// The actual regexps go on exports.re
const re = exports.re = []
const safeRe = exports.safeRe = []
const src = exports.src = []
const safeSrc = exports.safeSrc = []
const t = exports.t = {}
let R = 0

const LETTERDASHNUMBER = '[a-zA-Z0-9-]'

// Replace some greedy regex tokens to prevent regex dos issues. These regex are
// used internally via the safeRe object since all inputs in this library get
// normalized first to trim and collapse all extra whitespace. The original
// regexes are exported for userland consumption and lower level usage. A
// future breaking change could export the safer regex only with a note that
// all input should have extra whitespace removed.
const safeRegexReplacements = [
  ['\\s', 1],
  ['\\d', MAX_LENGTH],
  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],
]

const makeSafeRegex = (value) => {
  for (const [token, max] of safeRegexReplacements) {
    value = value
      .split(`${token}*`).join(`${token}{0,${max}}`)
      .split(`${token}+`).join(`${token}{1,${max}}`)
  }
  return value
}

const createToken = (name, value, isGlobal) => {
  const safe = makeSafeRegex(value)
  const index = R++
  debug(name, index, value)
  t[name] = index
  src[index] = value
  safeSrc[index] = safe
  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)
  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)
}

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*')
createToken('NUMERICIDENTIFIERLOOSE', '\\d+')

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

createToken('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)

// ## Main Version
// Three dot-separated numeric identifiers.

createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})`)

createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.
// Non-numberic identifiers include numberic identifiers but can be longer.
// Therefore non-numberic identifiers must go first.

createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NONNUMERICIDENTIFIER]
}|${src[t.NUMERICIDENTIFIER]})`)

createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NONNUMERICIDENTIFIER]
}|${src[t.NUMERICIDENTIFIERLOOSE]})`)

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]
}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`)

createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]
}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]
}(?:\\.${src[t.BUILDIDENTIFIER]})*))`)

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

createToken('FULLPLAIN', `v?${src[t.MAINVERSION]
}${src[t.PRERELEASE]}?${
  src[t.BUILD]}?`)

createToken('FULL', `^${src[t.FULLPLAIN]}$`)

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]
}${src[t.PRERELEASELOOSE]}?${
  src[t.BUILD]}?`)

createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)

createToken('GTLT', '((?:<|>)?=?)')

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`)
createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`)

createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:${src[t.PRERELEASE]})?${
                     src[t.BUILD]}?` +
                   `)?)?`)

createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:${src[t.PRERELEASELOOSE]})?${
                          src[t.BUILD]}?` +
                        `)?)?`)

createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`)
createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`)

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken('COERCEPLAIN', `${'(^|[^\\d])' +
              '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`)
createToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\d])`)
createToken('COERCEFULL', src[t.COERCEPLAIN] +
              `(?:${src[t.PRERELEASE]})?` +
              `(?:${src[t.BUILD]})?` +
              `(?:$|[^\\d])`)
createToken('COERCERTL', src[t.COERCE], true)
createToken('COERCERTLFULL', src[t.COERCEFULL], true)

// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken('LONETILDE', '(?:~>?)')

createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true)
exports.tildeTrimReplace = '$1~'

createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)
createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)

// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken('LONECARET', '(?:\\^)')

createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true)
exports.caretTrimReplace = '$1^'

createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)
createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)

// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`)
createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`)

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]
}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)
exports.comparatorTrimReplace = '$1$2$3'

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` +
                   `\\s+-\\s+` +
                   `(${src[t.XRANGEPLAIN]})` +
                   `\\s*$`)

createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s+-\\s+` +
                        `(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s*$`)

// Star ranges basically just allow anything at all.
createToken('STAR', '(<|>)?=?\\s*\\*')
// >=0.0.0 is like a star
createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$')
createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$')


/***/ }),

/***/ "./node_modules/semver/ranges/gtr.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


// Determine if version is greater than all the versions possible in the range.
const outside = __webpack_require__("./node_modules/semver/ranges/outside.js")
const gtr = (version, range, options) => outside(version, range, '>', options)
module.exports = gtr


/***/ }),

/***/ "./node_modules/semver/ranges/intersects.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const Range = __webpack_require__("./node_modules/semver/classes/range.js")
const intersects = (r1, r2, options) => {
  r1 = new Range(r1, options)
  r2 = new Range(r2, options)
  return r1.intersects(r2, options)
}
module.exports = intersects


/***/ }),

/***/ "./node_modules/semver/ranges/ltr.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const outside = __webpack_require__("./node_modules/semver/ranges/outside.js")
// Determine if version is less than all the versions possible in the range
const ltr = (version, range, options) => outside(version, range, '<', options)
module.exports = ltr


/***/ }),

/***/ "./node_modules/semver/ranges/max-satisfying.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const Range = __webpack_require__("./node_modules/semver/classes/range.js")

const maxSatisfying = (versions, range, options) => {
  let max = null
  let maxSV = null
  let rangeObj = null
  try {
    rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v
        maxSV = new SemVer(max, options)
      }
    }
  })
  return max
}
module.exports = maxSatisfying


/***/ }),

/***/ "./node_modules/semver/ranges/min-satisfying.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const Range = __webpack_require__("./node_modules/semver/classes/range.js")
const minSatisfying = (versions, range, options) => {
  let min = null
  let minSV = null
  let rangeObj = null
  try {
    rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v
        minSV = new SemVer(min, options)
      }
    }
  })
  return min
}
module.exports = minSatisfying


/***/ }),

/***/ "./node_modules/semver/ranges/min-version.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const Range = __webpack_require__("./node_modules/semver/classes/range.js")
const gt = __webpack_require__("./node_modules/semver/functions/gt.js")

const minVersion = (range, loose) => {
  range = new Range(range, loose)

  let minver = new SemVer('0.0.0')
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer('0.0.0-0')
  if (range.test(minver)) {
    return minver
  }

  minver = null
  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i]

    let setMin = null
    comparators.forEach((comparator) => {
      // Clone to avoid manipulating the comparator's semver object.
      const compver = new SemVer(comparator.semver.version)
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++
          } else {
            compver.prerelease.push(0)
          }
          compver.raw = compver.format()
          /* fallthrough */
        case '':
        case '>=':
          if (!setMin || gt(compver, setMin)) {
            setMin = compver
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error(`Unexpected operation: ${comparator.operator}`)
      }
    })
    if (setMin && (!minver || gt(minver, setMin))) {
      minver = setMin
    }
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
}
module.exports = minVersion


/***/ }),

/***/ "./node_modules/semver/ranges/outside.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const SemVer = __webpack_require__("./node_modules/semver/classes/semver.js")
const Comparator = __webpack_require__("./node_modules/semver/classes/comparator.js")
const { ANY } = Comparator
const Range = __webpack_require__("./node_modules/semver/classes/range.js")
const satisfies = __webpack_require__("./node_modules/semver/functions/satisfies.js")
const gt = __webpack_require__("./node_modules/semver/functions/gt.js")
const lt = __webpack_require__("./node_modules/semver/functions/lt.js")
const lte = __webpack_require__("./node_modules/semver/functions/lte.js")
const gte = __webpack_require__("./node_modules/semver/functions/gte.js")

const outside = (version, range, hilo, options) => {
  version = new SemVer(version, options)
  range = new Range(range, options)

  let gtfn, ltefn, ltfn, comp, ecomp
  switch (hilo) {
    case '>':
      gtfn = gt
      ltefn = lte
      ltfn = lt
      comp = '>'
      ecomp = '>='
      break
    case '<':
      gtfn = lt
      ltefn = gte
      ltfn = gt
      comp = '<'
      ecomp = '<='
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisfies the range it is not outside
  if (satisfies(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i]

    let high = null
    let low = null

    comparators.forEach((comparator) => {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator
      low = low || comparator
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator
      }
    })

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
}

module.exports = outside


/***/ }),

/***/ "./node_modules/semver/ranges/simplify.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
const satisfies = __webpack_require__("./node_modules/semver/functions/satisfies.js")
const compare = __webpack_require__("./node_modules/semver/functions/compare.js")
module.exports = (versions, range, options) => {
  const set = []
  let first = null
  let prev = null
  const v = versions.sort((a, b) => compare(a, b, options))
  for (const version of v) {
    const included = satisfies(version, range, options)
    if (included) {
      prev = version
      if (!first) {
        first = version
      }
    } else {
      if (prev) {
        set.push([first, prev])
      }
      prev = null
      first = null
    }
  }
  if (first) {
    set.push([first, null])
  }

  const ranges = []
  for (const [min, max] of set) {
    if (min === max) {
      ranges.push(min)
    } else if (!max && min === v[0]) {
      ranges.push('*')
    } else if (!max) {
      ranges.push(`>=${min}`)
    } else if (min === v[0]) {
      ranges.push(`<=${max}`)
    } else {
      ranges.push(`${min} - ${max}`)
    }
  }
  const simplified = ranges.join(' || ')
  const original = typeof range.raw === 'string' ? range.raw : String(range)
  return simplified.length < original.length ? simplified : range
}


/***/ }),

/***/ "./node_modules/semver/ranges/subset.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const Range = __webpack_require__("./node_modules/semver/classes/range.js")
const Comparator = __webpack_require__("./node_modules/semver/classes/comparator.js")
const { ANY } = Comparator
const satisfies = __webpack_require__("./node_modules/semver/functions/satisfies.js")
const compare = __webpack_require__("./node_modules/semver/functions/compare.js")

// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true

const subset = (sub, dom, options = {}) => {
  if (sub === dom) {
    return true
  }

  sub = new Range(sub, options)
  dom = new Range(dom, options)
  let sawNonNull = false

  OUTER: for (const simpleSub of sub.set) {
    for (const simpleDom of dom.set) {
      const isSub = simpleSubset(simpleSub, simpleDom, options)
      sawNonNull = sawNonNull || isSub !== null
      if (isSub) {
        continue OUTER
      }
    }
    // the null set is a subset of everything, but null simple ranges in
    // a complex range should be ignored.  so if we saw a non-null range,
    // then we know this isn't a subset, but if EVERY simple range was null,
    // then it is a subset.
    if (sawNonNull) {
      return false
    }
  }
  return true
}

const minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]
const minimumVersion = [new Comparator('>=0.0.0')]

const simpleSubset = (sub, dom, options) => {
  if (sub === dom) {
    return true
  }

  if (sub.length === 1 && sub[0].semver === ANY) {
    if (dom.length === 1 && dom[0].semver === ANY) {
      return true
    } else if (options.includePrerelease) {
      sub = minimumVersionWithPreRelease
    } else {
      sub = minimumVersion
    }
  }

  if (dom.length === 1 && dom[0].semver === ANY) {
    if (options.includePrerelease) {
      return true
    } else {
      dom = minimumVersion
    }
  }

  const eqSet = new Set()
  let gt, lt
  for (const c of sub) {
    if (c.operator === '>' || c.operator === '>=') {
      gt = higherGT(gt, c, options)
    } else if (c.operator === '<' || c.operator === '<=') {
      lt = lowerLT(lt, c, options)
    } else {
      eqSet.add(c.semver)
    }
  }

  if (eqSet.size > 1) {
    return null
  }

  let gtltComp
  if (gt && lt) {
    gtltComp = compare(gt.semver, lt.semver, options)
    if (gtltComp > 0) {
      return null
    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {
      return null
    }
  }

  // will iterate one or zero times
  for (const eq of eqSet) {
    if (gt && !satisfies(eq, String(gt), options)) {
      return null
    }

    if (lt && !satisfies(eq, String(lt), options)) {
      return null
    }

    for (const c of dom) {
      if (!satisfies(eq, String(c), options)) {
        return false
      }
    }

    return true
  }

  let higher, lower
  let hasDomLT, hasDomGT
  // if the subset has a prerelease, we need a comparator in the superset
  // with the same tuple and a prerelease, or it's not a subset
  let needDomLTPre = lt &&
    !options.includePrerelease &&
    lt.semver.prerelease.length ? lt.semver : false
  let needDomGTPre = gt &&
    !options.includePrerelease &&
    gt.semver.prerelease.length ? gt.semver : false
  // exception: <1.2.3-0 is the same as <1.2.3
  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&
      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
    needDomLTPre = false
  }

  for (const c of dom) {
    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='
    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='
    if (gt) {
      if (needDomGTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomGTPre.major &&
            c.semver.minor === needDomGTPre.minor &&
            c.semver.patch === needDomGTPre.patch) {
          needDomGTPre = false
        }
      }
      if (c.operator === '>' || c.operator === '>=') {
        higher = higherGT(gt, c, options)
        if (higher === c && higher !== gt) {
          return false
        }
      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {
        return false
      }
    }
    if (lt) {
      if (needDomLTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomLTPre.major &&
            c.semver.minor === needDomLTPre.minor &&
            c.semver.patch === needDomLTPre.patch) {
          needDomLTPre = false
        }
      }
      if (c.operator === '<' || c.operator === '<=') {
        lower = lowerLT(lt, c, options)
        if (lower === c && lower !== lt) {
          return false
        }
      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {
        return false
      }
    }
    if (!c.operator && (lt || gt) && gtltComp !== 0) {
      return false
    }
  }

  // if there was a < or >, and nothing in the dom, then must be false
  // UNLESS it was limited by another range in the other direction.
  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
  if (gt && hasDomLT && !lt && gtltComp !== 0) {
    return false
  }

  if (lt && hasDomGT && !gt && gtltComp !== 0) {
    return false
  }

  // we needed a prerelease range in a specific tuple, but didn't get one
  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
  // because it includes prereleases in the 1.2.3 tuple
  if (needDomGTPre || needDomLTPre) {
    return false
  }

  return true
}

// >=1.2.3 is lower than >1.2.3
const higherGT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare(a.semver, b.semver, options)
  return comp > 0 ? a
    : comp < 0 ? b
    : b.operator === '>' && a.operator === '>=' ? b
    : a
}

// <=1.2.3 is higher than <1.2.3
const lowerLT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare(a.semver, b.semver, options)
  return comp < 0 ? a
    : comp > 0 ? b
    : b.operator === '<' && a.operator === '<=' ? b
    : a
}

module.exports = subset


/***/ }),

/***/ "./node_modules/semver/ranges/to-comparators.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const Range = __webpack_require__("./node_modules/semver/classes/range.js")

// Mostly just for testing and legacy API reasons
const toComparators = (range, options) =>
  new Range(range, options).set
    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))

module.exports = toComparators


/***/ }),

/***/ "./node_modules/semver/ranges/valid.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const Range = __webpack_require__("./node_modules/semver/classes/range.js")
const validRange = (range, options) => {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*'
  } catch (er) {
    return null
  }
}
module.exports = validRange


/***/ }),

/***/ "./node_modules/tslib/tslib.es6.mjs":
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __addDisposableResource: function() { return /* binding */ __addDisposableResource; },
/* harmony export */   __assign: function() { return /* binding */ __assign; },
/* harmony export */   __asyncDelegator: function() { return /* binding */ __asyncDelegator; },
/* harmony export */   __asyncGenerator: function() { return /* binding */ __asyncGenerator; },
/* harmony export */   __asyncValues: function() { return /* binding */ __asyncValues; },
/* harmony export */   __await: function() { return /* binding */ __await; },
/* harmony export */   __awaiter: function() { return /* binding */ __awaiter; },
/* harmony export */   __classPrivateFieldGet: function() { return /* binding */ __classPrivateFieldGet; },
/* harmony export */   __classPrivateFieldIn: function() { return /* binding */ __classPrivateFieldIn; },
/* harmony export */   __classPrivateFieldSet: function() { return /* binding */ __classPrivateFieldSet; },
/* harmony export */   __createBinding: function() { return /* binding */ __createBinding; },
/* harmony export */   __decorate: function() { return /* binding */ __decorate; },
/* harmony export */   __disposeResources: function() { return /* binding */ __disposeResources; },
/* harmony export */   __esDecorate: function() { return /* binding */ __esDecorate; },
/* harmony export */   __exportStar: function() { return /* binding */ __exportStar; },
/* harmony export */   __extends: function() { return /* binding */ __extends; },
/* harmony export */   __generator: function() { return /* binding */ __generator; },
/* harmony export */   __importDefault: function() { return /* binding */ __importDefault; },
/* harmony export */   __importStar: function() { return /* binding */ __importStar; },
/* harmony export */   __makeTemplateObject: function() { return /* binding */ __makeTemplateObject; },
/* harmony export */   __metadata: function() { return /* binding */ __metadata; },
/* harmony export */   __param: function() { return /* binding */ __param; },
/* harmony export */   __propKey: function() { return /* binding */ __propKey; },
/* harmony export */   __read: function() { return /* binding */ __read; },
/* harmony export */   __rest: function() { return /* binding */ __rest; },
/* harmony export */   __rewriteRelativeImportExtension: function() { return /* binding */ __rewriteRelativeImportExtension; },
/* harmony export */   __runInitializers: function() { return /* binding */ __runInitializers; },
/* harmony export */   __setFunctionName: function() { return /* binding */ __setFunctionName; },
/* harmony export */   __spread: function() { return /* binding */ __spread; },
/* harmony export */   __spreadArray: function() { return /* binding */ __spreadArray; },
/* harmony export */   __spreadArrays: function() { return /* binding */ __spreadArrays; },
/* harmony export */   __values: function() { return /* binding */ __values; }
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

var ownKeys = function(o) {
  ownKeys = Object.getOwnPropertyNames || function (o) {
    var ar = [];
    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
    return ar;
  };
  return ownKeys(o);
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
        }
        else s |= 1;
      }
      catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}

function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
      return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {
          return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : (d + ext + "." + cm.toLowerCase() + "js");
      });
  }
  return path;
}

/* harmony default export */ __webpack_exports__["default"] = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __esDecorate,
  __runInitializers,
  __propKey,
  __setFunctionName,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
  __rewriteRelativeImportExtension,
});


/***/ }),

/***/ "?0707":
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?ff28":
/***/ (function() {

/* (ignored) */

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,