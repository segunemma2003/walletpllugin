(this["webpackChunkpaycio_wallet"] = this["webpackChunkpaycio_wallet"] || []).push([["node_modules_trezor_connect_lib_index-browser_js"],{

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/***/ (function(module) {

"use strict";

module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx/*, varargs */) {
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err/*, varargs */) {
            if (pending) {
                pending = false;
                if (err)
                    reject(err);
                else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}


/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var base64 = exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p)
        return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
    return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;)
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0, // output index
        j = 0, // goto index
        t;     // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1)
            chunk[i++] = 61;
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, // goto index
        t;     // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1)
            break;
        if ((c = s64[c]) === undefined)
            throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1)
        throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};


/***/ }),

/***/ "./node_modules/@protobufjs/codegen/index.js":
/***/ (function(module) {

"use strict";

module.exports = codegen;

/**
 * Begins generating a function.
 * @memberof util
 * @param {string[]} functionParams Function parameter names
 * @param {string} [functionName] Function name if not anonymous
 * @returns {Codegen} Appender that appends code to the function's body
 */
function codegen(functionParams, functionName) {

    /* istanbul ignore if */
    if (typeof functionParams === "string") {
        functionName = functionParams;
        functionParams = undefined;
    }

    var body = [];

    /**
     * Appends code to the function's body or finishes generation.
     * @typedef Codegen
     * @type {function}
     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any
     * @param {...*} [formatParams] Format parameters
     * @returns {Codegen|Function} Itself or the generated function if finished
     * @throws {Error} If format parameter counts do not match
     */

    function Codegen(formatStringOrScope) {
        // note that explicit array handling below makes this ~50% faster

        // finish the function
        if (typeof formatStringOrScope !== "string") {
            var source = toString();
            if (codegen.verbose)
                console.log("codegen: " + source); // eslint-disable-line no-console
            source = "return " + source;
            if (formatStringOrScope) {
                var scopeKeys   = Object.keys(formatStringOrScope),
                    scopeParams = new Array(scopeKeys.length + 1),
                    scopeValues = new Array(scopeKeys.length),
                    scopeOffset = 0;
                while (scopeOffset < scopeKeys.length) {
                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];
                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
                }
                scopeParams[scopeOffset] = source;
                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func
            }
            return Function(source)(); // eslint-disable-line no-new-func
        }

        // otherwise append to body
        var formatParams = new Array(arguments.length - 1),
            formatOffset = 0;
        while (formatOffset < formatParams.length)
            formatParams[formatOffset] = arguments[++formatOffset];
        formatOffset = 0;
        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
            var value = formatParams[formatOffset++];
            switch ($1) {
                case "d": case "f": return String(Number(value));
                case "i": return String(Math.floor(value));
                case "j": return JSON.stringify(value);
                case "s": return String(value);
            }
            return "%";
        });
        if (formatOffset !== formatParams.length)
            throw Error("parameter count mismatch");
        body.push(formatStringOrScope);
        return Codegen;
    }

    function toString(functionNameOverride) {
        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
    }

    Codegen.toString = toString;
    return Codegen;
}

/**
 * Begins generating a function.
 * @memberof util
 * @function codegen
 * @param {string} [functionName] Function name if not anonymous
 * @returns {Codegen} Appender that appends code to the function's body
 * @variation 2
 */

/**
 * When set to `true`, codegen will log generated code to console. Useful for debugging.
 * @name util.codegen.verbose
 * @type {boolean}
 */
codegen.verbose = false;


/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/***/ (function(module) {

"use strict";

module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn  : fn,
        ctx : ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined)
        this._listeners = {};
    else {
        if (fn === undefined)
            this._listeners[evt] = [];
        else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;)
                if (listeners[i].fn === fn)
                    listeners.splice(i, 1);
                else
                    ++i;
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;)
            args.push(arguments[i++]);
        for (i = 0; i < listeners.length;)
            listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};


/***/ }),

/***/ "./node_modules/@protobufjs/fetch/index.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = fetch;

var asPromise = __webpack_require__("./node_modules/@protobufjs/aspromise/index.js"),
    inquire   = __webpack_require__("./node_modules/@protobufjs/inquire/index.js");

var fs = inquire("fs");

/**
 * Node-style callback as used by {@link util.fetch}.
 * @typedef FetchCallback
 * @type {function}
 * @param {?Error} error Error, if any, otherwise `null`
 * @param {string} [contents] File contents, if there hasn't been an error
 * @returns {undefined}
 */

/**
 * Options as used by {@link util.fetch}.
 * @typedef FetchOptions
 * @type {Object}
 * @property {boolean} [binary=false] Whether expecting a binary response
 * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest
 */

/**
 * Fetches the contents of a file.
 * @memberof util
 * @param {string} filename File path or url
 * @param {FetchOptions} options Fetch options
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 */
function fetch(filename, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = {};
    } else if (!options)
        options = {};

    if (!callback)
        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this

    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.
    if (!options.xhr && fs && fs.readFile)
        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
            return err && typeof XMLHttpRequest !== "undefined"
                ? fetch.xhr(filename, options, callback)
                : err
                ? callback(err)
                : callback(null, options.binary ? contents : contents.toString("utf8"));
        });

    // use the XHR version otherwise.
    return fetch.xhr(filename, options, callback);
}

/**
 * Fetches the contents of a file.
 * @name util.fetch
 * @function
 * @param {string} path File path or url
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 * @variation 2
 */

/**
 * Fetches the contents of a file.
 * @name util.fetch
 * @function
 * @param {string} path File path or url
 * @param {FetchOptions} [options] Fetch options
 * @returns {Promise<string|Uint8Array>} Promise
 * @variation 3
 */

/**/
fetch.xhr = function fetch_xhr(filename, options, callback) {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {

        if (xhr.readyState !== 4)
            return undefined;

        // local cors security errors return status 0 / empty string, too. afaik this cannot be
        // reliably distinguished from an actually empty file for security reasons. feel free
        // to send a pull request if you are aware of a solution.
        if (xhr.status !== 0 && xhr.status !== 200)
            return callback(Error("status " + xhr.status));

        // if binary data is expected, make sure that some sort of array is returned, even if
        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.
        if (options.binary) {
            var buffer = xhr.response;
            if (!buffer) {
                buffer = [];
                for (var i = 0; i < xhr.responseText.length; ++i)
                    buffer.push(xhr.responseText.charCodeAt(i) & 255);
            }
            return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
        }
        return callback(null, xhr.responseText);
    };

    if (options.binary) {
        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers
        if ("overrideMimeType" in xhr)
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
        xhr.responseType = "arraybuffer";
    }

    xhr.open("GET", filename);
    xhr.send();
};


/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/***/ (function(module) {

"use strict";


module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {

        var f32 = new Float32Array([ -0 ]),
            f8b = new Uint8Array(f32.buffer),
            le  = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos    ];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    // float: ieee754
    })(); else (function() {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0)
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val))
                writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 1.401298464324817e-45 * mantissa
                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le  = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos    ];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    // double: ieee754
    })(); else (function() {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) { // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) { // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024)
                        exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 5e-324 * mantissa
                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos    ] =  val        & 255;
    buf[pos + 1] =  val >>> 8  & 255;
    buf[pos + 2] =  val >>> 16 & 255;
    buf[pos + 3] =  val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos    ] =  val >>> 24;
    buf[pos + 1] =  val >>> 16 & 255;
    buf[pos + 2] =  val >>> 8  & 255;
    buf[pos + 3] =  val        & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos    ]
          | buf[pos + 1] << 8
          | buf[pos + 2] << 16
          | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos    ] << 24
          | buf[pos + 1] << 16
          | buf[pos + 2] << 8
          | buf[pos + 3]) >>> 0;
}


/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/***/ (function(module) {

"use strict";

module.exports = inquire;

/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */
function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length))
            return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}


/***/ }),

/***/ "./node_modules/@protobufjs/path/index.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


/**
 * A minimal path module to resolve Unix, Windows and URL paths alike.
 * @memberof util
 * @namespace
 */
var path = exports;

var isAbsolute =
/**
 * Tests if the specified path is absolute.
 * @param {string} path Path to test
 * @returns {boolean} `true` if path is absolute
 */
path.isAbsolute = function isAbsolute(path) {
    return /^(?:\/|\w+:)/.test(path);
};

var normalize =
/**
 * Normalizes the specified path.
 * @param {string} path Path to normalize
 * @returns {string} Normalized path
 */
path.normalize = function normalize(path) {
    path = path.replace(/\\/g, "/")
               .replace(/\/{2,}/g, "/");
    var parts    = path.split("/"),
        absolute = isAbsolute(path),
        prefix   = "";
    if (absolute)
        prefix = parts.shift() + "/";
    for (var i = 0; i < parts.length;) {
        if (parts[i] === "..") {
            if (i > 0 && parts[i - 1] !== "..")
                parts.splice(--i, 2);
            else if (absolute)
                parts.splice(i, 1);
            else
                ++i;
        } else if (parts[i] === ".")
            parts.splice(i, 1);
        else
            ++i;
    }
    return prefix + parts.join("/");
};

/**
 * Resolves the specified include path against the specified origin path.
 * @param {string} originPath Path to the origin file
 * @param {string} includePath Include path relative to origin path
 * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized
 * @returns {string} Path to the include file
 */
path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
    if (!alreadyNormalized)
        includePath = normalize(includePath);
    if (isAbsolute(includePath))
        return includePath;
    if (!alreadyNormalized)
        originPath = normalize(originPath);
    return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
};


/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/***/ (function(module) {

"use strict";

module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE   = size || 8192;
    var MAX    = SIZE >>> 1;
    var slab   = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX)
            return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}


/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var utf8 = exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
            len += 1;
        else if (c < 2048)
            len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else
            len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1)
        return "";
    var parts = null,
        chunk = [],
        i = 0, // char offset
        t;     // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128)
            chunk[i++] = t;
        else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1, // character 1
        c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6       | 192;
            buffer[offset++] = c1       & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18      | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12      | 224;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        }
    }
    return offset - start;
};


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/errors/errors.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValueErrorIterator = exports.ValueErrorsUnknownTypeError = exports.ValueErrorType = void 0;
exports.Errors = Errors;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/system/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/registry/index.js");
const extends_undefined_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/extends-undefined.js");
const function_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/errors/function.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/index.js");
const index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/deref/index.js");
const index_6 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/hash/index.js");
const index_7 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/check/index.js");
const index_8 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_9 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------
// prettier-ignore
const index_10 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/guard/index.js");
// ------------------------------------------------------------------
// ValueErrorType
// ------------------------------------------------------------------
var ValueErrorType;
(function (ValueErrorType) {
    ValueErrorType[ValueErrorType["ArrayContains"] = 0] = "ArrayContains";
    ValueErrorType[ValueErrorType["ArrayMaxContains"] = 1] = "ArrayMaxContains";
    ValueErrorType[ValueErrorType["ArrayMaxItems"] = 2] = "ArrayMaxItems";
    ValueErrorType[ValueErrorType["ArrayMinContains"] = 3] = "ArrayMinContains";
    ValueErrorType[ValueErrorType["ArrayMinItems"] = 4] = "ArrayMinItems";
    ValueErrorType[ValueErrorType["ArrayUniqueItems"] = 5] = "ArrayUniqueItems";
    ValueErrorType[ValueErrorType["Array"] = 6] = "Array";
    ValueErrorType[ValueErrorType["AsyncIterator"] = 7] = "AsyncIterator";
    ValueErrorType[ValueErrorType["BigIntExclusiveMaximum"] = 8] = "BigIntExclusiveMaximum";
    ValueErrorType[ValueErrorType["BigIntExclusiveMinimum"] = 9] = "BigIntExclusiveMinimum";
    ValueErrorType[ValueErrorType["BigIntMaximum"] = 10] = "BigIntMaximum";
    ValueErrorType[ValueErrorType["BigIntMinimum"] = 11] = "BigIntMinimum";
    ValueErrorType[ValueErrorType["BigIntMultipleOf"] = 12] = "BigIntMultipleOf";
    ValueErrorType[ValueErrorType["BigInt"] = 13] = "BigInt";
    ValueErrorType[ValueErrorType["Boolean"] = 14] = "Boolean";
    ValueErrorType[ValueErrorType["DateExclusiveMaximumTimestamp"] = 15] = "DateExclusiveMaximumTimestamp";
    ValueErrorType[ValueErrorType["DateExclusiveMinimumTimestamp"] = 16] = "DateExclusiveMinimumTimestamp";
    ValueErrorType[ValueErrorType["DateMaximumTimestamp"] = 17] = "DateMaximumTimestamp";
    ValueErrorType[ValueErrorType["DateMinimumTimestamp"] = 18] = "DateMinimumTimestamp";
    ValueErrorType[ValueErrorType["DateMultipleOfTimestamp"] = 19] = "DateMultipleOfTimestamp";
    ValueErrorType[ValueErrorType["Date"] = 20] = "Date";
    ValueErrorType[ValueErrorType["Function"] = 21] = "Function";
    ValueErrorType[ValueErrorType["IntegerExclusiveMaximum"] = 22] = "IntegerExclusiveMaximum";
    ValueErrorType[ValueErrorType["IntegerExclusiveMinimum"] = 23] = "IntegerExclusiveMinimum";
    ValueErrorType[ValueErrorType["IntegerMaximum"] = 24] = "IntegerMaximum";
    ValueErrorType[ValueErrorType["IntegerMinimum"] = 25] = "IntegerMinimum";
    ValueErrorType[ValueErrorType["IntegerMultipleOf"] = 26] = "IntegerMultipleOf";
    ValueErrorType[ValueErrorType["Integer"] = 27] = "Integer";
    ValueErrorType[ValueErrorType["IntersectUnevaluatedProperties"] = 28] = "IntersectUnevaluatedProperties";
    ValueErrorType[ValueErrorType["Intersect"] = 29] = "Intersect";
    ValueErrorType[ValueErrorType["Iterator"] = 30] = "Iterator";
    ValueErrorType[ValueErrorType["Kind"] = 31] = "Kind";
    ValueErrorType[ValueErrorType["Literal"] = 32] = "Literal";
    ValueErrorType[ValueErrorType["Never"] = 33] = "Never";
    ValueErrorType[ValueErrorType["Not"] = 34] = "Not";
    ValueErrorType[ValueErrorType["Null"] = 35] = "Null";
    ValueErrorType[ValueErrorType["NumberExclusiveMaximum"] = 36] = "NumberExclusiveMaximum";
    ValueErrorType[ValueErrorType["NumberExclusiveMinimum"] = 37] = "NumberExclusiveMinimum";
    ValueErrorType[ValueErrorType["NumberMaximum"] = 38] = "NumberMaximum";
    ValueErrorType[ValueErrorType["NumberMinimum"] = 39] = "NumberMinimum";
    ValueErrorType[ValueErrorType["NumberMultipleOf"] = 40] = "NumberMultipleOf";
    ValueErrorType[ValueErrorType["Number"] = 41] = "Number";
    ValueErrorType[ValueErrorType["ObjectAdditionalProperties"] = 42] = "ObjectAdditionalProperties";
    ValueErrorType[ValueErrorType["ObjectMaxProperties"] = 43] = "ObjectMaxProperties";
    ValueErrorType[ValueErrorType["ObjectMinProperties"] = 44] = "ObjectMinProperties";
    ValueErrorType[ValueErrorType["ObjectRequiredProperty"] = 45] = "ObjectRequiredProperty";
    ValueErrorType[ValueErrorType["Object"] = 46] = "Object";
    ValueErrorType[ValueErrorType["Promise"] = 47] = "Promise";
    ValueErrorType[ValueErrorType["RegExp"] = 48] = "RegExp";
    ValueErrorType[ValueErrorType["StringFormatUnknown"] = 49] = "StringFormatUnknown";
    ValueErrorType[ValueErrorType["StringFormat"] = 50] = "StringFormat";
    ValueErrorType[ValueErrorType["StringMaxLength"] = 51] = "StringMaxLength";
    ValueErrorType[ValueErrorType["StringMinLength"] = 52] = "StringMinLength";
    ValueErrorType[ValueErrorType["StringPattern"] = 53] = "StringPattern";
    ValueErrorType[ValueErrorType["String"] = 54] = "String";
    ValueErrorType[ValueErrorType["Symbol"] = 55] = "Symbol";
    ValueErrorType[ValueErrorType["TupleLength"] = 56] = "TupleLength";
    ValueErrorType[ValueErrorType["Tuple"] = 57] = "Tuple";
    ValueErrorType[ValueErrorType["Uint8ArrayMaxByteLength"] = 58] = "Uint8ArrayMaxByteLength";
    ValueErrorType[ValueErrorType["Uint8ArrayMinByteLength"] = 59] = "Uint8ArrayMinByteLength";
    ValueErrorType[ValueErrorType["Uint8Array"] = 60] = "Uint8Array";
    ValueErrorType[ValueErrorType["Undefined"] = 61] = "Undefined";
    ValueErrorType[ValueErrorType["Union"] = 62] = "Union";
    ValueErrorType[ValueErrorType["Void"] = 63] = "Void";
})(ValueErrorType || (exports.ValueErrorType = ValueErrorType = {}));
// ------------------------------------------------------------------
// ValueErrors
// ------------------------------------------------------------------
class ValueErrorsUnknownTypeError extends index_4.TypeBoxError {
    constructor(schema) {
        super('Unknown type');
        this.schema = schema;
    }
}
exports.ValueErrorsUnknownTypeError = ValueErrorsUnknownTypeError;
// ------------------------------------------------------------------
// EscapeKey
// ------------------------------------------------------------------
function EscapeKey(key) {
    return key.replace(/~/g, '~0').replace(/\//g, '~1'); // RFC6901 Path
}
// ------------------------------------------------------------------
// Guards
// ------------------------------------------------------------------
function IsDefined(value) {
    return value !== undefined;
}
// ------------------------------------------------------------------
// ValueErrorIterator
// ------------------------------------------------------------------
class ValueErrorIterator {
    constructor(iterator) {
        this.iterator = iterator;
    }
    [Symbol.iterator]() {
        return this.iterator;
    }
    /** Returns the first value error or undefined if no errors */
    First() {
        const next = this.iterator.next();
        return next.done ? undefined : next.value;
    }
}
exports.ValueErrorIterator = ValueErrorIterator;
// --------------------------------------------------------------------------
// Create
// --------------------------------------------------------------------------
function Create(errorType, schema, path, value, errors = []) {
    return {
        type: errorType,
        schema,
        path,
        value,
        message: (0, function_1.GetErrorFunction)()({ errorType, path, schema, value, errors }),
        errors,
    };
}
// --------------------------------------------------------------------------
// Types
// --------------------------------------------------------------------------
function* FromAny(schema, references, path, value) { }
function* FromArray(schema, references, path, value) {
    if (!(0, index_10.IsArray)(value)) {
        return yield Create(ValueErrorType.Array, schema, path, value);
    }
    if (IsDefined(schema.minItems) && !(value.length >= schema.minItems)) {
        yield Create(ValueErrorType.ArrayMinItems, schema, path, value);
    }
    if (IsDefined(schema.maxItems) && !(value.length <= schema.maxItems)) {
        yield Create(ValueErrorType.ArrayMaxItems, schema, path, value);
    }
    for (let i = 0; i < value.length; i++) {
        yield* Visit(schema.items, references, `${path}/${i}`, value[i]);
    }
    // prettier-ignore
    if (schema.uniqueItems === true && !((function () { const set = new Set(); for (const element of value) {
        const hashed = (0, index_6.Hash)(element);
        if (set.has(hashed)) {
            return false;
        }
        else {
            set.add(hashed);
        }
    } return true; })())) {
        yield Create(ValueErrorType.ArrayUniqueItems, schema, path, value);
    }
    // contains
    if (!(IsDefined(schema.contains) || IsDefined(schema.minContains) || IsDefined(schema.maxContains))) {
        return;
    }
    const containsSchema = IsDefined(schema.contains) ? schema.contains : (0, index_9.Never)();
    const containsCount = value.reduce((acc, value, index) => (Visit(containsSchema, references, `${path}${index}`, value).next().done === true ? acc + 1 : acc), 0);
    if (containsCount === 0) {
        yield Create(ValueErrorType.ArrayContains, schema, path, value);
    }
    if ((0, index_10.IsNumber)(schema.minContains) && containsCount < schema.minContains) {
        yield Create(ValueErrorType.ArrayMinContains, schema, path, value);
    }
    if ((0, index_10.IsNumber)(schema.maxContains) && containsCount > schema.maxContains) {
        yield Create(ValueErrorType.ArrayMaxContains, schema, path, value);
    }
}
function* FromAsyncIterator(schema, references, path, value) {
    if (!(0, index_10.IsAsyncIterator)(value))
        yield Create(ValueErrorType.AsyncIterator, schema, path, value);
}
function* FromBigInt(schema, references, path, value) {
    if (!(0, index_10.IsBigInt)(value))
        return yield Create(ValueErrorType.BigInt, schema, path, value);
    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
        yield Create(ValueErrorType.BigIntExclusiveMaximum, schema, path, value);
    }
    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
        yield Create(ValueErrorType.BigIntExclusiveMinimum, schema, path, value);
    }
    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {
        yield Create(ValueErrorType.BigIntMaximum, schema, path, value);
    }
    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {
        yield Create(ValueErrorType.BigIntMinimum, schema, path, value);
    }
    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === BigInt(0))) {
        yield Create(ValueErrorType.BigIntMultipleOf, schema, path, value);
    }
}
function* FromBoolean(schema, references, path, value) {
    if (!(0, index_10.IsBoolean)(value))
        yield Create(ValueErrorType.Boolean, schema, path, value);
}
function* FromConstructor(schema, references, path, value) {
    yield* Visit(schema.returns, references, path, value.prototype);
}
function* FromDate(schema, references, path, value) {
    if (!(0, index_10.IsDate)(value))
        return yield Create(ValueErrorType.Date, schema, path, value);
    if (IsDefined(schema.exclusiveMaximumTimestamp) && !(value.getTime() < schema.exclusiveMaximumTimestamp)) {
        yield Create(ValueErrorType.DateExclusiveMaximumTimestamp, schema, path, value);
    }
    if (IsDefined(schema.exclusiveMinimumTimestamp) && !(value.getTime() > schema.exclusiveMinimumTimestamp)) {
        yield Create(ValueErrorType.DateExclusiveMinimumTimestamp, schema, path, value);
    }
    if (IsDefined(schema.maximumTimestamp) && !(value.getTime() <= schema.maximumTimestamp)) {
        yield Create(ValueErrorType.DateMaximumTimestamp, schema, path, value);
    }
    if (IsDefined(schema.minimumTimestamp) && !(value.getTime() >= schema.minimumTimestamp)) {
        yield Create(ValueErrorType.DateMinimumTimestamp, schema, path, value);
    }
    if (IsDefined(schema.multipleOfTimestamp) && !(value.getTime() % schema.multipleOfTimestamp === 0)) {
        yield Create(ValueErrorType.DateMultipleOfTimestamp, schema, path, value);
    }
}
function* FromFunction(schema, references, path, value) {
    if (!(0, index_10.IsFunction)(value))
        yield Create(ValueErrorType.Function, schema, path, value);
}
function* FromInteger(schema, references, path, value) {
    if (!(0, index_10.IsInteger)(value))
        return yield Create(ValueErrorType.Integer, schema, path, value);
    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
        yield Create(ValueErrorType.IntegerExclusiveMaximum, schema, path, value);
    }
    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
        yield Create(ValueErrorType.IntegerExclusiveMinimum, schema, path, value);
    }
    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {
        yield Create(ValueErrorType.IntegerMaximum, schema, path, value);
    }
    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {
        yield Create(ValueErrorType.IntegerMinimum, schema, path, value);
    }
    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {
        yield Create(ValueErrorType.IntegerMultipleOf, schema, path, value);
    }
}
function* FromIntersect(schema, references, path, value) {
    let hasError = false;
    for (const inner of schema.allOf) {
        for (const error of Visit(inner, references, path, value)) {
            hasError = true;
            yield error;
        }
    }
    if (hasError) {
        return yield Create(ValueErrorType.Intersect, schema, path, value);
    }
    if (schema.unevaluatedProperties === false) {
        const keyCheck = new RegExp((0, index_2.KeyOfPattern)(schema));
        for (const valueKey of Object.getOwnPropertyNames(value)) {
            if (!keyCheck.test(valueKey)) {
                yield Create(ValueErrorType.IntersectUnevaluatedProperties, schema, `${path}/${valueKey}`, value);
            }
        }
    }
    if (typeof schema.unevaluatedProperties === 'object') {
        const keyCheck = new RegExp((0, index_2.KeyOfPattern)(schema));
        for (const valueKey of Object.getOwnPropertyNames(value)) {
            if (!keyCheck.test(valueKey)) {
                const next = Visit(schema.unevaluatedProperties, references, `${path}/${valueKey}`, value[valueKey]).next();
                if (!next.done)
                    yield next.value; // yield interior
            }
        }
    }
}
function* FromIterator(schema, references, path, value) {
    if (!(0, index_10.IsIterator)(value))
        yield Create(ValueErrorType.Iterator, schema, path, value);
}
function* FromLiteral(schema, references, path, value) {
    if (!(value === schema.const))
        yield Create(ValueErrorType.Literal, schema, path, value);
}
function* FromNever(schema, references, path, value) {
    yield Create(ValueErrorType.Never, schema, path, value);
}
function* FromNot(schema, references, path, value) {
    if (Visit(schema.not, references, path, value).next().done === true)
        yield Create(ValueErrorType.Not, schema, path, value);
}
function* FromNull(schema, references, path, value) {
    if (!(0, index_10.IsNull)(value))
        yield Create(ValueErrorType.Null, schema, path, value);
}
function* FromNumber(schema, references, path, value) {
    if (!index_1.TypeSystemPolicy.IsNumberLike(value))
        return yield Create(ValueErrorType.Number, schema, path, value);
    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
        yield Create(ValueErrorType.NumberExclusiveMaximum, schema, path, value);
    }
    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
        yield Create(ValueErrorType.NumberExclusiveMinimum, schema, path, value);
    }
    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {
        yield Create(ValueErrorType.NumberMaximum, schema, path, value);
    }
    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {
        yield Create(ValueErrorType.NumberMinimum, schema, path, value);
    }
    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {
        yield Create(ValueErrorType.NumberMultipleOf, schema, path, value);
    }
}
function* FromObject(schema, references, path, value) {
    if (!index_1.TypeSystemPolicy.IsObjectLike(value))
        return yield Create(ValueErrorType.Object, schema, path, value);
    if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {
        yield Create(ValueErrorType.ObjectMinProperties, schema, path, value);
    }
    if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {
        yield Create(ValueErrorType.ObjectMaxProperties, schema, path, value);
    }
    const requiredKeys = Array.isArray(schema.required) ? schema.required : [];
    const knownKeys = Object.getOwnPropertyNames(schema.properties);
    const unknownKeys = Object.getOwnPropertyNames(value);
    for (const requiredKey of requiredKeys) {
        if (unknownKeys.includes(requiredKey))
            continue;
        yield Create(ValueErrorType.ObjectRequiredProperty, schema.properties[requiredKey], `${path}/${EscapeKey(requiredKey)}`, undefined);
    }
    if (schema.additionalProperties === false) {
        for (const valueKey of unknownKeys) {
            if (!knownKeys.includes(valueKey)) {
                yield Create(ValueErrorType.ObjectAdditionalProperties, schema, `${path}/${EscapeKey(valueKey)}`, value[valueKey]);
            }
        }
    }
    if (typeof schema.additionalProperties === 'object') {
        for (const valueKey of unknownKeys) {
            if (knownKeys.includes(valueKey))
                continue;
            yield* Visit(schema.additionalProperties, references, `${path}/${EscapeKey(valueKey)}`, value[valueKey]);
        }
    }
    for (const knownKey of knownKeys) {
        const property = schema.properties[knownKey];
        if (schema.required && schema.required.includes(knownKey)) {
            yield* Visit(property, references, `${path}/${EscapeKey(knownKey)}`, value[knownKey]);
            if ((0, extends_undefined_1.ExtendsUndefinedCheck)(schema) && !(knownKey in value)) {
                yield Create(ValueErrorType.ObjectRequiredProperty, property, `${path}/${EscapeKey(knownKey)}`, undefined);
            }
        }
        else {
            if (index_1.TypeSystemPolicy.IsExactOptionalProperty(value, knownKey)) {
                yield* Visit(property, references, `${path}/${EscapeKey(knownKey)}`, value[knownKey]);
            }
        }
    }
}
function* FromPromise(schema, references, path, value) {
    if (!(0, index_10.IsPromise)(value))
        yield Create(ValueErrorType.Promise, schema, path, value);
}
function* FromRecord(schema, references, path, value) {
    if (!index_1.TypeSystemPolicy.IsRecordLike(value))
        return yield Create(ValueErrorType.Object, schema, path, value);
    if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {
        yield Create(ValueErrorType.ObjectMinProperties, schema, path, value);
    }
    if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {
        yield Create(ValueErrorType.ObjectMaxProperties, schema, path, value);
    }
    const [patternKey, patternSchema] = Object.entries(schema.patternProperties)[0];
    const regex = new RegExp(patternKey);
    for (const [propertyKey, propertyValue] of Object.entries(value)) {
        if (regex.test(propertyKey))
            yield* Visit(patternSchema, references, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
    }
    if (typeof schema.additionalProperties === 'object') {
        for (const [propertyKey, propertyValue] of Object.entries(value)) {
            if (!regex.test(propertyKey))
                yield* Visit(schema.additionalProperties, references, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
        }
    }
    if (schema.additionalProperties === false) {
        for (const [propertyKey, propertyValue] of Object.entries(value)) {
            if (regex.test(propertyKey))
                continue;
            return yield Create(ValueErrorType.ObjectAdditionalProperties, schema, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
        }
    }
}
function* FromRef(schema, references, path, value) {
    yield* Visit((0, index_5.Deref)(schema, references), references, path, value);
}
function* FromRegExp(schema, references, path, value) {
    if (!(0, index_10.IsString)(value))
        return yield Create(ValueErrorType.String, schema, path, value);
    if (IsDefined(schema.minLength) && !(value.length >= schema.minLength)) {
        yield Create(ValueErrorType.StringMinLength, schema, path, value);
    }
    if (IsDefined(schema.maxLength) && !(value.length <= schema.maxLength)) {
        yield Create(ValueErrorType.StringMaxLength, schema, path, value);
    }
    const regex = new RegExp(schema.source, schema.flags);
    if (!regex.test(value)) {
        return yield Create(ValueErrorType.RegExp, schema, path, value);
    }
}
function* FromString(schema, references, path, value) {
    if (!(0, index_10.IsString)(value))
        return yield Create(ValueErrorType.String, schema, path, value);
    if (IsDefined(schema.minLength) && !(value.length >= schema.minLength)) {
        yield Create(ValueErrorType.StringMinLength, schema, path, value);
    }
    if (IsDefined(schema.maxLength) && !(value.length <= schema.maxLength)) {
        yield Create(ValueErrorType.StringMaxLength, schema, path, value);
    }
    if ((0, index_10.IsString)(schema.pattern)) {
        const regex = new RegExp(schema.pattern);
        if (!regex.test(value)) {
            yield Create(ValueErrorType.StringPattern, schema, path, value);
        }
    }
    if ((0, index_10.IsString)(schema.format)) {
        if (!index_3.FormatRegistry.Has(schema.format)) {
            yield Create(ValueErrorType.StringFormatUnknown, schema, path, value);
        }
        else {
            const format = index_3.FormatRegistry.Get(schema.format);
            if (!format(value)) {
                yield Create(ValueErrorType.StringFormat, schema, path, value);
            }
        }
    }
}
function* FromSymbol(schema, references, path, value) {
    if (!(0, index_10.IsSymbol)(value))
        yield Create(ValueErrorType.Symbol, schema, path, value);
}
function* FromTemplateLiteral(schema, references, path, value) {
    if (!(0, index_10.IsString)(value))
        return yield Create(ValueErrorType.String, schema, path, value);
    const regex = new RegExp(schema.pattern);
    if (!regex.test(value)) {
        yield Create(ValueErrorType.StringPattern, schema, path, value);
    }
}
function* FromThis(schema, references, path, value) {
    yield* Visit((0, index_5.Deref)(schema, references), references, path, value);
}
function* FromTuple(schema, references, path, value) {
    if (!(0, index_10.IsArray)(value))
        return yield Create(ValueErrorType.Tuple, schema, path, value);
    if (schema.items === undefined && !(value.length === 0)) {
        return yield Create(ValueErrorType.TupleLength, schema, path, value);
    }
    if (!(value.length === schema.maxItems)) {
        return yield Create(ValueErrorType.TupleLength, schema, path, value);
    }
    if (!schema.items) {
        return;
    }
    for (let i = 0; i < schema.items.length; i++) {
        yield* Visit(schema.items[i], references, `${path}/${i}`, value[i]);
    }
}
function* FromUndefined(schema, references, path, value) {
    if (!(0, index_10.IsUndefined)(value))
        yield Create(ValueErrorType.Undefined, schema, path, value);
}
function* FromUnion(schema, references, path, value) {
    if ((0, index_7.Check)(schema, references, value))
        return;
    const errors = schema.anyOf.map((variant) => new ValueErrorIterator(Visit(variant, references, path, value)));
    yield Create(ValueErrorType.Union, schema, path, value, errors);
}
function* FromUint8Array(schema, references, path, value) {
    if (!(0, index_10.IsUint8Array)(value))
        return yield Create(ValueErrorType.Uint8Array, schema, path, value);
    if (IsDefined(schema.maxByteLength) && !(value.length <= schema.maxByteLength)) {
        yield Create(ValueErrorType.Uint8ArrayMaxByteLength, schema, path, value);
    }
    if (IsDefined(schema.minByteLength) && !(value.length >= schema.minByteLength)) {
        yield Create(ValueErrorType.Uint8ArrayMinByteLength, schema, path, value);
    }
}
function* FromUnknown(schema, references, path, value) { }
function* FromVoid(schema, references, path, value) {
    if (!index_1.TypeSystemPolicy.IsVoidLike(value))
        yield Create(ValueErrorType.Void, schema, path, value);
}
function* FromKind(schema, references, path, value) {
    const check = index_3.TypeRegistry.Get(schema[index_8.Kind]);
    if (!check(schema, value))
        yield Create(ValueErrorType.Kind, schema, path, value);
}
function* Visit(schema, references, path, value) {
    const references_ = IsDefined(schema.$id) ? [...references, schema] : references;
    const schema_ = schema;
    switch (schema_[index_8.Kind]) {
        case 'Any':
            return yield* FromAny(schema_, references_, path, value);
        case 'Array':
            return yield* FromArray(schema_, references_, path, value);
        case 'AsyncIterator':
            return yield* FromAsyncIterator(schema_, references_, path, value);
        case 'BigInt':
            return yield* FromBigInt(schema_, references_, path, value);
        case 'Boolean':
            return yield* FromBoolean(schema_, references_, path, value);
        case 'Constructor':
            return yield* FromConstructor(schema_, references_, path, value);
        case 'Date':
            return yield* FromDate(schema_, references_, path, value);
        case 'Function':
            return yield* FromFunction(schema_, references_, path, value);
        case 'Integer':
            return yield* FromInteger(schema_, references_, path, value);
        case 'Intersect':
            return yield* FromIntersect(schema_, references_, path, value);
        case 'Iterator':
            return yield* FromIterator(schema_, references_, path, value);
        case 'Literal':
            return yield* FromLiteral(schema_, references_, path, value);
        case 'Never':
            return yield* FromNever(schema_, references_, path, value);
        case 'Not':
            return yield* FromNot(schema_, references_, path, value);
        case 'Null':
            return yield* FromNull(schema_, references_, path, value);
        case 'Number':
            return yield* FromNumber(schema_, references_, path, value);
        case 'Object':
            return yield* FromObject(schema_, references_, path, value);
        case 'Promise':
            return yield* FromPromise(schema_, references_, path, value);
        case 'Record':
            return yield* FromRecord(schema_, references_, path, value);
        case 'Ref':
            return yield* FromRef(schema_, references_, path, value);
        case 'RegExp':
            return yield* FromRegExp(schema_, references_, path, value);
        case 'String':
            return yield* FromString(schema_, references_, path, value);
        case 'Symbol':
            return yield* FromSymbol(schema_, references_, path, value);
        case 'TemplateLiteral':
            return yield* FromTemplateLiteral(schema_, references_, path, value);
        case 'This':
            return yield* FromThis(schema_, references_, path, value);
        case 'Tuple':
            return yield* FromTuple(schema_, references_, path, value);
        case 'Undefined':
            return yield* FromUndefined(schema_, references_, path, value);
        case 'Union':
            return yield* FromUnion(schema_, references_, path, value);
        case 'Uint8Array':
            return yield* FromUint8Array(schema_, references_, path, value);
        case 'Unknown':
            return yield* FromUnknown(schema_, references_, path, value);
        case 'Void':
            return yield* FromVoid(schema_, references_, path, value);
        default:
            if (!index_3.TypeRegistry.Has(schema_[index_8.Kind]))
                throw new ValueErrorsUnknownTypeError(schema);
            return yield* FromKind(schema_, references_, path, value);
    }
}
/** Returns an iterator for each error in this value. */
function Errors(...args) {
    const iterator = args.length === 3 ? Visit(args[0], args[1], '', args[2]) : Visit(args[0], [], '', args[1]);
    return new ValueErrorIterator(iterator);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/errors/function.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultErrorFunction = DefaultErrorFunction;
exports.SetErrorFunction = SetErrorFunction;
exports.GetErrorFunction = GetErrorFunction;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const errors_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/errors/errors.js");
/** Creates an error message using en-US as the default locale */
function DefaultErrorFunction(error) {
    switch (error.errorType) {
        case errors_1.ValueErrorType.ArrayContains:
            return 'Expected array to contain at least one matching value';
        case errors_1.ValueErrorType.ArrayMaxContains:
            return `Expected array to contain no more than ${error.schema.maxContains} matching values`;
        case errors_1.ValueErrorType.ArrayMinContains:
            return `Expected array to contain at least ${error.schema.minContains} matching values`;
        case errors_1.ValueErrorType.ArrayMaxItems:
            return `Expected array length to be less or equal to ${error.schema.maxItems}`;
        case errors_1.ValueErrorType.ArrayMinItems:
            return `Expected array length to be greater or equal to ${error.schema.minItems}`;
        case errors_1.ValueErrorType.ArrayUniqueItems:
            return 'Expected array elements to be unique';
        case errors_1.ValueErrorType.Array:
            return 'Expected array';
        case errors_1.ValueErrorType.AsyncIterator:
            return 'Expected AsyncIterator';
        case errors_1.ValueErrorType.BigIntExclusiveMaximum:
            return `Expected bigint to be less than ${error.schema.exclusiveMaximum}`;
        case errors_1.ValueErrorType.BigIntExclusiveMinimum:
            return `Expected bigint to be greater than ${error.schema.exclusiveMinimum}`;
        case errors_1.ValueErrorType.BigIntMaximum:
            return `Expected bigint to be less or equal to ${error.schema.maximum}`;
        case errors_1.ValueErrorType.BigIntMinimum:
            return `Expected bigint to be greater or equal to ${error.schema.minimum}`;
        case errors_1.ValueErrorType.BigIntMultipleOf:
            return `Expected bigint to be a multiple of ${error.schema.multipleOf}`;
        case errors_1.ValueErrorType.BigInt:
            return 'Expected bigint';
        case errors_1.ValueErrorType.Boolean:
            return 'Expected boolean';
        case errors_1.ValueErrorType.DateExclusiveMinimumTimestamp:
            return `Expected Date timestamp to be greater than ${error.schema.exclusiveMinimumTimestamp}`;
        case errors_1.ValueErrorType.DateExclusiveMaximumTimestamp:
            return `Expected Date timestamp to be less than ${error.schema.exclusiveMaximumTimestamp}`;
        case errors_1.ValueErrorType.DateMinimumTimestamp:
            return `Expected Date timestamp to be greater or equal to ${error.schema.minimumTimestamp}`;
        case errors_1.ValueErrorType.DateMaximumTimestamp:
            return `Expected Date timestamp to be less or equal to ${error.schema.maximumTimestamp}`;
        case errors_1.ValueErrorType.DateMultipleOfTimestamp:
            return `Expected Date timestamp to be a multiple of ${error.schema.multipleOfTimestamp}`;
        case errors_1.ValueErrorType.Date:
            return 'Expected Date';
        case errors_1.ValueErrorType.Function:
            return 'Expected function';
        case errors_1.ValueErrorType.IntegerExclusiveMaximum:
            return `Expected integer to be less than ${error.schema.exclusiveMaximum}`;
        case errors_1.ValueErrorType.IntegerExclusiveMinimum:
            return `Expected integer to be greater than ${error.schema.exclusiveMinimum}`;
        case errors_1.ValueErrorType.IntegerMaximum:
            return `Expected integer to be less or equal to ${error.schema.maximum}`;
        case errors_1.ValueErrorType.IntegerMinimum:
            return `Expected integer to be greater or equal to ${error.schema.minimum}`;
        case errors_1.ValueErrorType.IntegerMultipleOf:
            return `Expected integer to be a multiple of ${error.schema.multipleOf}`;
        case errors_1.ValueErrorType.Integer:
            return 'Expected integer';
        case errors_1.ValueErrorType.IntersectUnevaluatedProperties:
            return 'Unexpected property';
        case errors_1.ValueErrorType.Intersect:
            return 'Expected all values to match';
        case errors_1.ValueErrorType.Iterator:
            return 'Expected Iterator';
        case errors_1.ValueErrorType.Literal:
            return `Expected ${typeof error.schema.const === 'string' ? `'${error.schema.const}'` : error.schema.const}`;
        case errors_1.ValueErrorType.Never:
            return 'Never';
        case errors_1.ValueErrorType.Not:
            return 'Value should not match';
        case errors_1.ValueErrorType.Null:
            return 'Expected null';
        case errors_1.ValueErrorType.NumberExclusiveMaximum:
            return `Expected number to be less than ${error.schema.exclusiveMaximum}`;
        case errors_1.ValueErrorType.NumberExclusiveMinimum:
            return `Expected number to be greater than ${error.schema.exclusiveMinimum}`;
        case errors_1.ValueErrorType.NumberMaximum:
            return `Expected number to be less or equal to ${error.schema.maximum}`;
        case errors_1.ValueErrorType.NumberMinimum:
            return `Expected number to be greater or equal to ${error.schema.minimum}`;
        case errors_1.ValueErrorType.NumberMultipleOf:
            return `Expected number to be a multiple of ${error.schema.multipleOf}`;
        case errors_1.ValueErrorType.Number:
            return 'Expected number';
        case errors_1.ValueErrorType.Object:
            return 'Expected object';
        case errors_1.ValueErrorType.ObjectAdditionalProperties:
            return 'Unexpected property';
        case errors_1.ValueErrorType.ObjectMaxProperties:
            return `Expected object to have no more than ${error.schema.maxProperties} properties`;
        case errors_1.ValueErrorType.ObjectMinProperties:
            return `Expected object to have at least ${error.schema.minProperties} properties`;
        case errors_1.ValueErrorType.ObjectRequiredProperty:
            return 'Expected required property';
        case errors_1.ValueErrorType.Promise:
            return 'Expected Promise';
        case errors_1.ValueErrorType.RegExp:
            return 'Expected string to match regular expression';
        case errors_1.ValueErrorType.StringFormatUnknown:
            return `Unknown format '${error.schema.format}'`;
        case errors_1.ValueErrorType.StringFormat:
            return `Expected string to match '${error.schema.format}' format`;
        case errors_1.ValueErrorType.StringMaxLength:
            return `Expected string length less or equal to ${error.schema.maxLength}`;
        case errors_1.ValueErrorType.StringMinLength:
            return `Expected string length greater or equal to ${error.schema.minLength}`;
        case errors_1.ValueErrorType.StringPattern:
            return `Expected string to match '${error.schema.pattern}'`;
        case errors_1.ValueErrorType.String:
            return 'Expected string';
        case errors_1.ValueErrorType.Symbol:
            return 'Expected symbol';
        case errors_1.ValueErrorType.TupleLength:
            return `Expected tuple to have ${error.schema.maxItems || 0} elements`;
        case errors_1.ValueErrorType.Tuple:
            return 'Expected tuple';
        case errors_1.ValueErrorType.Uint8ArrayMaxByteLength:
            return `Expected byte length less or equal to ${error.schema.maxByteLength}`;
        case errors_1.ValueErrorType.Uint8ArrayMinByteLength:
            return `Expected byte length greater or equal to ${error.schema.minByteLength}`;
        case errors_1.ValueErrorType.Uint8Array:
            return 'Expected Uint8Array';
        case errors_1.ValueErrorType.Undefined:
            return 'Expected undefined';
        case errors_1.ValueErrorType.Union:
            return 'Expected union value';
        case errors_1.ValueErrorType.Void:
            return 'Expected void';
        case errors_1.ValueErrorType.Kind:
            return `Expected kind '${error.schema[index_1.Kind]}'`;
        default:
            return 'Unknown error type';
    }
}
/** Manages error message providers */
let errorFunction = DefaultErrorFunction;
/** Sets the error function used to generate error messages. */
function SetErrorFunction(callback) {
    errorFunction = callback;
}
/** Gets the error function used to generate error messages */
function GetErrorFunction() {
    return errorFunction;
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/errors/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/errors/errors.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/errors/function.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
// ------------------------------------------------------------------
// Infrastructure
// ------------------------------------------------------------------
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/helpers/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/patterns/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/registry/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/sets/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js"), exports);
// ------------------------------------------------------------------
// Types
// ------------------------------------------------------------------
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/any/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/array/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/async-iterator/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/awaited/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/bigint/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/boolean/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/composite/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/const/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/constructor/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/constructor-parameters/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/date/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/deref/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/enum/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/exclude/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extract/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/function/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/instance-type/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/integer/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/iterator/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/not/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/null/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/number/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/object/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/omit/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/optional/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/parameters/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/partial/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/pick/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/promise/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly-optional/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/record/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/recursive/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/ref/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/regexp/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/required/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/rest/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/return-type/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/schema/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/static/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/strict/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/string/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbol/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/transform/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/tuple/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/uint8array/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/undefined/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/unknown/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/unsafe/index.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/void/index.js"), exports);
// ------------------------------------------------------------------
// Type.*
// ------------------------------------------------------------------
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/type/index.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/system/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/system/policy.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/system/system.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/system/policy.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeSystemPolicy = void 0;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/guard/index.js");
var TypeSystemPolicy;
(function (TypeSystemPolicy) {
    // ------------------------------------------------------------------
    // TypeSystemPolicy: Instancing
    // ------------------------------------------------------------------
    /**
     * Configures the instantiation behavior of TypeBox types. The `default` option assigns raw JavaScript
     * references for embedded types, which may cause side effects if type properties are explicitly updated
     * outside the TypeBox type builder. The `clone` option creates copies of any shared types upon creation,
     * preventing unintended side effects. The `freeze` option applies `Object.freeze()` to the type, making
     * it fully readonly and immutable. Implementations should use `default` whenever possible, as it is the
     * fastest way to instantiate types. The default setting is `default`.
     */
    TypeSystemPolicy.InstanceMode = 'default';
    // ------------------------------------------------------------------
    // TypeSystemPolicy: Checking
    // ------------------------------------------------------------------
    /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */
    TypeSystemPolicy.ExactOptionalPropertyTypes = false;
    /** Sets whether arrays should be treated as a kind of objects. The default is `false` */
    TypeSystemPolicy.AllowArrayObject = false;
    /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */
    TypeSystemPolicy.AllowNaN = false;
    /** Sets whether `null` should validate for void types. The default is `false` */
    TypeSystemPolicy.AllowNullVoid = false;
    /** Checks this value using the ExactOptionalPropertyTypes policy */
    function IsExactOptionalProperty(value, key) {
        return TypeSystemPolicy.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;
    }
    TypeSystemPolicy.IsExactOptionalProperty = IsExactOptionalProperty;
    /** Checks this value using the AllowArrayObjects policy */
    function IsObjectLike(value) {
        const isObject = (0, index_1.IsObject)(value);
        return TypeSystemPolicy.AllowArrayObject ? isObject : isObject && !(0, index_1.IsArray)(value);
    }
    TypeSystemPolicy.IsObjectLike = IsObjectLike;
    /** Checks this value as a record using the AllowArrayObjects policy */
    function IsRecordLike(value) {
        return IsObjectLike(value) && !(value instanceof Date) && !(value instanceof Uint8Array);
    }
    TypeSystemPolicy.IsRecordLike = IsRecordLike;
    /** Checks this value using the AllowNaN policy */
    function IsNumberLike(value) {
        return TypeSystemPolicy.AllowNaN ? (0, index_1.IsNumber)(value) : Number.isFinite(value);
    }
    TypeSystemPolicy.IsNumberLike = IsNumberLike;
    /** Checks this value using the AllowVoidNull policy */
    function IsVoidLike(value) {
        const isUndefined = (0, index_1.IsUndefined)(value);
        return TypeSystemPolicy.AllowNullVoid ? isUndefined || value === null : isUndefined;
    }
    TypeSystemPolicy.IsVoidLike = IsVoidLike;
})(TypeSystemPolicy || (exports.TypeSystemPolicy = TypeSystemPolicy = {}));


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/system/system.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeSystem = exports.TypeSystemDuplicateFormat = exports.TypeSystemDuplicateTypeKind = void 0;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/registry/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/unsafe/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/index.js");
// ------------------------------------------------------------------
// Errors
// ------------------------------------------------------------------
class TypeSystemDuplicateTypeKind extends index_4.TypeBoxError {
    constructor(kind) {
        super(`Duplicate type kind '${kind}' detected`);
    }
}
exports.TypeSystemDuplicateTypeKind = TypeSystemDuplicateTypeKind;
class TypeSystemDuplicateFormat extends index_4.TypeBoxError {
    constructor(kind) {
        super(`Duplicate string format '${kind}' detected`);
    }
}
exports.TypeSystemDuplicateFormat = TypeSystemDuplicateFormat;
/** Creates user defined types and formats and provides overrides for value checking behaviours */
var TypeSystem;
(function (TypeSystem) {
    /** Creates a new type */
    function Type(kind, check) {
        if (index_1.TypeRegistry.Has(kind))
            throw new TypeSystemDuplicateTypeKind(kind);
        index_1.TypeRegistry.Set(kind, check);
        return (options = {}) => (0, index_2.Unsafe)({ ...options, [index_3.Kind]: kind });
    }
    TypeSystem.Type = Type;
    /** Creates a new string format */
    function Format(format, check) {
        if (index_1.FormatRegistry.Has(format))
            throw new TypeSystemDuplicateFormat(format);
        index_1.FormatRegistry.Set(format, check);
        return format;
    }
    TypeSystem.Format = Format;
})(TypeSystem || (exports.TypeSystem = TypeSystem = {}));


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/any/any.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Any = Any;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates an Any type */
function Any(options) {
    return (0, index_1.CreateType)({ [index_2.Kind]: 'Any' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/any/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/any/any.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/array/array.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Array = Array;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates an Array type */
function Array(items, options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Array', type: 'array', items }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/array/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/array/array.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/async-iterator/async-iterator.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AsyncIterator = AsyncIterator;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
/** `[JavaScript]` Creates a AsyncIterator type */
function AsyncIterator(items, options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'AsyncIterator', type: 'AsyncIterator', items }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/async-iterator/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/async-iterator/async-iterator.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/awaited/awaited.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Awaited = Awaited;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function FromRest(T) {
    return T.map(L => AwaitedResolve(L));
}
// prettier-ignore
function FromIntersect(T) {
    return (0, index_1.Intersect)(FromRest(T));
}
// prettier-ignore
function FromUnion(T) {
    return (0, index_2.Union)(FromRest(T));
}
// prettier-ignore
function FromPromise(T) {
    return AwaitedResolve(T);
}
// ----------------------------------------------------------------
// AwaitedResolve
// ----------------------------------------------------------------
// prettier-ignore
function AwaitedResolve(T) {
    return ((0, kind_1.IsIntersect)(T) ? FromIntersect(T.allOf) :
        (0, kind_1.IsUnion)(T) ? FromUnion(T.anyOf) :
            (0, kind_1.IsPromise)(T) ? FromPromise(T.item) :
                T);
}
/** `[JavaScript]` Constructs a type by recursively unwrapping Promise types */
function Awaited(T, options) {
    return (0, type_1.CreateType)(AwaitedResolve(T), options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/awaited/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/awaited/awaited.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/bigint/bigint.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BigInt = BigInt;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/index.js");
/** `[JavaScript]` Creates a BigInt type */
function BigInt(options) {
    return (0, index_2.CreateType)({ [index_1.Kind]: 'BigInt', type: 'bigint' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/bigint/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/bigint/bigint.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/boolean/boolean.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Boolean = Boolean;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/index.js");
/** `[Json]` Creates a Boolean type */
function Boolean(options) {
    return (0, index_2.CreateType)({ [index_1.Kind]: 'Boolean', type: 'boolean' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/boolean/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/boolean/boolean.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/clone/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/type.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/clone/type.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloneRest = CloneRest;
exports.CloneType = CloneType;
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js");
/** Clones a Rest */
function CloneRest(schemas) {
    return schemas.map((schema) => CloneType(schema));
}
/** Clones a Type */
function CloneType(schema, options) {
    return options === undefined ? (0, value_1.Clone)(schema) : (0, value_1.Clone)({ ...options, ...schema });
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Clone = Clone;
const ValueGuard = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");
function ArrayType(value) {
    return value.map((value) => Visit(value));
}
function DateType(value) {
    return new Date(value.getTime());
}
function Uint8ArrayType(value) {
    return new Uint8Array(value);
}
function RegExpType(value) {
    return new RegExp(value.source, value.flags);
}
function ObjectType(value) {
    const result = {};
    for (const key of Object.getOwnPropertyNames(value)) {
        result[key] = Visit(value[key]);
    }
    for (const key of Object.getOwnPropertySymbols(value)) {
        result[key] = Visit(value[key]);
    }
    return result;
}
// prettier-ignore
function Visit(value) {
    return (ValueGuard.IsArray(value) ? ArrayType(value) :
        ValueGuard.IsDate(value) ? DateType(value) :
            ValueGuard.IsUint8Array(value) ? Uint8ArrayType(value) :
                ValueGuard.IsRegExp(value) ? RegExpType(value) :
                    ValueGuard.IsObject(value) ? ObjectType(value) :
                        value);
}
/** Clones a value */
function Clone(value) {
    return Visit(value);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/composite/composite.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Composite = Composite;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/object/index.js");
const index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/sets/index.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function CompositeKeys(T) {
    const Acc = [];
    for (const L of T)
        Acc.push(...(0, index_3.KeyOfPropertyKeys)(L));
    return (0, index_5.SetDistinct)(Acc);
}
// prettier-ignore
function FilterNever(T) {
    return T.filter(L => !(0, kind_1.IsNever)(L));
}
// prettier-ignore
function CompositeProperty(T, K) {
    const Acc = [];
    for (const L of T)
        Acc.push(...(0, index_2.IndexFromPropertyKeys)(L, [K]));
    return FilterNever(Acc);
}
// prettier-ignore
function CompositeProperties(T, K) {
    const Acc = {};
    for (const L of K) {
        Acc[L] = (0, index_1.IntersectEvaluated)(CompositeProperty(T, L));
    }
    return Acc;
}
// prettier-ignore
function Composite(T, options) {
    const K = CompositeKeys(T);
    const P = CompositeProperties(T, K);
    const R = (0, index_4.Object)(P, options);
    return R;
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/composite/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/composite/composite.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/const/const.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Const = Const;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/any/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/bigint/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/date/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/function/index.js");
const index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js");
const index_6 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/null/index.js");
const index_7 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/object/index.js");
const index_8 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbol/index.js");
const index_9 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/tuple/index.js");
const index_10 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly/index.js");
const index_11 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/undefined/index.js");
const index_12 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/uint8array/index.js");
const index_13 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/unknown/index.js");
const index_14 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/index.js");
// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");
// prettier-ignore
function FromArray(T) {
    return T.map(L => FromValue(L, false));
}
// prettier-ignore
function FromProperties(value) {
    const Acc = {};
    for (const K of globalThis.Object.getOwnPropertyNames(value))
        Acc[K] = (0, index_10.Readonly)(FromValue(value[K], false));
    return Acc;
}
function ConditionalReadonly(T, root) {
    return (root === true ? T : (0, index_10.Readonly)(T));
}
// prettier-ignore
function FromValue(value, root) {
    return ((0, value_1.IsAsyncIterator)(value) ? ConditionalReadonly((0, index_1.Any)(), root) :
        (0, value_1.IsIterator)(value) ? ConditionalReadonly((0, index_1.Any)(), root) :
            (0, value_1.IsArray)(value) ? (0, index_10.Readonly)((0, index_9.Tuple)(FromArray(value))) :
                (0, value_1.IsUint8Array)(value) ? (0, index_12.Uint8Array)() :
                    (0, value_1.IsDate)(value) ? (0, index_3.Date)() :
                        (0, value_1.IsObject)(value) ? ConditionalReadonly((0, index_7.Object)(FromProperties(value)), root) :
                            (0, value_1.IsFunction)(value) ? ConditionalReadonly((0, index_4.Function)([], (0, index_13.Unknown)()), root) :
                                (0, value_1.IsUndefined)(value) ? (0, index_11.Undefined)() :
                                    (0, value_1.IsNull)(value) ? (0, index_6.Null)() :
                                        (0, value_1.IsSymbol)(value) ? (0, index_8.Symbol)() :
                                            (0, value_1.IsBigInt)(value) ? (0, index_2.BigInt)() :
                                                (0, value_1.IsNumber)(value) ? (0, index_5.Literal)(value) :
                                                    (0, value_1.IsBoolean)(value) ? (0, index_5.Literal)(value) :
                                                        (0, value_1.IsString)(value) ? (0, index_5.Literal)(value) :
                                                            (0, index_7.Object)({}));
}
/** `[JavaScript]` Creates a readonly const type from the given value. */
function Const(T, options) {
    return (0, index_14.CreateType)(FromValue(T, true), options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/const/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/const/const.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/constructor-parameters/constructor-parameters.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConstructorParameters = ConstructorParameters;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/tuple/index.js");
/** `[JavaScript]` Extracts the ConstructorParameters from the given Constructor type */
function ConstructorParameters(schema, options) {
    return (0, index_1.Tuple)(schema.parameters, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/constructor-parameters/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/constructor-parameters/constructor-parameters.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/constructor/constructor.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Constructor = Constructor;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[JavaScript]` Creates a Constructor type */
function Constructor(parameters, returns, options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Constructor', type: 'Constructor', parameters, returns }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/constructor/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/constructor/constructor.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/create/immutable.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Immutable = Immutable;
const ValueGuard = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");
function ImmutableArray(value) {
    return globalThis.Object.freeze(value).map((value) => Immutable(value));
}
function ImmutableDate(value) {
    return value;
}
function ImmutableUint8Array(value) {
    return value;
}
function ImmutableRegExp(value) {
    return value;
}
function ImmutableObject(value) {
    const result = {};
    for (const key of Object.getOwnPropertyNames(value)) {
        result[key] = Immutable(value[key]);
    }
    for (const key of Object.getOwnPropertySymbols(value)) {
        result[key] = Immutable(value[key]);
    }
    return globalThis.Object.freeze(result);
}
/** Specialized deep immutable value. Applies freeze recursively to the given value */
// prettier-ignore
function Immutable(value) {
    return (ValueGuard.IsArray(value) ? ImmutableArray(value) :
        ValueGuard.IsDate(value) ? ImmutableDate(value) :
            ValueGuard.IsUint8Array(value) ? ImmutableUint8Array(value) :
                ValueGuard.IsRegExp(value) ? ImmutableRegExp(value) :
                    ValueGuard.IsObject(value) ? ImmutableObject(value) :
                        value);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/create/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/create/type.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateType = CreateType;
const policy_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/system/policy.js");
const immutable_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/immutable.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js");
/** Creates TypeBox schematics using the configured InstanceMode */
function CreateType(schema, options) {
    const result = options !== undefined ? { ...options, ...schema } : schema;
    switch (policy_1.TypeSystemPolicy.InstanceMode) {
        case 'freeze':
            return (0, immutable_1.Immutable)(result);
        case 'clone':
            return (0, value_1.Clone)(result);
        default:
            return result;
    }
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/date/date.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Date = Date;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
/** `[JavaScript]` Creates a Date type */
function Date(options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Date', type: 'Date' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/date/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/date/date.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/deref/deref.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Deref = Deref;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/discard/index.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
function FromRest(schema, references) {
    return schema.map((schema) => Deref(schema, references));
}
// prettier-ignore
function FromProperties(properties, references) {
    const Acc = {};
    for (const K of globalThis.Object.getOwnPropertyNames(properties)) {
        Acc[K] = Deref(properties[K], references);
    }
    return Acc;
}
// prettier-ignore
function FromConstructor(schema, references) {
    schema.parameters = FromRest(schema.parameters, references);
    schema.returns = Deref(schema.returns, references);
    return schema;
}
// prettier-ignore
function FromFunction(schema, references) {
    schema.parameters = FromRest(schema.parameters, references);
    schema.returns = Deref(schema.returns, references);
    return schema;
}
// prettier-ignore
function FromIntersect(schema, references) {
    schema.allOf = FromRest(schema.allOf, references);
    return schema;
}
// prettier-ignore
function FromUnion(schema, references) {
    schema.anyOf = FromRest(schema.anyOf, references);
    return schema;
}
// prettier-ignore
function FromTuple(schema, references) {
    if ((0, value_1.IsUndefined)(schema.items))
        return schema;
    schema.items = FromRest(schema.items, references);
    return schema;
}
// prettier-ignore
function FromArray(schema, references) {
    schema.items = Deref(schema.items, references);
    return schema;
}
// prettier-ignore
function FromObject(schema, references) {
    schema.properties = FromProperties(schema.properties, references);
    return schema;
}
// prettier-ignore
function FromPromise(schema, references) {
    schema.item = Deref(schema.item, references);
    return schema;
}
// prettier-ignore
function FromAsyncIterator(schema, references) {
    schema.items = Deref(schema.items, references);
    return schema;
}
// prettier-ignore
function FromIterator(schema, references) {
    schema.items = Deref(schema.items, references);
    return schema;
}
// prettier-ignore
function FromRef(schema, references) {
    const target = references.find(remote => remote.$id === schema.$ref);
    if (target === undefined)
        throw Error(`Unable to dereference schema with $id ${schema.$ref}`);
    const discard = (0, index_1.Discard)(target, ['$id']);
    return Deref(discard, references);
}
// prettier-ignore
function DerefResolve(schema, references) {
    return ((0, kind_1.IsConstructor)(schema) ? FromConstructor(schema, references) :
        (0, kind_1.IsFunction)(schema) ? FromFunction(schema, references) :
            (0, kind_1.IsIntersect)(schema) ? FromIntersect(schema, references) :
                (0, kind_1.IsUnion)(schema) ? FromUnion(schema, references) :
                    (0, kind_1.IsTuple)(schema) ? FromTuple(schema, references) :
                        (0, kind_1.IsArray)(schema) ? FromArray(schema, references) :
                            (0, kind_1.IsObject)(schema) ? FromObject(schema, references) :
                                (0, kind_1.IsPromise)(schema) ? FromPromise(schema, references) :
                                    (0, kind_1.IsAsyncIterator)(schema) ? FromAsyncIterator(schema, references) :
                                        (0, kind_1.IsIterator)(schema) ? FromIterator(schema, references) :
                                            (0, kind_1.IsRef)(schema) ? FromRef(schema, references) :
                                                schema);
}
// ------------------------------------------------------------------
// TDeref
// ------------------------------------------------------------------
/** `[Json]` Creates a dereferenced type */
function Deref(schema, references) {
    return DerefResolve((0, type_1.CloneType)(schema), (0, type_1.CloneRest)(references));
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/deref/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/deref/deref.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/discard/discard.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Discard = Discard;
function DiscardKey(value, key) {
    const { [key]: _, ...rest } = value;
    return rest;
}
/** Discards property keys from the given value. This function returns a shallow Clone. */
function Discard(value, keys) {
    return keys.reduce((acc, key) => DiscardKey(acc, key), value);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/discard/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/discard/discard.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/enum/enum.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Enum = Enum;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");
/** `[Json]` Creates a Enum type */
function Enum(item, options) {
    if ((0, value_1.IsUndefined)(item))
        throw new Error('Enum undefined or empty');
    const values1 = globalThis.Object.getOwnPropertyNames(item)
        .filter((key) => isNaN(key))
        .map((key) => item[key]);
    const values2 = [...new Set(values1)];
    const anyOf = values2.map((value) => (0, index_1.Literal)(value));
    return (0, index_3.Union)(anyOf, { ...options, [index_2.Hint]: 'Enum' });
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/enum/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/enum/enum.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/error/error.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeBoxError = void 0;
/** The base Error type thrown for all TypeBox exceptions  */
class TypeBoxError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.TypeBoxError = TypeBoxError;


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/error/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/error.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/exclude/exclude-from-mapped-result.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExcludeFromMappedResult = ExcludeFromMappedResult;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const exclude_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/exclude/exclude.js");
// prettier-ignore
function FromProperties(P, U) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(P))
        Acc[K2] = (0, exclude_1.Exclude)(P[K2], U);
    return Acc;
}
// prettier-ignore
function FromMappedResult(R, T) {
    return FromProperties(R.properties, T);
}
// prettier-ignore
function ExcludeFromMappedResult(R, T) {
    const P = FromMappedResult(R, T);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/exclude/exclude-from-template-literal.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExcludeFromTemplateLiteral = ExcludeFromTemplateLiteral;
const exclude_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/exclude/exclude.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/index.js");
function ExcludeFromTemplateLiteral(L, R) {
    return (0, exclude_1.Exclude)((0, index_1.TemplateLiteralToUnion)(L), R);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/exclude/exclude.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Exclude = Exclude;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/index.js");
const exclude_from_mapped_result_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/exclude/exclude-from-mapped-result.js");
const exclude_from_template_literal_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/exclude/exclude-from-template-literal.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
function ExcludeRest(L, R) {
    const excluded = L.filter((inner) => (0, index_3.ExtendsCheck)(inner, R) === index_3.ExtendsResult.False);
    return excluded.length === 1 ? excluded[0] : (0, index_1.Union)(excluded);
}
/** `[Json]` Constructs a type by excluding from unionType all union members that are assignable to excludedMembers */
function Exclude(L, R, options = {}) {
    // overloads
    if ((0, kind_1.IsTemplateLiteral)(L))
        return (0, type_1.CreateType)((0, exclude_from_template_literal_1.ExcludeFromTemplateLiteral)(L, R), options);
    if ((0, kind_1.IsMappedResult)(L))
        return (0, type_1.CreateType)((0, exclude_from_mapped_result_1.ExcludeFromMappedResult)(L, R), options);
    // prettier-ignore
    return (0, type_1.CreateType)((0, kind_1.IsUnion)(L) ? ExcludeRest(L.anyOf, R) :
        (0, index_3.ExtendsCheck)(L, R) !== index_3.ExtendsResult.False ? (0, index_2.Never)() : L, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/exclude/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/exclude/exclude-from-mapped-result.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/exclude/exclude-from-template-literal.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/exclude/exclude.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/extends/extends-check.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtendsResult = exports.ExtendsResolverError = void 0;
exports.ExtendsCheck = ExtendsCheck;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/any/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/function/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/number/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/string/index.js");
const index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/unknown/index.js");
const index_6 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/index.js");
const index_7 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/patterns/index.js");
const index_8 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_9 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/index.js");
const index_10 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/index.js");
class ExtendsResolverError extends index_9.TypeBoxError {
}
exports.ExtendsResolverError = ExtendsResolverError;
var ExtendsResult;
(function (ExtendsResult) {
    ExtendsResult[ExtendsResult["Union"] = 0] = "Union";
    ExtendsResult[ExtendsResult["True"] = 1] = "True";
    ExtendsResult[ExtendsResult["False"] = 2] = "False";
})(ExtendsResult || (exports.ExtendsResult = ExtendsResult = {}));
// ------------------------------------------------------------------
// IntoBooleanResult
// ------------------------------------------------------------------
// prettier-ignore
function IntoBooleanResult(result) {
    return result === ExtendsResult.False ? result : ExtendsResult.True;
}
// ------------------------------------------------------------------
// Throw
// ------------------------------------------------------------------
// prettier-ignore
function Throw(message) {
    throw new ExtendsResolverError(message);
}
// ------------------------------------------------------------------
// StructuralRight
// ------------------------------------------------------------------
// prettier-ignore
function IsStructuralRight(right) {
    return (index_10.TypeGuard.IsNever(right) ||
        index_10.TypeGuard.IsIntersect(right) ||
        index_10.TypeGuard.IsUnion(right) ||
        index_10.TypeGuard.IsUnknown(right) ||
        index_10.TypeGuard.IsAny(right));
}
// prettier-ignore
function StructuralRight(left, right) {
    return (index_10.TypeGuard.IsNever(right) ? FromNeverRight(left, right) :
        index_10.TypeGuard.IsIntersect(right) ? FromIntersectRight(left, right) :
            index_10.TypeGuard.IsUnion(right) ? FromUnionRight(left, right) :
                index_10.TypeGuard.IsUnknown(right) ? FromUnknownRight(left, right) :
                    index_10.TypeGuard.IsAny(right) ? FromAnyRight(left, right) :
                        Throw('StructuralRight'));
}
// ------------------------------------------------------------------
// Any
// ------------------------------------------------------------------
// prettier-ignore
function FromAnyRight(left, right) {
    return ExtendsResult.True;
}
// prettier-ignore
function FromAny(left, right) {
    return (index_10.TypeGuard.IsIntersect(right) ? FromIntersectRight(left, right) :
        (index_10.TypeGuard.IsUnion(right) && right.anyOf.some((schema) => index_10.TypeGuard.IsAny(schema) || index_10.TypeGuard.IsUnknown(schema))) ? ExtendsResult.True :
            index_10.TypeGuard.IsUnion(right) ? ExtendsResult.Union :
                index_10.TypeGuard.IsUnknown(right) ? ExtendsResult.True :
                    index_10.TypeGuard.IsAny(right) ? ExtendsResult.True :
                        ExtendsResult.Union);
}
// ------------------------------------------------------------------
// Array
// ------------------------------------------------------------------
// prettier-ignore
function FromArrayRight(left, right) {
    return (index_10.TypeGuard.IsUnknown(left) ? ExtendsResult.False :
        index_10.TypeGuard.IsAny(left) ? ExtendsResult.Union :
            index_10.TypeGuard.IsNever(left) ? ExtendsResult.True :
                ExtendsResult.False);
}
// prettier-ignore
function FromArray(left, right) {
    return (index_10.TypeGuard.IsObject(right) && IsObjectArrayLike(right) ? ExtendsResult.True :
        IsStructuralRight(right) ? StructuralRight(left, right) :
            !index_10.TypeGuard.IsArray(right) ? ExtendsResult.False :
                IntoBooleanResult(Visit(left.items, right.items)));
}
// ------------------------------------------------------------------
// AsyncIterator
// ------------------------------------------------------------------
// prettier-ignore
function FromAsyncIterator(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        !index_10.TypeGuard.IsAsyncIterator(right) ? ExtendsResult.False :
            IntoBooleanResult(Visit(left.items, right.items)));
}
// ------------------------------------------------------------------
// BigInt
// ------------------------------------------------------------------
// prettier-ignore
function FromBigInt(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
            index_10.TypeGuard.IsRecord(right) ? FromRecordRight(left, right) :
                index_10.TypeGuard.IsBigInt(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Boolean
// ------------------------------------------------------------------
// prettier-ignore
function FromBooleanRight(left, right) {
    return (index_10.TypeGuard.IsLiteralBoolean(left) ? ExtendsResult.True :
        index_10.TypeGuard.IsBoolean(left) ? ExtendsResult.True :
            ExtendsResult.False);
}
// prettier-ignore
function FromBoolean(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
            index_10.TypeGuard.IsRecord(right) ? FromRecordRight(left, right) :
                index_10.TypeGuard.IsBoolean(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Constructor
// ------------------------------------------------------------------
// prettier-ignore
function FromConstructor(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
            !index_10.TypeGuard.IsConstructor(right) ? ExtendsResult.False :
                left.parameters.length > right.parameters.length ? ExtendsResult.False :
                    (!left.parameters.every((schema, index) => IntoBooleanResult(Visit(right.parameters[index], schema)) === ExtendsResult.True)) ? ExtendsResult.False :
                        IntoBooleanResult(Visit(left.returns, right.returns)));
}
// ------------------------------------------------------------------
// Date
// ------------------------------------------------------------------
// prettier-ignore
function FromDate(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
            index_10.TypeGuard.IsRecord(right) ? FromRecordRight(left, right) :
                index_10.TypeGuard.IsDate(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Function
// ------------------------------------------------------------------
// prettier-ignore
function FromFunction(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
            !index_10.TypeGuard.IsFunction(right) ? ExtendsResult.False :
                left.parameters.length > right.parameters.length ? ExtendsResult.False :
                    (!left.parameters.every((schema, index) => IntoBooleanResult(Visit(right.parameters[index], schema)) === ExtendsResult.True)) ? ExtendsResult.False :
                        IntoBooleanResult(Visit(left.returns, right.returns)));
}
// ------------------------------------------------------------------
// Integer
// ------------------------------------------------------------------
// prettier-ignore
function FromIntegerRight(left, right) {
    return (index_10.TypeGuard.IsLiteral(left) && index_10.ValueGuard.IsNumber(left.const) ? ExtendsResult.True :
        index_10.TypeGuard.IsNumber(left) || index_10.TypeGuard.IsInteger(left) ? ExtendsResult.True :
            ExtendsResult.False);
}
// prettier-ignore
function FromInteger(left, right) {
    return (index_10.TypeGuard.IsInteger(right) || index_10.TypeGuard.IsNumber(right) ? ExtendsResult.True :
        IsStructuralRight(right) ? StructuralRight(left, right) :
            index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
                index_10.TypeGuard.IsRecord(right) ? FromRecordRight(left, right) :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Intersect
// ------------------------------------------------------------------
// prettier-ignore
function FromIntersectRight(left, right) {
    return right.allOf.every((schema) => Visit(left, schema) === ExtendsResult.True)
        ? ExtendsResult.True
        : ExtendsResult.False;
}
// prettier-ignore
function FromIntersect(left, right) {
    return left.allOf.some((schema) => Visit(schema, right) === ExtendsResult.True)
        ? ExtendsResult.True
        : ExtendsResult.False;
}
// ------------------------------------------------------------------
// Iterator
// ------------------------------------------------------------------
// prettier-ignore
function FromIterator(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        !index_10.TypeGuard.IsIterator(right) ? ExtendsResult.False :
            IntoBooleanResult(Visit(left.items, right.items)));
}
// ------------------------------------------------------------------
// Literal
// ------------------------------------------------------------------
// prettier-ignore
function FromLiteral(left, right) {
    return (index_10.TypeGuard.IsLiteral(right) && right.const === left.const ? ExtendsResult.True :
        IsStructuralRight(right) ? StructuralRight(left, right) :
            index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
                index_10.TypeGuard.IsRecord(right) ? FromRecordRight(left, right) :
                    index_10.TypeGuard.IsString(right) ? FromStringRight(left, right) :
                        index_10.TypeGuard.IsNumber(right) ? FromNumberRight(left, right) :
                            index_10.TypeGuard.IsInteger(right) ? FromIntegerRight(left, right) :
                                index_10.TypeGuard.IsBoolean(right) ? FromBooleanRight(left, right) :
                                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Never
// ------------------------------------------------------------------
// prettier-ignore
function FromNeverRight(left, right) {
    return ExtendsResult.False;
}
// prettier-ignore
function FromNever(left, right) {
    return ExtendsResult.True;
}
// ------------------------------------------------------------------
// Not
// ------------------------------------------------------------------
// prettier-ignore
function UnwrapTNot(schema) {
    let [current, depth] = [schema, 0];
    while (true) {
        if (!index_10.TypeGuard.IsNot(current))
            break;
        current = current.not;
        depth += 1;
    }
    return depth % 2 === 0 ? current : (0, index_5.Unknown)();
}
// prettier-ignore
function FromNot(left, right) {
    // TypeScript has no concept of negated types, and attempts to correctly check the negated
    // type at runtime would put TypeBox at odds with TypeScripts ability to statically infer
    // the type. Instead we unwrap to either unknown or T and continue evaluating.
    // prettier-ignore
    return (index_10.TypeGuard.IsNot(left) ? Visit(UnwrapTNot(left), right) :
        index_10.TypeGuard.IsNot(right) ? Visit(left, UnwrapTNot(right)) :
            Throw('Invalid fallthrough for Not'));
}
// ------------------------------------------------------------------
// Null
// ------------------------------------------------------------------
// prettier-ignore
function FromNull(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
            index_10.TypeGuard.IsRecord(right) ? FromRecordRight(left, right) :
                index_10.TypeGuard.IsNull(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Number
// ------------------------------------------------------------------
// prettier-ignore
function FromNumberRight(left, right) {
    return (index_10.TypeGuard.IsLiteralNumber(left) ? ExtendsResult.True :
        index_10.TypeGuard.IsNumber(left) || index_10.TypeGuard.IsInteger(left) ? ExtendsResult.True :
            ExtendsResult.False);
}
// prettier-ignore
function FromNumber(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
            index_10.TypeGuard.IsRecord(right) ? FromRecordRight(left, right) :
                index_10.TypeGuard.IsInteger(right) || index_10.TypeGuard.IsNumber(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Object
// ------------------------------------------------------------------
// prettier-ignore
function IsObjectPropertyCount(schema, count) {
    return Object.getOwnPropertyNames(schema.properties).length === count;
}
// prettier-ignore
function IsObjectStringLike(schema) {
    return IsObjectArrayLike(schema);
}
// prettier-ignore
function IsObjectSymbolLike(schema) {
    return IsObjectPropertyCount(schema, 0) || (IsObjectPropertyCount(schema, 1) && 'description' in schema.properties && index_10.TypeGuard.IsUnion(schema.properties.description) && schema.properties.description.anyOf.length === 2 && ((index_10.TypeGuard.IsString(schema.properties.description.anyOf[0]) &&
        index_10.TypeGuard.IsUndefined(schema.properties.description.anyOf[1])) || (index_10.TypeGuard.IsString(schema.properties.description.anyOf[1]) &&
        index_10.TypeGuard.IsUndefined(schema.properties.description.anyOf[0]))));
}
// prettier-ignore
function IsObjectNumberLike(schema) {
    return IsObjectPropertyCount(schema, 0);
}
// prettier-ignore
function IsObjectBooleanLike(schema) {
    return IsObjectPropertyCount(schema, 0);
}
// prettier-ignore
function IsObjectBigIntLike(schema) {
    return IsObjectPropertyCount(schema, 0);
}
// prettier-ignore
function IsObjectDateLike(schema) {
    return IsObjectPropertyCount(schema, 0);
}
// prettier-ignore
function IsObjectUint8ArrayLike(schema) {
    return IsObjectArrayLike(schema);
}
// prettier-ignore
function IsObjectFunctionLike(schema) {
    const length = (0, index_3.Number)();
    return IsObjectPropertyCount(schema, 0) || (IsObjectPropertyCount(schema, 1) && 'length' in schema.properties && IntoBooleanResult(Visit(schema.properties['length'], length)) === ExtendsResult.True);
}
// prettier-ignore
function IsObjectConstructorLike(schema) {
    return IsObjectPropertyCount(schema, 0);
}
// prettier-ignore
function IsObjectArrayLike(schema) {
    const length = (0, index_3.Number)();
    return IsObjectPropertyCount(schema, 0) || (IsObjectPropertyCount(schema, 1) && 'length' in schema.properties && IntoBooleanResult(Visit(schema.properties['length'], length)) === ExtendsResult.True);
}
// prettier-ignore
function IsObjectPromiseLike(schema) {
    const then = (0, index_2.Function)([(0, index_1.Any)()], (0, index_1.Any)());
    return IsObjectPropertyCount(schema, 0) || (IsObjectPropertyCount(schema, 1) && 'then' in schema.properties && IntoBooleanResult(Visit(schema.properties['then'], then)) === ExtendsResult.True);
}
// ------------------------------------------------------------------
// Property
// ------------------------------------------------------------------
// prettier-ignore
function Property(left, right) {
    return (Visit(left, right) === ExtendsResult.False ? ExtendsResult.False :
        index_10.TypeGuard.IsOptional(left) && !index_10.TypeGuard.IsOptional(right) ? ExtendsResult.False :
            ExtendsResult.True);
}
// prettier-ignore
function FromObjectRight(left, right) {
    return (index_10.TypeGuard.IsUnknown(left) ? ExtendsResult.False :
        index_10.TypeGuard.IsAny(left) ? ExtendsResult.Union : (index_10.TypeGuard.IsNever(left) ||
            (index_10.TypeGuard.IsLiteralString(left) && IsObjectStringLike(right)) ||
            (index_10.TypeGuard.IsLiteralNumber(left) && IsObjectNumberLike(right)) ||
            (index_10.TypeGuard.IsLiteralBoolean(left) && IsObjectBooleanLike(right)) ||
            (index_10.TypeGuard.IsSymbol(left) && IsObjectSymbolLike(right)) ||
            (index_10.TypeGuard.IsBigInt(left) && IsObjectBigIntLike(right)) ||
            (index_10.TypeGuard.IsString(left) && IsObjectStringLike(right)) ||
            (index_10.TypeGuard.IsSymbol(left) && IsObjectSymbolLike(right)) ||
            (index_10.TypeGuard.IsNumber(left) && IsObjectNumberLike(right)) ||
            (index_10.TypeGuard.IsInteger(left) && IsObjectNumberLike(right)) ||
            (index_10.TypeGuard.IsBoolean(left) && IsObjectBooleanLike(right)) ||
            (index_10.TypeGuard.IsUint8Array(left) && IsObjectUint8ArrayLike(right)) ||
            (index_10.TypeGuard.IsDate(left) && IsObjectDateLike(right)) ||
            (index_10.TypeGuard.IsConstructor(left) && IsObjectConstructorLike(right)) ||
            (index_10.TypeGuard.IsFunction(left) && IsObjectFunctionLike(right))) ? ExtendsResult.True :
            (index_10.TypeGuard.IsRecord(left) && index_10.TypeGuard.IsString(RecordKey(left))) ? (() => {
                // When expressing a Record with literal key values, the Record is converted into a Object with
                // the Hint assigned as `Record`. This is used to invert the extends logic.
                return right[index_8.Hint] === 'Record' ? ExtendsResult.True : ExtendsResult.False;
            })() :
                (index_10.TypeGuard.IsRecord(left) && index_10.TypeGuard.IsNumber(RecordKey(left))) ? (() => {
                    return IsObjectPropertyCount(right, 0) ? ExtendsResult.True : ExtendsResult.False;
                })() :
                    ExtendsResult.False);
}
// prettier-ignore
function FromObject(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsRecord(right) ? FromRecordRight(left, right) :
            !index_10.TypeGuard.IsObject(right) ? ExtendsResult.False :
                (() => {
                    for (const key of Object.getOwnPropertyNames(right.properties)) {
                        if (!(key in left.properties) && !index_10.TypeGuard.IsOptional(right.properties[key])) {
                            return ExtendsResult.False;
                        }
                        if (index_10.TypeGuard.IsOptional(right.properties[key])) {
                            return ExtendsResult.True;
                        }
                        if (Property(left.properties[key], right.properties[key]) === ExtendsResult.False) {
                            return ExtendsResult.False;
                        }
                    }
                    return ExtendsResult.True;
                })());
}
// ------------------------------------------------------------------
// Promise
// ------------------------------------------------------------------
// prettier-ignore
function FromPromise(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) && IsObjectPromiseLike(right) ? ExtendsResult.True :
            !index_10.TypeGuard.IsPromise(right) ? ExtendsResult.False :
                IntoBooleanResult(Visit(left.item, right.item)));
}
// ------------------------------------------------------------------
// Record
// ------------------------------------------------------------------
// prettier-ignore
function RecordKey(schema) {
    return (index_7.PatternNumberExact in schema.patternProperties ? (0, index_3.Number)() :
        index_7.PatternStringExact in schema.patternProperties ? (0, index_4.String)() :
            Throw('Unknown record key pattern'));
}
// prettier-ignore
function RecordValue(schema) {
    return (index_7.PatternNumberExact in schema.patternProperties ? schema.patternProperties[index_7.PatternNumberExact] :
        index_7.PatternStringExact in schema.patternProperties ? schema.patternProperties[index_7.PatternStringExact] :
            Throw('Unable to get record value schema'));
}
// prettier-ignore
function FromRecordRight(left, right) {
    const [Key, Value] = [RecordKey(right), RecordValue(right)];
    return ((index_10.TypeGuard.IsLiteralString(left) && index_10.TypeGuard.IsNumber(Key) && IntoBooleanResult(Visit(left, Value)) === ExtendsResult.True) ? ExtendsResult.True :
        index_10.TypeGuard.IsUint8Array(left) && index_10.TypeGuard.IsNumber(Key) ? Visit(left, Value) :
            index_10.TypeGuard.IsString(left) && index_10.TypeGuard.IsNumber(Key) ? Visit(left, Value) :
                index_10.TypeGuard.IsArray(left) && index_10.TypeGuard.IsNumber(Key) ? Visit(left, Value) :
                    index_10.TypeGuard.IsObject(left) ? (() => {
                        for (const key of Object.getOwnPropertyNames(left.properties)) {
                            if (Property(Value, left.properties[key]) === ExtendsResult.False) {
                                return ExtendsResult.False;
                            }
                        }
                        return ExtendsResult.True;
                    })() :
                        ExtendsResult.False);
}
// prettier-ignore
function FromRecord(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
            !index_10.TypeGuard.IsRecord(right) ? ExtendsResult.False :
                Visit(RecordValue(left), RecordValue(right)));
}
// ------------------------------------------------------------------
// RegExp
// ------------------------------------------------------------------
// prettier-ignore
function FromRegExp(left, right) {
    // Note: RegExp types evaluate as strings, not RegExp objects.
    // Here we remap either into string and continue evaluating.
    const L = index_10.TypeGuard.IsRegExp(left) ? (0, index_4.String)() : left;
    const R = index_10.TypeGuard.IsRegExp(right) ? (0, index_4.String)() : right;
    return Visit(L, R);
}
// ------------------------------------------------------------------
// String
// ------------------------------------------------------------------
// prettier-ignore
function FromStringRight(left, right) {
    return (index_10.TypeGuard.IsLiteral(left) && index_10.ValueGuard.IsString(left.const) ? ExtendsResult.True :
        index_10.TypeGuard.IsString(left) ? ExtendsResult.True :
            ExtendsResult.False);
}
// prettier-ignore
function FromString(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
            index_10.TypeGuard.IsRecord(right) ? FromRecordRight(left, right) :
                index_10.TypeGuard.IsString(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Symbol
// ------------------------------------------------------------------
// prettier-ignore
function FromSymbol(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
            index_10.TypeGuard.IsRecord(right) ? FromRecordRight(left, right) :
                index_10.TypeGuard.IsSymbol(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// TemplateLiteral
// ------------------------------------------------------------------
// prettier-ignore
function FromTemplateLiteral(left, right) {
    // TemplateLiteral types are resolved to either unions for finite expressions or string
    // for infinite expressions. Here we call to TemplateLiteralResolver to resolve for
    // either type and continue evaluating.
    return (index_10.TypeGuard.IsTemplateLiteral(left) ? Visit((0, index_6.TemplateLiteralToUnion)(left), right) :
        index_10.TypeGuard.IsTemplateLiteral(right) ? Visit(left, (0, index_6.TemplateLiteralToUnion)(right)) :
            Throw('Invalid fallthrough for TemplateLiteral'));
}
// ------------------------------------------------------------------
// Tuple
// ------------------------------------------------------------------
// prettier-ignore
function IsArrayOfTuple(left, right) {
    return (index_10.TypeGuard.IsArray(right) &&
        left.items !== undefined &&
        left.items.every((schema) => Visit(schema, right.items) === ExtendsResult.True));
}
// prettier-ignore
function FromTupleRight(left, right) {
    return (index_10.TypeGuard.IsNever(left) ? ExtendsResult.True :
        index_10.TypeGuard.IsUnknown(left) ? ExtendsResult.False :
            index_10.TypeGuard.IsAny(left) ? ExtendsResult.Union :
                ExtendsResult.False);
}
// prettier-ignore
function FromTuple(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) && IsObjectArrayLike(right) ? ExtendsResult.True :
            index_10.TypeGuard.IsArray(right) && IsArrayOfTuple(left, right) ? ExtendsResult.True :
                !index_10.TypeGuard.IsTuple(right) ? ExtendsResult.False :
                    (index_10.ValueGuard.IsUndefined(left.items) && !index_10.ValueGuard.IsUndefined(right.items)) || (!index_10.ValueGuard.IsUndefined(left.items) && index_10.ValueGuard.IsUndefined(right.items)) ? ExtendsResult.False :
                        (index_10.ValueGuard.IsUndefined(left.items) && !index_10.ValueGuard.IsUndefined(right.items)) ? ExtendsResult.True :
                            left.items.every((schema, index) => Visit(schema, right.items[index]) === ExtendsResult.True) ? ExtendsResult.True :
                                ExtendsResult.False);
}
// ------------------------------------------------------------------
// Uint8Array
// ------------------------------------------------------------------
// prettier-ignore
function FromUint8Array(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
            index_10.TypeGuard.IsRecord(right) ? FromRecordRight(left, right) :
                index_10.TypeGuard.IsUint8Array(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Undefined
// ------------------------------------------------------------------
// prettier-ignore
function FromUndefined(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
            index_10.TypeGuard.IsRecord(right) ? FromRecordRight(left, right) :
                index_10.TypeGuard.IsVoid(right) ? FromVoidRight(left, right) :
                    index_10.TypeGuard.IsUndefined(right) ? ExtendsResult.True :
                        ExtendsResult.False);
}
// ------------------------------------------------------------------
// Union
// ------------------------------------------------------------------
// prettier-ignore
function FromUnionRight(left, right) {
    return right.anyOf.some((schema) => Visit(left, schema) === ExtendsResult.True)
        ? ExtendsResult.True
        : ExtendsResult.False;
}
// prettier-ignore
function FromUnion(left, right) {
    return left.anyOf.every((schema) => Visit(schema, right) === ExtendsResult.True)
        ? ExtendsResult.True
        : ExtendsResult.False;
}
// ------------------------------------------------------------------
// Unknown
// ------------------------------------------------------------------
// prettier-ignore
function FromUnknownRight(left, right) {
    return ExtendsResult.True;
}
// prettier-ignore
function FromUnknown(left, right) {
    return (index_10.TypeGuard.IsNever(right) ? FromNeverRight(left, right) :
        index_10.TypeGuard.IsIntersect(right) ? FromIntersectRight(left, right) :
            index_10.TypeGuard.IsUnion(right) ? FromUnionRight(left, right) :
                index_10.TypeGuard.IsAny(right) ? FromAnyRight(left, right) :
                    index_10.TypeGuard.IsString(right) ? FromStringRight(left, right) :
                        index_10.TypeGuard.IsNumber(right) ? FromNumberRight(left, right) :
                            index_10.TypeGuard.IsInteger(right) ? FromIntegerRight(left, right) :
                                index_10.TypeGuard.IsBoolean(right) ? FromBooleanRight(left, right) :
                                    index_10.TypeGuard.IsArray(right) ? FromArrayRight(left, right) :
                                        index_10.TypeGuard.IsTuple(right) ? FromTupleRight(left, right) :
                                            index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
                                                index_10.TypeGuard.IsUnknown(right) ? ExtendsResult.True :
                                                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Void
// ------------------------------------------------------------------
// prettier-ignore
function FromVoidRight(left, right) {
    return (index_10.TypeGuard.IsUndefined(left) ? ExtendsResult.True :
        index_10.TypeGuard.IsUndefined(left) ? ExtendsResult.True :
            ExtendsResult.False);
}
// prettier-ignore
function FromVoid(left, right) {
    return (index_10.TypeGuard.IsIntersect(right) ? FromIntersectRight(left, right) :
        index_10.TypeGuard.IsUnion(right) ? FromUnionRight(left, right) :
            index_10.TypeGuard.IsUnknown(right) ? FromUnknownRight(left, right) :
                index_10.TypeGuard.IsAny(right) ? FromAnyRight(left, right) :
                    index_10.TypeGuard.IsObject(right) ? FromObjectRight(left, right) :
                        index_10.TypeGuard.IsVoid(right) ? ExtendsResult.True :
                            ExtendsResult.False);
}
// prettier-ignore
function Visit(left, right) {
    return (
    // resolvable
    (index_10.TypeGuard.IsTemplateLiteral(left) || index_10.TypeGuard.IsTemplateLiteral(right)) ? FromTemplateLiteral(left, right) :
        (index_10.TypeGuard.IsRegExp(left) || index_10.TypeGuard.IsRegExp(right)) ? FromRegExp(left, right) :
            (index_10.TypeGuard.IsNot(left) || index_10.TypeGuard.IsNot(right)) ? FromNot(left, right) :
                // standard
                index_10.TypeGuard.IsAny(left) ? FromAny(left, right) :
                    index_10.TypeGuard.IsArray(left) ? FromArray(left, right) :
                        index_10.TypeGuard.IsBigInt(left) ? FromBigInt(left, right) :
                            index_10.TypeGuard.IsBoolean(left) ? FromBoolean(left, right) :
                                index_10.TypeGuard.IsAsyncIterator(left) ? FromAsyncIterator(left, right) :
                                    index_10.TypeGuard.IsConstructor(left) ? FromConstructor(left, right) :
                                        index_10.TypeGuard.IsDate(left) ? FromDate(left, right) :
                                            index_10.TypeGuard.IsFunction(left) ? FromFunction(left, right) :
                                                index_10.TypeGuard.IsInteger(left) ? FromInteger(left, right) :
                                                    index_10.TypeGuard.IsIntersect(left) ? FromIntersect(left, right) :
                                                        index_10.TypeGuard.IsIterator(left) ? FromIterator(left, right) :
                                                            index_10.TypeGuard.IsLiteral(left) ? FromLiteral(left, right) :
                                                                index_10.TypeGuard.IsNever(left) ? FromNever(left, right) :
                                                                    index_10.TypeGuard.IsNull(left) ? FromNull(left, right) :
                                                                        index_10.TypeGuard.IsNumber(left) ? FromNumber(left, right) :
                                                                            index_10.TypeGuard.IsObject(left) ? FromObject(left, right) :
                                                                                index_10.TypeGuard.IsRecord(left) ? FromRecord(left, right) :
                                                                                    index_10.TypeGuard.IsString(left) ? FromString(left, right) :
                                                                                        index_10.TypeGuard.IsSymbol(left) ? FromSymbol(left, right) :
                                                                                            index_10.TypeGuard.IsTuple(left) ? FromTuple(left, right) :
                                                                                                index_10.TypeGuard.IsPromise(left) ? FromPromise(left, right) :
                                                                                                    index_10.TypeGuard.IsUint8Array(left) ? FromUint8Array(left, right) :
                                                                                                        index_10.TypeGuard.IsUndefined(left) ? FromUndefined(left, right) :
                                                                                                            index_10.TypeGuard.IsUnion(left) ? FromUnion(left, right) :
                                                                                                                index_10.TypeGuard.IsUnknown(left) ? FromUnknown(left, right) :
                                                                                                                    index_10.TypeGuard.IsVoid(left) ? FromVoid(left, right) :
                                                                                                                        Throw(`Unknown left type operand '${left[index_8.Kind]}'`));
}
function ExtendsCheck(left, right) {
    return Visit(left, right);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/extends/extends-from-mapped-key.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtendsFromMappedKey = ExtendsFromMappedKey;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js");
const extends_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/extends.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js");
// prettier-ignore
function FromPropertyKey(K, U, L, R, options) {
    return {
        [K]: (0, extends_1.Extends)((0, index_2.Literal)(K), U, L, R, (0, value_1.Clone)(options))
    };
}
// prettier-ignore
function FromPropertyKeys(K, U, L, R, options) {
    return K.reduce((Acc, LK) => {
        return { ...Acc, ...FromPropertyKey(LK, U, L, R, options) };
    }, {});
}
// prettier-ignore
function FromMappedKey(K, U, L, R, options) {
    return FromPropertyKeys(K.keys, U, L, R, options);
}
// prettier-ignore
function ExtendsFromMappedKey(T, U, L, R, options) {
    const P = FromMappedKey(T, U, L, R, options);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/extends/extends-from-mapped-result.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtendsFromMappedResult = ExtendsFromMappedResult;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const extends_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/extends.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js");
// prettier-ignore
function FromProperties(P, Right, True, False, options) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(P))
        Acc[K2] = (0, extends_1.Extends)(P[K2], Right, True, False, (0, value_1.Clone)(options));
    return Acc;
}
// prettier-ignore
function FromMappedResult(Left, Right, True, False, options) {
    return FromProperties(Left.properties, Right, True, False, options);
}
// prettier-ignore
function ExtendsFromMappedResult(Left, Right, True, False, options) {
    const P = FromMappedResult(Left, Right, True, False, options);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/extends/extends-undefined.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtendsUndefinedCheck = ExtendsUndefinedCheck;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** Fast undefined check used for properties of type undefined */
function Intersect(schema) {
    return schema.allOf.every((schema) => ExtendsUndefinedCheck(schema));
}
function Union(schema) {
    return schema.anyOf.some((schema) => ExtendsUndefinedCheck(schema));
}
function Not(schema) {
    return !ExtendsUndefinedCheck(schema.not);
}
/** Fast undefined check used for properties of type undefined */
// prettier-ignore
function ExtendsUndefinedCheck(schema) {
    return (schema[index_1.Kind] === 'Intersect' ? Intersect(schema) :
        schema[index_1.Kind] === 'Union' ? Union(schema) :
            schema[index_1.Kind] === 'Not' ? Not(schema) :
                schema[index_1.Kind] === 'Undefined' ? true :
                    false);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/extends/extends.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Extends = Extends;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const extends_check_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/extends-check.js");
const extends_from_mapped_key_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/extends-from-mapped-key.js");
const extends_from_mapped_result_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/extends-from-mapped-result.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function ExtendsResolve(left, right, trueType, falseType) {
    const R = (0, extends_check_1.ExtendsCheck)(left, right);
    return (R === extends_check_1.ExtendsResult.Union ? (0, index_1.Union)([trueType, falseType]) :
        R === extends_check_1.ExtendsResult.True ? trueType :
            falseType);
}
/** `[Json]` Creates a Conditional type */
function Extends(L, R, T, F, options) {
    // prettier-ignore
    return ((0, kind_1.IsMappedResult)(L) ? (0, extends_from_mapped_result_1.ExtendsFromMappedResult)(L, R, T, F, options) :
        (0, kind_1.IsMappedKey)(L) ? (0, type_1.CreateType)((0, extends_from_mapped_key_1.ExtendsFromMappedKey)(L, R, T, F, options)) :
            (0, type_1.CreateType)(ExtendsResolve(L, R, T, F), options));
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/extends/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/extends-check.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/extends-from-mapped-key.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/extends-from-mapped-result.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/extends-undefined.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/extends.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/extract/extract-from-mapped-result.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtractFromMappedResult = ExtractFromMappedResult;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const extract_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extract/extract.js");
// prettier-ignore
function FromProperties(P, T) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(P))
        Acc[K2] = (0, extract_1.Extract)(P[K2], T);
    return Acc;
}
// prettier-ignore
function FromMappedResult(R, T) {
    return FromProperties(R.properties, T);
}
// prettier-ignore
function ExtractFromMappedResult(R, T) {
    const P = FromMappedResult(R, T);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/extract/extract-from-template-literal.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtractFromTemplateLiteral = ExtractFromTemplateLiteral;
const extract_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extract/extract.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/index.js");
function ExtractFromTemplateLiteral(L, R) {
    return (0, extract_1.Extract)((0, index_1.TemplateLiteralToUnion)(L), R);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/extract/extract.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Extract = Extract;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/index.js");
const extract_from_mapped_result_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extract/extract-from-mapped-result.js");
const extract_from_template_literal_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extract/extract-from-template-literal.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
function ExtractRest(L, R) {
    const extracted = L.filter((inner) => (0, index_3.ExtendsCheck)(inner, R) !== index_3.ExtendsResult.False);
    return extracted.length === 1 ? extracted[0] : (0, index_1.Union)(extracted);
}
/** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */
function Extract(L, R, options) {
    // overloads
    if ((0, kind_1.IsTemplateLiteral)(L))
        return (0, type_1.CreateType)((0, extract_from_template_literal_1.ExtractFromTemplateLiteral)(L, R), options);
    if ((0, kind_1.IsMappedResult)(L))
        return (0, type_1.CreateType)((0, extract_from_mapped_result_1.ExtractFromMappedResult)(L, R), options);
    // prettier-ignore
    return (0, type_1.CreateType)((0, kind_1.IsUnion)(L) ? ExtractRest(L.anyOf, R) :
        (0, index_3.ExtendsCheck)(L, R) !== index_3.ExtendsResult.False ? L : (0, index_2.Never)(), options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/extract/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extract/extract-from-mapped-result.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extract/extract-from-template-literal.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extract/extract.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/function/function.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Function = Function;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[JavaScript]` Creates a Function type */
function Function(parameters, returns, options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Function', type: 'Function', parameters, returns }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/function/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/function/function.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/guard/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValueGuard = exports.TypeGuard = exports.KindGuard = void 0;
exports.KindGuard = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
exports.TypeGuard = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/type.js");
exports.ValueGuard = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IsReadonly = IsReadonly;
exports.IsOptional = IsOptional;
exports.IsAny = IsAny;
exports.IsArray = IsArray;
exports.IsAsyncIterator = IsAsyncIterator;
exports.IsBigInt = IsBigInt;
exports.IsBoolean = IsBoolean;
exports.IsConstructor = IsConstructor;
exports.IsDate = IsDate;
exports.IsFunction = IsFunction;
exports.IsInteger = IsInteger;
exports.IsProperties = IsProperties;
exports.IsIntersect = IsIntersect;
exports.IsIterator = IsIterator;
exports.IsKindOf = IsKindOf;
exports.IsLiteralString = IsLiteralString;
exports.IsLiteralNumber = IsLiteralNumber;
exports.IsLiteralBoolean = IsLiteralBoolean;
exports.IsLiteral = IsLiteral;
exports.IsMappedKey = IsMappedKey;
exports.IsMappedResult = IsMappedResult;
exports.IsNever = IsNever;
exports.IsNot = IsNot;
exports.IsNull = IsNull;
exports.IsNumber = IsNumber;
exports.IsObject = IsObject;
exports.IsPromise = IsPromise;
exports.IsRecord = IsRecord;
exports.IsRecursive = IsRecursive;
exports.IsRef = IsRef;
exports.IsRegExp = IsRegExp;
exports.IsString = IsString;
exports.IsSymbol = IsSymbol;
exports.IsTemplateLiteral = IsTemplateLiteral;
exports.IsThis = IsThis;
exports.IsTransform = IsTransform;
exports.IsTuple = IsTuple;
exports.IsUndefined = IsUndefined;
exports.IsUnion = IsUnion;
exports.IsUint8Array = IsUint8Array;
exports.IsUnknown = IsUnknown;
exports.IsUnsafe = IsUnsafe;
exports.IsVoid = IsVoid;
exports.IsKind = IsKind;
exports.IsSchema = IsSchema;
const ValueGuard = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Kind-Only]` Returns true if this value has a Readonly symbol */
function IsReadonly(value) {
    return ValueGuard.IsObject(value) && value[index_1.ReadonlyKind] === 'Readonly';
}
/** `[Kind-Only]` Returns true if this value has a Optional symbol */
function IsOptional(value) {
    return ValueGuard.IsObject(value) && value[index_1.OptionalKind] === 'Optional';
}
/** `[Kind-Only]` Returns true if the given value is TAny */
function IsAny(value) {
    return IsKindOf(value, 'Any');
}
/** `[Kind-Only]` Returns true if the given value is TArray */
function IsArray(value) {
    return IsKindOf(value, 'Array');
}
/** `[Kind-Only]` Returns true if the given value is TAsyncIterator */
function IsAsyncIterator(value) {
    return IsKindOf(value, 'AsyncIterator');
}
/** `[Kind-Only]` Returns true if the given value is TBigInt */
function IsBigInt(value) {
    return IsKindOf(value, 'BigInt');
}
/** `[Kind-Only]` Returns true if the given value is TBoolean */
function IsBoolean(value) {
    return IsKindOf(value, 'Boolean');
}
/** `[Kind-Only]` Returns true if the given value is TConstructor */
function IsConstructor(value) {
    return IsKindOf(value, 'Constructor');
}
/** `[Kind-Only]` Returns true if the given value is TDate */
function IsDate(value) {
    return IsKindOf(value, 'Date');
}
/** `[Kind-Only]` Returns true if the given value is TFunction */
function IsFunction(value) {
    return IsKindOf(value, 'Function');
}
/** `[Kind-Only]` Returns true if the given value is TInteger */
function IsInteger(value) {
    return IsKindOf(value, 'Integer');
}
/** `[Kind-Only]` Returns true if the given schema is TProperties */
function IsProperties(value) {
    return ValueGuard.IsObject(value);
}
/** `[Kind-Only]` Returns true if the given value is TIntersect */
function IsIntersect(value) {
    return IsKindOf(value, 'Intersect');
}
/** `[Kind-Only]` Returns true if the given value is TIterator */
function IsIterator(value) {
    return IsKindOf(value, 'Iterator');
}
/** `[Kind-Only]` Returns true if the given value is a TKind with the given name. */
function IsKindOf(value, kind) {
    return ValueGuard.IsObject(value) && index_1.Kind in value && value[index_1.Kind] === kind;
}
/** `[Kind-Only]` Returns true if the given value is TLiteral<string> */
function IsLiteralString(value) {
    return IsLiteral(value) && ValueGuard.IsString(value.const);
}
/** `[Kind-Only]` Returns true if the given value is TLiteral<number> */
function IsLiteralNumber(value) {
    return IsLiteral(value) && ValueGuard.IsNumber(value.const);
}
/** `[Kind-Only]` Returns true if the given value is TLiteral<boolean> */
function IsLiteralBoolean(value) {
    return IsLiteral(value) && ValueGuard.IsBoolean(value.const);
}
/** `[Kind-Only]` Returns true if the given value is TLiteral */
function IsLiteral(value) {
    return IsKindOf(value, 'Literal');
}
/** `[Kind-Only]` Returns true if the given value is a TMappedKey */
function IsMappedKey(value) {
    return IsKindOf(value, 'MappedKey');
}
/** `[Kind-Only]` Returns true if the given value is TMappedResult */
function IsMappedResult(value) {
    return IsKindOf(value, 'MappedResult');
}
/** `[Kind-Only]` Returns true if the given value is TNever */
function IsNever(value) {
    return IsKindOf(value, 'Never');
}
/** `[Kind-Only]` Returns true if the given value is TNot */
function IsNot(value) {
    return IsKindOf(value, 'Not');
}
/** `[Kind-Only]` Returns true if the given value is TNull */
function IsNull(value) {
    return IsKindOf(value, 'Null');
}
/** `[Kind-Only]` Returns true if the given value is TNumber */
function IsNumber(value) {
    return IsKindOf(value, 'Number');
}
/** `[Kind-Only]` Returns true if the given value is TObject */
function IsObject(value) {
    return IsKindOf(value, 'Object');
}
/** `[Kind-Only]` Returns true if the given value is TPromise */
function IsPromise(value) {
    return IsKindOf(value, 'Promise');
}
/** `[Kind-Only]` Returns true if the given value is TRecord */
function IsRecord(value) {
    return IsKindOf(value, 'Record');
}
/** `[Kind-Only]` Returns true if this value is TRecursive */
function IsRecursive(value) {
    return ValueGuard.IsObject(value) && index_1.Hint in value && value[index_1.Hint] === 'Recursive';
}
/** `[Kind-Only]` Returns true if the given value is TRef */
function IsRef(value) {
    return IsKindOf(value, 'Ref');
}
/** `[Kind-Only]` Returns true if the given value is TRegExp */
function IsRegExp(value) {
    return IsKindOf(value, 'RegExp');
}
/** `[Kind-Only]` Returns true if the given value is TString */
function IsString(value) {
    return IsKindOf(value, 'String');
}
/** `[Kind-Only]` Returns true if the given value is TSymbol */
function IsSymbol(value) {
    return IsKindOf(value, 'Symbol');
}
/** `[Kind-Only]` Returns true if the given value is TTemplateLiteral */
function IsTemplateLiteral(value) {
    return IsKindOf(value, 'TemplateLiteral');
}
/** `[Kind-Only]` Returns true if the given value is TThis */
function IsThis(value) {
    return IsKindOf(value, 'This');
}
/** `[Kind-Only]` Returns true of this value is TTransform */
function IsTransform(value) {
    return ValueGuard.IsObject(value) && index_1.TransformKind in value;
}
/** `[Kind-Only]` Returns true if the given value is TTuple */
function IsTuple(value) {
    return IsKindOf(value, 'Tuple');
}
/** `[Kind-Only]` Returns true if the given value is TUndefined */
function IsUndefined(value) {
    return IsKindOf(value, 'Undefined');
}
/** `[Kind-Only]` Returns true if the given value is TUnion */
function IsUnion(value) {
    return IsKindOf(value, 'Union');
}
/** `[Kind-Only]` Returns true if the given value is TUint8Array */
function IsUint8Array(value) {
    return IsKindOf(value, 'Uint8Array');
}
/** `[Kind-Only]` Returns true if the given value is TUnknown */
function IsUnknown(value) {
    return IsKindOf(value, 'Unknown');
}
/** `[Kind-Only]` Returns true if the given value is a raw TUnsafe */
function IsUnsafe(value) {
    return IsKindOf(value, 'Unsafe');
}
/** `[Kind-Only]` Returns true if the given value is TVoid */
function IsVoid(value) {
    return IsKindOf(value, 'Void');
}
/** `[Kind-Only]` Returns true if the given value is TKind */
function IsKind(value) {
    return ValueGuard.IsObject(value) && index_1.Kind in value && ValueGuard.IsString(value[index_1.Kind]);
}
/** `[Kind-Only]` Returns true if the given value is TSchema */
function IsSchema(value) {
    // prettier-ignore
    return (IsAny(value) ||
        IsArray(value) ||
        IsBoolean(value) ||
        IsBigInt(value) ||
        IsAsyncIterator(value) ||
        IsConstructor(value) ||
        IsDate(value) ||
        IsFunction(value) ||
        IsInteger(value) ||
        IsIntersect(value) ||
        IsIterator(value) ||
        IsLiteral(value) ||
        IsMappedKey(value) ||
        IsMappedResult(value) ||
        IsNever(value) ||
        IsNot(value) ||
        IsNull(value) ||
        IsNumber(value) ||
        IsObject(value) ||
        IsPromise(value) ||
        IsRecord(value) ||
        IsRef(value) ||
        IsRegExp(value) ||
        IsString(value) ||
        IsSymbol(value) ||
        IsTemplateLiteral(value) ||
        IsThis(value) ||
        IsTuple(value) ||
        IsUndefined(value) ||
        IsUnion(value) ||
        IsUint8Array(value) ||
        IsUnknown(value) ||
        IsUnsafe(value) ||
        IsVoid(value) ||
        IsKind(value));
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/guard/type.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeGuardUnknownTypeError = void 0;
exports.IsReadonly = IsReadonly;
exports.IsOptional = IsOptional;
exports.IsAny = IsAny;
exports.IsArray = IsArray;
exports.IsAsyncIterator = IsAsyncIterator;
exports.IsBigInt = IsBigInt;
exports.IsBoolean = IsBoolean;
exports.IsConstructor = IsConstructor;
exports.IsDate = IsDate;
exports.IsFunction = IsFunction;
exports.IsInteger = IsInteger;
exports.IsProperties = IsProperties;
exports.IsIntersect = IsIntersect;
exports.IsIterator = IsIterator;
exports.IsKindOf = IsKindOf;
exports.IsLiteralString = IsLiteralString;
exports.IsLiteralNumber = IsLiteralNumber;
exports.IsLiteralBoolean = IsLiteralBoolean;
exports.IsLiteral = IsLiteral;
exports.IsLiteralValue = IsLiteralValue;
exports.IsMappedKey = IsMappedKey;
exports.IsMappedResult = IsMappedResult;
exports.IsNever = IsNever;
exports.IsNot = IsNot;
exports.IsNull = IsNull;
exports.IsNumber = IsNumber;
exports.IsObject = IsObject;
exports.IsPromise = IsPromise;
exports.IsRecord = IsRecord;
exports.IsRecursive = IsRecursive;
exports.IsRef = IsRef;
exports.IsRegExp = IsRegExp;
exports.IsString = IsString;
exports.IsSymbol = IsSymbol;
exports.IsTemplateLiteral = IsTemplateLiteral;
exports.IsThis = IsThis;
exports.IsTransform = IsTransform;
exports.IsTuple = IsTuple;
exports.IsUndefined = IsUndefined;
exports.IsUnionLiteral = IsUnionLiteral;
exports.IsUnion = IsUnion;
exports.IsUint8Array = IsUint8Array;
exports.IsUnknown = IsUnknown;
exports.IsUnsafe = IsUnsafe;
exports.IsVoid = IsVoid;
exports.IsKind = IsKind;
exports.IsSchema = IsSchema;
const ValueGuard = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/index.js");
class TypeGuardUnknownTypeError extends index_2.TypeBoxError {
}
exports.TypeGuardUnknownTypeError = TypeGuardUnknownTypeError;
const KnownTypes = [
    'Any',
    'Array',
    'AsyncIterator',
    'BigInt',
    'Boolean',
    'Constructor',
    'Date',
    'Enum',
    'Function',
    'Integer',
    'Intersect',
    'Iterator',
    'Literal',
    'MappedKey',
    'MappedResult',
    'Not',
    'Null',
    'Number',
    'Object',
    'Promise',
    'Record',
    'Ref',
    'RegExp',
    'String',
    'Symbol',
    'TemplateLiteral',
    'This',
    'Tuple',
    'Undefined',
    'Union',
    'Uint8Array',
    'Unknown',
    'Void',
];
function IsPattern(value) {
    try {
        new RegExp(value);
        return true;
    }
    catch {
        return false;
    }
}
function IsControlCharacterFree(value) {
    if (!ValueGuard.IsString(value))
        return false;
    for (let i = 0; i < value.length; i++) {
        const code = value.charCodeAt(i);
        if ((code >= 7 && code <= 13) || code === 27 || code === 127) {
            return false;
        }
    }
    return true;
}
function IsAdditionalProperties(value) {
    return IsOptionalBoolean(value) || IsSchema(value);
}
function IsOptionalBigInt(value) {
    return ValueGuard.IsUndefined(value) || ValueGuard.IsBigInt(value);
}
function IsOptionalNumber(value) {
    return ValueGuard.IsUndefined(value) || ValueGuard.IsNumber(value);
}
function IsOptionalBoolean(value) {
    return ValueGuard.IsUndefined(value) || ValueGuard.IsBoolean(value);
}
function IsOptionalString(value) {
    return ValueGuard.IsUndefined(value) || ValueGuard.IsString(value);
}
function IsOptionalPattern(value) {
    return ValueGuard.IsUndefined(value) || (ValueGuard.IsString(value) && IsControlCharacterFree(value) && IsPattern(value));
}
function IsOptionalFormat(value) {
    return ValueGuard.IsUndefined(value) || (ValueGuard.IsString(value) && IsControlCharacterFree(value));
}
function IsOptionalSchema(value) {
    return ValueGuard.IsUndefined(value) || IsSchema(value);
}
// ------------------------------------------------------------------
// Modifiers
// ------------------------------------------------------------------
/** Returns true if this value has a Readonly symbol */
function IsReadonly(value) {
    return ValueGuard.IsObject(value) && value[index_1.ReadonlyKind] === 'Readonly';
}
/** Returns true if this value has a Optional symbol */
function IsOptional(value) {
    return ValueGuard.IsObject(value) && value[index_1.OptionalKind] === 'Optional';
}
// ------------------------------------------------------------------
// Types
// ------------------------------------------------------------------
/** Returns true if the given value is TAny */
function IsAny(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Any') &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TArray */
function IsArray(value) {
    return (IsKindOf(value, 'Array') &&
        value.type === 'array' &&
        IsOptionalString(value.$id) &&
        IsSchema(value.items) &&
        IsOptionalNumber(value.minItems) &&
        IsOptionalNumber(value.maxItems) &&
        IsOptionalBoolean(value.uniqueItems) &&
        IsOptionalSchema(value.contains) &&
        IsOptionalNumber(value.minContains) &&
        IsOptionalNumber(value.maxContains));
}
/** Returns true if the given value is TAsyncIterator */
function IsAsyncIterator(value) {
    // prettier-ignore
    return (IsKindOf(value, 'AsyncIterator') &&
        value.type === 'AsyncIterator' &&
        IsOptionalString(value.$id) &&
        IsSchema(value.items));
}
/** Returns true if the given value is TBigInt */
function IsBigInt(value) {
    // prettier-ignore
    return (IsKindOf(value, 'BigInt') &&
        value.type === 'bigint' &&
        IsOptionalString(value.$id) &&
        IsOptionalBigInt(value.exclusiveMaximum) &&
        IsOptionalBigInt(value.exclusiveMinimum) &&
        IsOptionalBigInt(value.maximum) &&
        IsOptionalBigInt(value.minimum) &&
        IsOptionalBigInt(value.multipleOf));
}
/** Returns true if the given value is TBoolean */
function IsBoolean(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Boolean') &&
        value.type === 'boolean' &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TConstructor */
function IsConstructor(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Constructor') &&
        value.type === 'Constructor' &&
        IsOptionalString(value.$id) &&
        ValueGuard.IsArray(value.parameters) &&
        value.parameters.every(schema => IsSchema(schema)) &&
        IsSchema(value.returns));
}
/** Returns true if the given value is TDate */
function IsDate(value) {
    return (IsKindOf(value, 'Date') &&
        value.type === 'Date' &&
        IsOptionalString(value.$id) &&
        IsOptionalNumber(value.exclusiveMaximumTimestamp) &&
        IsOptionalNumber(value.exclusiveMinimumTimestamp) &&
        IsOptionalNumber(value.maximumTimestamp) &&
        IsOptionalNumber(value.minimumTimestamp) &&
        IsOptionalNumber(value.multipleOfTimestamp));
}
/** Returns true if the given value is TFunction */
function IsFunction(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Function') &&
        value.type === 'Function' &&
        IsOptionalString(value.$id) &&
        ValueGuard.IsArray(value.parameters) &&
        value.parameters.every(schema => IsSchema(schema)) &&
        IsSchema(value.returns));
}
/** Returns true if the given value is TInteger */
function IsInteger(value) {
    return (IsKindOf(value, 'Integer') &&
        value.type === 'integer' &&
        IsOptionalString(value.$id) &&
        IsOptionalNumber(value.exclusiveMaximum) &&
        IsOptionalNumber(value.exclusiveMinimum) &&
        IsOptionalNumber(value.maximum) &&
        IsOptionalNumber(value.minimum) &&
        IsOptionalNumber(value.multipleOf));
}
/** Returns true if the given schema is TProperties */
function IsProperties(value) {
    // prettier-ignore
    return (ValueGuard.IsObject(value) &&
        Object.entries(value).every(([key, schema]) => IsControlCharacterFree(key) && IsSchema(schema)));
}
/** Returns true if the given value is TIntersect */
function IsIntersect(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Intersect') &&
        (ValueGuard.IsString(value.type) && value.type !== 'object' ? false : true) &&
        ValueGuard.IsArray(value.allOf) &&
        value.allOf.every(schema => IsSchema(schema) && !IsTransform(schema)) &&
        IsOptionalString(value.type) &&
        (IsOptionalBoolean(value.unevaluatedProperties) || IsOptionalSchema(value.unevaluatedProperties)) &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TIterator */
function IsIterator(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Iterator') &&
        value.type === 'Iterator' &&
        IsOptionalString(value.$id) &&
        IsSchema(value.items));
}
/** Returns true if the given value is a TKind with the given name. */
function IsKindOf(value, kind) {
    return ValueGuard.IsObject(value) && index_1.Kind in value && value[index_1.Kind] === kind;
}
/** Returns true if the given value is TLiteral<string> */
function IsLiteralString(value) {
    return IsLiteral(value) && ValueGuard.IsString(value.const);
}
/** Returns true if the given value is TLiteral<number> */
function IsLiteralNumber(value) {
    return IsLiteral(value) && ValueGuard.IsNumber(value.const);
}
/** Returns true if the given value is TLiteral<boolean> */
function IsLiteralBoolean(value) {
    return IsLiteral(value) && ValueGuard.IsBoolean(value.const);
}
/** Returns true if the given value is TLiteral */
function IsLiteral(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Literal') &&
        IsOptionalString(value.$id) && IsLiteralValue(value.const));
}
/** Returns true if the given value is a TLiteralValue */
function IsLiteralValue(value) {
    return ValueGuard.IsBoolean(value) || ValueGuard.IsNumber(value) || ValueGuard.IsString(value);
}
/** Returns true if the given value is a TMappedKey */
function IsMappedKey(value) {
    // prettier-ignore
    return (IsKindOf(value, 'MappedKey') &&
        ValueGuard.IsArray(value.keys) &&
        value.keys.every(key => ValueGuard.IsNumber(key) || ValueGuard.IsString(key)));
}
/** Returns true if the given value is TMappedResult */
function IsMappedResult(value) {
    // prettier-ignore
    return (IsKindOf(value, 'MappedResult') &&
        IsProperties(value.properties));
}
/** Returns true if the given value is TNever */
function IsNever(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Never') &&
        ValueGuard.IsObject(value.not) &&
        Object.getOwnPropertyNames(value.not).length === 0);
}
/** Returns true if the given value is TNot */
function IsNot(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Not') &&
        IsSchema(value.not));
}
/** Returns true if the given value is TNull */
function IsNull(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Null') &&
        value.type === 'null' &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TNumber */
function IsNumber(value) {
    return (IsKindOf(value, 'Number') &&
        value.type === 'number' &&
        IsOptionalString(value.$id) &&
        IsOptionalNumber(value.exclusiveMaximum) &&
        IsOptionalNumber(value.exclusiveMinimum) &&
        IsOptionalNumber(value.maximum) &&
        IsOptionalNumber(value.minimum) &&
        IsOptionalNumber(value.multipleOf));
}
/** Returns true if the given value is TObject */
function IsObject(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Object') &&
        value.type === 'object' &&
        IsOptionalString(value.$id) &&
        IsProperties(value.properties) &&
        IsAdditionalProperties(value.additionalProperties) &&
        IsOptionalNumber(value.minProperties) &&
        IsOptionalNumber(value.maxProperties));
}
/** Returns true if the given value is TPromise */
function IsPromise(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Promise') &&
        value.type === 'Promise' &&
        IsOptionalString(value.$id) &&
        IsSchema(value.item));
}
/** Returns true if the given value is TRecord */
function IsRecord(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Record') &&
        value.type === 'object' &&
        IsOptionalString(value.$id) &&
        IsAdditionalProperties(value.additionalProperties) &&
        ValueGuard.IsObject(value.patternProperties) &&
        ((schema) => {
            const keys = Object.getOwnPropertyNames(schema.patternProperties);
            return (keys.length === 1 &&
                IsPattern(keys[0]) &&
                ValueGuard.IsObject(schema.patternProperties) &&
                IsSchema(schema.patternProperties[keys[0]]));
        })(value));
}
/** Returns true if this value is TRecursive */
function IsRecursive(value) {
    return ValueGuard.IsObject(value) && index_1.Hint in value && value[index_1.Hint] === 'Recursive';
}
/** Returns true if the given value is TRef */
function IsRef(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Ref') &&
        IsOptionalString(value.$id) &&
        ValueGuard.IsString(value.$ref));
}
/** Returns true if the given value is TRegExp */
function IsRegExp(value) {
    // prettier-ignore
    return (IsKindOf(value, 'RegExp') &&
        IsOptionalString(value.$id) &&
        ValueGuard.IsString(value.source) &&
        ValueGuard.IsString(value.flags) &&
        IsOptionalNumber(value.maxLength) &&
        IsOptionalNumber(value.minLength));
}
/** Returns true if the given value is TString */
function IsString(value) {
    // prettier-ignore
    return (IsKindOf(value, 'String') &&
        value.type === 'string' &&
        IsOptionalString(value.$id) &&
        IsOptionalNumber(value.minLength) &&
        IsOptionalNumber(value.maxLength) &&
        IsOptionalPattern(value.pattern) &&
        IsOptionalFormat(value.format));
}
/** Returns true if the given value is TSymbol */
function IsSymbol(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Symbol') &&
        value.type === 'symbol' &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TTemplateLiteral */
function IsTemplateLiteral(value) {
    // prettier-ignore
    return (IsKindOf(value, 'TemplateLiteral') &&
        value.type === 'string' &&
        ValueGuard.IsString(value.pattern) &&
        value.pattern[0] === '^' &&
        value.pattern[value.pattern.length - 1] === '$');
}
/** Returns true if the given value is TThis */
function IsThis(value) {
    // prettier-ignore
    return (IsKindOf(value, 'This') &&
        IsOptionalString(value.$id) &&
        ValueGuard.IsString(value.$ref));
}
/** Returns true of this value is TTransform */
function IsTransform(value) {
    return ValueGuard.IsObject(value) && index_1.TransformKind in value;
}
/** Returns true if the given value is TTuple */
function IsTuple(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Tuple') &&
        value.type === 'array' &&
        IsOptionalString(value.$id) &&
        ValueGuard.IsNumber(value.minItems) &&
        ValueGuard.IsNumber(value.maxItems) &&
        value.minItems === value.maxItems &&
        (( // empty
        ValueGuard.IsUndefined(value.items) &&
            ValueGuard.IsUndefined(value.additionalItems) &&
            value.minItems === 0) || (ValueGuard.IsArray(value.items) &&
            value.items.every(schema => IsSchema(schema)))));
}
/** Returns true if the given value is TUndefined */
function IsUndefined(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Undefined') &&
        value.type === 'undefined' &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TUnion<Literal<string | number>[]> */
function IsUnionLiteral(value) {
    return IsUnion(value) && value.anyOf.every((schema) => IsLiteralString(schema) || IsLiteralNumber(schema));
}
/** Returns true if the given value is TUnion */
function IsUnion(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Union') &&
        IsOptionalString(value.$id) &&
        ValueGuard.IsObject(value) &&
        ValueGuard.IsArray(value.anyOf) &&
        value.anyOf.every(schema => IsSchema(schema)));
}
/** Returns true if the given value is TUint8Array */
function IsUint8Array(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Uint8Array') &&
        value.type === 'Uint8Array' &&
        IsOptionalString(value.$id) &&
        IsOptionalNumber(value.minByteLength) &&
        IsOptionalNumber(value.maxByteLength));
}
/** Returns true if the given value is TUnknown */
function IsUnknown(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Unknown') &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is a raw TUnsafe */
function IsUnsafe(value) {
    return IsKindOf(value, 'Unsafe');
}
/** Returns true if the given value is TVoid */
function IsVoid(value) {
    // prettier-ignore
    return (IsKindOf(value, 'Void') &&
        value.type === 'void' &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TKind */
function IsKind(value) {
    return ValueGuard.IsObject(value) && index_1.Kind in value && ValueGuard.IsString(value[index_1.Kind]) && !KnownTypes.includes(value[index_1.Kind]);
}
/** Returns true if the given value is TSchema */
function IsSchema(value) {
    // prettier-ignore
    return (ValueGuard.IsObject(value)) && (IsAny(value) ||
        IsArray(value) ||
        IsBoolean(value) ||
        IsBigInt(value) ||
        IsAsyncIterator(value) ||
        IsConstructor(value) ||
        IsDate(value) ||
        IsFunction(value) ||
        IsInteger(value) ||
        IsIntersect(value) ||
        IsIterator(value) ||
        IsLiteral(value) ||
        IsMappedKey(value) ||
        IsMappedResult(value) ||
        IsNever(value) ||
        IsNot(value) ||
        IsNull(value) ||
        IsNumber(value) ||
        IsObject(value) ||
        IsPromise(value) ||
        IsRecord(value) ||
        IsRef(value) ||
        IsRegExp(value) ||
        IsString(value) ||
        IsSymbol(value) ||
        IsTemplateLiteral(value) ||
        IsThis(value) ||
        IsTuple(value) ||
        IsUndefined(value) ||
        IsUnion(value) ||
        IsUint8Array(value) ||
        IsUnknown(value) ||
        IsUnsafe(value) ||
        IsVoid(value) ||
        IsKind(value));
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HasPropertyKey = HasPropertyKey;
exports.IsAsyncIterator = IsAsyncIterator;
exports.IsArray = IsArray;
exports.IsBigInt = IsBigInt;
exports.IsBoolean = IsBoolean;
exports.IsDate = IsDate;
exports.IsFunction = IsFunction;
exports.IsIterator = IsIterator;
exports.IsNull = IsNull;
exports.IsNumber = IsNumber;
exports.IsObject = IsObject;
exports.IsRegExp = IsRegExp;
exports.IsString = IsString;
exports.IsSymbol = IsSymbol;
exports.IsUint8Array = IsUint8Array;
exports.IsUndefined = IsUndefined;
// --------------------------------------------------------------------------
// PropertyKey
// --------------------------------------------------------------------------
/** Returns true if this value has this property key */
function HasPropertyKey(value, key) {
    return key in value;
}
// --------------------------------------------------------------------------
// Object Instances
// --------------------------------------------------------------------------
/** Returns true if this value is an async iterator */
function IsAsyncIterator(value) {
    return IsObject(value) && !IsArray(value) && !IsUint8Array(value) && Symbol.asyncIterator in value;
}
/** Returns true if this value is an array */
function IsArray(value) {
    return Array.isArray(value);
}
/** Returns true if this value is bigint */
function IsBigInt(value) {
    return typeof value === 'bigint';
}
/** Returns true if this value is a boolean */
function IsBoolean(value) {
    return typeof value === 'boolean';
}
/** Returns true if this value is a Date object */
function IsDate(value) {
    return value instanceof globalThis.Date;
}
/** Returns true if this value is a function */
function IsFunction(value) {
    return typeof value === 'function';
}
/** Returns true if this value is an iterator */
function IsIterator(value) {
    return IsObject(value) && !IsArray(value) && !IsUint8Array(value) && Symbol.iterator in value;
}
/** Returns true if this value is null */
function IsNull(value) {
    return value === null;
}
/** Returns true if this value is number */
function IsNumber(value) {
    return typeof value === 'number';
}
/** Returns true if this value is an object */
function IsObject(value) {
    return typeof value === 'object' && value !== null;
}
/** Returns true if this value is RegExp */
function IsRegExp(value) {
    return value instanceof globalThis.RegExp;
}
/** Returns true if this value is string */
function IsString(value) {
    return typeof value === 'string';
}
/** Returns true if this value is symbol */
function IsSymbol(value) {
    return typeof value === 'symbol';
}
/** Returns true if this value is a Uint8Array */
function IsUint8Array(value) {
    return value instanceof globalThis.Uint8Array;
}
/** Returns true if this value is undefined */
function IsUndefined(value) {
    return value === undefined;
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/helpers/helpers.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Increment = Increment;
/** Increments the given string value + 1 */
function Increment(T) {
    return (parseInt(T) + 1).toString();
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/helpers/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/helpers/helpers.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/indexed/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed-from-mapped-key.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed-from-mapped-result.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed-property-keys.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed-from-mapped-key.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IndexFromMappedKey = IndexFromMappedKey;
const indexed_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js");
// prettier-ignore
function MappedIndexPropertyKey(T, K, options) {
    return { [K]: (0, indexed_1.Index)(T, [K], (0, value_1.Clone)(options)) };
}
// prettier-ignore
function MappedIndexPropertyKeys(T, K, options) {
    return K.reduce((Acc, L) => {
        return { ...Acc, ...MappedIndexPropertyKey(T, L, options) };
    }, {});
}
// prettier-ignore
function MappedIndexProperties(T, K, options) {
    return MappedIndexPropertyKeys(T, K.keys, options);
}
// prettier-ignore
function IndexFromMappedKey(T, K, options) {
    const P = MappedIndexProperties(T, K, options);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed-from-mapped-result.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IndexFromMappedResult = IndexFromMappedResult;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const indexed_property_keys_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed-property-keys.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/index.js");
// prettier-ignore
function FromProperties(T, P, options) {
    const Acc = {};
    for (const K2 of Object.getOwnPropertyNames(P)) {
        Acc[K2] = (0, index_2.Index)(T, (0, indexed_property_keys_1.IndexPropertyKeys)(P[K2]), options);
    }
    return Acc;
}
// prettier-ignore
function FromMappedResult(T, R, options) {
    return FromProperties(T, R.properties, options);
}
// prettier-ignore
function IndexFromMappedResult(T, R, options) {
    const P = FromMappedResult(T, R, options);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed-property-keys.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IndexPropertyKeys = IndexPropertyKeys;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/index.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function FromTemplateLiteral(T) {
    const R = (0, index_1.TemplateLiteralGenerate)(T);
    return R.map(S => S.toString());
}
// prettier-ignore
function FromUnion(T) {
    const Acc = [];
    for (const L of T)
        Acc.push(...IndexPropertyKeys(L));
    return Acc;
}
// prettier-ignore
function FromLiteral(T) {
    return ([T.toString()] // TS 5.4 observes TLiteralValue as not having a toString()
    );
}
/** Returns a tuple of PropertyKeys derived from the given TSchema */
// prettier-ignore
function IndexPropertyKeys(T) {
    return [...new Set(((0, kind_1.IsTemplateLiteral)(T) ? FromTemplateLiteral(T) :
            (0, kind_1.IsUnion)(T) ? FromUnion(T.anyOf) :
                (0, kind_1.IsLiteral)(T) ? FromLiteral(T.const) :
                    (0, kind_1.IsNumber)(T) ? ['[number]'] :
                        (0, kind_1.IsInteger)(T) ? ['[number]'] :
                            []))];
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IndexFromPropertyKey = IndexFromPropertyKey;
exports.IndexFromPropertyKeys = IndexFromPropertyKeys;
exports.Index = Index;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const indexed_property_keys_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed-property-keys.js");
const indexed_from_mapped_key_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed-from-mapped-key.js");
const indexed_from_mapped_result_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed-from-mapped-result.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function FromRest(T, K) {
    return T.map(L => IndexFromPropertyKey(L, K));
}
// prettier-ignore
function FromIntersectRest(T) {
    return T.filter(L => !(0, kind_1.IsNever)(L));
}
// prettier-ignore
function FromIntersect(T, K) {
    return ((0, index_2.IntersectEvaluated)(FromIntersectRest(FromRest(T, K))));
}
// prettier-ignore
function FromUnionRest(T) {
    return (T.some(L => (0, kind_1.IsNever)(L))
        ? []
        : T);
}
// prettier-ignore
function FromUnion(T, K) {
    return ((0, index_3.UnionEvaluated)(FromUnionRest(FromRest(T, K))));
}
// prettier-ignore
function FromTuple(T, K) {
    return (K in T ? T[K] :
        K === '[number]' ? (0, index_3.UnionEvaluated)(T) :
            (0, index_1.Never)());
}
// prettier-ignore
function FromArray(T, K) {
    return (K === '[number]'
        ? T
        : (0, index_1.Never)());
}
// prettier-ignore
function FromProperty(T, K) {
    return (K in T ? T[K] : (0, index_1.Never)());
}
// prettier-ignore
function IndexFromPropertyKey(T, K) {
    return ((0, kind_1.IsIntersect)(T) ? FromIntersect(T.allOf, K) :
        (0, kind_1.IsUnion)(T) ? FromUnion(T.anyOf, K) :
            (0, kind_1.IsTuple)(T) ? FromTuple(T.items ?? [], K) :
                (0, kind_1.IsArray)(T) ? FromArray(T.items, K) :
                    (0, kind_1.IsObject)(T) ? FromProperty(T.properties, K) :
                        (0, index_1.Never)());
}
// prettier-ignore
function IndexFromPropertyKeys(T, K) {
    return K.map(L => IndexFromPropertyKey(T, L));
}
// prettier-ignore
function FromSchema(T, K) {
    return ((0, index_3.UnionEvaluated)(IndexFromPropertyKeys(T, K)));
}
/** `[Json]` Returns an Indexed property type for the given keys */
function Index(T, K, options) {
    // mapped-types
    if ((0, kind_1.IsMappedResult)(K))
        return (0, indexed_from_mapped_result_1.IndexFromMappedResult)(T, K, options);
    if ((0, kind_1.IsMappedKey)(K))
        return (0, indexed_from_mapped_key_1.IndexFromMappedKey)(T, K, options);
    // prettier-ignore
    return (0, type_1.CreateType)((0, kind_1.IsSchema)(K)
        ? FromSchema(T, (0, indexed_property_keys_1.IndexPropertyKeys)(K))
        : FromSchema(T, K), options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/instance-type/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/instance-type/instance-type.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/instance-type/instance-type.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InstanceType = InstanceType;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
/** `[JavaScript]` Extracts the InstanceType from the given Constructor type */
function InstanceType(schema, options) {
    return (0, type_1.CreateType)(schema.returns, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/integer/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/integer/integer.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/integer/integer.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Integer = Integer;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates an Integer type */
function Integer(options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Integer', type: 'integer' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/intersect/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/intersect-evaluated.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/intersect-type.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/intersect.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/intersect/intersect-create.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntersectCreate = IntersectCreate;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// ------------------------------------------------------------------
// IntersectCreate
// ------------------------------------------------------------------
// prettier-ignore
function IntersectCreate(T, options = {}) {
    const allObjects = T.every((schema) => (0, kind_1.IsObject)(schema));
    const clonedUnevaluatedProperties = (0, kind_1.IsSchema)(options.unevaluatedProperties)
        ? { unevaluatedProperties: options.unevaluatedProperties }
        : {};
    return (0, type_1.CreateType)((options.unevaluatedProperties === false || (0, kind_1.IsSchema)(options.unevaluatedProperties) || allObjects
        ? { ...clonedUnevaluatedProperties, [index_1.Kind]: 'Intersect', type: 'object', allOf: T }
        : { ...clonedUnevaluatedProperties, [index_1.Kind]: 'Intersect', allOf: T }), options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/intersect/intersect-evaluated.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntersectEvaluated = IntersectEvaluated;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/discard/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/optional/index.js");
const intersect_create_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/intersect-create.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function IsIntersectOptional(T) {
    return T.every(L => (0, kind_1.IsOptional)(L));
}
// prettier-ignore
function RemoveOptionalFromType(T) {
    return ((0, index_2.Discard)(T, [index_1.OptionalKind]));
}
// prettier-ignore
function RemoveOptionalFromRest(T) {
    return T.map(L => (0, kind_1.IsOptional)(L) ? RemoveOptionalFromType(L) : L);
}
// prettier-ignore
function ResolveIntersect(T, options) {
    return (IsIntersectOptional(T)
        ? (0, index_4.Optional)((0, intersect_create_1.IntersectCreate)(RemoveOptionalFromRest(T), options))
        : (0, intersect_create_1.IntersectCreate)(RemoveOptionalFromRest(T), options));
}
/** `[Json]` Creates an evaluated Intersect type */
function IntersectEvaluated(T, options = {}) {
    if (T.length === 0)
        return (0, index_3.Never)(options);
    if (T.length === 1)
        return (0, type_1.CreateType)(T[0], options);
    if (T.some((schema) => (0, kind_1.IsTransform)(schema)))
        throw new Error('Cannot intersect transform types');
    return ResolveIntersect(T, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/intersect/intersect-type.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/intersect/intersect.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Intersect = Intersect;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
const intersect_create_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/intersect-create.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
/** `[Json]` Creates an evaluated Intersect type */
function Intersect(T, options) {
    if (T.length === 0)
        return (0, index_1.Never)(options);
    if (T.length === 1)
        return (0, type_1.CreateType)(T[0], options);
    if (T.some((schema) => (0, kind_1.IsTransform)(schema)))
        throw new Error('Cannot intersect transform types');
    return (0, intersect_create_1.IntersectCreate)(T, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/capitalize.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Capitalize = Capitalize;
const intrinsic_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/intrinsic.js");
/** `[Json]` Intrinsic function to Capitalize LiteralString types */
function Capitalize(T, options = {}) {
    return (0, intrinsic_1.Intrinsic)(T, 'Capitalize', options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/capitalize.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/intrinsic-from-mapped-key.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/intrinsic.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/lowercase.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/uncapitalize.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/uppercase.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/intrinsic-from-mapped-key.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntrinsicFromMappedKey = IntrinsicFromMappedKey;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const intrinsic_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/intrinsic.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js");
// prettier-ignore
function MappedIntrinsicPropertyKey(K, M, options) {
    return {
        [K]: (0, intrinsic_1.Intrinsic)((0, index_2.Literal)(K), M, (0, value_1.Clone)(options))
    };
}
// prettier-ignore
function MappedIntrinsicPropertyKeys(K, M, options) {
    const result = K.reduce((Acc, L) => {
        return { ...Acc, ...MappedIntrinsicPropertyKey(L, M, options) };
    }, {});
    return result;
}
// prettier-ignore
function MappedIntrinsicProperties(T, M, options) {
    return MappedIntrinsicPropertyKeys(T['keys'], M, options);
}
// prettier-ignore
function IntrinsicFromMappedKey(T, M, options) {
    const P = MappedIntrinsicProperties(T, M, options);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/intrinsic.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Intrinsic = Intrinsic;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/index.js");
const intrinsic_from_mapped_key_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/intrinsic-from-mapped-key.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// ------------------------------------------------------------------
// Apply
// ------------------------------------------------------------------
function ApplyUncapitalize(value) {
    const [first, rest] = [value.slice(0, 1), value.slice(1)];
    return [first.toLowerCase(), rest].join('');
}
function ApplyCapitalize(value) {
    const [first, rest] = [value.slice(0, 1), value.slice(1)];
    return [first.toUpperCase(), rest].join('');
}
function ApplyUppercase(value) {
    return value.toUpperCase();
}
function ApplyLowercase(value) {
    return value.toLowerCase();
}
function FromTemplateLiteral(schema, mode, options) {
    // note: template literals require special runtime handling as they are encoded in string patterns.
    // This diverges from the mapped type which would otherwise map on the template literal kind.
    const expression = (0, index_1.TemplateLiteralParseExact)(schema.pattern);
    const finite = (0, index_1.IsTemplateLiteralExpressionFinite)(expression);
    if (!finite)
        return { ...schema, pattern: FromLiteralValue(schema.pattern, mode) };
    const strings = [...(0, index_1.TemplateLiteralExpressionGenerate)(expression)];
    const literals = strings.map((value) => (0, index_2.Literal)(value));
    const mapped = FromRest(literals, mode);
    const union = (0, index_3.Union)(mapped);
    return (0, index_1.TemplateLiteral)([union], options);
}
// prettier-ignore
function FromLiteralValue(value, mode) {
    return (typeof value === 'string' ? (mode === 'Uncapitalize' ? ApplyUncapitalize(value) :
        mode === 'Capitalize' ? ApplyCapitalize(value) :
            mode === 'Uppercase' ? ApplyUppercase(value) :
                mode === 'Lowercase' ? ApplyLowercase(value) :
                    value) : value.toString());
}
// prettier-ignore
function FromRest(T, M) {
    return T.map(L => Intrinsic(L, M));
}
/** Applies an intrinsic string manipulation to the given type. */
function Intrinsic(schema, mode, options = {}) {
    // prettier-ignore
    return (
    // Intrinsic-Mapped-Inference
    (0, kind_1.IsMappedKey)(schema) ? (0, intrinsic_from_mapped_key_1.IntrinsicFromMappedKey)(schema, mode, options) :
        // Standard-Inference
        (0, kind_1.IsTemplateLiteral)(schema) ? FromTemplateLiteral(schema, mode, options) :
            (0, kind_1.IsUnion)(schema) ? (0, index_3.Union)(FromRest(schema.anyOf, mode), options) :
                (0, kind_1.IsLiteral)(schema) ? (0, index_2.Literal)(FromLiteralValue(schema.const, mode), options) :
                    // Default Type
                    (0, type_1.CreateType)(schema, options));
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/lowercase.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Lowercase = Lowercase;
const intrinsic_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/intrinsic.js");
/** `[Json]` Intrinsic function to Lowercase LiteralString types */
function Lowercase(T, options = {}) {
    return (0, intrinsic_1.Intrinsic)(T, 'Lowercase', options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/uncapitalize.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Uncapitalize = Uncapitalize;
const intrinsic_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/intrinsic.js");
/** `[Json]` Intrinsic function to Uncapitalize LiteralString types */
function Uncapitalize(T, options = {}) {
    return (0, intrinsic_1.Intrinsic)(T, 'Uncapitalize', options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/uppercase.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Uppercase = Uppercase;
const intrinsic_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/intrinsic.js");
/** `[Json]` Intrinsic function to Uppercase LiteralString types */
function Uppercase(T, options = {}) {
    return (0, intrinsic_1.Intrinsic)(T, 'Uppercase', options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/iterator/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/iterator/iterator.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/iterator/iterator.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Iterator = Iterator;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[JavaScript]` Creates an Iterator type */
function Iterator(items, options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Iterator', type: 'Iterator', items }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/keyof/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/keyof-from-mapped-result.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/keyof-property-entries.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/keyof-property-keys.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/keyof.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/keyof/keyof-from-mapped-result.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyOfFromMappedResult = KeyOfFromMappedResult;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const keyof_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/keyof.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js");
// prettier-ignore
function FromProperties(K, options) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(K))
        Acc[K2] = (0, keyof_1.KeyOf)(K[K2], (0, value_1.Clone)(options));
    return Acc;
}
// prettier-ignore
function FromMappedResult(R, options) {
    return FromProperties(R.properties, options);
}
// prettier-ignore
function KeyOfFromMappedResult(R, options) {
    const P = FromMappedResult(R, options);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/keyof/keyof-property-entries.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyOfPropertyEntries = KeyOfPropertyEntries;
const indexed_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/indexed.js");
const keyof_property_keys_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/keyof-property-keys.js");
/**
 * `[Utility]` Resolves an array of keys and schemas from the given schema. This method is faster
 * than obtaining the keys and resolving each individually via indexing. This method was written
 * accellerate Intersect and Union encoding.
 */
function KeyOfPropertyEntries(schema) {
    const keys = (0, keyof_property_keys_1.KeyOfPropertyKeys)(schema);
    const schemas = (0, indexed_1.IndexFromPropertyKeys)(schema, keys);
    return keys.map((_, index) => [keys[index], schemas[index]]);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/keyof/keyof-property-keys.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyOfPropertyKeys = KeyOfPropertyKeys;
exports.KeyOfPattern = KeyOfPattern;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/sets/index.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function FromRest(T) {
    const Acc = [];
    for (const L of T)
        Acc.push(KeyOfPropertyKeys(L));
    return Acc;
}
// prettier-ignore
function FromIntersect(T) {
    const C = FromRest(T);
    const R = (0, index_1.SetUnionMany)(C);
    return R;
}
// prettier-ignore
function FromUnion(T) {
    const C = FromRest(T);
    const R = (0, index_1.SetIntersectMany)(C);
    return R;
}
// prettier-ignore
function FromTuple(T) {
    return T.map((_, I) => I.toString());
}
// prettier-ignore
function FromArray(_) {
    return (['[number]']);
}
// prettier-ignore
function FromProperties(T) {
    return (globalThis.Object.getOwnPropertyNames(T));
}
// ------------------------------------------------------------------
// FromPatternProperties
// ------------------------------------------------------------------
// prettier-ignore
function FromPatternProperties(patternProperties) {
    if (!includePatternProperties)
        return [];
    const patternPropertyKeys = globalThis.Object.getOwnPropertyNames(patternProperties);
    return patternPropertyKeys.map(key => {
        return (key[0] === '^' && key[key.length - 1] === '$')
            ? key.slice(1, key.length - 1)
            : key;
    });
}
/** Returns a tuple of PropertyKeys derived from the given TSchema. */
// prettier-ignore
function KeyOfPropertyKeys(T) {
    return ((0, kind_1.IsIntersect)(T) ? FromIntersect(T.allOf) :
        (0, kind_1.IsUnion)(T) ? FromUnion(T.anyOf) :
            (0, kind_1.IsTuple)(T) ? FromTuple(T.items ?? []) :
                (0, kind_1.IsArray)(T) ? FromArray(T.items) :
                    (0, kind_1.IsObject)(T) ? FromProperties(T.properties) :
                        (0, kind_1.IsRecord)(T) ? FromPatternProperties(T.patternProperties) :
                            []);
}
// ----------------------------------------------------------------
// KeyOfPattern
// ----------------------------------------------------------------
let includePatternProperties = false;
/** Returns a regular expression pattern derived from the given TSchema */
function KeyOfPattern(schema) {
    includePatternProperties = true;
    const keys = KeyOfPropertyKeys(schema);
    includePatternProperties = false;
    const pattern = keys.map((key) => `(${key})`);
    return `^(${pattern.join('|')})$`;
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/keyof/keyof.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyOfPropertyKeysToRest = KeyOfPropertyKeysToRest;
exports.KeyOf = KeyOf;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/number/index.js");
const keyof_property_keys_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/keyof-property-keys.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const keyof_from_mapped_result_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/keyof-from-mapped-result.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function KeyOfPropertyKeysToRest(T) {
    return T.map(L => L === '[number]' ? (0, index_2.Number)() : (0, index_1.Literal)(L));
}
/** `[Json]` Creates a KeyOf type */
function KeyOf(T, options) {
    if ((0, kind_1.IsMappedResult)(T)) {
        return (0, keyof_from_mapped_result_1.KeyOfFromMappedResult)(T, options);
    }
    else {
        const K = (0, keyof_property_keys_1.KeyOfPropertyKeys)(T);
        const S = KeyOfPropertyKeysToRest(K);
        const U = (0, index_3.UnionEvaluated)(S);
        return (0, type_1.CreateType)(U, options);
    }
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/literal.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/literal/literal.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Literal = Literal;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates a Literal type */
function Literal(value, options) {
    return (0, type_1.CreateType)({
        [index_1.Kind]: 'Literal',
        const: value,
        type: typeof value,
    }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/mapped-key.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/mapped-result.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/mapped.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/mapped/mapped-key.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MappedKey = MappedKey;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
// prettier-ignore
function MappedKey(T) {
    return (0, type_1.CreateType)({
        [index_1.Kind]: 'MappedKey',
        keys: T
    });
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/mapped/mapped-result.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MappedResult = MappedResult;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
// prettier-ignore
function MappedResult(properties) {
    return (0, type_1.CreateType)({
        [index_1.Kind]: 'MappedResult',
        properties
    });
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/mapped/mapped.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MappedFunctionReturnType = MappedFunctionReturnType;
exports.Mapped = Mapped;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/discard/index.js");
// evaluation types
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/array/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/async-iterator/index.js");
const index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/constructor/index.js");
const index_6 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/function/index.js");
const index_7 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/index.js");
const index_8 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/index.js");
const index_9 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/iterator/index.js");
const index_10 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js");
const index_11 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/object/index.js");
const index_12 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/optional/index.js");
const index_13 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/promise/index.js");
const index_14 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly/index.js");
const index_15 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/tuple/index.js");
const index_16 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
// operator
const index_17 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/sets/index.js");
// mapping types
const mapped_result_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/mapped-result.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function FromMappedResult(K, P) {
    return (K in P
        ? FromSchemaType(K, P[K])
        : (0, mapped_result_1.MappedResult)(P));
}
// prettier-ignore
function MappedKeyToKnownMappedResultProperties(K) {
    return { [K]: (0, index_10.Literal)(K) };
}
// prettier-ignore
function MappedKeyToUnknownMappedResultProperties(P) {
    const Acc = {};
    for (const L of P)
        Acc[L] = (0, index_10.Literal)(L);
    return Acc;
}
// prettier-ignore
function MappedKeyToMappedResultProperties(K, P) {
    return ((0, index_17.SetIncludes)(P, K)
        ? MappedKeyToKnownMappedResultProperties(K)
        : MappedKeyToUnknownMappedResultProperties(P));
}
// prettier-ignore
function FromMappedKey(K, P) {
    const R = MappedKeyToMappedResultProperties(K, P);
    return FromMappedResult(K, R);
}
// prettier-ignore
function FromRest(K, T) {
    return T.map(L => FromSchemaType(K, L));
}
// prettier-ignore
function FromProperties(K, T) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(T))
        Acc[K2] = FromSchemaType(K, T[K2]);
    return Acc;
}
// prettier-ignore
function FromSchemaType(K, T) {
    // required to retain user defined options for mapped type
    const options = { ...T };
    return (
    // unevaluated modifier types
    (0, kind_1.IsOptional)(T) ? (0, index_12.Optional)(FromSchemaType(K, (0, index_2.Discard)(T, [index_1.OptionalKind]))) :
        (0, kind_1.IsReadonly)(T) ? (0, index_14.Readonly)(FromSchemaType(K, (0, index_2.Discard)(T, [index_1.ReadonlyKind]))) :
            // unevaluated mapped types
            (0, kind_1.IsMappedResult)(T) ? FromMappedResult(K, T.properties) :
                (0, kind_1.IsMappedKey)(T) ? FromMappedKey(K, T.keys) :
                    // unevaluated types
                    (0, kind_1.IsConstructor)(T) ? (0, index_5.Constructor)(FromRest(K, T.parameters), FromSchemaType(K, T.returns), options) :
                        (0, kind_1.IsFunction)(T) ? (0, index_6.Function)(FromRest(K, T.parameters), FromSchemaType(K, T.returns), options) :
                            (0, kind_1.IsAsyncIterator)(T) ? (0, index_4.AsyncIterator)(FromSchemaType(K, T.items), options) :
                                (0, kind_1.IsIterator)(T) ? (0, index_9.Iterator)(FromSchemaType(K, T.items), options) :
                                    (0, kind_1.IsIntersect)(T) ? (0, index_8.Intersect)(FromRest(K, T.allOf), options) :
                                        (0, kind_1.IsUnion)(T) ? (0, index_16.Union)(FromRest(K, T.anyOf), options) :
                                            (0, kind_1.IsTuple)(T) ? (0, index_15.Tuple)(FromRest(K, T.items ?? []), options) :
                                                (0, kind_1.IsObject)(T) ? (0, index_11.Object)(FromProperties(K, T.properties), options) :
                                                    (0, kind_1.IsArray)(T) ? (0, index_3.Array)(FromSchemaType(K, T.items), options) :
                                                        (0, kind_1.IsPromise)(T) ? (0, index_13.Promise)(FromSchemaType(K, T.item), options) :
                                                            T);
}
// prettier-ignore
function MappedFunctionReturnType(K, T) {
    const Acc = {};
    for (const L of K)
        Acc[L] = FromSchemaType(L, T);
    return Acc;
}
/** `[Json]` Creates a Mapped object type */
function Mapped(key, map, options) {
    const K = (0, kind_1.IsSchema)(key) ? (0, index_7.IndexPropertyKeys)(key) : key;
    const RT = map({ [index_1.Kind]: 'MappedKey', keys: K });
    const R = MappedFunctionReturnType(K, RT);
    return (0, index_11.Object)(R, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/never/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));

__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/never.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/never/never.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Never = Never;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates a Never type */
function Never(options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Never', not: {} }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/not/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/not/not.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/not/not.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Not = Not;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates a Not type */
function Not(not, options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Not', not }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/null/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/null/null.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/null/null.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Null = Null;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates a Null type */
function Null(options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Null', type: 'null' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/number/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/number/number.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/number/number.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Number = Number;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates a Number type */
function Number(options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Number', type: 'number' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/object/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/object/object.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/object/object.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Object = void 0;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
function RequiredKeys(properties) {
    const keys = [];
    for (let key in properties) {
        if (!(0, kind_1.IsOptional)(properties[key]))
            keys.push(key);
    }
    return keys;
}
/** `[Json]` Creates an Object type */
function _Object(properties, options) {
    const required = RequiredKeys(properties);
    const schematic = required.length > 0 ? { [index_1.Kind]: 'Object', type: 'object', properties, required } : { [index_1.Kind]: 'Object', type: 'object', properties };
    return (0, type_1.CreateType)(schematic, options);
}
/** `[Json]` Creates an Object type */
exports.Object = _Object;


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/omit/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/omit/omit-from-mapped-key.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/omit/omit-from-mapped-result.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/omit/omit.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/omit/omit-from-mapped-key.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OmitFromMappedKey = OmitFromMappedKey;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const omit_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/omit/omit.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js");
// prettier-ignore
function FromPropertyKey(T, K, options) {
    return {
        [K]: (0, omit_1.Omit)(T, [K], (0, value_1.Clone)(options))
    };
}
// prettier-ignore
function FromPropertyKeys(T, K, options) {
    return K.reduce((Acc, LK) => {
        return { ...Acc, ...FromPropertyKey(T, LK, options) };
    }, {});
}
// prettier-ignore
function FromMappedKey(T, K, options) {
    return FromPropertyKeys(T, K.keys, options);
}
// prettier-ignore
function OmitFromMappedKey(T, K, options) {
    const P = FromMappedKey(T, K, options);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/omit/omit-from-mapped-result.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OmitFromMappedResult = OmitFromMappedResult;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const omit_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/omit/omit.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js");
// prettier-ignore
function FromProperties(P, K, options) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(P))
        Acc[K2] = (0, omit_1.Omit)(P[K2], K, (0, value_1.Clone)(options));
    return Acc;
}
// prettier-ignore
function FromMappedResult(R, K, options) {
    return FromProperties(R.properties, K, options);
}
// prettier-ignore
function OmitFromMappedResult(R, K, options) {
    const P = FromMappedResult(R, K, options);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/omit/omit.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Omit = Omit;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const discard_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/discard/discard.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/object/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/index.js");
const omit_from_mapped_key_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/omit/omit-from-mapped-key.js");
const omit_from_mapped_result_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/omit/omit-from-mapped-result.js");
const symbols_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/symbols.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function FromIntersect(T, K) {
    return T.map((T) => OmitResolve(T, K));
}
// prettier-ignore
function FromUnion(T, K) {
    return T.map((T) => OmitResolve(T, K));
}
// ------------------------------------------------------------------
// FromProperty
// ------------------------------------------------------------------
// prettier-ignore
function FromProperty(T, K) {
    const { [K]: _, ...R } = T;
    return R;
}
// prettier-ignore
function FromProperties(T, K) {
    return K.reduce((T, K2) => FromProperty(T, K2), T);
}
// prettier-ignore
function FromObject(T, K) {
    const options = (0, discard_1.Discard)(T, [symbols_1.TransformKind, '$id', 'required', 'properties']);
    const properties = FromProperties(T['properties'], K);
    return (0, index_3.Object)(properties, options);
}
// ------------------------------------------------------------------
// OmitResolve
// ------------------------------------------------------------------
// prettier-ignore
function OmitResolve(T, K) {
    return ((0, kind_1.IsIntersect)(T) ? (0, index_1.Intersect)(FromIntersect(T.allOf, K)) :
        (0, kind_1.IsUnion)(T) ? (0, index_2.Union)(FromUnion(T.anyOf, K)) :
            (0, kind_1.IsObject)(T) ? FromObject(T, K) :
                (0, index_3.Object)({}));
}
function Omit(T, K, options) {
    // mapped
    if ((0, kind_1.IsMappedKey)(K))
        return (0, omit_from_mapped_key_1.OmitFromMappedKey)(T, K, options);
    if ((0, kind_1.IsMappedResult)(T))
        return (0, omit_from_mapped_result_1.OmitFromMappedResult)(T, K, options);
    // non-mapped
    const I = (0, kind_1.IsSchema)(K) ? (0, index_4.IndexPropertyKeys)(K) : K;
    // special: mapping types require overridable options
    return (0, type_1.CreateType)({ ...OmitResolve(T, I), ...options });
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/optional/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/optional/optional-from-mapped-result.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/optional/optional.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/optional/optional-from-mapped-result.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OptionalFromMappedResult = OptionalFromMappedResult;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const optional_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/optional/optional.js");
// prettier-ignore
function FromProperties(P, F) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(P))
        Acc[K2] = (0, optional_1.Optional)(P[K2], F);
    return Acc;
}
// prettier-ignore
function FromMappedResult(R, F) {
    return FromProperties(R.properties, F);
}
// prettier-ignore
function OptionalFromMappedResult(R, F) {
    const P = FromMappedResult(R, F);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/optional/optional.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Optional = Optional;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/discard/index.js");
const optional_from_mapped_result_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/optional/optional-from-mapped-result.js");
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
function RemoveOptional(schema) {
    return (0, type_1.CreateType)((0, index_2.Discard)(schema, [index_1.OptionalKind]));
}
function AddOptional(schema) {
    return (0, type_1.CreateType)({ ...schema, [index_1.OptionalKind]: 'Optional' });
}
// prettier-ignore
function OptionalWithFlag(schema, F) {
    return (F === false
        ? RemoveOptional(schema)
        : AddOptional(schema));
}
/** `[Json]` Creates a Optional property */
function Optional(schema, enable) {
    const F = enable ?? true;
    return (0, kind_1.IsMappedResult)(schema) ? (0, optional_from_mapped_result_1.OptionalFromMappedResult)(schema, F) : OptionalWithFlag(schema, F);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/parameters/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/parameters/parameters.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/parameters/parameters.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Parameters = Parameters;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/tuple/index.js");
/** `[JavaScript]` Extracts the Parameters from the given Function type */
function Parameters(schema, options) {
    return (0, index_1.Tuple)(schema.parameters, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/partial/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/partial/partial-from-mapped-result.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/partial/partial.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/partial/partial-from-mapped-result.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PartialFromMappedResult = PartialFromMappedResult;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const partial_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/partial/partial.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js");
// prettier-ignore
function FromProperties(K, options) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(K))
        Acc[K2] = (0, partial_1.Partial)(K[K2], (0, value_1.Clone)(options));
    return Acc;
}
// prettier-ignore
function FromMappedResult(R, options) {
    return FromProperties(R.properties, options);
}
// prettier-ignore
function PartialFromMappedResult(R, options) {
    const P = FromMappedResult(R, options);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/partial/partial.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Partial = Partial;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/optional/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/object/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/discard/index.js");
const index_6 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const partial_from_mapped_result_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/partial/partial-from-mapped-result.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function FromRest(T) {
    return T.map(L => PartialResolve(L));
}
// prettier-ignore
function FromProperties(T) {
    const Acc = {};
    for (const K of globalThis.Object.getOwnPropertyNames(T))
        Acc[K] = (0, index_1.Optional)(T[K]);
    return Acc;
}
// prettier-ignore
function FromObject(T) {
    const options = (0, index_5.Discard)(T, [index_6.TransformKind, '$id', 'required', 'properties']);
    const properties = FromProperties(T['properties']);
    return (0, index_2.Object)(properties, options);
}
// ------------------------------------------------------------------
// PartialResolve
// ------------------------------------------------------------------
// prettier-ignore
function PartialResolve(T) {
    return ((0, kind_1.IsIntersect)(T) ? (0, index_3.Intersect)(FromRest(T.allOf)) :
        (0, kind_1.IsUnion)(T) ? (0, index_4.Union)(FromRest(T.anyOf)) :
            (0, kind_1.IsObject)(T) ? FromObject(T) :
                (0, index_2.Object)({}));
}
/** `[Json]` Constructs a type where all properties are optional */
function Partial(T, options) {
    if ((0, kind_1.IsMappedResult)(T)) {
        return (0, partial_from_mapped_result_1.PartialFromMappedResult)(T, options);
    }
    else {
        // special: mapping types require overridable options
        return (0, type_1.CreateType)({ ...PartialResolve(T), ...options });
    }
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/patterns/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/patterns/patterns.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/patterns/patterns.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PatternNeverExact = exports.PatternStringExact = exports.PatternNumberExact = exports.PatternBooleanExact = exports.PatternNever = exports.PatternString = exports.PatternNumber = exports.PatternBoolean = void 0;
exports.PatternBoolean = '(true|false)';
exports.PatternNumber = '(0|[1-9][0-9]*)';
exports.PatternString = '(.*)';
exports.PatternNever = '(?!.*)';
exports.PatternBooleanExact = `^${exports.PatternBoolean}$`;
exports.PatternNumberExact = `^${exports.PatternNumber}$`;
exports.PatternStringExact = `^${exports.PatternString}$`;
exports.PatternNeverExact = `^${exports.PatternNever}$`;


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/pick/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/pick/pick-from-mapped-key.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/pick/pick-from-mapped-result.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/pick/pick.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/pick/pick-from-mapped-key.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickFromMappedKey = PickFromMappedKey;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const pick_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/pick/pick.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js");
// prettier-ignore
function FromPropertyKey(T, K, options) {
    return {
        [K]: (0, pick_1.Pick)(T, [K], (0, value_1.Clone)(options))
    };
}
// prettier-ignore
function FromPropertyKeys(T, K, options) {
    return K.reduce((Acc, LK) => {
        return { ...Acc, ...FromPropertyKey(T, LK, options) };
    }, {});
}
// prettier-ignore
function FromMappedKey(T, K, options) {
    return FromPropertyKeys(T, K.keys, options);
}
// prettier-ignore
function PickFromMappedKey(T, K, options) {
    const P = FromMappedKey(T, K, options);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/pick/pick-from-mapped-result.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickFromMappedResult = PickFromMappedResult;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const pick_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/pick/pick.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/value.js");
// prettier-ignore
function FromProperties(P, K, options) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(P))
        Acc[K2] = (0, pick_1.Pick)(P[K2], K, (0, value_1.Clone)(options));
    return Acc;
}
// prettier-ignore
function FromMappedResult(R, K, options) {
    return FromProperties(R.properties, K, options);
}
// prettier-ignore
function PickFromMappedResult(R, K, options) {
    const P = FromMappedResult(R, K, options);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/pick/pick.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Pick = Pick;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const discard_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/discard/discard.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/object/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/index.js");
const pick_from_mapped_key_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/pick/pick-from-mapped-key.js");
const pick_from_mapped_result_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/pick/pick-from-mapped-result.js");
const symbols_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/symbols.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
function FromIntersect(T, K) {
    return T.map((T) => PickResolve(T, K));
}
// prettier-ignore
function FromUnion(T, K) {
    return T.map((T) => PickResolve(T, K));
}
// prettier-ignore
function FromProperties(T, K) {
    const Acc = {};
    for (const K2 of K)
        if (K2 in T)
            Acc[K2] = T[K2];
    return Acc;
}
// prettier-ignore
function FromObject(T, K) {
    const options = (0, discard_1.Discard)(T, [symbols_1.TransformKind, '$id', 'required', 'properties']);
    const properties = FromProperties(T['properties'], K);
    return (0, index_3.Object)(properties, options);
}
// ------------------------------------------------------------------
// PickResolve
// ------------------------------------------------------------------
// prettier-ignore
function PickResolve(T, K) {
    return ((0, kind_1.IsIntersect)(T) ? (0, index_1.Intersect)(FromIntersect(T.allOf, K)) :
        (0, kind_1.IsUnion)(T) ? (0, index_2.Union)(FromUnion(T.anyOf, K)) :
            (0, kind_1.IsObject)(T) ? FromObject(T, K) :
                (0, index_3.Object)({}));
}
function Pick(T, K, options) {
    // mapped
    if ((0, kind_1.IsMappedKey)(K))
        return (0, pick_from_mapped_key_1.PickFromMappedKey)(T, K, options);
    if ((0, kind_1.IsMappedResult)(T))
        return (0, pick_from_mapped_result_1.PickFromMappedResult)(T, K, options);
    // non-mapped
    const I = (0, kind_1.IsSchema)(K) ? (0, index_4.IndexPropertyKeys)(K) : K;
    // special: mapping types require overridable options
    return (0, type_1.CreateType)({ ...PickResolve(T, I), ...options });
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/promise/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/promise/promise.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/promise/promise.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Promise = Promise;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[JavaScript]` Creates a Promise type */
function Promise(item, options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Promise', type: 'Promise', item }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/readonly-optional/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly-optional/readonly-optional.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/readonly-optional/readonly-optional.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReadonlyOptional = ReadonlyOptional;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/optional/index.js");
/** `[Json]` Creates a Readonly and Optional property */
function ReadonlyOptional(schema) {
    return (0, index_1.Readonly)((0, index_2.Optional)(schema));
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/readonly/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly/readonly-from-mapped-result.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly/readonly.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/readonly/readonly-from-mapped-result.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReadonlyFromMappedResult = ReadonlyFromMappedResult;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const readonly_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly/readonly.js");
// prettier-ignore
function FromProperties(K, F) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(K))
        Acc[K2] = (0, readonly_1.Readonly)(K[K2], F);
    return Acc;
}
// prettier-ignore
function FromMappedResult(R, F) {
    return FromProperties(R.properties, F);
}
// prettier-ignore
function ReadonlyFromMappedResult(R, F) {
    const P = FromMappedResult(R, F);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/readonly/readonly.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Readonly = Readonly;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/discard/index.js");
const readonly_from_mapped_result_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly/readonly-from-mapped-result.js");
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
function RemoveReadonly(schema) {
    return (0, type_1.CreateType)((0, index_2.Discard)(schema, [index_1.ReadonlyKind]));
}
function AddReadonly(schema) {
    return (0, type_1.CreateType)({ ...schema, [index_1.ReadonlyKind]: 'Readonly' });
}
// prettier-ignore
function ReadonlyWithFlag(schema, F) {
    return (F === false
        ? RemoveReadonly(schema)
        : AddReadonly(schema));
}
/** `[Json]` Creates a Readonly property */
function Readonly(schema, enable) {
    const F = enable ?? true;
    return (0, kind_1.IsMappedResult)(schema) ? (0, readonly_from_mapped_result_1.ReadonlyFromMappedResult)(schema, F) : ReadonlyWithFlag(schema, F);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/record/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/record/record.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/record/record.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Record = Record;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/object/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/index.js");
const index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/patterns/index.js");
const index_6 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/index.js");
const index_7 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// ------------------------------------------------------------------
// RecordCreateFromPattern
// ------------------------------------------------------------------
// prettier-ignore
function RecordCreateFromPattern(pattern, T, options) {
    return (0, type_1.CreateType)({
        [index_7.Kind]: 'Record',
        type: 'object',
        patternProperties: { [pattern]: T }
    }, options);
}
// ------------------------------------------------------------------
// RecordCreateFromKeys
// ------------------------------------------------------------------
// prettier-ignore
function RecordCreateFromKeys(K, T, options) {
    const Acc = {};
    for (const K2 of K)
        Acc[K2] = T;
    return (0, index_1.Object)(Acc, { ...options, [index_7.Hint]: 'Record' });
}
// prettier-ignore
function FromTemplateLiteralKey(K, T, options) {
    return ((0, index_4.IsTemplateLiteralFinite)(K)
        ? RecordCreateFromKeys((0, index_6.IndexPropertyKeys)(K), T, options)
        : RecordCreateFromPattern(K.pattern, T, options));
}
// prettier-ignore
function FromUnionKey(K, T, options) {
    return RecordCreateFromKeys((0, index_6.IndexPropertyKeys)((0, index_3.Union)(K)), T, options);
}
// prettier-ignore
function FromLiteralKey(K, T, options) {
    return RecordCreateFromKeys([K.toString()], T, options);
}
// prettier-ignore
function FromRegExpKey(K, T, options) {
    return RecordCreateFromPattern(K.source, T, options);
}
// prettier-ignore
function FromStringKey(K, T, options) {
    const pattern = (0, value_1.IsUndefined)(K.pattern) ? index_5.PatternStringExact : K.pattern;
    return RecordCreateFromPattern(pattern, T, options);
}
// prettier-ignore
function FromAnyKey(K, T, options) {
    return RecordCreateFromPattern(index_5.PatternStringExact, T, options);
}
// prettier-ignore
function FromNeverKey(K, T, options) {
    return RecordCreateFromPattern(index_5.PatternNeverExact, T, options);
}
// prettier-ignore
function FromIntegerKey(_, T, options) {
    return RecordCreateFromPattern(index_5.PatternNumberExact, T, options);
}
// prettier-ignore
function FromNumberKey(_, T, options) {
    return RecordCreateFromPattern(index_5.PatternNumberExact, T, options);
}
// ------------------------------------------------------------------
// TRecordOrObject
// ------------------------------------------------------------------
/** `[Json]` Creates a Record type */
function Record(K, T, options = {}) {
    // prettier-ignore
    return ((0, kind_1.IsUnion)(K) ? FromUnionKey(K.anyOf, T, options) :
        (0, kind_1.IsTemplateLiteral)(K) ? FromTemplateLiteralKey(K, T, options) :
            (0, kind_1.IsLiteral)(K) ? FromLiteralKey(K.const, T, options) :
                (0, kind_1.IsInteger)(K) ? FromIntegerKey(K, T, options) :
                    (0, kind_1.IsNumber)(K) ? FromNumberKey(K, T, options) :
                        (0, kind_1.IsRegExp)(K) ? FromRegExpKey(K, T, options) :
                            (0, kind_1.IsString)(K) ? FromStringKey(K, T, options) :
                                (0, kind_1.IsAny)(K) ? FromAnyKey(K, T, options) :
                                    (0, kind_1.IsNever)(K) ? FromNeverKey(K, T, options) :
                                        (0, index_2.Never)(options));
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/recursive/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/recursive/recursive.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/recursive/recursive.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Recursive = Recursive;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/clone/type.js");
const type_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
// Auto Tracked For Recursive Types without ID's
let Ordinal = 0;
/** `[Json]` Creates a Recursive type */
function Recursive(callback, options = {}) {
    if ((0, value_1.IsUndefined)(options.$id))
        options.$id = `T${Ordinal++}`;
    const thisType = (0, type_1.CloneType)(callback({ [index_1.Kind]: 'This', $ref: `${options.$id}` }));
    thisType.$id = options.$id;
    // prettier-ignore
    return (0, type_2.CreateType)({ [index_1.Hint]: 'Recursive', ...thisType }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/ref/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/ref/ref.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/ref/ref.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Ref = Ref;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");
/** `[Json]` Creates a Ref type. */
function Ref(unresolved, options) {
    if ((0, value_1.IsString)(unresolved))
        return (0, type_1.CreateType)({ [index_1.Kind]: 'Ref', $ref: unresolved }, options);
    if ((0, value_1.IsUndefined)(unresolved.$id))
        throw new Error('Reference target type must specify an $id');
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Ref', $ref: unresolved.$id }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/regexp/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/regexp/regexp.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/regexp/regexp.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RegExp = RegExp;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[JavaScript]` Creates a RegExp type */
function RegExp(unresolved, options) {
    const expr = (0, value_1.IsString)(unresolved) ? new globalThis.RegExp(unresolved) : unresolved;
    return (0, type_1.CreateType)({ [index_1.Kind]: 'RegExp', type: 'RegExp', source: expr.source, flags: expr.flags }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/registry/format.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Entries = Entries;
exports.Clear = Clear;
exports.Delete = Delete;
exports.Has = Has;
exports.Set = Set;
exports.Get = Get;
/** A registry for user defined string formats */
const map = new Map();
/** Returns the entries in this registry */
function Entries() {
    return new Map(map);
}
/** Clears all user defined string formats */
function Clear() {
    return map.clear();
}
/** Deletes a registered format */
function Delete(format) {
    return map.delete(format);
}
/** Returns true if the user defined string format exists */
function Has(format) {
    return map.has(format);
}
/** Sets a validation function for a user defined string format */
function Set(format, func) {
    map.set(format, func);
}
/** Gets a validation function for a user defined string format */
function Get(format) {
    return map.get(format);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/registry/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeRegistry = exports.FormatRegistry = void 0;
exports.FormatRegistry = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/registry/format.js");
exports.TypeRegistry = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/registry/type.js");


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/registry/type.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Entries = Entries;
exports.Clear = Clear;
exports.Delete = Delete;
exports.Has = Has;
exports.Set = Set;
exports.Get = Get;
/** A registry for user defined types */
const map = new Map();
/** Returns the entries in this registry */
function Entries() {
    return new Map(map);
}
/** Clears all user defined types */
function Clear() {
    return map.clear();
}
/** Deletes a registered type */
function Delete(kind) {
    return map.delete(kind);
}
/** Returns true if this registry contains this kind */
function Has(kind) {
    return map.has(kind);
}
/** Sets a validation function for a user defined type */
function Set(kind, func) {
    map.set(kind, func);
}
/** Gets a custom validation function for a user defined type */
function Get(kind) {
    return map.get(kind);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/required/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/required/required-from-mapped-result.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/required/required.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/required/required-from-mapped-result.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RequiredFromMappedResult = RequiredFromMappedResult;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const required_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/required/required.js");
// prettier-ignore
function FromProperties(P, options) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(P))
        Acc[K2] = (0, required_1.Required)(P[K2], options);
    return Acc;
}
// prettier-ignore
function FromMappedResult(R, options) {
    return FromProperties(R.properties, options);
}
// prettier-ignore
function RequiredFromMappedResult(R, options) {
    const P = FromMappedResult(R, options);
    return (0, index_1.MappedResult)(P);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/required/required.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Required = Required;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/object/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/discard/index.js");
const required_from_mapped_result_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/required/required-from-mapped-result.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function FromRest(T) {
    return T.map(L => RequiredResolve(L));
}
// prettier-ignore
function FromProperties(T) {
    const Acc = {};
    for (const K of globalThis.Object.getOwnPropertyNames(T))
        Acc[K] = (0, index_5.Discard)(T[K], [index_4.OptionalKind]);
    return Acc;
}
// prettier-ignore
function FromObject(T) {
    const options = (0, index_5.Discard)(T, [index_4.TransformKind, '$id', 'required', 'properties']);
    const properties = FromProperties(T['properties']);
    return (0, index_3.Object)(properties, options);
}
// ------------------------------------------------------------------
// RequiredResolve
// ------------------------------------------------------------------
// prettier-ignore
function RequiredResolve(T) {
    return ((0, kind_1.IsIntersect)(T) ? (0, index_1.Intersect)(FromRest(T.allOf)) :
        (0, kind_1.IsUnion)(T) ? (0, index_2.Union)(FromRest(T.anyOf)) :
            (0, kind_1.IsObject)(T) ? FromObject(T) :
                (0, index_3.Object)({}));
}
/** `[Json]` Constructs a type where all properties are required */
function Required(T, options) {
    if ((0, kind_1.IsMappedResult)(T)) {
        return (0, required_from_mapped_result_1.RequiredFromMappedResult)(T, options);
    }
    else {
        // special: mapping types require overridable options
        return (0, type_1.CreateType)({ ...RequiredResolve(T), ...options });
    }
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/rest/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/rest/rest.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/rest/rest.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Rest = Rest;
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function RestResolve(T) {
    return ((0, kind_1.IsIntersect)(T) ? T.allOf :
        (0, kind_1.IsUnion)(T) ? T.anyOf :
            (0, kind_1.IsTuple)(T) ? T.items ?? [] :
                []);
}
/** `[Json]` Extracts interior Rest elements from Tuple, Intersect and Union types */
function Rest(T) {
    return RestResolve(T);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/return-type/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/return-type/return-type.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/return-type/return-type.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReturnType = ReturnType;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
/** `[JavaScript]` Extracts the ReturnType from the given Function type */
function ReturnType(schema, options) {
    return (0, type_1.CreateType)(schema.returns, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/schema/anyschema.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/schema/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/schema/anyschema.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/schema/schema.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/schema/schema.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/sets/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/sets/set.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/sets/set.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetIncludes = SetIncludes;
exports.SetIsSubset = SetIsSubset;
exports.SetDistinct = SetDistinct;
exports.SetIntersect = SetIntersect;
exports.SetUnion = SetUnion;
exports.SetComplement = SetComplement;
exports.SetIntersectMany = SetIntersectMany;
exports.SetUnionMany = SetUnionMany;
/** Returns true if element right is in the set of left */
// prettier-ignore
function SetIncludes(T, S) {
    return T.includes(S);
}
/** Returns true if left is a subset of right */
function SetIsSubset(T, S) {
    return T.every((L) => SetIncludes(S, L));
}
/** Returns a distinct set of elements */
function SetDistinct(T) {
    return [...new Set(T)];
}
/** Returns the Intersect of the given sets */
function SetIntersect(T, S) {
    return T.filter((L) => S.includes(L));
}
/** Returns the Union of the given sets */
function SetUnion(T, S) {
    return [...T, ...S];
}
/** Returns the Complement by omitting elements in T that are in S */
// prettier-ignore
function SetComplement(T, S) {
    return T.filter(L => !S.includes(L));
}
// prettier-ignore
function SetIntersectManyResolve(T, Init) {
    return T.reduce((Acc, L) => {
        return SetIntersect(Acc, L);
    }, Init);
}
// prettier-ignore
function SetIntersectMany(T) {
    return (T.length === 1
        ? T[0]
        // Use left to initialize the accumulator for resolve
        : T.length > 1
            ? SetIntersectManyResolve(T.slice(1), T[0])
            : []);
}
/** Returns the Union of multiple sets */
function SetUnionMany(T) {
    const Acc = [];
    for (const L of T)
        Acc.push(...L);
    return Acc;
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/static/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/static/static.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/static/static.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/strict/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/strict/strict.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/strict/strict.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Strict = Strict;
/**
 * @deprecated `[Json]` Omits compositing symbols from this schema. It is recommended
 * to use the JSON parse/stringify to remove compositing symbols if needed. This
 * is how Strict works internally.
 *
 * ```typescript
 * JSON.parse(JSON.stringify(Type.String()))
 * ```
 */
function Strict(schema) {
    return JSON.parse(JSON.stringify(schema));
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/string/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/string/string.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/string/string.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.String = String;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates a String type */
function String(options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'String', type: 'string' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/symbol/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbol/symbol.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/symbol/symbol.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Symbol = Symbol;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[JavaScript]` Creates a Symbol type */
function Symbol(options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Symbol', type: 'symbol' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/symbols.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/symbols/symbols.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Kind = exports.Hint = exports.OptionalKind = exports.ReadonlyKind = exports.TransformKind = void 0;
/** Symbol key applied to transform types */
exports.TransformKind = Symbol.for('TypeBox.Transform');
/** Symbol key applied to readonly types */
exports.ReadonlyKind = Symbol.for('TypeBox.Readonly');
/** Symbol key applied to optional types */
exports.OptionalKind = Symbol.for('TypeBox.Optional');
/** Symbol key applied to types */
exports.Hint = Symbol.for('TypeBox.Hint');
/** Symbol key applied to types */
exports.Kind = Symbol.for('TypeBox.Kind');


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/template-literal/finite.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TemplateLiteralFiniteError = void 0;
exports.IsTemplateLiteralExpressionFinite = IsTemplateLiteralExpressionFinite;
exports.IsTemplateLiteralFinite = IsTemplateLiteralFinite;
const parse_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/parse.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/index.js");
// ------------------------------------------------------------------
// TemplateLiteralFiniteError
// ------------------------------------------------------------------
class TemplateLiteralFiniteError extends index_1.TypeBoxError {
}
exports.TemplateLiteralFiniteError = TemplateLiteralFiniteError;
// ------------------------------------------------------------------
// IsTemplateLiteralFiniteCheck
// ------------------------------------------------------------------
// prettier-ignore
function IsNumberExpression(expression) {
    return (expression.type === 'or' &&
        expression.expr.length === 2 &&
        expression.expr[0].type === 'const' &&
        expression.expr[0].const === '0' &&
        expression.expr[1].type === 'const' &&
        expression.expr[1].const === '[1-9][0-9]*');
}
// prettier-ignore
function IsBooleanExpression(expression) {
    return (expression.type === 'or' &&
        expression.expr.length === 2 &&
        expression.expr[0].type === 'const' &&
        expression.expr[0].const === 'true' &&
        expression.expr[1].type === 'const' &&
        expression.expr[1].const === 'false');
}
// prettier-ignore
function IsStringExpression(expression) {
    return expression.type === 'const' && expression.const === '.*';
}
// ------------------------------------------------------------------
// IsTemplateLiteralExpressionFinite
// ------------------------------------------------------------------
// prettier-ignore
function IsTemplateLiteralExpressionFinite(expression) {
    return (IsNumberExpression(expression) || IsStringExpression(expression) ? false :
        IsBooleanExpression(expression) ? true :
            (expression.type === 'and') ? expression.expr.every((expr) => IsTemplateLiteralExpressionFinite(expr)) :
                (expression.type === 'or') ? expression.expr.every((expr) => IsTemplateLiteralExpressionFinite(expr)) :
                    (expression.type === 'const') ? true :
                        (() => { throw new TemplateLiteralFiniteError(`Unknown expression type`); })());
}
/** Returns true if this TemplateLiteral resolves to a finite set of values */
function IsTemplateLiteralFinite(schema) {
    const expression = (0, parse_1.TemplateLiteralParseExact)(schema.pattern);
    return IsTemplateLiteralExpressionFinite(expression);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/template-literal/generate.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TemplateLiteralGenerateError = void 0;
exports.TemplateLiteralExpressionGenerate = TemplateLiteralExpressionGenerate;
exports.TemplateLiteralGenerate = TemplateLiteralGenerate;
const finite_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/finite.js");
const parse_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/parse.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/index.js");
// ------------------------------------------------------------------
// TemplateLiteralGenerateError
// ------------------------------------------------------------------
class TemplateLiteralGenerateError extends index_1.TypeBoxError {
}
exports.TemplateLiteralGenerateError = TemplateLiteralGenerateError;
// ------------------------------------------------------------------
// TemplateLiteralExpressionGenerate
// ------------------------------------------------------------------
// prettier-ignore
function* GenerateReduce(buffer) {
    if (buffer.length === 1)
        return yield* buffer[0];
    for (const left of buffer[0]) {
        for (const right of GenerateReduce(buffer.slice(1))) {
            yield `${left}${right}`;
        }
    }
}
// prettier-ignore
function* GenerateAnd(expression) {
    return yield* GenerateReduce(expression.expr.map((expr) => [...TemplateLiteralExpressionGenerate(expr)]));
}
// prettier-ignore
function* GenerateOr(expression) {
    for (const expr of expression.expr)
        yield* TemplateLiteralExpressionGenerate(expr);
}
// prettier-ignore
function* GenerateConst(expression) {
    return yield expression.const;
}
function* TemplateLiteralExpressionGenerate(expression) {
    return expression.type === 'and'
        ? yield* GenerateAnd(expression)
        : expression.type === 'or'
            ? yield* GenerateOr(expression)
            : expression.type === 'const'
                ? yield* GenerateConst(expression)
                : (() => {
                    throw new TemplateLiteralGenerateError('Unknown expression');
                })();
}
/** Generates a tuple of strings from the given TemplateLiteral. Returns an empty tuple if infinite. */
function TemplateLiteralGenerate(schema) {
    const expression = (0, parse_1.TemplateLiteralParseExact)(schema.pattern);
    // prettier-ignore
    return ((0, finite_1.IsTemplateLiteralExpressionFinite)(expression)
        ? [...TemplateLiteralExpressionGenerate(expression)]
        : []);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/template-literal/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/finite.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/generate.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/syntax.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/parse.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/pattern.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/union.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/template-literal.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/template-literal/parse.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TemplateLiteralParserError = void 0;
exports.TemplateLiteralParse = TemplateLiteralParse;
exports.TemplateLiteralParseExact = TemplateLiteralParseExact;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/index.js");
// ------------------------------------------------------------------
// TemplateLiteralParserError
// ------------------------------------------------------------------
class TemplateLiteralParserError extends index_1.TypeBoxError {
}
exports.TemplateLiteralParserError = TemplateLiteralParserError;
// -------------------------------------------------------------------
// Unescape
//
// Unescape for these control characters specifically. Note that this
// function is only called on non union group content, and where we
// still want to allow the user to embed control characters in that
// content. For review.
// -------------------------------------------------------------------
// prettier-ignore
function Unescape(pattern) {
    return pattern
        .replace(/\\\$/g, '$')
        .replace(/\\\*/g, '*')
        .replace(/\\\^/g, '^')
        .replace(/\\\|/g, '|')
        .replace(/\\\(/g, '(')
        .replace(/\\\)/g, ')');
}
// -------------------------------------------------------------------
// Control Characters
// -------------------------------------------------------------------
function IsNonEscaped(pattern, index, char) {
    return pattern[index] === char && pattern.charCodeAt(index - 1) !== 92;
}
function IsOpenParen(pattern, index) {
    return IsNonEscaped(pattern, index, '(');
}
function IsCloseParen(pattern, index) {
    return IsNonEscaped(pattern, index, ')');
}
function IsSeparator(pattern, index) {
    return IsNonEscaped(pattern, index, '|');
}
// -------------------------------------------------------------------
// Control Groups
// -------------------------------------------------------------------
function IsGroup(pattern) {
    if (!(IsOpenParen(pattern, 0) && IsCloseParen(pattern, pattern.length - 1)))
        return false;
    let count = 0;
    for (let index = 0; index < pattern.length; index++) {
        if (IsOpenParen(pattern, index))
            count += 1;
        if (IsCloseParen(pattern, index))
            count -= 1;
        if (count === 0 && index !== pattern.length - 1)
            return false;
    }
    return true;
}
// prettier-ignore
function InGroup(pattern) {
    return pattern.slice(1, pattern.length - 1);
}
// prettier-ignore
function IsPrecedenceOr(pattern) {
    let count = 0;
    for (let index = 0; index < pattern.length; index++) {
        if (IsOpenParen(pattern, index))
            count += 1;
        if (IsCloseParen(pattern, index))
            count -= 1;
        if (IsSeparator(pattern, index) && count === 0)
            return true;
    }
    return false;
}
// prettier-ignore
function IsPrecedenceAnd(pattern) {
    for (let index = 0; index < pattern.length; index++) {
        if (IsOpenParen(pattern, index))
            return true;
    }
    return false;
}
// prettier-ignore
function Or(pattern) {
    let [count, start] = [0, 0];
    const expressions = [];
    for (let index = 0; index < pattern.length; index++) {
        if (IsOpenParen(pattern, index))
            count += 1;
        if (IsCloseParen(pattern, index))
            count -= 1;
        if (IsSeparator(pattern, index) && count === 0) {
            const range = pattern.slice(start, index);
            if (range.length > 0)
                expressions.push(TemplateLiteralParse(range));
            start = index + 1;
        }
    }
    const range = pattern.slice(start);
    if (range.length > 0)
        expressions.push(TemplateLiteralParse(range));
    if (expressions.length === 0)
        return { type: 'const', const: '' };
    if (expressions.length === 1)
        return expressions[0];
    return { type: 'or', expr: expressions };
}
// prettier-ignore
function And(pattern) {
    function Group(value, index) {
        if (!IsOpenParen(value, index))
            throw new TemplateLiteralParserError(`TemplateLiteralParser: Index must point to open parens`);
        let count = 0;
        for (let scan = index; scan < value.length; scan++) {
            if (IsOpenParen(value, scan))
                count += 1;
            if (IsCloseParen(value, scan))
                count -= 1;
            if (count === 0)
                return [index, scan];
        }
        throw new TemplateLiteralParserError(`TemplateLiteralParser: Unclosed group parens in expression`);
    }
    function Range(pattern, index) {
        for (let scan = index; scan < pattern.length; scan++) {
            if (IsOpenParen(pattern, scan))
                return [index, scan];
        }
        return [index, pattern.length];
    }
    const expressions = [];
    for (let index = 0; index < pattern.length; index++) {
        if (IsOpenParen(pattern, index)) {
            const [start, end] = Group(pattern, index);
            const range = pattern.slice(start, end + 1);
            expressions.push(TemplateLiteralParse(range));
            index = end;
        }
        else {
            const [start, end] = Range(pattern, index);
            const range = pattern.slice(start, end);
            if (range.length > 0)
                expressions.push(TemplateLiteralParse(range));
            index = end - 1;
        }
    }
    return ((expressions.length === 0) ? { type: 'const', const: '' } :
        (expressions.length === 1) ? expressions[0] :
            { type: 'and', expr: expressions });
}
// ------------------------------------------------------------------
// TemplateLiteralParse
// ------------------------------------------------------------------
/** Parses a pattern and returns an expression tree */
function TemplateLiteralParse(pattern) {
    // prettier-ignore
    return (IsGroup(pattern) ? TemplateLiteralParse(InGroup(pattern)) :
        IsPrecedenceOr(pattern) ? Or(pattern) :
            IsPrecedenceAnd(pattern) ? And(pattern) :
                { type: 'const', const: Unescape(pattern) });
}
// ------------------------------------------------------------------
// TemplateLiteralParseExact
// ------------------------------------------------------------------
/** Parses a pattern and strips forward and trailing ^ and $ */
function TemplateLiteralParseExact(pattern) {
    return TemplateLiteralParse(pattern.slice(1, pattern.length - 1));
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/template-literal/pattern.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TemplateLiteralPatternError = void 0;
exports.TemplateLiteralPattern = TemplateLiteralPattern;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/patterns/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/index.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// ------------------------------------------------------------------
// TemplateLiteralPatternError
// ------------------------------------------------------------------
class TemplateLiteralPatternError extends index_3.TypeBoxError {
}
exports.TemplateLiteralPatternError = TemplateLiteralPatternError;
// ------------------------------------------------------------------
// TemplateLiteralPattern
// ------------------------------------------------------------------
function Escape(value) {
    return value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
// prettier-ignore
function Visit(schema, acc) {
    return ((0, kind_1.IsTemplateLiteral)(schema) ? schema.pattern.slice(1, schema.pattern.length - 1) :
        (0, kind_1.IsUnion)(schema) ? `(${schema.anyOf.map((schema) => Visit(schema, acc)).join('|')})` :
            (0, kind_1.IsNumber)(schema) ? `${acc}${index_1.PatternNumber}` :
                (0, kind_1.IsInteger)(schema) ? `${acc}${index_1.PatternNumber}` :
                    (0, kind_1.IsBigInt)(schema) ? `${acc}${index_1.PatternNumber}` :
                        (0, kind_1.IsString)(schema) ? `${acc}${index_1.PatternString}` :
                            (0, kind_1.IsLiteral)(schema) ? `${acc}${Escape(schema.const.toString())}` :
                                (0, kind_1.IsBoolean)(schema) ? `${acc}${index_1.PatternBoolean}` :
                                    (() => { throw new TemplateLiteralPatternError(`Unexpected Kind '${schema[index_2.Kind]}'`); })());
}
function TemplateLiteralPattern(kinds) {
    return `^${kinds.map((schema) => Visit(schema, '')).join('')}\$`;
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/template-literal/syntax.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TemplateLiteralSyntax = TemplateLiteralSyntax;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/boolean/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/bigint/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/number/index.js");
const index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/string/index.js");
const index_6 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const index_7 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
// ------------------------------------------------------------------
// SyntaxParsers
// ------------------------------------------------------------------
// prettier-ignore
function* FromUnion(syntax) {
    const trim = syntax.trim().replace(/"|'/g, '');
    return (trim === 'boolean' ? yield (0, index_2.Boolean)() :
        trim === 'number' ? yield (0, index_4.Number)() :
            trim === 'bigint' ? yield (0, index_3.BigInt)() :
                trim === 'string' ? yield (0, index_5.String)() :
                    yield (() => {
                        const literals = trim.split('|').map((literal) => (0, index_1.Literal)(literal.trim()));
                        return (literals.length === 0 ? (0, index_7.Never)() :
                            literals.length === 1 ? literals[0] :
                                (0, index_6.UnionEvaluated)(literals));
                    })());
}
// prettier-ignore
function* FromTerminal(syntax) {
    if (syntax[1] !== '{') {
        const L = (0, index_1.Literal)('$');
        const R = FromSyntax(syntax.slice(1));
        return yield* [L, ...R];
    }
    for (let i = 2; i < syntax.length; i++) {
        if (syntax[i] === '}') {
            const L = FromUnion(syntax.slice(2, i));
            const R = FromSyntax(syntax.slice(i + 1));
            return yield* [...L, ...R];
        }
    }
    yield (0, index_1.Literal)(syntax);
}
// prettier-ignore
function* FromSyntax(syntax) {
    for (let i = 0; i < syntax.length; i++) {
        if (syntax[i] === '$') {
            const L = (0, index_1.Literal)(syntax.slice(0, i));
            const R = FromTerminal(syntax.slice(i));
            return yield* [L, ...R];
        }
    }
    yield (0, index_1.Literal)(syntax);
}
/** Parses TemplateLiteralSyntax and returns a tuple of TemplateLiteralKinds */
function TemplateLiteralSyntax(syntax) {
    return [...FromSyntax(syntax)];
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/template-literal/template-literal.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TemplateLiteral = TemplateLiteral;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const syntax_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/syntax.js");
const pattern_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/pattern.js");
const value_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/value.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates a TemplateLiteral type */
// prettier-ignore
function TemplateLiteral(unresolved, options) {
    const pattern = (0, value_1.IsString)(unresolved)
        ? (0, pattern_1.TemplateLiteralPattern)((0, syntax_1.TemplateLiteralSyntax)(unresolved))
        : (0, pattern_1.TemplateLiteralPattern)(unresolved);
    return (0, type_1.CreateType)({ [index_1.Kind]: 'TemplateLiteral', type: 'string', pattern }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/template-literal/union.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TemplateLiteralToUnion = TemplateLiteralToUnion;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js");
const generate_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/generate.js");
/** Returns a Union from the given TemplateLiteral */
function TemplateLiteralToUnion(schema) {
    const R = (0, generate_1.TemplateLiteralGenerate)(schema);
    const L = R.map((S) => (0, index_2.Literal)(S));
    return (0, index_1.UnionEvaluated)(L);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/transform/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/transform/transform.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/transform/transform.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TransformEncodeBuilder = exports.TransformDecodeBuilder = void 0;
exports.Transform = Transform;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// ------------------------------------------------------------------
// TransformBuilders
// ------------------------------------------------------------------
class TransformDecodeBuilder {
    constructor(schema) {
        this.schema = schema;
    }
    Decode(decode) {
        return new TransformEncodeBuilder(this.schema, decode);
    }
}
exports.TransformDecodeBuilder = TransformDecodeBuilder;
// prettier-ignore
class TransformEncodeBuilder {
    constructor(schema, decode) {
        this.schema = schema;
        this.decode = decode;
    }
    EncodeTransform(encode, schema) {
        const Encode = (value) => schema[index_1.TransformKind].Encode(encode(value));
        const Decode = (value) => this.decode(schema[index_1.TransformKind].Decode(value));
        const Codec = { Encode: Encode, Decode: Decode };
        return { ...schema, [index_1.TransformKind]: Codec };
    }
    EncodeSchema(encode, schema) {
        const Codec = { Decode: this.decode, Encode: encode };
        return { ...schema, [index_1.TransformKind]: Codec };
    }
    Encode(encode) {
        return ((0, kind_1.IsTransform)(this.schema) ? this.EncodeTransform(encode, this.schema) : this.EncodeSchema(encode, this.schema));
    }
}
exports.TransformEncodeBuilder = TransformEncodeBuilder;
/** `[Json]` Creates a Transform type */
function Transform(schema) {
    return new TransformDecodeBuilder(schema);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/tuple/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/tuple/tuple.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/tuple/tuple.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Tuple = Tuple;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates a Tuple type */
function Tuple(items, options) {
    // prettier-ignore
    return (0, type_1.CreateType)(items.length > 0 ?
        { [index_1.Kind]: 'Tuple', type: 'array', items, additionalItems: false, minItems: items.length, maxItems: items.length } :
        { [index_1.Kind]: 'Tuple', type: 'array', minItems: items.length, maxItems: items.length }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/type/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Type = exports.JavaScriptTypeBuilder = exports.JsonTypeBuilder = void 0;
// ------------------------------------------------------------------
// JsonTypeBuilder
// ------------------------------------------------------------------
var json_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/type/json.js");
Object.defineProperty(exports, "JsonTypeBuilder", ({ enumerable: true, get: function () { return json_1.JsonTypeBuilder; } }));
// ------------------------------------------------------------------
// JavaScriptTypeBuilder
// ------------------------------------------------------------------
const TypeBuilder = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/type/type.js");
const javascript_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/type/javascript.js");
Object.defineProperty(exports, "JavaScriptTypeBuilder", ({ enumerable: true, get: function () { return javascript_1.JavaScriptTypeBuilder; } }));
/** JavaScript Type Builder with Static Resolution for TypeScript */
const Type = TypeBuilder;
exports.Type = Type;


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/type/javascript.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JavaScriptTypeBuilder = void 0;
const json_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/type/json.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/async-iterator/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/awaited/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/bigint/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/constructor/index.js");
const index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/constructor-parameters/index.js");
const index_6 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/date/index.js");
const index_7 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/function/index.js");
const index_8 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/instance-type/index.js");
const index_9 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/iterator/index.js");
const index_10 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/parameters/index.js");
const index_11 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/promise/index.js");
const index_12 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/regexp/index.js");
const index_13 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/return-type/index.js");
const index_14 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbol/index.js");
const index_15 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/uint8array/index.js");
const index_16 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/undefined/index.js");
const index_17 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/void/index.js");
/** JavaScript Type Builder with Static Resolution for TypeScript */
class JavaScriptTypeBuilder extends json_1.JsonTypeBuilder {
    /** `[JavaScript]` Creates a AsyncIterator type */
    AsyncIterator(items, options) {
        return (0, index_1.AsyncIterator)(items, options);
    }
    /** `[JavaScript]` Constructs a type by recursively unwrapping Promise types */
    Awaited(schema, options) {
        return (0, index_2.Awaited)(schema, options);
    }
    /** `[JavaScript]` Creates a BigInt type */
    BigInt(options) {
        return (0, index_3.BigInt)(options);
    }
    /** `[JavaScript]` Extracts the ConstructorParameters from the given Constructor type */
    ConstructorParameters(schema, options) {
        return (0, index_5.ConstructorParameters)(schema, options);
    }
    /** `[JavaScript]` Creates a Constructor type */
    Constructor(parameters, returns, options) {
        return (0, index_4.Constructor)(parameters, returns, options);
    }
    /** `[JavaScript]` Creates a Date type */
    Date(options = {}) {
        return (0, index_6.Date)(options);
    }
    /** `[JavaScript]` Creates a Function type */
    Function(parameters, returns, options) {
        return (0, index_7.Function)(parameters, returns, options);
    }
    /** `[JavaScript]` Extracts the InstanceType from the given Constructor type */
    InstanceType(schema, options) {
        return (0, index_8.InstanceType)(schema, options);
    }
    /** `[JavaScript]` Creates an Iterator type */
    Iterator(items, options) {
        return (0, index_9.Iterator)(items, options);
    }
    /** `[JavaScript]` Extracts the Parameters from the given Function type */
    Parameters(schema, options) {
        return (0, index_10.Parameters)(schema, options);
    }
    /** `[JavaScript]` Creates a Promise type */
    Promise(item, options) {
        return (0, index_11.Promise)(item, options);
    }
    /** `[JavaScript]` Creates a RegExp type */
    RegExp(unresolved, options) {
        return (0, index_12.RegExp)(unresolved, options);
    }
    /** `[JavaScript]` Extracts the ReturnType from the given Function type */
    ReturnType(schema, options) {
        return (0, index_13.ReturnType)(schema, options);
    }
    /** `[JavaScript]` Creates a Symbol type */
    Symbol(options) {
        return (0, index_14.Symbol)(options);
    }
    /** `[JavaScript]` Creates a Undefined type */
    Undefined(options) {
        return (0, index_16.Undefined)(options);
    }
    /** `[JavaScript]` Creates a Uint8Array type */
    Uint8Array(options) {
        return (0, index_15.Uint8Array)(options);
    }
    /** `[JavaScript]` Creates a Void type */
    Void(options) {
        return (0, index_17.Void)(options);
    }
}
exports.JavaScriptTypeBuilder = JavaScriptTypeBuilder;


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/type/json.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JsonTypeBuilder = void 0;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/any/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/array/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/boolean/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/composite/index.js");
const index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/const/index.js");
const index_6 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/deref/index.js");
const index_7 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/enum/index.js");
const index_8 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/exclude/index.js");
const index_9 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/index.js");
const index_10 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extract/index.js");
const index_11 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/index.js");
const index_12 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/integer/index.js");
const index_13 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/index.js");
const index_14 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/index.js");
const index_15 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/index.js");
const index_16 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js");
const index_17 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
const index_18 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
const index_19 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/not/index.js");
const index_20 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/null/index.js");
const index_21 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/number/index.js");
const index_22 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/object/index.js");
const index_23 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/omit/index.js");
const index_24 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/optional/index.js");
const index_25 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/partial/index.js");
const index_26 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/pick/index.js");
const index_27 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly/index.js");
const index_28 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly-optional/index.js");
const index_29 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/record/index.js");
const index_30 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/recursive/index.js");
const index_31 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/ref/index.js");
const index_32 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/required/index.js");
const index_33 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/rest/index.js");
const index_34 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/strict/index.js");
const index_35 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/string/index.js");
const index_36 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/index.js");
const index_37 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/transform/index.js");
const index_38 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/tuple/index.js");
const index_39 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
const index_40 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/unknown/index.js");
const index_41 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/unsafe/index.js");
/** Json Type Builder with Static Resolution for TypeScript */
class JsonTypeBuilder {
    // ------------------------------------------------------------------------
    // Strict
    // ------------------------------------------------------------------------
    /**
     * @deprecated `[Json]` Omits compositing symbols from this schema. It is recommended
     * to use the JSON parse/stringify to remove compositing symbols if needed. This
     * is how Strict works internally.
     *
     * ```typescript
     * JSON.parse(JSON.stringify(Type.String()))
     * ```
     */
    Strict(schema) {
        return (0, index_34.Strict)(schema);
    }
    // ------------------------------------------------------------------------
    // Modifiers
    // ------------------------------------------------------------------------
    /** `[Json]` Creates a Readonly and Optional property */
    ReadonlyOptional(schema) {
        return (0, index_28.ReadonlyOptional)(schema);
    }
    /** `[Json]` Creates a Readonly property */
    Readonly(schema, enable) {
        return (0, index_27.Readonly)(schema, enable ?? true);
    }
    /** `[Json]` Creates a Optional property */
    Optional(schema, enable) {
        return (0, index_24.Optional)(schema, enable ?? true);
    }
    // ------------------------------------------------------------------------
    // Types
    // ------------------------------------------------------------------------
    /** `[Json]` Creates an Any type */
    Any(options) {
        return (0, index_1.Any)(options);
    }
    /** `[Json]` Creates an Array type */
    Array(schema, options) {
        return (0, index_2.Array)(schema, options);
    }
    /** `[Json]` Creates a Boolean type */
    Boolean(options) {
        return (0, index_3.Boolean)(options);
    }
    /** `[Json]` Intrinsic function to Capitalize LiteralString types */
    Capitalize(schema, options) {
        return (0, index_14.Capitalize)(schema, options);
    }
    /** `[Json]` Creates a Composite object type */
    Composite(schemas, options) {
        return (0, index_4.Composite)(schemas, options); // (error) TS 5.4.0-dev - review TComposite implementation
    }
    /** `[JavaScript]` Creates a readonly const type from the given value. */
    Const(value, options) {
        return (0, index_5.Const)(value, options);
    }
    /** `[Json]` Creates a dereferenced type */
    Deref(schema, references) {
        return (0, index_6.Deref)(schema, references);
    }
    /** `[Json]` Creates a Enum type */
    Enum(item, options) {
        return (0, index_7.Enum)(item, options);
    }
    /** `[Json]` Constructs a type by excluding from unionType all union members that are assignable to excludedMembers */
    Exclude(unionType, excludedMembers, options) {
        return (0, index_8.Exclude)(unionType, excludedMembers, options);
    }
    /** `[Json]` Creates a Conditional type */
    Extends(L, R, T, F, options) {
        return (0, index_9.Extends)(L, R, T, F, options);
    }
    /** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */
    Extract(type, union, options) {
        return (0, index_10.Extract)(type, union, options);
    }
    /** `[Json]` Returns an Indexed property type for the given keys */
    Index(schema, unresolved, options) {
        return (0, index_11.Index)(schema, unresolved, options);
    }
    /** `[Json]` Creates an Integer type */
    Integer(options) {
        return (0, index_12.Integer)(options);
    }
    /** `[Json]` Creates an Intersect type */
    Intersect(T, options) {
        return (0, index_13.Intersect)(T, options);
    }
    /** `[Json]` Creates a KeyOf type */
    KeyOf(schema, options) {
        return (0, index_15.KeyOf)(schema, options);
    }
    /** `[Json]` Creates a Literal type */
    Literal(value, options) {
        return (0, index_16.Literal)(value, options);
    }
    /** `[Json]` Intrinsic function to Lowercase LiteralString types */
    Lowercase(schema, options) {
        return (0, index_14.Lowercase)(schema, options);
    }
    /** `[Json]` Creates a Mapped object type */
    Mapped(key, map, options) {
        return (0, index_17.Mapped)(key, map, options);
    }
    /** `[Json]` Creates a Never type */
    Never(options) {
        return (0, index_18.Never)(options);
    }
    /** `[Json]` Creates a Not type */
    Not(schema, options) {
        return (0, index_19.Not)(schema, options);
    }
    /** `[Json]` Creates a Null type */
    Null(options) {
        return (0, index_20.Null)(options);
    }
    /** `[Json]` Creates a Number type */
    Number(options) {
        return (0, index_21.Number)(options);
    }
    /** `[Json]` Creates an Object type */
    Object(properties, options) {
        return (0, index_22.Object)(properties, options);
    }
    /** `[Json]` Constructs a type whose keys are omitted from the given type */
    Omit(schema, unresolved, options) {
        return (0, index_23.Omit)(schema, unresolved, options);
    }
    /** `[Json]` Constructs a type where all properties are optional */
    Partial(schema, options) {
        return (0, index_25.Partial)(schema, options);
    }
    /** `[Json]` Constructs a type whose keys are picked from the given type */
    Pick(schema, unresolved, options) {
        return (0, index_26.Pick)(schema, unresolved, options);
    }
    /** `[Json]` Creates a Record type */
    Record(key, schema, options) {
        return (0, index_29.Record)(key, schema, options);
    }
    /** `[Json]` Creates a Recursive type */
    Recursive(callback, options) {
        return (0, index_30.Recursive)(callback, options);
    }
    /** `[Json]` Creates a Ref type. */
    Ref(unresolved, options) {
        return (0, index_31.Ref)(unresolved, options);
    }
    /** `[Json]` Constructs a type where all properties are required */
    Required(schema, options) {
        return (0, index_32.Required)(schema, options);
    }
    /** `[Json]` Extracts interior Rest elements from Tuple, Intersect and Union types */
    Rest(schema) {
        return (0, index_33.Rest)(schema);
    }
    /** `[Json]` Creates a String type */
    String(options) {
        return (0, index_35.String)(options);
    }
    /** `[Json]` Creates a TemplateLiteral type */
    TemplateLiteral(unresolved, options) {
        return (0, index_36.TemplateLiteral)(unresolved, options);
    }
    /** `[Json]` Creates a Transform type */
    Transform(schema) {
        return (0, index_37.Transform)(schema);
    }
    /** `[Json]` Creates a Tuple type */
    Tuple(items, options) {
        return (0, index_38.Tuple)(items, options);
    }
    /** `[Json]` Intrinsic function to Uncapitalize LiteralString types */
    Uncapitalize(schema, options) {
        return (0, index_14.Uncapitalize)(schema, options);
    }
    /** `[Json]` Creates a Union type */
    Union(schemas, options) {
        return (0, index_39.Union)(schemas, options);
    }
    /** `[Json]` Creates an Unknown type */
    Unknown(options) {
        return (0, index_40.Unknown)(options);
    }
    /** `[Json]` Creates a Unsafe type that will infers as the generic argument T */
    Unsafe(options) {
        return (0, index_41.Unsafe)(options);
    }
    /** `[Json]` Intrinsic function to Uppercase LiteralString types */
    Uppercase(schema, options) {
        return (0, index_14.Uppercase)(schema, options);
    }
}
exports.JsonTypeBuilder = JsonTypeBuilder;


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/type/type.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.String = exports.ReturnType = exports.Rest = exports.Required = exports.RegExp = exports.Ref = exports.Recursive = exports.Record = exports.ReadonlyOptional = exports.Readonly = exports.Promise = exports.Pick = exports.Partial = exports.Parameters = exports.Optional = exports.Omit = exports.Object = exports.Number = exports.Null = exports.Not = exports.Never = exports.Mapped = exports.Literal = exports.KeyOf = exports.Iterator = exports.Uppercase = exports.Lowercase = exports.Uncapitalize = exports.Capitalize = exports.Intersect = exports.Integer = exports.InstanceType = exports.Index = exports.Function = exports.Extract = exports.Extends = exports.Exclude = exports.Enum = exports.Deref = exports.Date = exports.ConstructorParameters = exports.Constructor = exports.Const = exports.Composite = exports.Boolean = exports.BigInt = exports.Awaited = exports.AsyncIterator = exports.Array = exports.Any = void 0;
exports.Void = exports.Unsafe = exports.Unknown = exports.Union = exports.Undefined = exports.Uint8Array = exports.Tuple = exports.Transform = exports.TemplateLiteral = exports.Symbol = exports.Strict = void 0;
// ------------------------------------------------------------------
// Type: Module
// ------------------------------------------------------------------
var index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/any/index.js");
Object.defineProperty(exports, "Any", ({ enumerable: true, get: function () { return index_1.Any; } }));
var index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/array/index.js");
Object.defineProperty(exports, "Array", ({ enumerable: true, get: function () { return index_2.Array; } }));
var index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/async-iterator/index.js");
Object.defineProperty(exports, "AsyncIterator", ({ enumerable: true, get: function () { return index_3.AsyncIterator; } }));
var index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/awaited/index.js");
Object.defineProperty(exports, "Awaited", ({ enumerable: true, get: function () { return index_4.Awaited; } }));
var index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/bigint/index.js");
Object.defineProperty(exports, "BigInt", ({ enumerable: true, get: function () { return index_5.BigInt; } }));
var index_6 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/boolean/index.js");
Object.defineProperty(exports, "Boolean", ({ enumerable: true, get: function () { return index_6.Boolean; } }));
var index_7 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/composite/index.js");
Object.defineProperty(exports, "Composite", ({ enumerable: true, get: function () { return index_7.Composite; } }));
var index_8 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/const/index.js");
Object.defineProperty(exports, "Const", ({ enumerable: true, get: function () { return index_8.Const; } }));
var index_9 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/constructor/index.js");
Object.defineProperty(exports, "Constructor", ({ enumerable: true, get: function () { return index_9.Constructor; } }));
var index_10 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/constructor-parameters/index.js");
Object.defineProperty(exports, "ConstructorParameters", ({ enumerable: true, get: function () { return index_10.ConstructorParameters; } }));
var index_11 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/date/index.js");
Object.defineProperty(exports, "Date", ({ enumerable: true, get: function () { return index_11.Date; } }));
var index_12 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/deref/index.js");
Object.defineProperty(exports, "Deref", ({ enumerable: true, get: function () { return index_12.Deref; } }));
var index_13 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/enum/index.js");
Object.defineProperty(exports, "Enum", ({ enumerable: true, get: function () { return index_13.Enum; } }));
var index_14 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/exclude/index.js");
Object.defineProperty(exports, "Exclude", ({ enumerable: true, get: function () { return index_14.Exclude; } }));
var index_15 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/index.js");
Object.defineProperty(exports, "Extends", ({ enumerable: true, get: function () { return index_15.Extends; } }));
var index_16 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extract/index.js");
Object.defineProperty(exports, "Extract", ({ enumerable: true, get: function () { return index_16.Extract; } }));
var index_17 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/function/index.js");
Object.defineProperty(exports, "Function", ({ enumerable: true, get: function () { return index_17.Function; } }));
var index_18 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/indexed/index.js");
Object.defineProperty(exports, "Index", ({ enumerable: true, get: function () { return index_18.Index; } }));
var index_19 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/instance-type/index.js");
Object.defineProperty(exports, "InstanceType", ({ enumerable: true, get: function () { return index_19.InstanceType; } }));
var index_20 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/integer/index.js");
Object.defineProperty(exports, "Integer", ({ enumerable: true, get: function () { return index_20.Integer; } }));
var index_21 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intersect/index.js");
Object.defineProperty(exports, "Intersect", ({ enumerable: true, get: function () { return index_21.Intersect; } }));
var index_22 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/intrinsic/index.js");
Object.defineProperty(exports, "Capitalize", ({ enumerable: true, get: function () { return index_22.Capitalize; } }));
Object.defineProperty(exports, "Uncapitalize", ({ enumerable: true, get: function () { return index_22.Uncapitalize; } }));
Object.defineProperty(exports, "Lowercase", ({ enumerable: true, get: function () { return index_22.Lowercase; } }));
Object.defineProperty(exports, "Uppercase", ({ enumerable: true, get: function () { return index_22.Uppercase; } }));
var index_23 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/iterator/index.js");
Object.defineProperty(exports, "Iterator", ({ enumerable: true, get: function () { return index_23.Iterator; } }));
var index_24 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/index.js");
Object.defineProperty(exports, "KeyOf", ({ enumerable: true, get: function () { return index_24.KeyOf; } }));
var index_25 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/literal/index.js");
Object.defineProperty(exports, "Literal", ({ enumerable: true, get: function () { return index_25.Literal; } }));
var index_26 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/mapped/index.js");
Object.defineProperty(exports, "Mapped", ({ enumerable: true, get: function () { return index_26.Mapped; } }));
var index_27 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
Object.defineProperty(exports, "Never", ({ enumerable: true, get: function () { return index_27.Never; } }));
var index_28 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/not/index.js");
Object.defineProperty(exports, "Not", ({ enumerable: true, get: function () { return index_28.Not; } }));
var index_29 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/null/index.js");
Object.defineProperty(exports, "Null", ({ enumerable: true, get: function () { return index_29.Null; } }));
var index_30 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/number/index.js");
Object.defineProperty(exports, "Number", ({ enumerable: true, get: function () { return index_30.Number; } }));
var index_31 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/object/index.js");
Object.defineProperty(exports, "Object", ({ enumerable: true, get: function () { return index_31.Object; } }));
var index_32 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/omit/index.js");
Object.defineProperty(exports, "Omit", ({ enumerable: true, get: function () { return index_32.Omit; } }));
var index_33 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/optional/index.js");
Object.defineProperty(exports, "Optional", ({ enumerable: true, get: function () { return index_33.Optional; } }));
var index_34 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/parameters/index.js");
Object.defineProperty(exports, "Parameters", ({ enumerable: true, get: function () { return index_34.Parameters; } }));
var index_35 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/partial/index.js");
Object.defineProperty(exports, "Partial", ({ enumerable: true, get: function () { return index_35.Partial; } }));
var index_36 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/pick/index.js");
Object.defineProperty(exports, "Pick", ({ enumerable: true, get: function () { return index_36.Pick; } }));
var index_37 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/promise/index.js");
Object.defineProperty(exports, "Promise", ({ enumerable: true, get: function () { return index_37.Promise; } }));
var index_38 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly/index.js");
Object.defineProperty(exports, "Readonly", ({ enumerable: true, get: function () { return index_38.Readonly; } }));
var index_39 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/readonly-optional/index.js");
Object.defineProperty(exports, "ReadonlyOptional", ({ enumerable: true, get: function () { return index_39.ReadonlyOptional; } }));
var index_40 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/record/index.js");
Object.defineProperty(exports, "Record", ({ enumerable: true, get: function () { return index_40.Record; } }));
var index_41 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/recursive/index.js");
Object.defineProperty(exports, "Recursive", ({ enumerable: true, get: function () { return index_41.Recursive; } }));
var index_42 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/ref/index.js");
Object.defineProperty(exports, "Ref", ({ enumerable: true, get: function () { return index_42.Ref; } }));
var index_43 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/regexp/index.js");
Object.defineProperty(exports, "RegExp", ({ enumerable: true, get: function () { return index_43.RegExp; } }));
var index_44 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/required/index.js");
Object.defineProperty(exports, "Required", ({ enumerable: true, get: function () { return index_44.Required; } }));
var index_45 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/rest/index.js");
Object.defineProperty(exports, "Rest", ({ enumerable: true, get: function () { return index_45.Rest; } }));
var index_46 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/return-type/index.js");
Object.defineProperty(exports, "ReturnType", ({ enumerable: true, get: function () { return index_46.ReturnType; } }));
var index_47 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/string/index.js");
Object.defineProperty(exports, "String", ({ enumerable: true, get: function () { return index_47.String; } }));
var index_48 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/strict/index.js");
Object.defineProperty(exports, "Strict", ({ enumerable: true, get: function () { return index_48.Strict; } }));
var index_49 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbol/index.js");
Object.defineProperty(exports, "Symbol", ({ enumerable: true, get: function () { return index_49.Symbol; } }));
var index_50 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/template-literal/index.js");
Object.defineProperty(exports, "TemplateLiteral", ({ enumerable: true, get: function () { return index_50.TemplateLiteral; } }));
var index_51 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/transform/index.js");
Object.defineProperty(exports, "Transform", ({ enumerable: true, get: function () { return index_51.Transform; } }));
var index_52 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/tuple/index.js");
Object.defineProperty(exports, "Tuple", ({ enumerable: true, get: function () { return index_52.Tuple; } }));
var index_53 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/uint8array/index.js");
Object.defineProperty(exports, "Uint8Array", ({ enumerable: true, get: function () { return index_53.Uint8Array; } }));
var index_54 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/undefined/index.js");
Object.defineProperty(exports, "Undefined", ({ enumerable: true, get: function () { return index_54.Undefined; } }));
var index_55 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/index.js");
Object.defineProperty(exports, "Union", ({ enumerable: true, get: function () { return index_55.Union; } }));
var index_56 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/unknown/index.js");
Object.defineProperty(exports, "Unknown", ({ enumerable: true, get: function () { return index_56.Unknown; } }));
var index_57 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/unsafe/index.js");
Object.defineProperty(exports, "Unsafe", ({ enumerable: true, get: function () { return index_57.Unsafe; } }));
var index_58 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/void/index.js");
Object.defineProperty(exports, "Void", ({ enumerable: true, get: function () { return index_58.Void; } }));


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/uint8array/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/uint8array/uint8array.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/uint8array/uint8array.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Uint8Array = Uint8Array;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[JavaScript]` Creates a Uint8Array type */
function Uint8Array(options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Uint8Array', type: 'Uint8Array' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/undefined/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/undefined/undefined.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/undefined/undefined.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Undefined = Undefined;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[JavaScript]` Creates a Undefined type */
function Undefined(options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Undefined', type: 'undefined' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/union/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/union-evaluated.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/union-type.js"), exports);
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/union.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/union/union-create.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UnionCreate = UnionCreate;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
function UnionCreate(T, options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Union', anyOf: T }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/union/union-evaluated.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UnionEvaluated = UnionEvaluated;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/discard/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/optional/index.js");
const union_create_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/union-create.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const kind_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/kind.js");
// prettier-ignore
function IsUnionOptional(T) {
    return T.some(L => (0, kind_1.IsOptional)(L));
}
// prettier-ignore
function RemoveOptionalFromRest(T) {
    return T.map(L => (0, kind_1.IsOptional)(L) ? RemoveOptionalFromType(L) : L);
}
// prettier-ignore
function RemoveOptionalFromType(T) {
    return ((0, index_2.Discard)(T, [index_1.OptionalKind]));
}
// prettier-ignore
function ResolveUnion(T, options) {
    return (IsUnionOptional(T)
        ? (0, index_4.Optional)((0, union_create_1.UnionCreate)(RemoveOptionalFromRest(T), options))
        : (0, union_create_1.UnionCreate)(RemoveOptionalFromRest(T), options));
}
/** `[Json]` Creates an evaluated Union type */
function UnionEvaluated(T, options) {
    // prettier-ignore
    return (T.length === 0 ? (0, index_3.Never)(options) :
        T.length === 1 ? (0, type_1.CreateType)(T[0], options) :
            ResolveUnion(T, options));
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/union/union-type.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/union/union.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Union = Union;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const union_create_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/union/union-create.js");
/** `[Json]` Creates a Union type */
function Union(T, options) {
    // prettier-ignore
    return (T.length === 0 ? (0, index_1.Never)(options) :
        T.length === 1 ? (0, type_1.CreateType)(T[0], options) :
            (0, union_create_1.UnionCreate)(T, options));
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/unknown/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/unknown/unknown.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/unknown/unknown.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Unknown = Unknown;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates an Unknown type */
function Unknown(options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Unknown' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/unsafe/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/unsafe/unsafe.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/unsafe/unsafe.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Unsafe = Unsafe;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[Json]` Creates a Unsafe type that will infers as the generic argument T */
function Unsafe(options = {}) {
    return (0, type_1.CreateType)({ [index_1.Kind]: options[index_1.Kind] ?? 'Unsafe' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/void/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/void/void.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/type/void/void.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Void = Void;
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/create/type.js");
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
/** `[JavaScript]` Creates a Void type */
function Void(options) {
    return (0, type_1.CreateType)({ [index_1.Kind]: 'Void', type: 'void' }, options);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/value/check/check.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValueCheckUnknownTypeError = void 0;
exports.Check = Check;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/system/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/deref/index.js");
const index_3 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/hash/index.js");
const index_4 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const index_5 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/keyof/index.js");
const index_6 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/extends/index.js");
const index_7 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/registry/index.js");
const index_8 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/index.js");
const index_9 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/never/index.js");
// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------
const index_10 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/guard/index.js");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const type_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/guard/type.js");
// ------------------------------------------------------------------
// Errors
// ------------------------------------------------------------------
class ValueCheckUnknownTypeError extends index_8.TypeBoxError {
    constructor(schema) {
        super(`Unknown type`);
        this.schema = schema;
    }
}
exports.ValueCheckUnknownTypeError = ValueCheckUnknownTypeError;
// ------------------------------------------------------------------
// TypeGuards
// ------------------------------------------------------------------
function IsAnyOrUnknown(schema) {
    return schema[index_4.Kind] === 'Any' || schema[index_4.Kind] === 'Unknown';
}
// ------------------------------------------------------------------
// Guards
// ------------------------------------------------------------------
function IsDefined(value) {
    return value !== undefined;
}
// ------------------------------------------------------------------
// Types
// ------------------------------------------------------------------
function FromAny(schema, references, value) {
    return true;
}
function FromArray(schema, references, value) {
    if (!(0, index_10.IsArray)(value))
        return false;
    if (IsDefined(schema.minItems) && !(value.length >= schema.minItems)) {
        return false;
    }
    if (IsDefined(schema.maxItems) && !(value.length <= schema.maxItems)) {
        return false;
    }
    if (!value.every((value) => Visit(schema.items, references, value))) {
        return false;
    }
    // prettier-ignore
    if (schema.uniqueItems === true && !((function () { const set = new Set(); for (const element of value) {
        const hashed = (0, index_3.Hash)(element);
        if (set.has(hashed)) {
            return false;
        }
        else {
            set.add(hashed);
        }
    } return true; })())) {
        return false;
    }
    // contains
    if (!(IsDefined(schema.contains) || (0, index_10.IsNumber)(schema.minContains) || (0, index_10.IsNumber)(schema.maxContains))) {
        return true; // exit
    }
    const containsSchema = IsDefined(schema.contains) ? schema.contains : (0, index_9.Never)();
    const containsCount = value.reduce((acc, value) => (Visit(containsSchema, references, value) ? acc + 1 : acc), 0);
    if (containsCount === 0) {
        return false;
    }
    if ((0, index_10.IsNumber)(schema.minContains) && containsCount < schema.minContains) {
        return false;
    }
    if ((0, index_10.IsNumber)(schema.maxContains) && containsCount > schema.maxContains) {
        return false;
    }
    return true;
}
function FromAsyncIterator(schema, references, value) {
    return (0, index_10.IsAsyncIterator)(value);
}
function FromBigInt(schema, references, value) {
    if (!(0, index_10.IsBigInt)(value))
        return false;
    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
        return false;
    }
    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
        return false;
    }
    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {
        return false;
    }
    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {
        return false;
    }
    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === BigInt(0))) {
        return false;
    }
    return true;
}
function FromBoolean(schema, references, value) {
    return (0, index_10.IsBoolean)(value);
}
function FromConstructor(schema, references, value) {
    return Visit(schema.returns, references, value.prototype);
}
function FromDate(schema, references, value) {
    if (!(0, index_10.IsDate)(value))
        return false;
    if (IsDefined(schema.exclusiveMaximumTimestamp) && !(value.getTime() < schema.exclusiveMaximumTimestamp)) {
        return false;
    }
    if (IsDefined(schema.exclusiveMinimumTimestamp) && !(value.getTime() > schema.exclusiveMinimumTimestamp)) {
        return false;
    }
    if (IsDefined(schema.maximumTimestamp) && !(value.getTime() <= schema.maximumTimestamp)) {
        return false;
    }
    if (IsDefined(schema.minimumTimestamp) && !(value.getTime() >= schema.minimumTimestamp)) {
        return false;
    }
    if (IsDefined(schema.multipleOfTimestamp) && !(value.getTime() % schema.multipleOfTimestamp === 0)) {
        return false;
    }
    return true;
}
function FromFunction(schema, references, value) {
    return (0, index_10.IsFunction)(value);
}
function FromInteger(schema, references, value) {
    if (!(0, index_10.IsInteger)(value)) {
        return false;
    }
    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
        return false;
    }
    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
        return false;
    }
    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {
        return false;
    }
    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {
        return false;
    }
    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {
        return false;
    }
    return true;
}
function FromIntersect(schema, references, value) {
    const check1 = schema.allOf.every((schema) => Visit(schema, references, value));
    if (schema.unevaluatedProperties === false) {
        const keyPattern = new RegExp((0, index_5.KeyOfPattern)(schema));
        const check2 = Object.getOwnPropertyNames(value).every((key) => keyPattern.test(key));
        return check1 && check2;
    }
    else if ((0, type_1.IsSchema)(schema.unevaluatedProperties)) {
        const keyCheck = new RegExp((0, index_5.KeyOfPattern)(schema));
        const check2 = Object.getOwnPropertyNames(value).every((key) => keyCheck.test(key) || Visit(schema.unevaluatedProperties, references, value[key]));
        return check1 && check2;
    }
    else {
        return check1;
    }
}
function FromIterator(schema, references, value) {
    return (0, index_10.IsIterator)(value);
}
function FromLiteral(schema, references, value) {
    return value === schema.const;
}
function FromNever(schema, references, value) {
    return false;
}
function FromNot(schema, references, value) {
    return !Visit(schema.not, references, value);
}
function FromNull(schema, references, value) {
    return (0, index_10.IsNull)(value);
}
function FromNumber(schema, references, value) {
    if (!index_1.TypeSystemPolicy.IsNumberLike(value))
        return false;
    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
        return false;
    }
    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
        return false;
    }
    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {
        return false;
    }
    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {
        return false;
    }
    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {
        return false;
    }
    return true;
}
function FromObject(schema, references, value) {
    if (!index_1.TypeSystemPolicy.IsObjectLike(value))
        return false;
    if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {
        return false;
    }
    if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {
        return false;
    }
    const knownKeys = Object.getOwnPropertyNames(schema.properties);
    for (const knownKey of knownKeys) {
        const property = schema.properties[knownKey];
        if (schema.required && schema.required.includes(knownKey)) {
            if (!Visit(property, references, value[knownKey])) {
                return false;
            }
            if (((0, index_6.ExtendsUndefinedCheck)(property) || IsAnyOrUnknown(property)) && !(knownKey in value)) {
                return false;
            }
        }
        else {
            if (index_1.TypeSystemPolicy.IsExactOptionalProperty(value, knownKey) && !Visit(property, references, value[knownKey])) {
                return false;
            }
        }
    }
    if (schema.additionalProperties === false) {
        const valueKeys = Object.getOwnPropertyNames(value);
        // optimization: value is valid if schemaKey length matches the valueKey length
        if (schema.required && schema.required.length === knownKeys.length && valueKeys.length === knownKeys.length) {
            return true;
        }
        else {
            return valueKeys.every((valueKey) => knownKeys.includes(valueKey));
        }
    }
    else if (typeof schema.additionalProperties === 'object') {
        const valueKeys = Object.getOwnPropertyNames(value);
        return valueKeys.every((key) => knownKeys.includes(key) || Visit(schema.additionalProperties, references, value[key]));
    }
    else {
        return true;
    }
}
function FromPromise(schema, references, value) {
    return (0, index_10.IsPromise)(value);
}
function FromRecord(schema, references, value) {
    if (!index_1.TypeSystemPolicy.IsRecordLike(value)) {
        return false;
    }
    if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {
        return false;
    }
    if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {
        return false;
    }
    const [patternKey, patternSchema] = Object.entries(schema.patternProperties)[0];
    const regex = new RegExp(patternKey);
    // prettier-ignore
    const check1 = Object.entries(value).every(([key, value]) => {
        return (regex.test(key)) ? Visit(patternSchema, references, value) : true;
    });
    // prettier-ignore
    const check2 = typeof schema.additionalProperties === 'object' ? Object.entries(value).every(([key, value]) => {
        return (!regex.test(key)) ? Visit(schema.additionalProperties, references, value) : true;
    }) : true;
    const check3 = schema.additionalProperties === false
        ? Object.getOwnPropertyNames(value).every((key) => {
            return regex.test(key);
        })
        : true;
    return check1 && check2 && check3;
}
function FromRef(schema, references, value) {
    return Visit((0, index_2.Deref)(schema, references), references, value);
}
function FromRegExp(schema, references, value) {
    const regex = new RegExp(schema.source, schema.flags);
    if (IsDefined(schema.minLength)) {
        if (!(value.length >= schema.minLength))
            return false;
    }
    if (IsDefined(schema.maxLength)) {
        if (!(value.length <= schema.maxLength))
            return false;
    }
    return regex.test(value);
}
function FromString(schema, references, value) {
    if (!(0, index_10.IsString)(value)) {
        return false;
    }
    if (IsDefined(schema.minLength)) {
        if (!(value.length >= schema.minLength))
            return false;
    }
    if (IsDefined(schema.maxLength)) {
        if (!(value.length <= schema.maxLength))
            return false;
    }
    if (IsDefined(schema.pattern)) {
        const regex = new RegExp(schema.pattern);
        if (!regex.test(value))
            return false;
    }
    if (IsDefined(schema.format)) {
        if (!index_7.FormatRegistry.Has(schema.format))
            return false;
        const func = index_7.FormatRegistry.Get(schema.format);
        return func(value);
    }
    return true;
}
function FromSymbol(schema, references, value) {
    return (0, index_10.IsSymbol)(value);
}
function FromTemplateLiteral(schema, references, value) {
    return (0, index_10.IsString)(value) && new RegExp(schema.pattern).test(value);
}
function FromThis(schema, references, value) {
    return Visit((0, index_2.Deref)(schema, references), references, value);
}
function FromTuple(schema, references, value) {
    if (!(0, index_10.IsArray)(value)) {
        return false;
    }
    if (schema.items === undefined && !(value.length === 0)) {
        return false;
    }
    if (!(value.length === schema.maxItems)) {
        return false;
    }
    if (!schema.items) {
        return true;
    }
    for (let i = 0; i < schema.items.length; i++) {
        if (!Visit(schema.items[i], references, value[i]))
            return false;
    }
    return true;
}
function FromUndefined(schema, references, value) {
    return (0, index_10.IsUndefined)(value);
}
function FromUnion(schema, references, value) {
    return schema.anyOf.some((inner) => Visit(inner, references, value));
}
function FromUint8Array(schema, references, value) {
    if (!(0, index_10.IsUint8Array)(value)) {
        return false;
    }
    if (IsDefined(schema.maxByteLength) && !(value.length <= schema.maxByteLength)) {
        return false;
    }
    if (IsDefined(schema.minByteLength) && !(value.length >= schema.minByteLength)) {
        return false;
    }
    return true;
}
function FromUnknown(schema, references, value) {
    return true;
}
function FromVoid(schema, references, value) {
    return index_1.TypeSystemPolicy.IsVoidLike(value);
}
function FromKind(schema, references, value) {
    if (!index_7.TypeRegistry.Has(schema[index_4.Kind]))
        return false;
    const func = index_7.TypeRegistry.Get(schema[index_4.Kind]);
    return func(schema, value);
}
function Visit(schema, references, value) {
    const references_ = IsDefined(schema.$id) ? [...references, schema] : references;
    const schema_ = schema;
    switch (schema_[index_4.Kind]) {
        case 'Any':
            return FromAny(schema_, references_, value);
        case 'Array':
            return FromArray(schema_, references_, value);
        case 'AsyncIterator':
            return FromAsyncIterator(schema_, references_, value);
        case 'BigInt':
            return FromBigInt(schema_, references_, value);
        case 'Boolean':
            return FromBoolean(schema_, references_, value);
        case 'Constructor':
            return FromConstructor(schema_, references_, value);
        case 'Date':
            return FromDate(schema_, references_, value);
        case 'Function':
            return FromFunction(schema_, references_, value);
        case 'Integer':
            return FromInteger(schema_, references_, value);
        case 'Intersect':
            return FromIntersect(schema_, references_, value);
        case 'Iterator':
            return FromIterator(schema_, references_, value);
        case 'Literal':
            return FromLiteral(schema_, references_, value);
        case 'Never':
            return FromNever(schema_, references_, value);
        case 'Not':
            return FromNot(schema_, references_, value);
        case 'Null':
            return FromNull(schema_, references_, value);
        case 'Number':
            return FromNumber(schema_, references_, value);
        case 'Object':
            return FromObject(schema_, references_, value);
        case 'Promise':
            return FromPromise(schema_, references_, value);
        case 'Record':
            return FromRecord(schema_, references_, value);
        case 'Ref':
            return FromRef(schema_, references_, value);
        case 'RegExp':
            return FromRegExp(schema_, references_, value);
        case 'String':
            return FromString(schema_, references_, value);
        case 'Symbol':
            return FromSymbol(schema_, references_, value);
        case 'TemplateLiteral':
            return FromTemplateLiteral(schema_, references_, value);
        case 'This':
            return FromThis(schema_, references_, value);
        case 'Tuple':
            return FromTuple(schema_, references_, value);
        case 'Undefined':
            return FromUndefined(schema_, references_, value);
        case 'Union':
            return FromUnion(schema_, references_, value);
        case 'Uint8Array':
            return FromUint8Array(schema_, references_, value);
        case 'Unknown':
            return FromUnknown(schema_, references_, value);
        case 'Void':
            return FromVoid(schema_, references_, value);
        default:
            if (!index_7.TypeRegistry.Has(schema_[index_4.Kind]))
                throw new ValueCheckUnknownTypeError(schema_);
            return FromKind(schema_, references_, value);
    }
}
/** Returns true if the value matches the given type. */
function Check(...args) {
    return args.length === 3 ? Visit(args[0], args[1], args[2]) : Visit(args[0], [], args[1]);
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/value/check/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/check/check.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/value/deref/deref.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeDereferenceError = void 0;
exports.Pushref = Pushref;
exports.Deref = Deref;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/symbols/index.js");
const guard_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/guard/guard.js");
class TypeDereferenceError extends index_1.TypeBoxError {
    constructor(schema) {
        super(`Unable to dereference schema with $id '${schema.$ref}'`);
        this.schema = schema;
    }
}
exports.TypeDereferenceError = TypeDereferenceError;
function Resolve(schema, references) {
    const target = references.find((target) => target.$id === schema.$ref);
    if (target === undefined)
        throw new TypeDereferenceError(schema);
    return Deref(target, references);
}
/** `[Internal]` Pushes a schema onto references if the schema has an $id and does not exist on references */
function Pushref(schema, references) {
    if (!(0, guard_1.IsString)(schema.$id) || references.some((target) => target.$id === schema.$id))
        return references;
    references.push(schema);
    return references;
}
/** `[Internal]` Dereferences a schema from the references array or throws if not found */
function Deref(schema, references) {
    // prettier-ignore
    return (schema[index_2.Kind] === 'This' || schema[index_2.Kind] === 'Ref')
        ? Resolve(schema, references)
        : schema;
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/value/deref/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/deref/deref.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/value/guard/guard.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IsAsyncIterator = IsAsyncIterator;
exports.IsIterator = IsIterator;
exports.IsStandardObject = IsStandardObject;
exports.IsInstanceObject = IsInstanceObject;
exports.IsPromise = IsPromise;
exports.IsDate = IsDate;
exports.IsMap = IsMap;
exports.IsSet = IsSet;
exports.IsRegExp = IsRegExp;
exports.IsTypedArray = IsTypedArray;
exports.IsInt8Array = IsInt8Array;
exports.IsUint8Array = IsUint8Array;
exports.IsUint8ClampedArray = IsUint8ClampedArray;
exports.IsInt16Array = IsInt16Array;
exports.IsUint16Array = IsUint16Array;
exports.IsInt32Array = IsInt32Array;
exports.IsUint32Array = IsUint32Array;
exports.IsFloat32Array = IsFloat32Array;
exports.IsFloat64Array = IsFloat64Array;
exports.IsBigInt64Array = IsBigInt64Array;
exports.IsBigUint64Array = IsBigUint64Array;
exports.HasPropertyKey = HasPropertyKey;
exports.IsObject = IsObject;
exports.IsArray = IsArray;
exports.IsUndefined = IsUndefined;
exports.IsNull = IsNull;
exports.IsBoolean = IsBoolean;
exports.IsNumber = IsNumber;
exports.IsInteger = IsInteger;
exports.IsBigInt = IsBigInt;
exports.IsString = IsString;
exports.IsFunction = IsFunction;
exports.IsSymbol = IsSymbol;
exports.IsValueType = IsValueType;
// --------------------------------------------------------------------------
// Iterators
// --------------------------------------------------------------------------
/** Returns true if this value is an async iterator */
function IsAsyncIterator(value) {
    return IsObject(value) && Symbol.asyncIterator in value;
}
/** Returns true if this value is an iterator */
function IsIterator(value) {
    return IsObject(value) && Symbol.iterator in value;
}
// --------------------------------------------------------------------------
// Object Instances
// --------------------------------------------------------------------------
/** Returns true if this value is not an instance of a class */
function IsStandardObject(value) {
    return IsObject(value) && (Object.getPrototypeOf(value) === Object.prototype || Object.getPrototypeOf(value) === null);
}
/** Returns true if this value is an instance of a class */
function IsInstanceObject(value) {
    return IsObject(value) && !IsArray(value) && IsFunction(value.constructor) && value.constructor.name !== 'Object';
}
// --------------------------------------------------------------------------
// JavaScript
// --------------------------------------------------------------------------
/** Returns true if this value is a Promise */
function IsPromise(value) {
    return value instanceof Promise;
}
/** Returns true if this value is a Date */
function IsDate(value) {
    return value instanceof Date && Number.isFinite(value.getTime());
}
/** Returns true if this value is an instance of Map<K, T> */
function IsMap(value) {
    return value instanceof globalThis.Map;
}
/** Returns true if this value is an instance of Set<T> */
function IsSet(value) {
    return value instanceof globalThis.Set;
}
/** Returns true if this value is RegExp */
function IsRegExp(value) {
    return value instanceof globalThis.RegExp;
}
/** Returns true if this value is a typed array */
function IsTypedArray(value) {
    return ArrayBuffer.isView(value);
}
/** Returns true if the value is a Int8Array */
function IsInt8Array(value) {
    return value instanceof globalThis.Int8Array;
}
/** Returns true if the value is a Uint8Array */
function IsUint8Array(value) {
    return value instanceof globalThis.Uint8Array;
}
/** Returns true if the value is a Uint8ClampedArray */
function IsUint8ClampedArray(value) {
    return value instanceof globalThis.Uint8ClampedArray;
}
/** Returns true if the value is a Int16Array */
function IsInt16Array(value) {
    return value instanceof globalThis.Int16Array;
}
/** Returns true if the value is a Uint16Array */
function IsUint16Array(value) {
    return value instanceof globalThis.Uint16Array;
}
/** Returns true if the value is a Int32Array */
function IsInt32Array(value) {
    return value instanceof globalThis.Int32Array;
}
/** Returns true if the value is a Uint32Array */
function IsUint32Array(value) {
    return value instanceof globalThis.Uint32Array;
}
/** Returns true if the value is a Float32Array */
function IsFloat32Array(value) {
    return value instanceof globalThis.Float32Array;
}
/** Returns true if the value is a Float64Array */
function IsFloat64Array(value) {
    return value instanceof globalThis.Float64Array;
}
/** Returns true if the value is a BigInt64Array */
function IsBigInt64Array(value) {
    return value instanceof globalThis.BigInt64Array;
}
/** Returns true if the value is a BigUint64Array */
function IsBigUint64Array(value) {
    return value instanceof globalThis.BigUint64Array;
}
// --------------------------------------------------------------------------
// PropertyKey
// --------------------------------------------------------------------------
/** Returns true if this value has this property key */
function HasPropertyKey(value, key) {
    return key in value;
}
// --------------------------------------------------------------------------
// Standard
// --------------------------------------------------------------------------
/** Returns true of this value is an object type */
function IsObject(value) {
    return value !== null && typeof value === 'object';
}
/** Returns true if this value is an array, but not a typed array */
function IsArray(value) {
    return Array.isArray(value) && !ArrayBuffer.isView(value);
}
/** Returns true if this value is an undefined */
function IsUndefined(value) {
    return value === undefined;
}
/** Returns true if this value is an null */
function IsNull(value) {
    return value === null;
}
/** Returns true if this value is an boolean */
function IsBoolean(value) {
    return typeof value === 'boolean';
}
/** Returns true if this value is an number */
function IsNumber(value) {
    return typeof value === 'number';
}
/** Returns true if this value is an integer */
function IsInteger(value) {
    return Number.isInteger(value);
}
/** Returns true if this value is bigint */
function IsBigInt(value) {
    return typeof value === 'bigint';
}
/** Returns true if this value is string */
function IsString(value) {
    return typeof value === 'string';
}
/** Returns true if this value is a function */
function IsFunction(value) {
    return typeof value === 'function';
}
/** Returns true if this value is a symbol */
function IsSymbol(value) {
    return typeof value === 'symbol';
}
/** Returns true if this value is a value type such as number, string, boolean */
function IsValueType(value) {
    // prettier-ignore
    return (IsBigInt(value) ||
        IsBoolean(value) ||
        IsNull(value) ||
        IsNumber(value) ||
        IsString(value) ||
        IsSymbol(value) ||
        IsUndefined(value));
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/value/guard/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/guard/guard.js"), exports);


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/value/hash/hash.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValueHashError = void 0;
exports.Hash = Hash;
const index_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/guard/index.js");
const index_2 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/type/error/index.js");
// ------------------------------------------------------------------
// Errors
// ------------------------------------------------------------------
class ValueHashError extends index_2.TypeBoxError {
    constructor(value) {
        super(`Unable to hash value`);
        this.value = value;
    }
}
exports.ValueHashError = ValueHashError;
// ------------------------------------------------------------------
// ByteMarker
// ------------------------------------------------------------------
var ByteMarker;
(function (ByteMarker) {
    ByteMarker[ByteMarker["Undefined"] = 0] = "Undefined";
    ByteMarker[ByteMarker["Null"] = 1] = "Null";
    ByteMarker[ByteMarker["Boolean"] = 2] = "Boolean";
    ByteMarker[ByteMarker["Number"] = 3] = "Number";
    ByteMarker[ByteMarker["String"] = 4] = "String";
    ByteMarker[ByteMarker["Object"] = 5] = "Object";
    ByteMarker[ByteMarker["Array"] = 6] = "Array";
    ByteMarker[ByteMarker["Date"] = 7] = "Date";
    ByteMarker[ByteMarker["Uint8Array"] = 8] = "Uint8Array";
    ByteMarker[ByteMarker["Symbol"] = 9] = "Symbol";
    ByteMarker[ByteMarker["BigInt"] = 10] = "BigInt";
})(ByteMarker || (ByteMarker = {}));
// ------------------------------------------------------------------
// State
// ------------------------------------------------------------------
let Accumulator = BigInt('14695981039346656037');
const [Prime, Size] = [BigInt('1099511628211'), BigInt('18446744073709551616' /* 2 ^ 64 */)];
const Bytes = Array.from({ length: 256 }).map((_, i) => BigInt(i));
const F64 = new Float64Array(1);
const F64In = new DataView(F64.buffer);
const F64Out = new Uint8Array(F64.buffer);
// ------------------------------------------------------------------
// NumberToBytes
// ------------------------------------------------------------------
function* NumberToBytes(value) {
    const byteCount = value === 0 ? 1 : Math.ceil(Math.floor(Math.log2(value) + 1) / 8);
    for (let i = 0; i < byteCount; i++) {
        yield (value >> (8 * (byteCount - 1 - i))) & 0xff;
    }
}
// ------------------------------------------------------------------
// Hashing Functions
// ------------------------------------------------------------------
function ArrayType(value) {
    FNV1A64(ByteMarker.Array);
    for (const item of value) {
        Visit(item);
    }
}
function BooleanType(value) {
    FNV1A64(ByteMarker.Boolean);
    FNV1A64(value ? 1 : 0);
}
function BigIntType(value) {
    FNV1A64(ByteMarker.BigInt);
    F64In.setBigInt64(0, value);
    for (const byte of F64Out) {
        FNV1A64(byte);
    }
}
function DateType(value) {
    FNV1A64(ByteMarker.Date);
    Visit(value.getTime());
}
function NullType(value) {
    FNV1A64(ByteMarker.Null);
}
function NumberType(value) {
    FNV1A64(ByteMarker.Number);
    F64In.setFloat64(0, value);
    for (const byte of F64Out) {
        FNV1A64(byte);
    }
}
function ObjectType(value) {
    FNV1A64(ByteMarker.Object);
    for (const key of globalThis.Object.getOwnPropertyNames(value).sort()) {
        Visit(key);
        Visit(value[key]);
    }
}
function StringType(value) {
    FNV1A64(ByteMarker.String);
    for (let i = 0; i < value.length; i++) {
        for (const byte of NumberToBytes(value.charCodeAt(i))) {
            FNV1A64(byte);
        }
    }
}
function SymbolType(value) {
    FNV1A64(ByteMarker.Symbol);
    Visit(value.description);
}
function Uint8ArrayType(value) {
    FNV1A64(ByteMarker.Uint8Array);
    for (let i = 0; i < value.length; i++) {
        FNV1A64(value[i]);
    }
}
function UndefinedType(value) {
    return FNV1A64(ByteMarker.Undefined);
}
function Visit(value) {
    if ((0, index_1.IsArray)(value))
        return ArrayType(value);
    if ((0, index_1.IsBoolean)(value))
        return BooleanType(value);
    if ((0, index_1.IsBigInt)(value))
        return BigIntType(value);
    if ((0, index_1.IsDate)(value))
        return DateType(value);
    if ((0, index_1.IsNull)(value))
        return NullType(value);
    if ((0, index_1.IsNumber)(value))
        return NumberType(value);
    if ((0, index_1.IsObject)(value))
        return ObjectType(value);
    if ((0, index_1.IsString)(value))
        return StringType(value);
    if ((0, index_1.IsSymbol)(value))
        return SymbolType(value);
    if ((0, index_1.IsUint8Array)(value))
        return Uint8ArrayType(value);
    if ((0, index_1.IsUndefined)(value))
        return UndefinedType(value);
    throw new ValueHashError(value);
}
function FNV1A64(byte) {
    Accumulator = Accumulator ^ Bytes[byte];
    Accumulator = (Accumulator * Prime) % Size;
}
// ------------------------------------------------------------------
// Hash
// ------------------------------------------------------------------
/** Creates a FNV1A-64 non cryptographic hash of the given value */
function Hash(value) {
    Accumulator = BigInt('14695981039346656037');
    Visit(value);
    return Accumulator;
}


/***/ }),

/***/ "./node_modules/@sinclair/typebox/build/cjs/value/hash/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__("./node_modules/@sinclair/typebox/build/cjs/value/hash/hash.js"), exports);


/***/ }),

/***/ "./node_modules/@trezor/connect/lib/constants/cardano.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NETWORK_IDS = exports.PROTOCOL_MAGICS = void 0;
var PROTOCOL_MAGICS;
(function (PROTOCOL_MAGICS) {
    PROTOCOL_MAGICS[PROTOCOL_MAGICS["mainnet"] = 764824073] = "mainnet";
    PROTOCOL_MAGICS[PROTOCOL_MAGICS["testnet_preprod"] = 1] = "testnet_preprod";
    PROTOCOL_MAGICS[PROTOCOL_MAGICS["testnet_preview"] = 2] = "testnet_preview";
    PROTOCOL_MAGICS[PROTOCOL_MAGICS["testnet_legacy"] = 1097911063] = "testnet_legacy";
})(PROTOCOL_MAGICS || (exports.PROTOCOL_MAGICS = PROTOCOL_MAGICS = {}));
var NETWORK_IDS;
(function (NETWORK_IDS) {
    NETWORK_IDS[NETWORK_IDS["mainnet"] = 1] = "mainnet";
    NETWORK_IDS[NETWORK_IDS["testnet"] = 0] = "testnet";
})(NETWORK_IDS || (exports.NETWORK_IDS = NETWORK_IDS = {}));
//# sourceMappingURL=cardano.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/constants/errors.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LIBUSB_ERROR_MESSAGE = exports.serializeError = exports.TypedError = exports.TrezorError = exports.ERROR_CODES = void 0;
exports.ERROR_CODES = {
    Init_NotInitialized: 'TrezorConnect not initialized',
    Init_AlreadyInitialized: 'TrezorConnect has been already initialized',
    Init_IframeBlocked: 'Iframe blocked',
    Init_IframeTimeout: 'Iframe timeout',
    Init_ManifestMissing: 'Manifest not set. Read more at https://github.com/trezor/trezor-suite/blob/develop/docs/packages/connect/index.md',
    Popup_ConnectionMissing: 'Unable to establish connection with iframe',
    Desktop_ConnectionMissing: 'Unable to establish connection with Suite',
    Transport_Missing: 'Transport is missing',
    Method_InvalidPackage: 'This package is not suitable to work with browser. Use @trezor/connect-web package instead',
    Method_InvalidParameter: '',
    Method_NotAllowed: 'Method not allowed for this configuration',
    Method_PermissionsNotGranted: 'Permissions not granted',
    Method_Cancel: 'Cancelled',
    Method_Interrupted: 'Popup closed',
    Method_UnknownCoin: 'Coin not found',
    Method_AddressNotMatch: 'Addresses do not match',
    Method_Discovery_BundleException: '',
    Method_Override: 'override',
    Method_NoResponse: 'Call resolved without response',
    Backend_NotSupported: 'BlockchainLink settings not found in coins.json',
    Backend_WorkerMissing: '',
    Backend_Disconnected: 'Backend disconnected',
    Backend_Invalid: 'Invalid backend',
    Backend_Error: '',
    Runtime: '',
    Device_NotFound: 'Device not found',
    Device_InitializeFailed: '',
    Device_FwException: '',
    Device_ModeException: '',
    Device_Disconnected: 'Device disconnected',
    Device_UsedElsewhere: 'Device is used in another window',
    Device_InvalidState: 'Passphrase is incorrect',
    Device_CallInProgress: 'Device call in progress',
    Device_MultipleNotSupported: 'Multiple devices are not supported',
    Device_MissingCapability: 'Device is missing capability',
    Device_MissingCapabilityBtcOnly: 'Device is missing capability (BTC only)',
    Device_ThpPairingTagInvalid: 'Pairing tag mismatch',
    Device_ThpStateMissing: 'ThpState missing',
    Failure_ActionCancelled: 'Action cancelled by user',
    Failure_FirmwareError: 'Firmware installation failed',
    Failure_UnknownCode: 'Unknown error',
    Failure_PinCancelled: 'PIN cancelled',
    Failure_PinInvalid: 'PIN invalid',
    Failure_PinMismatch: 'PIN mismatch',
    Failure_WipeCodeMismatch: 'Wipe code mismatch',
    Failure_EntropyCheck: '',
    Deeplink_VersionMismatch: 'Not compatible with current version of the app',
};
class TrezorError extends Error {
    code;
    message;
    constructor(code, message) {
        super(message);
        this.code = code;
        this.message = message;
    }
    toString() {
        return `${this.name} (code: ${this.code}): ${this.message}`;
    }
}
exports.TrezorError = TrezorError;
const TypedError = (id, message) => new TrezorError(id, message || exports.ERROR_CODES[id]);
exports.TypedError = TypedError;
const serializeError = (payload) => {
    if (payload && payload.error instanceof Error) {
        return { error: payload.error.message, code: payload.error.code };
    }
    if (payload instanceof TrezorError) {
        return { error: payload.message, code: payload.code };
    }
    if (payload instanceof Error) {
        return {
            error: payload.message,
            code: 'code' in payload ? payload.code : 'Failure_UnknownCode',
        };
    }
    return { ...payload };
};
exports.serializeError = serializeError;
exports.LIBUSB_ERROR_MESSAGE = 'LIBUSB_ERROR';
//# sourceMappingURL=errors.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/constants/firmware.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.REVISION_CHECK_RETRIABLE_ERRORS = exports.HASH_CHECK_RETRIABLE_ERRORS = exports.HASH_CHECK_MAX_ATTEMPTS = void 0;
exports.HASH_CHECK_MAX_ATTEMPTS = 3;
exports.HASH_CHECK_RETRIABLE_ERRORS = ['other-error'];
exports.REVISION_CHECK_RETRIABLE_ERRORS = [
    'cannot-perform-check-offline',
    'other-error',
];
//# sourceMappingURL=firmware.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/constants/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PROTO = exports.DEFAULT_SORTING_STRATEGY = exports.FIRMWARE = exports.NEM = exports.CARDANO = exports.NETWORK = exports.ERRORS = void 0;
const tslib_1 = __webpack_require__("./node_modules/tslib/tslib.es6.mjs");
exports.ERRORS = tslib_1.__importStar(__webpack_require__("./node_modules/@trezor/connect/lib/constants/errors.js"));
exports.NETWORK = tslib_1.__importStar(__webpack_require__("./node_modules/@trezor/connect/lib/constants/network.js"));
exports.CARDANO = tslib_1.__importStar(__webpack_require__("./node_modules/@trezor/connect/lib/constants/cardano.js"));
exports.NEM = tslib_1.__importStar(__webpack_require__("./node_modules/@trezor/connect/lib/constants/nem.js"));
exports.FIRMWARE = tslib_1.__importStar(__webpack_require__("./node_modules/@trezor/connect/lib/constants/firmware.js"));
var utxo_1 = __webpack_require__("./node_modules/@trezor/connect/lib/constants/utxo.js");
Object.defineProperty(exports, "DEFAULT_SORTING_STRATEGY", ({ enumerable: true, get: function () { return utxo_1.DEFAULT_SORTING_STRATEGY; } }));
var protobuf_1 = __webpack_require__("./node_modules/@trezor/protobuf/lib/index.js");
Object.defineProperty(exports, "PROTO", ({ enumerable: true, get: function () { return protobuf_1.MessagesSchema; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/constants/nem.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnumTxVersion = exports.TxVersion = exports.EnumTxType = exports.TxType = exports.EnumNetworks = exports.Networks = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
var Networks;
(function (Networks) {
    Networks[Networks["mainnet"] = 104] = "mainnet";
    Networks[Networks["testnet"] = 152] = "testnet";
    Networks[Networks["mijin"] = 96] = "mijin";
})(Networks || (exports.Networks = Networks = {}));
exports.EnumNetworks = schema_utils_1.Type.Enum(Networks);
var TxType;
(function (TxType) {
    TxType[TxType["TRANSFER"] = 257] = "TRANSFER";
    TxType[TxType["COSIGNING"] = 258] = "COSIGNING";
    TxType[TxType["IMPORTANCE_TRANSFER"] = 2049] = "IMPORTANCE_TRANSFER";
    TxType[TxType["AGGREGATE_MODIFICATION"] = 4097] = "AGGREGATE_MODIFICATION";
    TxType[TxType["MULTISIG_SIGNATURE"] = 4098] = "MULTISIG_SIGNATURE";
    TxType[TxType["MULTISIG"] = 4100] = "MULTISIG";
    TxType[TxType["PROVISION_NAMESPACE"] = 8193] = "PROVISION_NAMESPACE";
    TxType[TxType["MOSAIC_CREATION"] = 16385] = "MOSAIC_CREATION";
    TxType[TxType["SUPPLY_CHANGE"] = 16386] = "SUPPLY_CHANGE";
})(TxType || (exports.TxType = TxType = {}));
exports.EnumTxType = schema_utils_1.Type.Enum(TxType);
var TxVersion;
(function (TxVersion) {
    TxVersion[TxVersion["mainnet"] = 1744830464] = "mainnet";
    TxVersion[TxVersion["testnet"] = -1744830464] = "testnet";
    TxVersion[TxVersion["mijin"] = 1610612736] = "mijin";
})(TxVersion || (exports.TxVersion = TxVersion = {}));
exports.EnumTxVersion = schema_utils_1.Type.Enum(TxVersion);
//# sourceMappingURL=nem.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/constants/network.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MODULES = exports.TYPES = void 0;
exports.TYPES = {
    bitcoin: 'Bitcoin',
    ethereum: 'Ethereum',
    eos: 'Eos',
    nem: 'NEM',
    stellar: 'Stellar',
    cardano: 'Cardano',
    ripple: 'Ripple',
    tezos: 'Tezos',
    binance: 'Binance',
    solana: 'Solana',
};
exports.MODULES = [
    'cardano',
    'eos',
    'ethereum',
    'nem',
    'ripple',
    'solana',
    'stellar',
    'tezos',
];
//# sourceMappingURL=network.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/constants/utxo.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_SORTING_STRATEGY = void 0;
exports.DEFAULT_SORTING_STRATEGY = 'random';
//# sourceMappingURL=utxo.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/data/connectSettings.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseConnectSettings = exports.corsValidator = exports.parseLocalFirmwares = exports.DEFAULT_PRIORITY = void 0;
const thpSettings_1 = __webpack_require__("./node_modules/@trezor/connect/lib/data/thpSettings.js");
const version_1 = __webpack_require__("./node_modules/@trezor/connect/lib/data/version.js");
exports.DEFAULT_PRIORITY = 2;
const initialSettings = {
    configSrc: './data/config.json',
    version: version_1.VERSION,
    debug: false,
    priority: exports.DEFAULT_PRIORITY,
    trustedHost: true,
    connectSrc: version_1.DEFAULT_DOMAIN,
    iframeSrc: `${version_1.DEFAULT_DOMAIN}iframe.html`,
    popup: false,
    popupSrc: `${version_1.DEFAULT_DOMAIN}popup.html`,
    webusbSrc: `${version_1.DEFAULT_DOMAIN}webusb.html`,
    transports: undefined,
    pendingTransportEvent: true,
    env: 'node',
    lazyLoad: false,
    timestamp: new Date().getTime(),
    interactionTimeout: 1200,
    sharedLogger: true,
    deeplinkUrl: `${version_1.DEFAULT_DOMAIN}deeplink/${version_1.DEEPLINK_VERSION}/`,
    transportReconnect: true,
};
const parseManifest = (manifest) => {
    if (!manifest)
        return;
    if (typeof manifest.email !== 'string')
        return;
    if (typeof manifest.appUrl !== 'string')
        return;
    if (typeof manifest.appName !== 'undefined' && typeof manifest.appName !== 'string')
        return;
    if (typeof manifest.appIcon !== 'undefined' && typeof manifest.appIcon !== 'string')
        return;
    return {
        email: manifest.email,
        appUrl: manifest.appUrl,
        appName: manifest.appName,
        appIcon: manifest.appIcon,
    };
};
const parseLocalFirmwares = (localFirmwares) => {
    if (!localFirmwares)
        return;
    if (typeof localFirmwares.firmwareDir !== 'string')
        return;
    if (!Array.isArray(localFirmwares.firmwareList))
        return;
    return {
        firmwareDir: localFirmwares.firmwareDir,
        firmwareList: localFirmwares.firmwareList,
    };
};
exports.parseLocalFirmwares = parseLocalFirmwares;
const corsValidator = (url) => {
    if (typeof url !== 'string')
        return;
    if (url === '../')
        return url;
    if (url.match(/^https:\/\/([A-Za-z0-9\-_]+\.)*trezor\.io\//))
        return url;
    if (url.match(/^https?:\/\/localhost:[58][0-9]{3}\//))
        return url;
    if (url.match(/^https:\/\/([A-Za-z0-9\-_]+\.)*sldev\.cz\//))
        return url;
    if (url.match(/^https?:\/\/([A-Za-z0-9\-_]+\.)*trezoriovpjcahpzkrewelclulmszwbqpzmzgub37gbcjlvluxtruqad\.onion\//))
        return url;
};
exports.corsValidator = corsValidator;
const parseConnectSettings = (input = {}) => {
    const settings = { ...initialSettings };
    if ('debug' in input) {
        if (typeof input.debug === 'boolean') {
            settings.debug = input.debug;
        }
        else if (typeof input.debug === 'string') {
            settings.debug = input.debug === 'true';
        }
    }
    if (input.trustedHost === false) {
        settings.trustedHost = input.trustedHost;
    }
    if (typeof input.connectSrc === 'string') {
        settings.connectSrc = (0, exports.corsValidator)(input.connectSrc);
    }
    else if (settings.trustedHost) {
        settings.connectSrc = input.connectSrc;
    }
    const src = settings.connectSrc || version_1.DEFAULT_DOMAIN;
    settings.iframeSrc = `${src}iframe.html`;
    settings.popupSrc = `${src}popup.html`;
    settings.webusbSrc = `${src}webusb.html`;
    if (typeof input.transportReconnect === 'boolean') {
        settings.transportReconnect = input.transportReconnect;
    }
    if (typeof input.localFirmwares === 'object') {
        settings.localFirmwares = (0, exports.parseLocalFirmwares)(input.localFirmwares);
    }
    if (Array.isArray(input.transports)) {
        settings.transports = input.transports;
    }
    if (typeof input.popup === 'boolean') {
        settings.popup = input.popup;
    }
    if (typeof input.lazyLoad === 'boolean') {
        settings.lazyLoad = input.lazyLoad;
    }
    if (typeof input.pendingTransportEvent === 'boolean') {
        settings.pendingTransportEvent = input.pendingTransportEvent;
    }
    if (typeof input.extension === 'string') {
        settings.extension = input.extension;
    }
    if (typeof input.env === 'string') {
        settings.env = input.env;
    }
    if (typeof input.timestamp === 'number') {
        settings.timestamp = input.timestamp;
    }
    if (typeof input.interactionTimeout === 'number') {
        settings.interactionTimeout = input.interactionTimeout;
    }
    if (typeof input.manifest === 'object') {
        settings.manifest = parseManifest(input.manifest);
    }
    if (typeof input.sharedLogger === 'boolean') {
        settings.sharedLogger = input.sharedLogger;
    }
    if (typeof input.coreMode === 'string' &&
        ['auto', 'popup', 'iframe', 'suite-desktop'].includes(input.coreMode)) {
        settings.coreMode = input.coreMode;
    }
    if (typeof input._extendWebextensionLifetime === 'boolean') {
        settings._extendWebextensionLifetime = input._extendWebextensionLifetime;
    }
    if (typeof input.binFilesBaseUrl === 'string') {
        settings.binFilesBaseUrl = input.binFilesBaseUrl;
    }
    if (typeof input.enableFirmwareHashCheck === 'boolean') {
        settings.enableFirmwareHashCheck = Boolean(input.enableFirmwareHashCheck);
    }
    if (typeof input.npmVersion === 'string') {
        settings.npmVersion = input.npmVersion;
    }
    settings.thp = (0, thpSettings_1.parseThpSettings)(input);
    return settings;
};
exports.parseConnectSettings = parseConnectSettings;
//# sourceMappingURL=connectSettings.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/data/thpSettings.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseThpSettings = void 0;
const parseThpSettings = ({ manifest, thp }) => {
    const settings = {
        pairingMethods: [],
    };
    if (Array.isArray(thp?.pairingMethods)) {
        settings.pairingMethods = thp.pairingMethods;
    }
    else {
        settings.pairingMethods = ['CodeEntry'];
    }
    if (typeof thp?.hostName === 'string') {
        settings.hostName = thp.hostName;
    }
    else if (typeof manifest?.appName === 'string') {
        settings.hostName = manifest?.appName;
    }
    if (typeof thp?.staticKey === 'string') {
        settings.staticKey = thp.staticKey;
    }
    if (Array.isArray(thp?.knownCredentials)) {
        settings.knownCredentials = thp.knownCredentials.flatMap(k => {
            if (k &&
                typeof k === 'object' &&
                typeof k.credential === 'string' &&
                typeof k.trezor_static_pubkey === 'string') {
                return k;
            }
            return [];
        });
    }
    return settings;
};
exports.parseThpSettings = parseThpSettings;
//# sourceMappingURL=thpSettings.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/data/transportInfo.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.suggestBridgeInstaller = void 0;
const info = {
    version: [2, 0, 27],
    packages: [
        {
            name: 'Linux 64-bit (deb)',
            platform: ['deb64'],
            url: 'bridge/2.0.27/trezor-bridge_2.0.27_amd64.deb',
        },
        {
            name: 'Linux 64-bit (rpm)',
            platform: ['rpm64'],
            url: 'bridge/2.0.27/trezor-bridge-2.0.27-1.x86_64.rpm',
        },
        {
            name: 'Linux 32-bit (deb)',
            platform: ['deb32'],
            url: 'bridge/2.0.27/trezor-bridge_2.0.27_i386.deb',
        },
        {
            name: 'Linux 32-bit (rpm)',
            platform: ['rpm32'],
            url: 'bridge/2.0.27/trezor-bridge-2.0.27-1.i386.rpm',
        },
        {
            name: 'macOS',
            platform: ['mac'],
            signature: 'bridge/2.0.27/trezor-bridge-2.0.27.pkg.asc',
            url: 'bridge/2.0.27/trezor-bridge-2.0.27.pkg',
        },
        {
            name: 'Windows',
            platform: ['win32', 'win64'],
            signature: 'bridge/2.0.27/trezor-bridge-2.0.27-win32-install.exe.asc',
            url: 'bridge/2.0.27/trezor-bridge-2.0.27-win32-install.exe',
        },
    ],
    changelog: '',
};
const getBridgeInfo = () => info;
const suggestBridgeInstaller = (platform) => {
    const info2 = getBridgeInfo();
    if (platform) {
        info2.packages = info2.packages.map(p => ({
            ...p,
            preferred: p.platform.indexOf(platform) >= 0,
        }));
    }
    return info2;
};
exports.suggestBridgeInstaller = suggestBridgeInstaller;
//# sourceMappingURL=transportInfo.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/data/udevInfo.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.suggestUdevInstaller = void 0;
const info = {
    packages: [
        {
            name: 'RPM package',
            platform: ['rpm32', 'rpm64'],
            url: '/udev/trezor-udev-2-1.noarch.rpm',
        },
        {
            name: 'DEB package',
            platform: ['deb32', 'deb64'],
            url: '/udev/trezor-udev_2_all.deb',
            preferred: true,
        },
    ],
};
const suggestUdevInstaller = (platform) => {
    if (platform !== undefined) {
        return {
            packages: info.packages.map(it => ({
                ...it,
                preferred: it.platform.indexOf(platform) >= 0,
            })),
        };
    }
    return info;
};
exports.suggestUdevInstaller = suggestUdevInstaller;
//# sourceMappingURL=udevInfo.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/data/version.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEEPLINK_VERSION = exports.CONTENT_SCRIPT_VERSION = exports.DEFAULT_DOMAIN = exports.VERSION = void 0;
exports.VERSION = '9.6.2';
const versionN = exports.VERSION.split('.').map(s => parseInt(s, 10));
const isBeta = exports.VERSION.includes('beta');
exports.DEFAULT_DOMAIN = isBeta
    ? `https://connect.trezor.io/${exports.VERSION}/`
    : `https://connect.trezor.io/${versionN[0]}/`;
exports.CONTENT_SCRIPT_VERSION = 1;
exports.DEEPLINK_VERSION = 1;
//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/events/blockchain.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createBlockchainMessage = exports.BLOCKCHAIN = exports.BLOCKCHAIN_EVENT = void 0;
exports.BLOCKCHAIN_EVENT = 'BLOCKCHAIN_EVENT';
exports.BLOCKCHAIN = {
    CONNECT: 'blockchain-connect',
    RECONNECTING: 'blockchain-reconnecting',
    ERROR: 'blockchain-error',
    BLOCK: 'blockchain-block',
    NOTIFICATION: 'blockchain-notification',
    FIAT_RATES_UPDATE: 'fiat-rates-update',
};
const createBlockchainMessage = (type, payload) => ({
    event: exports.BLOCKCHAIN_EVENT,
    type,
    payload,
});
exports.createBlockchainMessage = createBlockchainMessage;
//# sourceMappingURL=blockchain.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/events/call.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createResponseMessage = exports.RESPONSE_EVENT = void 0;
const errors_1 = __webpack_require__("./node_modules/@trezor/connect/lib/constants/errors.js");
exports.RESPONSE_EVENT = 'RESPONSE_EVENT';
const createResponseMessage = (id, success, payload, device) => ({
    event: exports.RESPONSE_EVENT,
    type: exports.RESPONSE_EVENT,
    id,
    success,
    payload: success ? payload : (0, errors_1.serializeError)(payload),
    device: device
        ? {
            path: device?.getUniquePath(),
            state: device?.getState(),
            instance: device?.getInstance(),
        }
        : undefined,
});
exports.createResponseMessage = createResponseMessage;
//# sourceMappingURL=call.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/events/core.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createErrorMessage = exports.parseMessage = exports.CORE_EVENT = void 0;
exports.CORE_EVENT = 'CORE_EVENT';
const parseMessage = (messageData) => {
    const message = {
        event: messageData.event,
        type: messageData.type,
        payload: messageData.payload,
        device: messageData.device,
    };
    if (typeof messageData.id === 'number') {
        message.id = messageData.id;
    }
    if (typeof messageData.success === 'boolean') {
        message.success = messageData.success;
    }
    return message;
};
exports.parseMessage = parseMessage;
const createErrorMessage = (error) => ({
    success: false,
    payload: {
        error: error.message,
        code: error.code,
    },
});
exports.createErrorMessage = createErrorMessage;
//# sourceMappingURL=core.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/events/device.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDeviceMessage = exports.DEVICE = exports.DEVICE_EVENT = void 0;
exports.DEVICE_EVENT = 'DEVICE_EVENT';
exports.DEVICE = {
    CONNECT: 'device-connect',
    CONNECT_UNACQUIRED: 'device-connect_unacquired',
    DISCONNECT: 'device-disconnect',
    CHANGED: 'device-changed',
    FIRMWARE_VERSION_CHANGED: 'device-firmware_version_changed',
    THP_CREDENTIALS_CHANGED: 'device-thp_credentials_changed',
    BUTTON: 'button',
    PIN: 'pin',
    PASSPHRASE: 'passphrase',
    PASSPHRASE_ON_DEVICE: 'passphrase_on_device',
    WORD: 'word',
    THP_PAIRING: 'thp_pairing',
};
const createDeviceMessage = (type, payload) => ({
    event: exports.DEVICE_EVENT,
    type,
    payload,
});
exports.createDeviceMessage = createDeviceMessage;
//# sourceMappingURL=device.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/events/iframe.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createIFrameMessage = exports.IFRAME = void 0;
const ui_request_1 = __webpack_require__("./node_modules/@trezor/connect/lib/events/ui-request.js");
exports.IFRAME = {
    BOOTSTRAP: 'iframe-bootstrap',
    LOADED: 'iframe-loaded',
    INIT: 'iframe-init',
    ERROR: 'iframe-error',
    CALL: 'iframe-call',
    LOG: 'iframe-log',
};
const createIFrameMessage = (type, payload) => ({
    event: ui_request_1.UI_EVENT,
    type,
    payload,
});
exports.createIFrameMessage = createIFrameMessage;
//# sourceMappingURL=iframe.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/events/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UI = void 0;
const tslib_1 = __webpack_require__("./node_modules/tslib/tslib.es6.mjs");
const ui_request_1 = __webpack_require__("./node_modules/@trezor/connect/lib/events/ui-request.js");
const ui_response_1 = __webpack_require__("./node_modules/@trezor/connect/lib/events/ui-response.js");
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/events/blockchain.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/events/call.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/events/core.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/events/device.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/events/iframe.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/events/popup.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/events/transport.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/events/ui-promise.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/events/ui-request.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/events/ui-response.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/events/webextension.js"), exports);
exports.UI = {
    ...ui_request_1.UI_REQUEST,
    ...ui_response_1.UI_RESPONSE,
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/events/popup.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createPopupMessage = exports.POPUP = void 0;
const ui_request_1 = __webpack_require__("./node_modules/@trezor/connect/lib/events/ui-request.js");
exports.POPUP = {
    BOOTSTRAP: 'popup-bootstrap',
    LOADED: 'popup-loaded',
    CORE_LOADED: 'popup-core-loaded',
    INIT: 'popup-init',
    ERROR: 'popup-error',
    EXTENSION_USB_PERMISSIONS: 'open-usb-permissions',
    HANDSHAKE: 'popup-handshake',
    CLOSED: 'popup-closed',
    CANCEL_POPUP_REQUEST: 'ui-cancel-popup-request',
    CLOSE_WINDOW: 'window.close',
    ANALYTICS_RESPONSE: 'popup-analytics-response',
    CONTENT_SCRIPT_LOADED: 'popup-content-script-loaded',
    METHOD_INFO: 'popup-method-info',
};
const createPopupMessage = (type, payload) => ({
    event: ui_request_1.UI_EVENT,
    type,
    payload,
});
exports.createPopupMessage = createPopupMessage;
//# sourceMappingURL=popup.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/events/transport.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createTransportMessage = exports.TRANSPORT_EVENT = exports.TRANSPORT = void 0;
const errors_1 = __webpack_require__("./node_modules/@trezor/connect/lib/constants/errors.js");
const transportInfo_1 = __webpack_require__("./node_modules/@trezor/connect/lib/data/transportInfo.js");
const udevInfo_1 = __webpack_require__("./node_modules/@trezor/connect/lib/data/udevInfo.js");
var constants_1 = __webpack_require__("./node_modules/@trezor/transport/lib/constants.js");
Object.defineProperty(exports, "TRANSPORT", ({ enumerable: true, get: function () { return constants_1.TRANSPORT; } }));
exports.TRANSPORT_EVENT = 'TRANSPORT_EVENT';
const createTransportMessage = (type, payload) => ({
    event: exports.TRANSPORT_EVENT,
    type,
    payload: 'error' in payload
        ? (0, errors_1.serializeError)(payload)
        :
            {
                ...payload,
                udev: (0, udevInfo_1.suggestUdevInstaller)(),
                bridge: (0, transportInfo_1.suggestBridgeInstaller)(),
            },
});
exports.createTransportMessage = createTransportMessage;
//# sourceMappingURL=transport.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/events/ui-promise.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ui-promise.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/events/ui-request.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createUiMessage = exports.UI_REQUEST = exports.UI_EVENT = void 0;
exports.UI_EVENT = 'UI_EVENT';
exports.UI_REQUEST = {
    TRANSPORT: 'ui-no_transport',
    BOOTLOADER: 'ui-device_bootloader_mode',
    NOT_IN_BOOTLOADER: 'ui-device_not_in_bootloader_mode',
    REQUIRE_MODE: 'ui-device_require_mode',
    INITIALIZE: 'ui-device_not_initialized',
    SEEDLESS: 'ui-device_seedless',
    FIRMWARE_OLD: 'ui-device_firmware_old',
    FIRMWARE_OUTDATED: 'ui-device_firmware_outdated',
    FIRMWARE_NOT_SUPPORTED: 'ui-device_firmware_unsupported',
    FIRMWARE_NOT_COMPATIBLE: 'ui-device_firmware_not_compatible',
    FIRMWARE_NOT_INSTALLED: 'ui-device_firmware_not_installed',
    FIRMWARE_PROGRESS: 'ui-firmware-progress',
    FIRMWARE_PROGRESS_UNEXPECTED_DELAY: 'ui-firmware-progress-unexpected-delay',
    FIRMWARE_RECONNECT: 'ui-firmware_reconnect',
    FIRMWARE_DISCONNECT: 'ui-firmware_disconnect',
    FIRMWARE_DOWNLOADED: 'ui-firmware_downloaded',
    DEVICE_NEEDS_BACKUP: 'ui-device_needs_backup',
    REQUEST_UI_WINDOW: 'ui-request_window',
    CLOSE_UI_WINDOW: 'ui-close_window',
    REQUEST_PERMISSION: 'ui-request_permission',
    REQUEST_CONFIRMATION: 'ui-request_confirmation',
    REQUEST_PIN: 'ui-request_pin',
    INVALID_PIN: 'ui-invalid_pin',
    INVALID_PIN_ATTEMPTS_DEPLETED: 'ui-invalid_pin_attempts_depleted',
    REQUEST_PASSPHRASE: 'ui-request_passphrase',
    REQUEST_PASSPHRASE_ON_DEVICE: 'ui-request_passphrase_on_device',
    INVALID_PASSPHRASE: 'ui-invalid_passphrase',
    REQUEST_THP_PAIRING: 'ui-request_thp_pairing',
    CONNECT: 'ui-connect',
    LOADING: 'ui-loading',
    SET_OPERATION: 'ui-set_operation',
    SELECT_DEVICE: 'ui-select_device',
    SELECT_ACCOUNT: 'ui-select_account',
    SELECT_FEE: 'ui-select_fee',
    UPDATE_CUSTOM_FEE: 'ui-update_custom_fee',
    INSUFFICIENT_FUNDS: 'ui-insufficient_funds',
    REQUEST_BUTTON: 'ui-button',
    REQUEST_WORD: 'ui-request_word',
    LOGIN_CHALLENGE_REQUEST: 'ui-login_challenge_request',
    BUNDLE_PROGRESS: 'ui-bundle_progress',
    ADDRESS_VALIDATION: 'ui-address_validation',
    IFRAME_FAILURE: 'ui-iframe_failure',
};
const createUiMessage = (type, payload) => ({
    event: exports.UI_EVENT,
    type,
    payload,
});
exports.createUiMessage = createUiMessage;
//# sourceMappingURL=ui-request.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/events/ui-response.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createUiResponse = exports.UI_RESPONSE = void 0;
const ui_request_1 = __webpack_require__("./node_modules/@trezor/connect/lib/events/ui-request.js");
exports.UI_RESPONSE = {
    RECEIVE_PERMISSION: 'ui-receive_permission',
    RECEIVE_CONFIRMATION: 'ui-receive_confirmation',
    RECEIVE_FIRMWARE: 'ui-receive_firmware',
    RECEIVE_PIN: 'ui-receive_pin',
    RECEIVE_PASSPHRASE: 'ui-receive_passphrase',
    RECEIVE_THP_PAIRING_TAG: 'ui-receive_thp_pairing_tag',
    RECEIVE_DEVICE: 'ui-receive_device',
    RECEIVE_ACCOUNT: 'ui-receive_account',
    RECEIVE_FEE: 'ui-receive_fee',
    RECEIVE_WORD: 'ui-receive_word',
    INVALID_PASSPHRASE_ACTION: 'ui-invalid_passphrase_action',
    CHANGE_SETTINGS: 'ui-change_settings',
    LOGIN_CHALLENGE_RESPONSE: 'ui-login_challenge_response',
};
const createUiResponse = (type, payload) => ({
    event: ui_request_1.UI_EVENT,
    type,
    payload,
});
exports.createUiResponse = createUiResponse;
//# sourceMappingURL=ui-response.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/events/webextension.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WEBEXTENSION = void 0;
exports.WEBEXTENSION = {
    USB_PERMISSIONS_BROADCAST: 'usb-permissions',
    USB_PERMISSIONS_INIT: 'usb-permissions-init',
    USB_PERMISSIONS_CLOSE: 'usb-permissions-close',
    USB_PERMISSIONS_FINISHED: 'usb-permissions-finished',
    CHANNEL_HANDSHAKE_CONFIRM: 'channel-handshake-confirm',
};
//# sourceMappingURL=webextension.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/exports.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseConnectSettings = void 0;
const tslib_1 = __webpack_require__("./node_modules/tslib/tslib.es6.mjs");
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/constants/index.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/events/index.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/index.js"), exports);
var connectSettings_1 = __webpack_require__("./node_modules/@trezor/connect/lib/data/connectSettings.js");
Object.defineProperty(exports, "parseConnectSettings", ({ enumerable: true, get: function () { return connectSettings_1.parseConnectSettings; } }));
//# sourceMappingURL=exports.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/factory.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.factory = void 0;
const events_1 = __webpack_require__("./node_modules/@trezor/connect/lib/events/index.js");
const factory = ({ eventEmitter, manifest, init, call, setTransports, requestLogin, uiResponse, cancel, dispose, }, extraMethods = {}) => ({
    manifest,
    init,
    setTransports,
    on: (type, fn) => {
        eventEmitter.on(type, fn);
    },
    off: (type, fn) => {
        eventEmitter.removeListener(type, fn);
    },
    removeAllListeners: type => {
        if (typeof type === 'string') {
            eventEmitter.removeAllListeners(type);
        }
        else {
            eventEmitter.removeAllListeners();
        }
    },
    uiResponse,
    bleUnpair: params => call({ ...params, method: 'bleUnpair' }),
    blockchainGetAccountBalanceHistory: params => call({ ...params, method: 'blockchainGetAccountBalanceHistory' }),
    blockchainGetCurrentFiatRates: params => call({ ...params, method: 'blockchainGetCurrentFiatRates' }),
    blockchainGetFiatRatesForTimestamps: params => call({ ...params, method: 'blockchainGetFiatRatesForTimestamps' }),
    blockchainGetInfo: params => call({ ...params, method: 'blockchainGetInfo' }),
    blockchainEvmRpcCall: params => call({ ...params, method: 'blockchainEvmRpcCall' }),
    blockchainDisconnect: params => call({ ...params, method: 'blockchainDisconnect' }),
    blockchainEstimateFee: params => call({ ...params, method: 'blockchainEstimateFee' }),
    blockchainGetTransactions: params => call({ ...params, method: 'blockchainGetTransactions' }),
    blockchainSetCustomBackend: params => call({ ...params, method: 'blockchainSetCustomBackend' }),
    blockchainSubscribe: params => call({ ...params, method: 'blockchainSubscribe' }),
    blockchainSubscribeFiatRates: params => call({ ...params, method: 'blockchainSubscribeFiatRates' }),
    blockchainUnsubscribe: params => call({ ...params, method: 'blockchainUnsubscribe' }),
    blockchainUnsubscribeFiatRates: params => call({ ...params, method: 'blockchainUnsubscribeFiatRates' }),
    requestLogin: params => requestLogin(params),
    cardanoGetAddress: params => call({
        ...params,
        method: 'cardanoGetAddress',
        useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0,
    }),
    cardanoGetNativeScriptHash: params => call({ ...params, method: 'cardanoGetNativeScriptHash' }),
    cardanoGetPublicKey: params => call({ ...params, method: 'cardanoGetPublicKey' }),
    cardanoSignTransaction: params => call({ ...params, method: 'cardanoSignTransaction' }),
    cardanoComposeTransaction: params => call({ ...params, method: 'cardanoComposeTransaction' }),
    cipherKeyValue: params => call({ ...params, method: 'cipherKeyValue' }),
    composeTransaction: params => call({ ...params, method: 'composeTransaction' }),
    discoverAccounts: params => call({ ...params, method: 'discoverAccounts' }),
    ethereumGetAddress: params => call({
        ...params,
        method: 'ethereumGetAddress',
        useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0,
    }),
    ethereumGetPublicKey: params => call({ ...params, method: 'ethereumGetPublicKey' }),
    ethereumSignMessage: params => call({ ...params, method: 'ethereumSignMessage' }),
    ethereumSignTransaction: params => call({ ...params, method: 'ethereumSignTransaction' }),
    ethereumSignTypedData: params => call({ ...params, method: 'ethereumSignTypedData' }),
    ethereumVerifyMessage: params => call({ ...params, method: 'ethereumVerifyMessage' }),
    getAccountDescriptor: params => call({ ...params, method: 'getAccountDescriptor' }),
    getAccountInfo: params => call({ ...params, method: 'getAccountInfo' }),
    getAddress: params => call({
        ...params,
        method: 'getAddress',
        useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0,
    }),
    getDeviceState: params => call({ ...params, method: 'getDeviceState' }),
    getFeatures: params => call({ ...params, method: 'getFeatures' }),
    getFirmwareHash: params => call({ ...params, method: 'getFirmwareHash' }),
    getOwnershipId: params => call({ ...params, method: 'getOwnershipId' }),
    getOwnershipProof: params => call({ ...params, method: 'getOwnershipProof' }),
    getPublicKey: params => call({ ...params, method: 'getPublicKey' }),
    getNonce: params => call({ ...params, method: 'getNonce' }),
    nemGetAddress: params => call({
        ...params,
        method: 'nemGetAddress',
        useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0,
    }),
    nemSignTransaction: params => call({ ...params, method: 'nemSignTransaction' }),
    pushTransaction: params => call({ ...params, method: 'pushTransaction' }),
    rippleGetAddress: params => call({
        ...params,
        method: 'rippleGetAddress',
        useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0,
    }),
    rippleSignTransaction: params => call({ ...params, method: 'rippleSignTransaction' }),
    signMessage: params => call({ ...params, method: 'signMessage' }),
    signTransaction: params => call({ ...params, method: 'signTransaction' }),
    solanaComposeTransaction: params => call({ ...params, method: 'solanaComposeTransaction' }),
    solanaGetPublicKey: params => call({ ...params, method: 'solanaGetPublicKey' }),
    solanaGetAddress: params => call({ ...params, method: 'solanaGetAddress' }),
    solanaSignTransaction: params => call({ ...params, method: 'solanaSignTransaction' }),
    stellarGetAddress: params => call({
        ...params,
        method: 'stellarGetAddress',
        useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0,
    }),
    stellarSignTransaction: params => call({ ...params, method: 'stellarSignTransaction' }),
    tezosGetAddress: params => call({
        ...params,
        method: 'tezosGetAddress',
        useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0,
    }),
    tezosGetPublicKey: params => call({ ...params, method: 'tezosGetPublicKey' }),
    tezosSignTransaction: params => call({ ...params, method: 'tezosSignTransaction' }),
    unlockPath: params => call({ ...params, method: 'unlockPath' }),
    eosGetPublicKey: params => call({ ...params, method: 'eosGetPublicKey' }),
    eosSignTransaction: params => call({ ...params, method: 'eosSignTransaction' }),
    verifyMessage: params => call({ ...params, method: 'verifyMessage' }),
    resetDevice: params => call({ ...params, method: 'resetDevice' }),
    loadDevice: params => call({ ...params, method: 'loadDevice' }),
    wipeDevice: params => call({ ...params, method: 'wipeDevice' }),
    applyFlags: params => call({ ...params, method: 'applyFlags' }),
    applySettings: params => call({ ...params, method: 'applySettings' }),
    getSettings: () => call({ method: 'getSettings' }),
    authenticateDevice: params => call({ ...params, method: 'authenticateDevice' }),
    authorizeCoinjoin: params => call({ ...params, method: 'authorizeCoinjoin' }),
    cancelCoinjoinAuthorization: params => call({ ...params, method: 'cancelCoinjoinAuthorization' }),
    showDeviceTutorial: params => call({ ...params, method: 'showDeviceTutorial' }),
    backupDevice: params => call({ ...params, method: 'backupDevice' }),
    changeLanguage: params => call({ ...params, method: 'changeLanguage' }),
    changePin: params => call({ ...params, method: 'changePin' }),
    changeWipeCode: params => call({ ...params, method: 'changeWipeCode' }),
    firmwareUpdate: params => call({ ...params, method: 'firmwareUpdate' }),
    recoveryDevice: params => call({ ...params, method: 'recoveryDevice' }),
    getCoinInfo: params => call({ ...params, method: 'getCoinInfo' }),
    setBrightness: params => call({ ...params, method: 'setBrightness' }),
    setBusy: params => call({ ...params, method: 'setBusy' }),
    setProxy: params => call({ ...params, method: 'setProxy' }),
    dispose,
    cancel,
    ...extraMethods,
});
exports.factory = factory;
//# sourceMappingURL=factory.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/index-browser.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__("./node_modules/tslib/tslib.es6.mjs");
const errors_1 = __webpack_require__("./node_modules/@trezor/connect/lib/constants/errors.js");
const factory_1 = __webpack_require__("./node_modules/@trezor/connect/lib/factory.js");
const fallback = () => {
    throw (0, errors_1.TypedError)('Method_InvalidPackage');
};
const TrezorConnect = (0, factory_1.factory)({
    eventEmitter: {
        on: fallback,
        off: fallback,
        removeAllListeners: fallback,
        listenerCount: fallback,
    },
    manifest: fallback,
    init: fallback,
    setTransports: fallback,
    call: fallback,
    requestLogin: fallback,
    uiResponse: fallback,
    cancel: fallback,
    dispose: fallback,
});
exports["default"] = TrezorConnect;
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/exports.js"), exports);
//# sourceMappingURL=index-browser.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/account.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=account.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/api/bitcoin/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VerifyMessage = exports.SignMessage = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
const params_1 = __webpack_require__("./node_modules/@trezor/connect/lib/types/params.js");
exports.SignMessage = schema_utils_1.Type.Object({
    path: params_1.DerivationPath,
    coin: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    message: schema_utils_1.Type.String(),
    hex: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    no_script_type: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
});
exports.VerifyMessage = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
    signature: schema_utils_1.Type.String(),
    message: schema_utils_1.Type.String(),
    coin: schema_utils_1.Type.String(),
    hex: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/api/cardano/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardanoSignedTxData = exports.CardanoAuxiliaryDataSupplement = exports.CardanoSignedTxWitness = exports.CardanoSignTransactionExtended = exports.CardanoSignTransaction = exports.CardanoAuxiliaryData = exports.CardanoCVoteRegistrationParameters = exports.CardanoCVoteRegistrationDelegation = exports.CardanoReferenceInput = exports.CardanoRequiredSigner = exports.CardanoCollateralInput = exports.CardanoMint = exports.CardanoWithdrawal = exports.CardanoCertificate = exports.CardanoDRep = exports.CardanoPoolParameters = exports.CardanoPoolMargin = exports.CardanoPoolMetadata = exports.CardanoPoolRelay = exports.CardanoPoolOwner = exports.CardanoOutput = exports.CardanoAssetGroup = exports.CardanoToken = exports.CardanoInput = exports.CardanoGetPublicKey = exports.CardanoNativeScriptHash = exports.CardanoGetNativeScriptHash = exports.CardanoNativeScript = exports.CardanoGetAddress = exports.CardanoAddressParameters = exports.CardanoCertificatePointer = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
const constants_1 = __webpack_require__("./node_modules/@trezor/connect/lib/constants/index.js");
const params_1 = __webpack_require__("./node_modules/@trezor/connect/lib/types/params.js");
exports.CardanoCertificatePointer = schema_utils_1.Type.Object({
    blockIndex: schema_utils_1.Type.Number(),
    txIndex: schema_utils_1.Type.Number(),
    certificateIndex: schema_utils_1.Type.Number(),
});
exports.CardanoAddressParameters = schema_utils_1.Type.Object({
    addressType: constants_1.PROTO.EnumCardanoAddressType,
    path: schema_utils_1.Type.Optional(params_1.DerivationPath),
    stakingPath: schema_utils_1.Type.Optional(params_1.DerivationPath),
    stakingKeyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    certificatePointer: schema_utils_1.Type.Optional(exports.CardanoCertificatePointer),
    paymentScriptHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    stakingScriptHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.CardanoGetAddress = schema_utils_1.Type.Object({
    addressParameters: exports.CardanoAddressParameters,
    protocolMagic: schema_utils_1.Type.Number(),
    networkId: schema_utils_1.Type.Number(),
    address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    showOnTrezor: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    derivationType: schema_utils_1.Type.Optional(constants_1.PROTO.EnumCardanoDerivationType),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
});
exports.CardanoNativeScript = schema_utils_1.Type.Recursive(This => schema_utils_1.Type.Object({
    type: constants_1.PROTO.EnumCardanoNativeScriptType,
    scripts: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(This)),
    keyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    keyPath: schema_utils_1.Type.Optional(params_1.DerivationPath),
    requiredSignaturesCount: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    invalidBefore: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    invalidHereafter: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}));
exports.CardanoGetNativeScriptHash = schema_utils_1.Type.Object({
    script: exports.CardanoNativeScript,
    displayFormat: constants_1.PROTO.EnumCardanoNativeScriptHashDisplayFormat,
    derivationType: schema_utils_1.Type.Optional(constants_1.PROTO.EnumCardanoDerivationType),
});
exports.CardanoNativeScriptHash = schema_utils_1.Type.Object({
    scriptHash: schema_utils_1.Type.String(),
});
exports.CardanoGetPublicKey = schema_utils_1.Type.Intersect([
    params_1.GetPublicKey,
    schema_utils_1.Type.Object({
        derivationType: schema_utils_1.Type.Optional(constants_1.PROTO.EnumCardanoDerivationType),
    }),
]);
exports.CardanoInput = schema_utils_1.Type.Object({
    path: schema_utils_1.Type.Optional(params_1.DerivationPath),
    prev_hash: schema_utils_1.Type.String(),
    prev_index: schema_utils_1.Type.Number(),
});
exports.CardanoToken = schema_utils_1.Type.Object({
    assetNameBytes: schema_utils_1.Type.String(),
    amount: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    mintAmount: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.CardanoAssetGroup = schema_utils_1.Type.Object({
    policyId: schema_utils_1.Type.String(),
    tokenAmounts: schema_utils_1.Type.Array(exports.CardanoToken),
});
exports.CardanoOutput = schema_utils_1.Type.Intersect([
    schema_utils_1.Type.Union([
        schema_utils_1.Type.Object({
            addressParameters: exports.CardanoAddressParameters,
        }),
        schema_utils_1.Type.Object({
            address: schema_utils_1.Type.String(),
        }),
    ]),
    schema_utils_1.Type.Object({
        amount: schema_utils_1.Type.String(),
        tokenBundle: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoAssetGroup)),
        datumHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
        format: schema_utils_1.Type.Optional(constants_1.PROTO.EnumCardanoTxOutputSerializationFormat),
        inlineDatum: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
        referenceScript: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    }),
]);
exports.CardanoPoolOwner = schema_utils_1.Type.Object({
    stakingKeyPath: schema_utils_1.Type.Optional(params_1.DerivationPath),
    stakingKeyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.CardanoPoolRelay = schema_utils_1.Type.Object({
    type: constants_1.PROTO.EnumCardanoPoolRelayType,
    ipv4Address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    ipv6Address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    port: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    hostName: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.CardanoPoolMetadata = schema_utils_1.Type.Object({
    url: schema_utils_1.Type.String(),
    hash: schema_utils_1.Type.String(),
});
exports.CardanoPoolMargin = schema_utils_1.Type.Object({
    numerator: schema_utils_1.Type.String(),
    denominator: schema_utils_1.Type.String(),
});
exports.CardanoPoolParameters = schema_utils_1.Type.Object({
    poolId: schema_utils_1.Type.String(),
    vrfKeyHash: schema_utils_1.Type.String(),
    pledge: schema_utils_1.Type.String(),
    cost: schema_utils_1.Type.String(),
    margin: exports.CardanoPoolMargin,
    rewardAccount: schema_utils_1.Type.String(),
    owners: schema_utils_1.Type.Array(exports.CardanoPoolOwner, { minItems: 1 }),
    relays: schema_utils_1.Type.Array(exports.CardanoPoolRelay),
    metadata: schema_utils_1.Type.Optional(exports.CardanoPoolMetadata),
});
exports.CardanoDRep = schema_utils_1.Type.Object({
    type: constants_1.PROTO.EnumCardanoDRepType,
    keyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    scriptHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.CardanoCertificate = schema_utils_1.Type.Object({
    type: constants_1.PROTO.EnumCardanoCertificateType,
    path: schema_utils_1.Type.Optional(params_1.DerivationPath),
    pool: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    poolParameters: schema_utils_1.Type.Optional(exports.CardanoPoolParameters),
    scriptHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    keyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    deposit: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    dRep: schema_utils_1.Type.Optional(exports.CardanoDRep),
});
exports.CardanoWithdrawal = schema_utils_1.Type.Object({
    path: schema_utils_1.Type.Optional(params_1.DerivationPath),
    amount: schema_utils_1.Type.String(),
    scriptHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    keyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.CardanoMint = schema_utils_1.Type.Array(exports.CardanoAssetGroup);
exports.CardanoCollateralInput = schema_utils_1.Type.Object({
    path: schema_utils_1.Type.Optional(params_1.DerivationPath),
    prev_hash: schema_utils_1.Type.String(),
    prev_index: schema_utils_1.Type.Number(),
});
exports.CardanoRequiredSigner = schema_utils_1.Type.Object({
    keyPath: schema_utils_1.Type.Optional(params_1.DerivationPath),
    keyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.CardanoReferenceInput = schema_utils_1.Type.Object({
    prev_hash: schema_utils_1.Type.String(),
    prev_index: schema_utils_1.Type.Number(),
});
exports.CardanoCVoteRegistrationDelegation = schema_utils_1.Type.Object({
    votePublicKey: schema_utils_1.Type.String(),
    weight: schema_utils_1.Type.Number(),
});
exports.CardanoCVoteRegistrationParameters = schema_utils_1.Type.Object({
    votePublicKey: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    stakingPath: params_1.DerivationPath,
    paymentAddressParameters: schema_utils_1.Type.Optional(exports.CardanoAddressParameters),
    nonce: schema_utils_1.Type.String(),
    format: schema_utils_1.Type.Optional(constants_1.PROTO.EnumCardanoCVoteRegistrationFormat),
    delegations: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoCVoteRegistrationDelegation)),
    votingPurpose: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    paymentAddress: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.CardanoAuxiliaryData = schema_utils_1.Type.Object({
    hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    cVoteRegistrationParameters: schema_utils_1.Type.Optional(exports.CardanoCVoteRegistrationParameters),
});
exports.CardanoSignTransaction = schema_utils_1.Type.Object({
    inputs: schema_utils_1.Type.Array(exports.CardanoInput),
    outputs: schema_utils_1.Type.Array(exports.CardanoOutput),
    fee: schema_utils_1.Type.Uint(),
    ttl: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    certificates: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoCertificate)),
    withdrawals: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoWithdrawal)),
    validityIntervalStart: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    auxiliaryData: schema_utils_1.Type.Optional(exports.CardanoAuxiliaryData),
    mint: schema_utils_1.Type.Optional(exports.CardanoMint),
    scriptDataHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    collateralInputs: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoCollateralInput)),
    requiredSigners: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoRequiredSigner)),
    collateralReturn: schema_utils_1.Type.Optional(exports.CardanoOutput),
    totalCollateral: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    referenceInputs: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoReferenceInput)),
    additionalWitnessRequests: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(params_1.DerivationPath)),
    protocolMagic: schema_utils_1.Type.Number(),
    networkId: schema_utils_1.Type.Number(),
    signingMode: constants_1.PROTO.EnumCardanoTxSigningMode,
    derivationType: schema_utils_1.Type.Optional(constants_1.PROTO.EnumCardanoDerivationType),
    includeNetworkId: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    tagCborSets: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
});
exports.CardanoSignTransactionExtended = schema_utils_1.Type.Intersect([
    exports.CardanoSignTransaction,
    schema_utils_1.Type.Object({
        unsignedTx: schema_utils_1.Type.Object({
            body: schema_utils_1.Type.String(),
            hash: schema_utils_1.Type.String(),
        }),
        testnet: schema_utils_1.Type.Boolean(),
    }),
]);
exports.CardanoSignedTxWitness = schema_utils_1.Type.Object({
    type: constants_1.PROTO.EnumCardanoTxWitnessType,
    pubKey: schema_utils_1.Type.String(),
    signature: schema_utils_1.Type.String(),
    chainCode: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.CardanoAuxiliaryDataSupplement = schema_utils_1.Type.Object({
    type: constants_1.PROTO.EnumCardanoTxAuxiliaryDataSupplementType,
    auxiliaryDataHash: schema_utils_1.Type.String(),
    cVoteRegistrationSignature: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.CardanoSignedTxData = schema_utils_1.Type.Object({
    hash: schema_utils_1.Type.String(),
    witnesses: schema_utils_1.Type.Array(exports.CardanoSignedTxWitness),
    auxiliaryDataSupplement: schema_utils_1.Type.Optional(exports.CardanoAuxiliaryDataSupplement),
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/api/eos/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EosSignTransaction = exports.EosSDKTransaction = exports.EosTxAction = exports.EosTxActionCommon = exports.EosAuthorization = exports.EosTxHeader = exports.EosPublicKey = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
const constants_1 = __webpack_require__("./node_modules/@trezor/connect/lib/constants/index.js");
const params_1 = __webpack_require__("./node_modules/@trezor/connect/lib/types/params.js");
exports.EosPublicKey = schema_utils_1.Type.Object({
    wifPublicKey: schema_utils_1.Type.String(),
    rawPublicKey: schema_utils_1.Type.String(),
    path: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    serializedPath: schema_utils_1.Type.String(),
});
exports.EosTxHeader = schema_utils_1.Type.Object({
    expiration: schema_utils_1.Type.Union([schema_utils_1.Type.Uint(), schema_utils_1.Type.String()]),
    refBlockNum: schema_utils_1.Type.Number(),
    refBlockPrefix: schema_utils_1.Type.Number(),
    maxNetUsageWords: schema_utils_1.Type.Number(),
    maxCpuUsageMs: schema_utils_1.Type.Number(),
    delaySec: schema_utils_1.Type.Number(),
});
exports.EosAuthorization = schema_utils_1.Type.Object({
    threshold: schema_utils_1.Type.Number(),
    keys: schema_utils_1.Type.Array(constants_1.PROTO.EosAuthorizationKey),
    accounts: schema_utils_1.Type.Array(schema_utils_1.Type.Object({
        permission: constants_1.PROTO.EosPermissionLevel,
        weight: schema_utils_1.Type.Number(),
    })),
    waits: schema_utils_1.Type.Array(constants_1.PROTO.EosAuthorizationWait),
});
exports.EosTxActionCommon = schema_utils_1.Type.Object({
    account: schema_utils_1.Type.String(),
    authorization: schema_utils_1.Type.Array(constants_1.PROTO.EosPermissionLevel),
});
exports.EosTxAction = schema_utils_1.Type.Union([
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('transfer'),
            data: schema_utils_1.Type.Object({
                from: schema_utils_1.Type.String(),
                to: schema_utils_1.Type.String(),
                quantity: schema_utils_1.Type.String(),
                memo: schema_utils_1.Type.String(),
            }),
        }),
    ]),
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('delegatebw'),
            data: schema_utils_1.Type.Object({
                from: schema_utils_1.Type.String(),
                receiver: schema_utils_1.Type.String(),
                stake_net_quantity: schema_utils_1.Type.String(),
                stake_cpu_quantity: schema_utils_1.Type.String(),
                transfer: schema_utils_1.Type.Boolean(),
            }),
        }),
    ]),
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('undelegatebw'),
            data: schema_utils_1.Type.Object({
                from: schema_utils_1.Type.String(),
                receiver: schema_utils_1.Type.String(),
                unstake_net_quantity: schema_utils_1.Type.String(),
                unstake_cpu_quantity: schema_utils_1.Type.String(),
            }),
        }),
    ]),
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('buyram'),
            data: schema_utils_1.Type.Object({
                payer: schema_utils_1.Type.String(),
                receiver: schema_utils_1.Type.String(),
                quant: schema_utils_1.Type.String(),
            }),
        }),
    ]),
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('buyrambytes'),
            data: constants_1.PROTO.EosActionBuyRamBytes,
        }),
    ]),
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('sellram'),
            data: constants_1.PROTO.EosActionSellRam,
        }),
    ]),
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('voteproducer'),
            data: schema_utils_1.Type.Object({
                voter: schema_utils_1.Type.String(),
                proxy: schema_utils_1.Type.String(),
                producers: schema_utils_1.Type.Array(schema_utils_1.Type.String()),
            }),
        }),
    ]),
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('refund'),
            data: constants_1.PROTO.EosActionRefund,
        }),
    ]),
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('updateauth'),
            data: schema_utils_1.Type.Object({
                account: schema_utils_1.Type.String(),
                permission: schema_utils_1.Type.String(),
                parent: schema_utils_1.Type.String(),
                auth: exports.EosAuthorization,
            }),
        }),
    ]),
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('deleteauth'),
            data: constants_1.PROTO.EosActionDeleteAuth,
        }),
    ]),
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('linkauth'),
            data: constants_1.PROTO.EosActionLinkAuth,
        }),
    ]),
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('unlinkauth'),
            data: constants_1.PROTO.EosActionUnlinkAuth,
        }),
    ]),
    schema_utils_1.Type.Intersect([
        exports.EosTxActionCommon,
        schema_utils_1.Type.Object({
            name: schema_utils_1.Type.Literal('newaccount'),
            data: schema_utils_1.Type.Object({
                creator: schema_utils_1.Type.String(),
                name: schema_utils_1.Type.String(),
                owner: exports.EosAuthorization,
                active: exports.EosAuthorization,
            }),
        }),
    ]),
]);
exports.EosSDKTransaction = schema_utils_1.Type.Object({
    chainId: schema_utils_1.Type.String(),
    header: exports.EosTxHeader,
    actions: schema_utils_1.Type.Array(schema_utils_1.Type.Union([
        exports.EosTxAction,
        schema_utils_1.Type.Intersect([
            exports.EosTxActionCommon,
            schema_utils_1.Type.Object({
                name: schema_utils_1.Type.String(),
                data: schema_utils_1.Type.String(),
            }),
        ]),
    ])),
});
exports.EosSignTransaction = schema_utils_1.Type.Object({
    path: params_1.DerivationPath,
    transaction: exports.EosSDKTransaction,
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/api/ethereum/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EthereumVerifyMessage = exports.EthereumSignTypedHash = exports.EthereumSignTypedData = exports.EthereumSignTypedDataMessage = exports.EthereumSignTypedDataTypes = exports.EthereumSignedTx = exports.EthereumSignTransaction = exports.EthereumTransactionEIP1559 = exports.EthereumAccessList = exports.EthereumTransaction = exports.EthereumSignMessage = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
const params_1 = __webpack_require__("./node_modules/@trezor/connect/lib/types/params.js");
exports.EthereumSignMessage = schema_utils_1.Type.Object({
    path: params_1.DerivationPath,
    message: schema_utils_1.Type.String(),
    hex: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
});
exports.EthereumTransaction = schema_utils_1.Type.Object({
    to: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),
    value: schema_utils_1.Type.String(),
    gasPrice: schema_utils_1.Type.String(),
    gasLimit: schema_utils_1.Type.String(),
    maxFeePerGas: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
    maxPriorityFeePerGas: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
    nonce: schema_utils_1.Type.String(),
    data: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    chainId: schema_utils_1.Type.Number(),
    txType: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
});
exports.EthereumAccessList = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
    storageKeys: schema_utils_1.Type.Array(schema_utils_1.Type.String()),
});
exports.EthereumTransactionEIP1559 = schema_utils_1.Type.Object({
    to: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),
    value: schema_utils_1.Type.String(),
    gasLimit: schema_utils_1.Type.String(),
    gasPrice: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
    nonce: schema_utils_1.Type.String(),
    data: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    chainId: schema_utils_1.Type.Number(),
    maxFeePerGas: schema_utils_1.Type.String(),
    maxPriorityFeePerGas: schema_utils_1.Type.String(),
    accessList: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.EthereumAccessList)),
});
exports.EthereumSignTransaction = schema_utils_1.Type.Object({
    path: params_1.DerivationPath,
    transaction: schema_utils_1.Type.Union([exports.EthereumTransaction, exports.EthereumTransactionEIP1559]),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
});
exports.EthereumSignedTx = schema_utils_1.Type.Object({
    v: schema_utils_1.Type.String(),
    r: schema_utils_1.Type.String(),
    s: schema_utils_1.Type.String(),
    serializedTx: schema_utils_1.Type.String(),
});
const EthereumSignTypedDataTypeProperty = schema_utils_1.Type.Object({
    name: schema_utils_1.Type.String(),
    type: schema_utils_1.Type.String(),
});
exports.EthereumSignTypedDataTypes = schema_utils_1.Type.Object({
    EIP712Domain: schema_utils_1.Type.Array(EthereumSignTypedDataTypeProperty),
}, {
    additionalProperties: schema_utils_1.Type.Array(EthereumSignTypedDataTypeProperty),
});
exports.EthereumSignTypedDataMessage = schema_utils_1.Type.Object({
    types: exports.EthereumSignTypedDataTypes,
    primaryType: schema_utils_1.Type.String(),
    domain: schema_utils_1.Type.Object({
        name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
        version: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
        chainId: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.Number(), schema_utils_1.Type.BigInt(), schema_utils_1.Type.String()])),
        verifyingContract: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
        salt: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.ArrayBuffer(), schema_utils_1.Type.String()])),
    }),
    message: schema_utils_1.Type.Object({}, {
        additionalProperties: schema_utils_1.Type.Any(),
    }),
});
exports.EthereumSignTypedData = schema_utils_1.Type.Object({
    path: params_1.DerivationPath,
    data: exports.EthereumSignTypedDataMessage,
    metamask_v4_compat: schema_utils_1.Type.Boolean(),
    domain_separator_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
    message_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
});
exports.EthereumSignTypedHash = schema_utils_1.Type.Object({
    path: params_1.DerivationPath,
    data: exports.EthereumSignTypedDataMessage,
    metamask_v4_compat: schema_utils_1.Type.Boolean(),
    domain_separator_hash: schema_utils_1.Type.String(),
    message_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.EthereumVerifyMessage = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
    message: schema_utils_1.Type.String(),
    hex: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    signature: schema_utils_1.Type.String(),
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/api/index.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/api/ripple/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RippleSignedTx = exports.RippleSignTransaction = exports.RippleTransaction = exports.RipplePayment = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
const params_1 = __webpack_require__("./node_modules/@trezor/connect/lib/types/params.js");
exports.RipplePayment = schema_utils_1.Type.Object({
    amount: schema_utils_1.Type.String(),
    destination: schema_utils_1.Type.String(),
    destinationTag: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
});
exports.RippleTransaction = schema_utils_1.Type.Object({
    fee: schema_utils_1.Type.String(),
    flags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    sequence: schema_utils_1.Type.Number(),
    maxLedgerVersion: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    payment: exports.RipplePayment,
});
exports.RippleSignTransaction = schema_utils_1.Type.Object({
    path: params_1.DerivationPath,
    transaction: exports.RippleTransaction,
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
});
exports.RippleSignedTx = schema_utils_1.Type.Object({
    serializedTx: schema_utils_1.Type.String(),
    signature: schema_utils_1.Type.String(),
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/api/solana/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SolanaComposedTransaction = exports.SolanaComposeTransaction = exports.SolanaProgramName = exports.SolanaSignedTransaction = exports.SolanaSignTransaction = exports.SolanaTxAdditionalInfo = exports.SolanaTxTokenAccountInfo = exports.SolanaPublicKey = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
const params_1 = __webpack_require__("./node_modules/@trezor/connect/lib/types/params.js");
exports.SolanaPublicKey = schema_utils_1.Type.Intersect([
    params_1.PublicKey,
    schema_utils_1.Type.Object({
        publicKey: schema_utils_1.Type.String(),
    }),
]);
exports.SolanaTxTokenAccountInfo = schema_utils_1.Type.Object({
    baseAddress: schema_utils_1.Type.String(),
    tokenProgram: schema_utils_1.Type.String(),
    tokenMint: schema_utils_1.Type.String(),
    tokenAccount: schema_utils_1.Type.String(),
    symbol: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.SolanaTxAdditionalInfo = schema_utils_1.Type.Object({
    tokenAccountsInfos: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.SolanaTxTokenAccountInfo, { minItems: 1 })),
});
exports.SolanaSignTransaction = schema_utils_1.Type.Object({
    path: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Array(schema_utils_1.Type.Number())]),
    serializedTx: schema_utils_1.Type.String(),
    additionalInfo: schema_utils_1.Type.Optional(exports.SolanaTxAdditionalInfo),
    serialize: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
});
exports.SolanaSignedTransaction = schema_utils_1.Type.Object({
    signature: schema_utils_1.Type.String(),
    serializedTx: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.SolanaProgramName = schema_utils_1.Type.Union([
    schema_utils_1.Type.Literal('spl-token'),
    schema_utils_1.Type.Literal('spl-token-2022'),
]);
exports.SolanaComposeTransaction = schema_utils_1.Type.Object({
    fromAddress: schema_utils_1.Type.String(),
    toAddress: schema_utils_1.Type.String(),
    amount: schema_utils_1.Type.String(),
    blockHash: schema_utils_1.Type.String(),
    lastValidBlockHeight: schema_utils_1.Type.Number(),
    priorityFees: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({ computeUnitPrice: schema_utils_1.Type.String(), computeUnitLimit: schema_utils_1.Type.String() })),
    token: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({
        mint: schema_utils_1.Type.String(),
        program: exports.SolanaProgramName,
        decimals: schema_utils_1.Type.Number(),
        accounts: schema_utils_1.Type.Array(schema_utils_1.Type.Object({ publicKey: schema_utils_1.Type.String(), balance: schema_utils_1.Type.String() })),
    })),
    coin: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    identity: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.SolanaComposedTransaction = schema_utils_1.Type.Object({
    serializedTx: schema_utils_1.Type.String(),
    additionalInfo: schema_utils_1.Type.Object({
        newAccountProgramName: schema_utils_1.Type.Optional(exports.SolanaProgramName),
        tokenAccountInfo: schema_utils_1.Type.Optional(exports.SolanaTxTokenAccountInfo),
    }),
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/api/stellar/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StellarOperationMessage = exports.StellarSignedTx = exports.StellarSignTransaction = exports.StellarTransaction = exports.StellarOperation = exports.StellarClaimClaimableBalanceOperation = exports.StellarInflationOperation = exports.StellarBumpSequenceOperation = exports.StellarManageDataOperation = exports.StellarAccountMergeOperation = exports.StellarAllowTrustOperation = exports.StellarChangeTrustOperation = exports.StellarSetOptionsOperation = exports.StellarManageBuyOfferOperation = exports.StellarManageSellOfferOperation = exports.StellarPassiveSellOfferOperation = exports.StellarPathPaymentStrictSendOperation = exports.StellarPathPaymentStrictReceiveOperation = exports.StellarPaymentOperation = exports.StellarCreateAccountOperation = exports.StellarAsset = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
const constants_1 = __webpack_require__("./node_modules/@trezor/connect/lib/constants/index.js");
const params_1 = __webpack_require__("./node_modules/@trezor/connect/lib/types/params.js");
exports.StellarAsset = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Union([constants_1.PROTO.EnumStellarAssetType, schema_utils_1.Type.KeyOfEnum(constants_1.PROTO.StellarAssetType)]),
    code: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    issuer: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.StellarCreateAccountOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('createAccount'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    destination: schema_utils_1.Type.String(),
    startingBalance: schema_utils_1.Type.String(),
});
exports.StellarPaymentOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('payment'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    destination: schema_utils_1.Type.String(),
    asset: exports.StellarAsset,
    amount: schema_utils_1.Type.String(),
});
exports.StellarPathPaymentStrictReceiveOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('pathPaymentStrictReceive'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    sendAsset: exports.StellarAsset,
    sendMax: schema_utils_1.Type.Uint(),
    destination: schema_utils_1.Type.String(),
    destAsset: exports.StellarAsset,
    destAmount: schema_utils_1.Type.Uint(),
    path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.StellarAsset)),
});
exports.StellarPathPaymentStrictSendOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('pathPaymentStrictSend'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    sendAsset: exports.StellarAsset,
    sendAmount: schema_utils_1.Type.Uint(),
    destination: schema_utils_1.Type.String(),
    destAsset: exports.StellarAsset,
    destMin: schema_utils_1.Type.Uint(),
    path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.StellarAsset)),
});
exports.StellarPassiveSellOfferOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('createPassiveSellOffer'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    buying: exports.StellarAsset,
    selling: exports.StellarAsset,
    amount: schema_utils_1.Type.Uint(),
    price: schema_utils_1.Type.Object({
        n: schema_utils_1.Type.Number(),
        d: schema_utils_1.Type.Number(),
    }),
});
exports.StellarManageSellOfferOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('manageSellOffer'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    buying: exports.StellarAsset,
    selling: exports.StellarAsset,
    amount: schema_utils_1.Type.Uint(),
    offerId: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    price: schema_utils_1.Type.Object({
        n: schema_utils_1.Type.Number(),
        d: schema_utils_1.Type.Number(),
    }),
});
exports.StellarManageBuyOfferOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('manageBuyOffer'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    buying: exports.StellarAsset,
    selling: exports.StellarAsset,
    amount: schema_utils_1.Type.Uint(),
    offerId: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    price: schema_utils_1.Type.Object({
        n: schema_utils_1.Type.Number(),
        d: schema_utils_1.Type.Number(),
    }),
});
exports.StellarSetOptionsOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('setOptions'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    signer: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({
        type: constants_1.PROTO.EnumStellarSignerType,
        key: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Buffer()]),
        weight: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    })),
    inflationDest: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    clearFlags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    setFlags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    masterWeight: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    lowThreshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    medThreshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    highThreshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    homeDomain: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.StellarChangeTrustOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('changeTrust'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    line: exports.StellarAsset,
    limit: schema_utils_1.Type.String(),
});
exports.StellarAllowTrustOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('allowTrust'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    trustor: schema_utils_1.Type.String(),
    assetCode: schema_utils_1.Type.String(),
    assetType: constants_1.PROTO.EnumStellarAssetType,
    authorize: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Undefined()])),
});
exports.StellarAccountMergeOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('accountMerge'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    destination: schema_utils_1.Type.String(),
});
exports.StellarManageDataOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('manageData'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    name: schema_utils_1.Type.String(),
    value: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Buffer()])),
});
exports.StellarBumpSequenceOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('bumpSequence'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    bumpTo: schema_utils_1.Type.Uint(),
});
exports.StellarInflationOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('inflation'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.StellarClaimClaimableBalanceOperation = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Literal('claimClaimableBalance'),
    source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    balanceId: schema_utils_1.Type.String(),
});
exports.StellarOperation = schema_utils_1.Type.Union([
    exports.StellarCreateAccountOperation,
    exports.StellarPaymentOperation,
    exports.StellarPathPaymentStrictReceiveOperation,
    exports.StellarPathPaymentStrictSendOperation,
    exports.StellarPassiveSellOfferOperation,
    exports.StellarManageSellOfferOperation,
    exports.StellarManageBuyOfferOperation,
    exports.StellarSetOptionsOperation,
    exports.StellarChangeTrustOperation,
    exports.StellarAllowTrustOperation,
    exports.StellarAccountMergeOperation,
    exports.StellarInflationOperation,
    exports.StellarManageDataOperation,
    exports.StellarBumpSequenceOperation,
    exports.StellarClaimClaimableBalanceOperation,
]);
exports.StellarTransaction = schema_utils_1.Type.Object({
    source: schema_utils_1.Type.String(),
    fee: schema_utils_1.Type.Number(),
    sequence: schema_utils_1.Type.Uint(),
    timebounds: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({
        minTime: schema_utils_1.Type.Number(),
        maxTime: schema_utils_1.Type.Number(),
    })),
    memo: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({
        type: constants_1.PROTO.EnumStellarMemoType,
        id: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
        text: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
        hash: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Buffer()])),
    })),
    operations: schema_utils_1.Type.Array(exports.StellarOperation),
});
exports.StellarSignTransaction = schema_utils_1.Type.Object({
    path: params_1.DerivationPath,
    networkPassphrase: schema_utils_1.Type.String(),
    transaction: exports.StellarTransaction,
});
exports.StellarSignedTx = schema_utils_1.Type.Object({
    publicKey: schema_utils_1.Type.String(),
    signature: schema_utils_1.Type.String(),
});
exports.StellarOperationMessage = schema_utils_1.Type.Union([
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarCreateAccountOp'),
        }),
        constants_1.PROTO.StellarCreateAccountOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarPaymentOp'),
        }),
        constants_1.PROTO.StellarPaymentOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarPathPaymentStrictReceiveOp'),
        }),
        constants_1.PROTO.StellarPathPaymentStrictReceiveOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarPathPaymentStrictSendOp'),
        }),
        constants_1.PROTO.StellarPathPaymentStrictSendOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarManageSellOfferOp'),
        }),
        constants_1.PROTO.StellarManageSellOfferOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarManageBuyOfferOp'),
        }),
        constants_1.PROTO.StellarManageBuyOfferOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarCreatePassiveSellOfferOp'),
        }),
        constants_1.PROTO.StellarCreatePassiveSellOfferOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarSetOptionsOp'),
        }),
        constants_1.PROTO.StellarSetOptionsOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarChangeTrustOp'),
        }),
        constants_1.PROTO.StellarChangeTrustOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarAllowTrustOp'),
        }),
        constants_1.PROTO.StellarAllowTrustOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarAccountMergeOp'),
        }),
        constants_1.PROTO.StellarAccountMergeOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarManageDataOp'),
        }),
        constants_1.PROTO.StellarManageDataOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarBumpSequenceOp'),
        }),
        constants_1.PROTO.StellarBumpSequenceOp,
    ]),
    schema_utils_1.Type.Intersect([
        schema_utils_1.Type.Object({
            type: schema_utils_1.Type.Literal('StellarClaimClaimableBalanceOp'),
        }),
        constants_1.PROTO.StellarClaimClaimableBalanceOp,
    ]),
]);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/api/tezos/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TezosSignTransaction = exports.TezosOperation = exports.TezosDelegationOperation = exports.TezosOriginationOperation = exports.TezosTransactionOperation = exports.TezosParametersManager = exports.TezosManagerTransfer = exports.TezosRevealOperation = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
const params_1 = __webpack_require__("./node_modules/@trezor/connect/lib/types/params.js");
exports.TezosRevealOperation = schema_utils_1.Type.Object({
    source: schema_utils_1.Type.String(),
    fee: schema_utils_1.Type.Number(),
    counter: schema_utils_1.Type.Number(),
    gas_limit: schema_utils_1.Type.Number(),
    storage_limit: schema_utils_1.Type.Number(),
    public_key: schema_utils_1.Type.String(),
});
exports.TezosManagerTransfer = schema_utils_1.Type.Object({
    destination: schema_utils_1.Type.String(),
    amount: schema_utils_1.Type.Number(),
});
exports.TezosParametersManager = schema_utils_1.Type.Object({
    set_delegate: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    cancel_delegate: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    transfer: schema_utils_1.Type.Optional(exports.TezosManagerTransfer),
});
exports.TezosTransactionOperation = schema_utils_1.Type.Object({
    source: schema_utils_1.Type.String(),
    destination: schema_utils_1.Type.String(),
    amount: schema_utils_1.Type.Number(),
    counter: schema_utils_1.Type.Number(),
    fee: schema_utils_1.Type.Number(),
    gas_limit: schema_utils_1.Type.Number(),
    storage_limit: schema_utils_1.Type.Number(),
    parameters: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),
    parameters_manager: schema_utils_1.Type.Optional(exports.TezosParametersManager),
});
exports.TezosOriginationOperation = schema_utils_1.Type.Object({
    source: schema_utils_1.Type.String(),
    balance: schema_utils_1.Type.Number(),
    delegate: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    script: params_1.DerivationPath,
    fee: schema_utils_1.Type.Number(),
    counter: schema_utils_1.Type.Number(),
    gas_limit: schema_utils_1.Type.Number(),
    storage_limit: schema_utils_1.Type.Number(),
});
exports.TezosDelegationOperation = schema_utils_1.Type.Object({
    source: schema_utils_1.Type.String(),
    delegate: schema_utils_1.Type.String(),
    fee: schema_utils_1.Type.Number(),
    counter: schema_utils_1.Type.Number(),
    gas_limit: schema_utils_1.Type.Number(),
    storage_limit: schema_utils_1.Type.Number(),
});
exports.TezosOperation = schema_utils_1.Type.Object({
    reveal: schema_utils_1.Type.Optional(exports.TezosRevealOperation),
    transaction: schema_utils_1.Type.Optional(exports.TezosTransactionOperation),
    origination: schema_utils_1.Type.Optional(exports.TezosOriginationOperation),
    delegation: schema_utils_1.Type.Optional(exports.TezosDelegationOperation),
});
exports.TezosSignTransaction = schema_utils_1.Type.Object({
    path: params_1.DerivationPath,
    branch: schema_utils_1.Type.String(),
    operation: exports.TezosOperation,
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/coinInfo.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CoinInfo = exports.MiscNetworkInfo = exports.EthereumNetworkInfoDefinitionValues = exports.EthereumNetworkInfo = exports.BitcoinNetworkInfo = exports.BlockchainLink = exports.CoinSupport = exports.CoinObj = exports.Network = exports.Bip32 = void 0;
const device_utils_1 = __webpack_require__("./node_modules/@trezor/device-utils/lib/index.js");
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
const fees_1 = __webpack_require__("./node_modules/@trezor/connect/lib/types/fees.js");
exports.Bip32 = schema_utils_1.Type.Object({
    public: schema_utils_1.Type.Number(),
    private: schema_utils_1.Type.Number(),
});
exports.Network = schema_utils_1.Type.Object({
    messagePrefix: schema_utils_1.Type.String(),
    bech32: schema_utils_1.Type.String(),
    bip32: exports.Bip32,
    pubKeyHash: schema_utils_1.Type.Number(),
    scriptHash: schema_utils_1.Type.Number(),
    wif: schema_utils_1.Type.Number(),
    forkId: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
});
exports.CoinObj = schema_utils_1.Type.Object({
    coin: schema_utils_1.Type.String(),
    identity: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.CoinSupport = schema_utils_1.Type.Composite([
    schema_utils_1.Type.Object({
        connect: schema_utils_1.Type.Boolean(),
    }),
    schema_utils_1.Type.Record(schema_utils_1.Type.KeyOfEnum(device_utils_1.DeviceModelInternal), schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Literal(false)])),
]);
exports.BlockchainLink = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.String(),
    url: schema_utils_1.Type.Array(schema_utils_1.Type.String()),
});
const Common = schema_utils_1.Type.Object({
    label: schema_utils_1.Type.String(),
    name: schema_utils_1.Type.String(),
    shortcut: schema_utils_1.Type.String(),
    slip44: schema_utils_1.Type.Number(),
    support: exports.CoinSupport,
    decimals: schema_utils_1.Type.Number(),
    blockchainLink: schema_utils_1.Type.Optional(exports.BlockchainLink),
    blockTime: schema_utils_1.Type.Number(),
    minFee: schema_utils_1.Type.Number(),
    maxFee: schema_utils_1.Type.Number(),
    minPriorityFee: schema_utils_1.Type.Number(),
    defaultFees: schema_utils_1.Type.Array(fees_1.FeeLevel),
});
exports.BitcoinNetworkInfo = schema_utils_1.Type.Intersect([
    Common,
    schema_utils_1.Type.Object({
        type: schema_utils_1.Type.Literal('bitcoin'),
        cashAddrPrefix: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
        curveName: schema_utils_1.Type.String(),
        dustLimit: schema_utils_1.Type.Number(),
        forceBip143: schema_utils_1.Type.Boolean(),
        hashGenesisBlock: schema_utils_1.Type.String(),
        maxAddressLength: schema_utils_1.Type.Number(),
        maxFeeSatoshiKb: schema_utils_1.Type.Number(),
        minAddressLength: schema_utils_1.Type.Number(),
        minFeeSatoshiKb: schema_utils_1.Type.Number(),
        segwit: schema_utils_1.Type.Boolean(),
        xPubMagic: schema_utils_1.Type.Number(),
        xPubMagicSegwitNative: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
        xPubMagicSegwit: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
        taproot: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
        network: exports.Network,
        isBitcoin: schema_utils_1.Type.Boolean(),
    }),
]);
exports.EthereumNetworkInfo = schema_utils_1.Type.Intersect([
    Common,
    schema_utils_1.Type.Object({
        type: schema_utils_1.Type.Literal('ethereum'),
        chainId: schema_utils_1.Type.Number(),
        network: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
    }),
]);
exports.EthereumNetworkInfoDefinitionValues = schema_utils_1.Type.Omit(exports.EthereumNetworkInfo, [
    'minFee',
    'maxFee',
    'defaultFees',
    'minPriorityFee',
    'blockTime',
]);
exports.MiscNetworkInfo = schema_utils_1.Type.Intersect([
    Common,
    schema_utils_1.Type.Object({
        type: schema_utils_1.Type.Union([schema_utils_1.Type.Literal('misc'), schema_utils_1.Type.Literal('nem')]),
        curve: schema_utils_1.Type.String(),
        network: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
    }),
]);
exports.CoinInfo = schema_utils_1.Type.Union([exports.BitcoinNetworkInfo, exports.EthereumNetworkInfo, exports.MiscNetworkInfo]);
//# sourceMappingURL=coinInfo.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/device.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeviceUniquePath = void 0;
const DeviceUniquePath = (id) => id;
exports.DeviceUniquePath = DeviceUniquePath;
//# sourceMappingURL=device.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/fees.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectFeeLevel = exports.FeeLevel = exports.FeeInfo = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
exports.FeeInfo = schema_utils_1.Type.Object({
    blockTime: schema_utils_1.Type.Number(),
    minFee: schema_utils_1.Type.Number(),
    maxFee: schema_utils_1.Type.Number(),
    minPriorityFee: schema_utils_1.Type.Number(),
    dustLimit: schema_utils_1.Type.Number(),
});
exports.FeeLevel = schema_utils_1.Type.Object({
    label: schema_utils_1.Type.Union([
        schema_utils_1.Type.Literal('high'),
        schema_utils_1.Type.Literal('normal'),
        schema_utils_1.Type.Literal('economy'),
        schema_utils_1.Type.Literal('low'),
        schema_utils_1.Type.Literal('custom'),
    ]),
    blocks: schema_utils_1.Type.Number(),
    feePerUnit: schema_utils_1.Type.String(),
    feePerTx: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    feeLimit: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    baseFeePerGas: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    maxFeePerGas: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    maxPriorityFeePerGas: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
});
exports.SelectFeeLevel = schema_utils_1.Type.Union([
    schema_utils_1.Type.Object({
        name: schema_utils_1.Type.String(),
        fee: schema_utils_1.Type.Literal('0'),
        feePerByte: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
        blocks: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
        disabled: schema_utils_1.Type.Literal(true),
    }),
    schema_utils_1.Type.Object({
        name: schema_utils_1.Type.String(),
        fee: schema_utils_1.Type.String(),
        feePerByte: schema_utils_1.Type.String(),
        blocks: schema_utils_1.Type.Number(),
        minutes: schema_utils_1.Type.Number(),
        total: schema_utils_1.Type.String(),
    }),
]);
//# sourceMappingURL=fees.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/firmware.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntermediaryVersion = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
exports.IntermediaryVersion = schema_utils_1.Type.Union([schema_utils_1.Type.Literal(1), schema_utils_1.Type.Literal(2), schema_utils_1.Type.Literal(3)]);
//# sourceMappingURL=firmware.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FirmwareType = void 0;
const tslib_1 = __webpack_require__("./node_modules/tslib/tslib.es6.mjs");
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/api/index.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/account.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/coinInfo.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/device.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/fees.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/firmware.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/params.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/settings.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/api/cardano/index.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/api/bitcoin/index.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/api/eos/index.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/api/ripple/index.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/api/ethereum/index.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/api/solana/index.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/api/stellar/index.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/connect/lib/types/api/tezos/index.js"), exports);
var device_utils_1 = __webpack_require__("./node_modules/@trezor/device-utils/lib/index.js");
Object.defineProperty(exports, "FirmwareType", ({ enumerable: true, get: function () { return device_utils_1.FirmwareType; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/params.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PublicKey = exports.GetPublicKey = exports.GetAddress = exports.DerivationPath = exports.Bundle = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
const Bundle = (type) => schema_utils_1.Type.Object({ bundle: schema_utils_1.Type.Array(type, { minItems: 1 }) });
exports.Bundle = Bundle;
exports.DerivationPath = schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Array(schema_utils_1.Type.Number())], {
    description: 'Derivation Path (BIP32).',
    $id: 'DerivationPath',
});
exports.GetAddress = schema_utils_1.Type.Object({
    path: exports.DerivationPath,
    address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    showOnTrezor: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean({ default: true })),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    useEventListener: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
});
exports.GetPublicKey = schema_utils_1.Type.Object({
    path: exports.DerivationPath,
    showOnTrezor: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    suppressBackupWarning: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
});
exports.PublicKey = schema_utils_1.Type.Object({
    publicKey: schema_utils_1.Type.String(),
    path: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    serializedPath: schema_utils_1.Type.String(),
});
//# sourceMappingURL=params.js.map

/***/ }),

/***/ "./node_modules/@trezor/connect/lib/types/settings.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=settings.js.map

/***/ }),

/***/ "./node_modules/@trezor/device-utils/lib/bootloaderUtils.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBootloaderVersion = exports.getBootloaderHash = void 0;
const modeUtils_1 = __webpack_require__("./node_modules/@trezor/device-utils/lib/modeUtils.js");
const getBootloaderHash = (device) => device?.features?.bootloader_hash || '';
exports.getBootloaderHash = getBootloaderHash;
const getBootloaderVersion = (device) => {
    if (!device?.features) {
        return '';
    }
    const { features } = device;
    if ((0, modeUtils_1.isDeviceInBootloaderMode)(device) && features.major_version) {
        return `${features.major_version}.${features.minor_version}.${features.patch_version}`;
    }
    return '';
};
exports.getBootloaderVersion = getBootloaderVersion;
//# sourceMappingURL=bootloaderUtils.js.map

/***/ }),

/***/ "./node_modules/@trezor/device-utils/lib/deviceModelInternal.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeviceModelInternal = void 0;
var DeviceModelInternal;
(function (DeviceModelInternal) {
    DeviceModelInternal["T1B1"] = "T1B1";
    DeviceModelInternal["T2T1"] = "T2T1";
    DeviceModelInternal["T2B1"] = "T2B1";
    DeviceModelInternal["T3B1"] = "T3B1";
    DeviceModelInternal["T3T1"] = "T3T1";
    DeviceModelInternal["T3W1"] = "T3W1";
    DeviceModelInternal["UNKNOWN"] = "UNKNOWN";
})(DeviceModelInternal || (exports.DeviceModelInternal = DeviceModelInternal = {}));
//# sourceMappingURL=deviceModelInternal.js.map

/***/ }),

/***/ "./node_modules/@trezor/device-utils/lib/deviceModelInternalUtils.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getNarrowedDeviceModelInternal = void 0;
const deviceModelInternal_1 = __webpack_require__("./node_modules/@trezor/device-utils/lib/deviceModelInternal.js");
const getNarrowedDeviceModelInternal = (model) => (model === deviceModelInternal_1.DeviceModelInternal.T2B1 ? deviceModelInternal_1.DeviceModelInternal.T3B1 : model);
exports.getNarrowedDeviceModelInternal = getNarrowedDeviceModelInternal;
//# sourceMappingURL=deviceModelInternalUtils.js.map

/***/ }),

/***/ "./node_modules/@trezor/device-utils/lib/firmwareUtils.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isBitcoinOnlyDevice = exports.hasBitcoinOnlyFirmware = exports.getFirmwareVersion = exports.getFirmwareVersionArray = exports.getFirmwareRevision = exports.getFirmwareSource = void 0;
const modeUtils_1 = __webpack_require__("./node_modules/@trezor/device-utils/lib/modeUtils.js");
const types_1 = __webpack_require__("./node_modules/@trezor/device-utils/lib/types.js");
const getFirmwareSource = (device) => {
    if (device?.mode === 'bootloader') {
        return 'NA - bootloader';
    }
    if (device?.authenticityChecks?.firmwareRevision?.success &&
        device?.authenticityChecks?.firmwareHash?.success) {
        return 'official';
    }
    return 'unknown';
};
exports.getFirmwareSource = getFirmwareSource;
const getFirmwareRevision = (device) => device?.features?.revision || '';
exports.getFirmwareRevision = getFirmwareRevision;
const getFirmwareVersionArray = (device) => {
    if (!device?.features) {
        return null;
    }
    const { features } = device;
    if ((0, modeUtils_1.isDeviceInBootloaderMode)(device)) {
        return features.fw_major
            ? [features.fw_major, features.fw_minor, features.fw_patch]
            : null;
    }
    return [features.major_version, features.minor_version, features.patch_version];
};
exports.getFirmwareVersionArray = getFirmwareVersionArray;
const getFirmwareVersion = (device) => {
    if (!device?.features) {
        return '';
    }
    const { features } = device;
    if ((0, modeUtils_1.isDeviceInBootloaderMode)(device)) {
        return features.fw_major
            ? `${features.fw_major}.${features.fw_minor}.${features.fw_patch}`
            : '';
    }
    return `${features.major_version}.${features.minor_version}.${features.patch_version}`;
};
exports.getFirmwareVersion = getFirmwareVersion;
const hasBitcoinOnlyFirmware = (device) => device?.firmwareType === types_1.FirmwareType.BitcoinOnly;
exports.hasBitcoinOnlyFirmware = hasBitcoinOnlyFirmware;
const isBitcoinOnlyDevice = (device) => !!device?.features?.unit_btconly && device?.firmwareType !== types_1.FirmwareType.Universal;
exports.isBitcoinOnlyDevice = isBitcoinOnlyDevice;
//# sourceMappingURL=firmwareUtils.js.map

/***/ }),

/***/ "./node_modules/@trezor/device-utils/lib/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__("./node_modules/tslib/tslib.es6.mjs");
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/device-utils/lib/firmwareUtils.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/device-utils/lib/bootloaderUtils.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/device-utils/lib/modeUtils.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/device-utils/lib/types.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/device-utils/lib/deviceModelInternal.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/device-utils/lib/deviceModelInternalUtils.js"), exports);
tslib_1.__exportStar(__webpack_require__("./node_modules/@trezor/device-utils/lib/models.js"), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/device-utils/lib/modeUtils.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isDeviceInBootloaderMode = void 0;
const isDeviceInBootloaderMode = (device) => !!device?.features?.bootloader_mode;
exports.isDeviceInBootloaderMode = isDeviceInBootloaderMode;
//# sourceMappingURL=modeUtils.js.map

/***/ }),

/***/ "./node_modules/@trezor/device-utils/lib/models.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.models = void 0;
const safe3Model = {
    name: 'Trezor Safe 3',
    colors: {
        '1': 'Cosmic Black',
        '2': 'Stellar Silver',
        '3': 'Solar Gold',
        '4': 'Galactic Rose',
        '5': 'Bitcoin Orange',
    },
};
exports.models = {
    UNKNOWN: {
        name: 'Unknown',
        colors: safe3Model.colors,
    },
    T1B1: {
        name: 'Trezor Model One',
        colors: {},
    },
    T2T1: {
        name: 'Trezor Model T',
        colors: {},
    },
    T2B1: safe3Model,
    T3B1: safe3Model,
    T3T1: {
        name: 'Trezor Safe 5',
        colors: {
            '1': 'Black Graphite',
            '2': 'Violet Ore',
            '3': 'Green Beryl',
            '4': 'Bitcoin Orange',
            '5': 'Freedom Edition',
        },
    },
    T3W1: {
        name: 'Trezor Safe 7',
        colors: {
            '1': 'Fantastic Ethereum',
            '2': 'Lunatic Dogecoin',
            '3': 'Galactic Litecoin',
            '4': 'Majestic Bitcoin',
        },
    },
};
//# sourceMappingURL=models.js.map

/***/ }),

/***/ "./node_modules/@trezor/device-utils/lib/types.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FirmwareType = void 0;
var FirmwareType;
(function (FirmwareType) {
    FirmwareType["BitcoinOnly"] = "bitcoin-only";
    FirmwareType["Universal"] = "universal";
})(FirmwareType || (exports.FirmwareType = FirmwareType = {}));
//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/@trezor/protobuf/lib/decode.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.decodeMessage = exports.decode = void 0;
const utils_1 = __webpack_require__("./node_modules/@trezor/protobuf/lib/utils.js");
const transform = (field, value) => {
    if ((0, utils_1.isPrimitiveField)(field.type)) {
        if (field.optional && typeof value === 'undefined') {
            return null;
        }
        if (field.type === 'bytes') {
            return Buffer.from(value).toString('hex');
        }
        if (field.long) {
            if (Number.isSafeInteger(value.toNumber())) {
                return value.toNumber();
            }
            return value.toString();
        }
        return value;
    }
    if ('valuesById' in field.resolvedType) {
        return field.resolvedType.valuesById[value];
    }
    if (field.resolvedType.fields) {
        return messageToJSON(value, field.resolvedType.fields);
    }
    throw new Error(`transport: decode: case not handled: ${field}`);
};
function messageToJSON(MessageParam, fields) {
    if (!MessageParam) {
        return {};
    }
    const { ...message } = MessageParam;
    const res = {};
    Object.keys(fields).forEach(key => {
        const field = fields[key];
        const value = message[key];
        if (field.repeated) {
            res[key] = value.map((v) => transform(field, v));
        }
        else {
            res[key] = transform(field, value);
        }
    });
    return res;
}
const decode = (MessageParam, data) => {
    const decoded = MessageParam.decode(new Uint8Array(data));
    return messageToJSON(decoded, decoded.$type.fields);
};
exports.decode = decode;
const decodeMessage = (messages, messageType, data) => {
    const { Message, messageName } = (0, utils_1.createMessageFromType)(messages, messageType);
    const message = (0, exports.decode)(Message, data);
    return { type: messageName, message };
};
exports.decodeMessage = decodeMessage;
//# sourceMappingURL=decode.js.map

/***/ }),

/***/ "./node_modules/@trezor/protobuf/lib/encode.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.encodeMessage = exports.encode = void 0;
exports.patch = patch;
const light_1 = __webpack_require__("./node_modules/protobufjs/light.js");
const utils_1 = __webpack_require__("./node_modules/@trezor/protobuf/lib/utils.js");
const transform = (fieldType, value) => {
    if (fieldType === 'bytes') {
        if (typeof value === 'string' && !value)
            return value;
        return Buffer.from(value, 'hex');
    }
    if (typeof value === 'number' && !Number.isSafeInteger(value)) {
        throw new RangeError('field value is not within safe integer range');
    }
    return value;
};
function patch(Message, payload) {
    const patched = {};
    if (!Message.fields) {
        return patched;
    }
    Object.keys(Message.fields).forEach(key => {
        const field = Message.fields[key];
        const value = payload[key];
        if (typeof value === 'undefined') {
            return;
        }
        if ((0, utils_1.isPrimitiveField)(field.type)) {
            if (field.repeated) {
                patched[key] = value.map((v) => transform(field.type, v));
            }
            else {
                patched[key] = transform(field.type, value);
            }
            return;
        }
        if (field.repeated) {
            const fieldType = Message.lookupTypeOrEnum(field.type);
            if (fieldType instanceof light_1.Enum) {
                patched[key] = value;
            }
            else {
                patched[key] = value.map((v) => patch(fieldType, v));
            }
        }
        else if (typeof value === 'object' && value !== null) {
            const RefMessage = Message.lookupType(field.type);
            patched[key] = patch(RefMessage, value);
        }
        else if (typeof value === 'number') {
            const RefMessage = Message.lookupEnum(field.type);
            patched[key] = RefMessage.values[value];
        }
        else {
            patched[key] = value;
        }
    });
    return patched;
}
const encode = (Message, data) => {
    const payload = patch(Message, data);
    const message = Message.fromObject(payload);
    const bytes = Message.encode(message).finish();
    return Buffer.from(bytes);
};
exports.encode = encode;
const encodeMessage = (messages, messageName, data) => {
    const { Message, messageType } = (0, utils_1.createMessageFromName)(messages, messageName);
    const message = (0, exports.encode)(Message, data);
    return { messageType, message };
};
exports.encodeMessage = encodeMessage;
//# sourceMappingURL=encode.js.map

/***/ }),

/***/ "./node_modules/@trezor/protobuf/lib/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MessagesSchema = exports.loadDefinitions = exports.Messages = exports.encodeMessage = exports.decodeMessage = exports.parseConfigure = void 0;
const tslib_1 = __webpack_require__("./node_modules/tslib/tslib.es6.mjs");
const long_1 = tslib_1.__importDefault(__webpack_require__("./node_modules/long/umd/index.js"));
const protobuf = tslib_1.__importStar(__webpack_require__("./node_modules/protobufjs/light.js"));
const decode_1 = __webpack_require__("./node_modules/@trezor/protobuf/lib/decode.js");
const encode_1 = __webpack_require__("./node_modules/@trezor/protobuf/lib/encode.js");
const utils_1 = __webpack_require__("./node_modules/@trezor/protobuf/lib/utils.js");
_a = (() => {
    protobuf.util.Long = long_1.default;
    protobuf.configure();
    return { parseConfigure: utils_1.parseConfigure, decodeMessage: decode_1.decodeMessage, encodeMessage: encode_1.encodeMessage };
})(), exports.parseConfigure = _a.parseConfigure, exports.decodeMessage = _a.decodeMessage, exports.encodeMessage = _a.encodeMessage;
exports.Messages = tslib_1.__importStar(__webpack_require__("./node_modules/@trezor/protobuf/lib/messages.js"));
var load_definitions_1 = __webpack_require__("./node_modules/@trezor/protobuf/lib/load-definitions.js");
Object.defineProperty(exports, "loadDefinitions", ({ enumerable: true, get: function () { return load_definitions_1.loadDefinitions; } }));
exports.MessagesSchema = tslib_1.__importStar(__webpack_require__("./node_modules/@trezor/protobuf/lib/messages-schema.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/protobuf/lib/load-definitions.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadDefinitions = void 0;
const loadDefinitions = async (messages, packageName, packageLoader) => {
    try {
        const pkg = messages.lookup(packageName);
        if (pkg) {
            return;
        }
    }
    catch {
    }
    let enumType;
    try {
        enumType = messages.lookupEnum('MessageType');
    }
    catch {
    }
    const packageMessages = await packageLoader();
    const pkg = messages.define(packageName, packageMessages);
    let packageEnumType;
    try {
        packageEnumType = pkg.lookupEnum('MessageType');
    }
    catch {
    }
    if (enumType && packageEnumType) {
        try {
            Object.keys(packageEnumType.values).forEach(key => {
                enumType.add(key, packageEnumType.values[key]);
            });
            pkg.remove(packageEnumType);
        }
        catch (e) {
            messages.remove(pkg);
            throw e;
        }
    }
};
exports.loadDefinitions = loadDefinitions;
//# sourceMappingURL=load-definitions.js.map

/***/ }),

/***/ "./node_modules/@trezor/protobuf/lib/messages-schema.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TxAckResponse = exports.TxAckPaymentRequest = exports.PaymentRequestMemo = exports.CoinPurchaseMemo = exports.RefundMemo = exports.TextMemo = exports.PrevOutput = exports.PrevInput = exports.PrevTx = exports.TxOutput = exports.TxOutputType = exports.ChangeOutputScriptType = exports.TxOutputBinType = exports.TxInput = exports.TxInputType = exports.InternalInputScriptType = exports.TxRequest = exports.TxRequestSerializedType = exports.TxRequestDetailsType = exports.RequestType = exports.EnumEnum_RequestType = exports.Enum_RequestType = exports.SignTx = exports.CoinJoinRequest = exports.VerifyMessage = exports.MessageSignature = exports.SignMessage = exports.OwnershipId = exports.GetOwnershipId = exports.Address = exports.GetAddress = exports.PublicKey = exports.GetPublicKey = exports.MultisigRedeemScriptType = exports.HDNodePathType = exports.HDNodeType = exports.EnumMultisigPubkeysOrder = exports.MultisigPubkeysOrder = exports.EnumAmountUnit = exports.AmountUnit = exports.EnumDecredStakingSpendType = exports.DecredStakingSpendType = exports.OutputScriptType = exports.EnumEnum_OutputScriptType = exports.Enum_OutputScriptType = exports.InputScriptType = exports.EnumEnum_InputScriptType = exports.Enum_InputScriptType = exports.EnumDeviceModelInternal = exports.DeviceModelInternal = void 0;
exports.CardanoGetAddress = exports.CardanoAddressParametersType = exports.CardanoNativeScriptHash = exports.CardanoGetNativeScriptHash = exports.CardanoNativeScript = exports.CardanoBlockchainPointerType = exports.EnumCardanoTxWitnessType = exports.CardanoTxWitnessType = exports.EnumCardanoTxSigningMode = exports.CardanoTxSigningMode = exports.EnumCardanoCVoteRegistrationFormat = exports.CardanoCVoteRegistrationFormat = exports.EnumCardanoTxAuxiliaryDataSupplementType = exports.CardanoTxAuxiliaryDataSupplementType = exports.EnumCardanoPoolRelayType = exports.CardanoPoolRelayType = exports.EnumCardanoDRepType = exports.CardanoDRepType = exports.EnumCardanoCertificateType = exports.CardanoCertificateType = exports.EnumCardanoTxOutputSerializationFormat = exports.CardanoTxOutputSerializationFormat = exports.EnumCardanoNativeScriptHashDisplayFormat = exports.CardanoNativeScriptHashDisplayFormat = exports.EnumCardanoNativeScriptType = exports.CardanoNativeScriptType = exports.EnumCardanoAddressType = exports.CardanoAddressType = exports.EnumCardanoDerivationType = exports.CardanoDerivationType = exports.ProdTestT1 = exports.FirmwareUpload = exports.FirmwareRequest = exports.FirmwareErase = exports.BleUnpair = exports.AuthorizeCoinJoin = exports.OwnershipProof = exports.GetOwnershipProof = exports.TxAckPrevExtraData = exports.TxAckPrevExtraDataWrapper = exports.TxAckPrevOutput = exports.TxAckPrevOutputWrapper = exports.TxAckPrevInput = exports.TxAckPrevInputWrapper = exports.TxAckPrevMeta = exports.TxAckOutput = exports.TxAckOutputWrapper = exports.TxAckInput = exports.TxAckInputWrapper = exports.TxAck = void 0;
exports.Deprecated_PassphraseStateAck = exports.Deprecated_PassphraseStateRequest = exports.PassphraseAck = exports.PassphraseRequest = exports.PinMatrixAck = exports.PinMatrixRequest = exports.PinMatrixRequestType = exports.EnumEnum_PinMatrixRequestType = exports.Enum_PinMatrixRequestType = exports.ButtonAck = exports.ButtonRequest = exports.ButtonRequestType = exports.EnumEnum_ButtonRequestType = exports.Enum_ButtonRequestType = exports.Failure = exports.FailureType = exports.EnumEnum_FailureType = exports.Enum_FailureType = exports.Success = exports.CardanoSignTxFinished = exports.CardanoTxBodyHash = exports.CardanoTxHostAck = exports.CardanoTxWitnessResponse = exports.CardanoTxWitnessRequest = exports.CardanoTxAuxiliaryDataSupplement = exports.CardanoTxItemAck = exports.CardanoTxReferenceInput = exports.CardanoTxRequiredSigner = exports.CardanoTxCollateralInput = exports.CardanoTxMint = exports.CardanoTxAuxiliaryData = exports.CardanoCVoteRegistrationParametersType = exports.CardanoCVoteRegistrationDelegation = exports.CardanoTxWithdrawal = exports.CardanoTxCertificate = exports.CardanoDRep = exports.CardanoPoolParametersType = exports.CardanoPoolMetadataType = exports.CardanoPoolRelayParameters = exports.CardanoPoolOwner = exports.CardanoTxReferenceScriptChunk = exports.CardanoTxInlineDatumChunk = exports.CardanoToken = exports.CardanoAssetGroup = exports.CardanoTxOutput = exports.CardanoTxInput = exports.CardanoSignTxInit = exports.CardanoPublicKey = exports.CardanoGetPublicKey = exports.CardanoAddress = void 0;
exports.EosActionUnlinkAuth = exports.EosActionLinkAuth = exports.EosActionDeleteAuth = exports.EosActionUpdateAuth = exports.EosActionVoteProducer = exports.EosActionSellRam = exports.EosActionBuyRamBytes = exports.EosActionBuyRam = exports.EosActionRefund = exports.EosActionUndelegate = exports.EosActionDelegate = exports.EosActionTransfer = exports.EosActionCommon = exports.EosAuthorization = exports.EosAuthorizationWait = exports.EosAuthorizationAccount = exports.EosAuthorizationKey = exports.EosPermissionLevel = exports.EosAsset = exports.EosTxActionRequest = exports.EosSignTx = exports.EosTxHeader = exports.EosPublicKey = exports.EosGetPublicKey = exports.SolanaTokenInfo = exports.EthereumTokenInfo = exports.EthereumNetworkInfo = exports.EnumDefinitionType = exports.DefinitionType = exports.DebugLinkGcInfo = exports.DebugLinkGcInfoItem = exports.DebugLinkGetGcInfo = exports.DebugLinkOptigaSetSecMax = exports.DebugLinkResetDebugEvents = exports.DebugLinkToggleThpPairingDialog = exports.DebugLinkPairingInfo = exports.DebugLinkGetPairingInfo = exports.EnumDebugWaitType = exports.DebugWaitType = exports.EnumDebugPhysicalButton = exports.DebugPhysicalButton = exports.EnumDebugButton = exports.DebugButton = exports.ECDHSessionKey = exports.GetECDHSessionKey = exports.SignedIdentity = exports.SignIdentity = exports.IdentityType = exports.CipheredKeyValue = exports.CipherKeyValue = void 0;
exports.EnumEnum_Capability = exports.Enum_Capability = exports.RecoveryStatus = exports.EnumEnum_RecoveryStatus = exports.Enum_RecoveryStatus = exports.BackupAvailability = exports.EnumEnum_BackupAvailability = exports.Enum_BackupAvailability = exports.GetFeatures = exports.Initialize = exports.HomescreenFormat = exports.EnumEnum_HomescreenFormat = exports.Enum_HomescreenFormat = exports.DisplayRotation = exports.EnumEnum_DisplayRotation = exports.Enum_DisplayRotation = exports.SafetyCheckLevel = exports.EnumEnum_SafetyCheckLevel = exports.Enum_SafetyCheckLevel = exports.BackupType = exports.EnumEnum_BackupType = exports.Enum_BackupType = exports.EthereumTypedDataSignature = exports.EthereumSignTypedHash = exports.EthereumVerifyMessage = exports.EthereumMessageSignature = exports.EthereumSignMessage = exports.EthereumTxAck = exports.EthereumTxRequest = exports.EthereumSignTxEIP1559 = exports.EthereumAccessList = exports.EthereumSignTx = exports.EthereumAddress = exports.EthereumGetAddress = exports.EthereumPublicKey = exports.EthereumGetPublicKey = exports.EthereumTypedDataValueAck = exports.EthereumTypedDataValueRequest = exports.EthereumTypedDataStructAck = exports.EthereumStructMember = exports.EthereumFieldType = exports.EnumEthereumDataType = exports.EthereumDataType = exports.EthereumTypedDataStructRequest = exports.EthereumSignTypedData = exports.EthereumDefinitions = exports.EosSignedTx = exports.EosTxActionAck = exports.EosActionUnknown = exports.EosActionNewAccount = void 0;
exports.BootCommand = exports.CancelAuthorization = exports.PreauthorizedRequest = exports.DoPreauthorized = exports.NextU2FCounter = exports.GetNextU2FCounter = exports.SetU2FCounter = exports.WordAck = exports.WordRequest = exports.WordRequestType = exports.EnumEnum_WordRequestType = exports.Enum_WordRequestType = exports.EntropyCheckContinue = exports.EntropyCheckReady = exports.EntropyAck = exports.EntropyRequest = exports.BackupDevice = exports.Slip39Group = exports.ResetDevice = exports.LoadDevice = exports.WipeDevice = exports.AuthenticityProof = exports.AuthenticateDevice = exports.FirmwareHash = exports.GetFirmwareHash = exports.Entropy = exports.GetEntropy = exports.Cancel = exports.Ping = exports.SdProtect = exports.EnumSdProtectOperationType = exports.SdProtectOperationType = exports.ChangeWipeCode = exports.ChangePin = exports.ApplyFlags = exports.DataChunkAck = exports.DataChunkRequest = exports.ChangeLanguage = exports.ApplySettings = exports.EndSession = exports.SetBusy = exports.LockDevice = exports.Features = exports.RecoveryDevice = exports.RecoveryType = exports.EnumEnum_RecoveryType = exports.Enum_RecoveryType = exports.EnumRecoveryDeviceInputMethod = exports.RecoveryDeviceInputMethod = exports.Capability = void 0;
exports.StellarGetAddress = exports.StellarAsset = exports.EnumStellarAssetType = exports.StellarAssetType = exports.SolanaTxSignature = exports.SolanaSignTx = exports.SolanaTxAdditionalInfo = exports.SolanaTxTokenAccountInfo = exports.SolanaAddress = exports.SolanaGetAddress = exports.SolanaPublicKey = exports.SolanaGetPublicKey = exports.RippleSignedTx = exports.RippleSignTx = exports.RipplePayment = exports.RippleAddress = exports.RippleGetAddress = exports.NEMDecryptedMessage = exports.NEMDecryptMessage = exports.NEMSignedTx = exports.NEMSignTx = exports.NEMImportanceTransfer = exports.EnumNEMImportanceTransferMode = exports.NEMImportanceTransferMode = exports.NEMAggregateModification = exports.NEMCosignatoryModification = exports.EnumNEMModificationType = exports.NEMModificationType = exports.NEMMosaicSupplyChange = exports.EnumNEMSupplyChangeType = exports.NEMSupplyChangeType = exports.NEMMosaicCreation = exports.NEMMosaicDefinition = exports.EnumNEMMosaicLevy = exports.NEMMosaicLevy = exports.NEMProvisionNamespace = exports.NEMTransfer = exports.NEMMosaic = exports.NEMTransactionCommon = exports.NEMAddress = exports.NEMGetAddress = exports.SetBrightness = exports.UnlockBootloader = exports.ShowDeviceTutorial = exports.UnlockedPathRequest = exports.UnlockPath = exports.Nonce = exports.GetNonce = exports.RebootToBootloader = exports.EnumBootCommand = void 0;
exports.MessageType = exports.TezosSignedTx = exports.TezosSignTx = exports.TezosBallotOp = exports.EnumTezosBallotType = exports.TezosBallotType = exports.TezosProposalOp = exports.TezosDelegationOp = exports.TezosOriginationOp = exports.TezosTransactionOp = exports.TezosParametersManager = exports.TezosManagerTransfer = exports.TezosRevealOp = exports.TezosContractID = exports.EnumTezosContractType = exports.TezosContractType = exports.TezosPublicKey = exports.TezosGetPublicKey = exports.TezosAddress = exports.TezosGetAddress = exports.StellarSignedTx = exports.StellarClaimClaimableBalanceOp = exports.StellarBumpSequenceOp = exports.StellarManageDataOp = exports.StellarAccountMergeOp = exports.StellarAllowTrustOp = exports.StellarChangeTrustOp = exports.StellarSetOptionsOp = exports.EnumStellarSignerType = exports.StellarSignerType = exports.StellarCreatePassiveSellOfferOp = exports.StellarManageBuyOfferOp = exports.StellarManageSellOfferOp = exports.StellarPathPaymentStrictSendOp = exports.StellarPathPaymentStrictReceiveOp = exports.StellarCreateAccountOp = exports.StellarPaymentOp = exports.StellarTxOpRequest = exports.StellarSignTx = exports.EnumStellarMemoType = exports.StellarMemoType = exports.StellarAddress = void 0;
const schema_utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/index.js");
var DeviceModelInternal;
(function (DeviceModelInternal) {
    DeviceModelInternal["T1B1"] = "T1B1";
    DeviceModelInternal["T2T1"] = "T2T1";
    DeviceModelInternal["T2B1"] = "T2B1";
    DeviceModelInternal["T3B1"] = "T3B1";
    DeviceModelInternal["T3T1"] = "T3T1";
    DeviceModelInternal["T3W1"] = "T3W1";
    DeviceModelInternal["UNKNOWN"] = "UNKNOWN";
})(DeviceModelInternal || (exports.DeviceModelInternal = DeviceModelInternal = {}));
exports.EnumDeviceModelInternal = schema_utils_1.Type.Enum(DeviceModelInternal);
var Enum_InputScriptType;
(function (Enum_InputScriptType) {
    Enum_InputScriptType[Enum_InputScriptType["SPENDADDRESS"] = 0] = "SPENDADDRESS";
    Enum_InputScriptType[Enum_InputScriptType["SPENDMULTISIG"] = 1] = "SPENDMULTISIG";
    Enum_InputScriptType[Enum_InputScriptType["EXTERNAL"] = 2] = "EXTERNAL";
    Enum_InputScriptType[Enum_InputScriptType["SPENDWITNESS"] = 3] = "SPENDWITNESS";
    Enum_InputScriptType[Enum_InputScriptType["SPENDP2SHWITNESS"] = 4] = "SPENDP2SHWITNESS";
    Enum_InputScriptType[Enum_InputScriptType["SPENDTAPROOT"] = 5] = "SPENDTAPROOT";
})(Enum_InputScriptType || (exports.Enum_InputScriptType = Enum_InputScriptType = {}));
exports.EnumEnum_InputScriptType = schema_utils_1.Type.Enum(Enum_InputScriptType);
exports.InputScriptType = schema_utils_1.Type.KeyOfEnum(Enum_InputScriptType, { $id: 'InputScriptType' });
var Enum_OutputScriptType;
(function (Enum_OutputScriptType) {
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOADDRESS"] = 0] = "PAYTOADDRESS";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOSCRIPTHASH"] = 1] = "PAYTOSCRIPTHASH";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOMULTISIG"] = 2] = "PAYTOMULTISIG";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOOPRETURN"] = 3] = "PAYTOOPRETURN";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOWITNESS"] = 4] = "PAYTOWITNESS";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOP2SHWITNESS"] = 5] = "PAYTOP2SHWITNESS";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOTAPROOT"] = 6] = "PAYTOTAPROOT";
})(Enum_OutputScriptType || (exports.Enum_OutputScriptType = Enum_OutputScriptType = {}));
exports.EnumEnum_OutputScriptType = schema_utils_1.Type.Enum(Enum_OutputScriptType);
exports.OutputScriptType = schema_utils_1.Type.KeyOfEnum(Enum_OutputScriptType, { $id: 'OutputScriptType' });
var DecredStakingSpendType;
(function (DecredStakingSpendType) {
    DecredStakingSpendType[DecredStakingSpendType["SSGen"] = 0] = "SSGen";
    DecredStakingSpendType[DecredStakingSpendType["SSRTX"] = 1] = "SSRTX";
})(DecredStakingSpendType || (exports.DecredStakingSpendType = DecredStakingSpendType = {}));
exports.EnumDecredStakingSpendType = schema_utils_1.Type.Enum(DecredStakingSpendType);
var AmountUnit;
(function (AmountUnit) {
    AmountUnit[AmountUnit["BITCOIN"] = 0] = "BITCOIN";
    AmountUnit[AmountUnit["MILLIBITCOIN"] = 1] = "MILLIBITCOIN";
    AmountUnit[AmountUnit["MICROBITCOIN"] = 2] = "MICROBITCOIN";
    AmountUnit[AmountUnit["SATOSHI"] = 3] = "SATOSHI";
})(AmountUnit || (exports.AmountUnit = AmountUnit = {}));
exports.EnumAmountUnit = schema_utils_1.Type.Enum(AmountUnit);
var MultisigPubkeysOrder;
(function (MultisigPubkeysOrder) {
    MultisigPubkeysOrder[MultisigPubkeysOrder["PRESERVED"] = 0] = "PRESERVED";
    MultisigPubkeysOrder[MultisigPubkeysOrder["LEXICOGRAPHIC"] = 1] = "LEXICOGRAPHIC";
})(MultisigPubkeysOrder || (exports.MultisigPubkeysOrder = MultisigPubkeysOrder = {}));
exports.EnumMultisigPubkeysOrder = schema_utils_1.Type.Enum(MultisigPubkeysOrder);
exports.HDNodeType = schema_utils_1.Type.Object({
    depth: schema_utils_1.Type.Number(),
    fingerprint: schema_utils_1.Type.Number(),
    child_num: schema_utils_1.Type.Number(),
    chain_code: schema_utils_1.Type.String(),
    private_key: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    public_key: schema_utils_1.Type.String(),
}, { $id: 'HDNodeType' });
exports.HDNodePathType = schema_utils_1.Type.Object({
    node: schema_utils_1.Type.Union([exports.HDNodeType, schema_utils_1.Type.String()]),
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
}, { $id: 'HDNodePathType' });
exports.MultisigRedeemScriptType = schema_utils_1.Type.Object({
    pubkeys: schema_utils_1.Type.Array(exports.HDNodePathType),
    signatures: schema_utils_1.Type.Array(schema_utils_1.Type.String()),
    m: schema_utils_1.Type.Number(),
    nodes: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.HDNodeType)),
    address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),
    pubkeys_order: schema_utils_1.Type.Optional(exports.EnumMultisigPubkeysOrder),
}, { $id: 'MultisigRedeemScriptType' });
exports.GetPublicKey = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    ecdsa_curve_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    script_type: schema_utils_1.Type.Optional(exports.InputScriptType),
    ignore_xpub_magic: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'GetPublicKey' });
exports.PublicKey = schema_utils_1.Type.Object({
    node: exports.HDNodeType,
    xpub: schema_utils_1.Type.String(),
    root_fingerprint: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    descriptor: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'PublicKey' });
exports.GetAddress = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),
    script_type: schema_utils_1.Type.Optional(exports.InputScriptType),
    ignore_xpub_magic: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'GetAddress' });
exports.Address = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
    mac: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'Address' });
exports.GetOwnershipId = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),
    script_type: schema_utils_1.Type.Optional(exports.InputScriptType),
}, { $id: 'GetOwnershipId' });
exports.OwnershipId = schema_utils_1.Type.Object({
    ownership_id: schema_utils_1.Type.String(),
}, { $id: 'OwnershipId' });
exports.SignMessage = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    message: schema_utils_1.Type.String(),
    coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    script_type: schema_utils_1.Type.Optional(exports.InputScriptType),
    no_script_type: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'SignMessage' });
exports.MessageSignature = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
    signature: schema_utils_1.Type.String(),
}, { $id: 'MessageSignature' });
exports.VerifyMessage = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
    signature: schema_utils_1.Type.String(),
    message: schema_utils_1.Type.String(),
    coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'VerifyMessage' });
exports.CoinJoinRequest = schema_utils_1.Type.Object({
    fee_rate: schema_utils_1.Type.Number(),
    no_fee_threshold: schema_utils_1.Type.Number(),
    min_registrable_amount: schema_utils_1.Type.Number(),
    mask_public_key: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    signature: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'CoinJoinRequest' });
exports.SignTx = schema_utils_1.Type.Object({
    outputs_count: schema_utils_1.Type.Number(),
    inputs_count: schema_utils_1.Type.Number(),
    coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    version: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    lock_time: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    expiry: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    overwintered: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    version_group_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    timestamp: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    branch_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    amount_unit: schema_utils_1.Type.Optional(exports.EnumAmountUnit),
    decred_staking_ticket: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    serialize: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    coinjoin_request: schema_utils_1.Type.Optional(exports.CoinJoinRequest),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'SignTx' });
var Enum_RequestType;
(function (Enum_RequestType) {
    Enum_RequestType[Enum_RequestType["TXINPUT"] = 0] = "TXINPUT";
    Enum_RequestType[Enum_RequestType["TXOUTPUT"] = 1] = "TXOUTPUT";
    Enum_RequestType[Enum_RequestType["TXMETA"] = 2] = "TXMETA";
    Enum_RequestType[Enum_RequestType["TXFINISHED"] = 3] = "TXFINISHED";
    Enum_RequestType[Enum_RequestType["TXEXTRADATA"] = 4] = "TXEXTRADATA";
    Enum_RequestType[Enum_RequestType["TXORIGINPUT"] = 5] = "TXORIGINPUT";
    Enum_RequestType[Enum_RequestType["TXORIGOUTPUT"] = 6] = "TXORIGOUTPUT";
    Enum_RequestType[Enum_RequestType["TXPAYMENTREQ"] = 7] = "TXPAYMENTREQ";
})(Enum_RequestType || (exports.Enum_RequestType = Enum_RequestType = {}));
exports.EnumEnum_RequestType = schema_utils_1.Type.Enum(Enum_RequestType);
exports.RequestType = schema_utils_1.Type.KeyOfEnum(Enum_RequestType, { $id: 'RequestType' });
exports.TxRequestDetailsType = schema_utils_1.Type.Object({
    request_index: schema_utils_1.Type.Number(),
    tx_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    extra_data_len: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    extra_data_offset: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'TxRequestDetailsType' });
exports.TxRequestSerializedType = schema_utils_1.Type.Object({
    signature_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    signature: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    serialized_tx: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'TxRequestSerializedType' });
exports.TxRequest = schema_utils_1.Type.Object({
    request_type: exports.RequestType,
    details: exports.TxRequestDetailsType,
    serialized: schema_utils_1.Type.Optional(exports.TxRequestSerializedType),
}, { $id: 'TxRequest' });
exports.InternalInputScriptType = schema_utils_1.Type.Exclude(exports.InputScriptType, schema_utils_1.Type.Literal('EXTERNAL'), {
    $id: 'InternalInputScriptType',
});
const CommonTxInputType = schema_utils_1.Type.Object({
    prev_hash: schema_utils_1.Type.String(),
    prev_index: schema_utils_1.Type.Number(),
    amount: schema_utils_1.Type.Uint(),
    sequence: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),
    decred_tree: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    orig_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    orig_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    decred_staking_spend: schema_utils_1.Type.Optional(exports.EnumDecredStakingSpendType),
    script_pubkey: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    coinjoin_flags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    script_sig: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    witness: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    ownership_proof: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    commitment_data: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'CommonTxInputType' });
exports.TxInputType = schema_utils_1.Type.Union([
    schema_utils_1.Type.Intersect([
        CommonTxInputType,
        schema_utils_1.Type.Object({
            address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
            script_type: schema_utils_1.Type.Optional(exports.InternalInputScriptType),
        }),
    ]),
    schema_utils_1.Type.Intersect([
        CommonTxInputType,
        schema_utils_1.Type.Object({
            address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
            script_type: schema_utils_1.Type.Literal('EXTERNAL'),
            script_pubkey: schema_utils_1.Type.String(),
        }),
    ]),
], { $id: 'TxInputType' });
exports.TxInput = (0, schema_utils_1.CloneType)(exports.TxInputType, { $id: 'TxInput' });
exports.TxOutputBinType = schema_utils_1.Type.Object({
    amount: schema_utils_1.Type.Uint(),
    script_pubkey: schema_utils_1.Type.String(),
    decred_script_version: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'TxOutputBinType' });
exports.ChangeOutputScriptType = schema_utils_1.Type.Exclude(exports.OutputScriptType, schema_utils_1.Type.Literal('PAYTOOPRETURN'), { $id: 'ChangeOutputScriptType' });
exports.TxOutputType = schema_utils_1.Type.Union([
    schema_utils_1.Type.Object({
        address: schema_utils_1.Type.String(),
        address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
        script_type: schema_utils_1.Type.Literal('PAYTOADDRESS'),
        amount: schema_utils_1.Type.Uint(),
        multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),
        orig_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
        orig_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
        payment_req_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    }),
    schema_utils_1.Type.Object({
        address: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
        address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
        script_type: schema_utils_1.Type.Optional(exports.ChangeOutputScriptType),
        amount: schema_utils_1.Type.Uint(),
        multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),
        orig_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
        orig_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
        payment_req_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    }),
    schema_utils_1.Type.Object({
        address: schema_utils_1.Type.String(),
        address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
        script_type: schema_utils_1.Type.Optional(exports.ChangeOutputScriptType),
        amount: schema_utils_1.Type.Uint(),
        multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),
        orig_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
        orig_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
        payment_req_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    }),
    schema_utils_1.Type.Object({
        address: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
        address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),
        amount: schema_utils_1.Type.Union([schema_utils_1.Type.Literal('0'), schema_utils_1.Type.Literal(0)]),
        op_return_data: schema_utils_1.Type.String(),
        script_type: schema_utils_1.Type.Literal('PAYTOOPRETURN'),
        orig_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
        orig_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
        payment_req_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    }),
], { $id: 'TxOutputType' });
exports.TxOutput = (0, schema_utils_1.CloneType)(exports.TxOutputType, { $id: 'TxOutput' });
exports.PrevTx = schema_utils_1.Type.Object({
    version: schema_utils_1.Type.Number(),
    lock_time: schema_utils_1.Type.Number(),
    inputs_count: schema_utils_1.Type.Number(),
    outputs_count: schema_utils_1.Type.Number(),
    extra_data_len: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    expiry: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    version_group_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    timestamp: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    branch_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'PrevTx' });
exports.PrevInput = schema_utils_1.Type.Object({
    prev_hash: schema_utils_1.Type.String(),
    prev_index: schema_utils_1.Type.Number(),
    script_sig: schema_utils_1.Type.String(),
    sequence: schema_utils_1.Type.Number(),
    decred_tree: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'PrevInput' });
exports.PrevOutput = schema_utils_1.Type.Object({
    amount: schema_utils_1.Type.Uint(),
    script_pubkey: schema_utils_1.Type.String(),
    decred_script_version: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'PrevOutput' });
exports.TextMemo = schema_utils_1.Type.Object({
    text: schema_utils_1.Type.String(),
}, { $id: 'TextMemo' });
exports.RefundMemo = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
    mac: schema_utils_1.Type.String(),
}, { $id: 'RefundMemo' });
exports.CoinPurchaseMemo = schema_utils_1.Type.Object({
    coin_type: schema_utils_1.Type.Number(),
    amount: schema_utils_1.Type.Uint(),
    address: schema_utils_1.Type.String(),
    mac: schema_utils_1.Type.String(),
}, { $id: 'CoinPurchaseMemo' });
exports.PaymentRequestMemo = schema_utils_1.Type.Object({
    text_memo: schema_utils_1.Type.Optional(exports.TextMemo),
    refund_memo: schema_utils_1.Type.Optional(exports.RefundMemo),
    coin_purchase_memo: schema_utils_1.Type.Optional(exports.CoinPurchaseMemo),
}, { $id: 'PaymentRequestMemo' });
exports.TxAckPaymentRequest = schema_utils_1.Type.Object({
    nonce: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    recipient_name: schema_utils_1.Type.String(),
    memos: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.PaymentRequestMemo)),
    amount: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    signature: schema_utils_1.Type.String(),
}, { $id: 'TxAckPaymentRequest' });
exports.TxAckResponse = schema_utils_1.Type.Union([
    schema_utils_1.Type.Object({
        inputs: schema_utils_1.Type.Array(schema_utils_1.Type.Union([exports.TxInputType, exports.PrevInput])),
    }),
    schema_utils_1.Type.Object({
        bin_outputs: schema_utils_1.Type.Array(exports.TxOutputBinType),
    }),
    schema_utils_1.Type.Object({
        outputs: schema_utils_1.Type.Array(exports.TxOutputType),
    }),
    schema_utils_1.Type.Object({
        extra_data: schema_utils_1.Type.String(),
    }),
    schema_utils_1.Type.Object({
        version: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
        lock_time: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
        inputs_cnt: schema_utils_1.Type.Number(),
        outputs_cnt: schema_utils_1.Type.Number(),
        extra_data: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
        extra_data_len: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
        timestamp: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
        version_group_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
        expiry: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
        branch_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    }),
], { $id: 'TxAckResponse' });
exports.TxAck = schema_utils_1.Type.Object({
    tx: exports.TxAckResponse,
}, { $id: 'TxAck' });
exports.TxAckInputWrapper = schema_utils_1.Type.Object({
    input: exports.TxInput,
}, { $id: 'TxAckInputWrapper' });
exports.TxAckInput = schema_utils_1.Type.Object({
    tx: exports.TxAckInputWrapper,
}, { $id: 'TxAckInput' });
exports.TxAckOutputWrapper = schema_utils_1.Type.Object({
    output: exports.TxOutput,
}, { $id: 'TxAckOutputWrapper' });
exports.TxAckOutput = schema_utils_1.Type.Object({
    tx: exports.TxAckOutputWrapper,
}, { $id: 'TxAckOutput' });
exports.TxAckPrevMeta = schema_utils_1.Type.Object({
    tx: exports.PrevTx,
}, { $id: 'TxAckPrevMeta' });
exports.TxAckPrevInputWrapper = schema_utils_1.Type.Object({
    input: exports.PrevInput,
}, { $id: 'TxAckPrevInputWrapper' });
exports.TxAckPrevInput = schema_utils_1.Type.Object({
    tx: exports.TxAckPrevInputWrapper,
}, { $id: 'TxAckPrevInput' });
exports.TxAckPrevOutputWrapper = schema_utils_1.Type.Object({
    output: exports.PrevOutput,
}, { $id: 'TxAckPrevOutputWrapper' });
exports.TxAckPrevOutput = schema_utils_1.Type.Object({
    tx: exports.TxAckPrevOutputWrapper,
}, { $id: 'TxAckPrevOutput' });
exports.TxAckPrevExtraDataWrapper = schema_utils_1.Type.Object({
    extra_data_chunk: schema_utils_1.Type.String(),
}, { $id: 'TxAckPrevExtraDataWrapper' });
exports.TxAckPrevExtraData = schema_utils_1.Type.Object({
    tx: exports.TxAckPrevExtraDataWrapper,
}, { $id: 'TxAckPrevExtraData' });
exports.GetOwnershipProof = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    script_type: schema_utils_1.Type.Optional(exports.InputScriptType),
    multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),
    user_confirmation: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    ownership_ids: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.String())),
    commitment_data: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'GetOwnershipProof' });
exports.OwnershipProof = schema_utils_1.Type.Object({
    ownership_proof: schema_utils_1.Type.String(),
    signature: schema_utils_1.Type.String(),
}, { $id: 'OwnershipProof' });
exports.AuthorizeCoinJoin = schema_utils_1.Type.Object({
    coordinator: schema_utils_1.Type.String(),
    max_rounds: schema_utils_1.Type.Number(),
    max_coordinator_fee_rate: schema_utils_1.Type.Number(),
    max_fee_per_kvbyte: schema_utils_1.Type.Number(),
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    script_type: schema_utils_1.Type.Optional(exports.InputScriptType),
    amount_unit: schema_utils_1.Type.Optional(exports.EnumAmountUnit),
}, { $id: 'AuthorizeCoinJoin' });
exports.BleUnpair = schema_utils_1.Type.Object({
    all: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'BleUnpair' });
exports.FirmwareErase = schema_utils_1.Type.Object({
    length: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'FirmwareErase' });
exports.FirmwareRequest = schema_utils_1.Type.Object({
    offset: schema_utils_1.Type.Number(),
    length: schema_utils_1.Type.Number(),
}, { $id: 'FirmwareRequest' });
exports.FirmwareUpload = schema_utils_1.Type.Object({
    payload: schema_utils_1.Type.Union([schema_utils_1.Type.Buffer(), schema_utils_1.Type.ArrayBuffer()]),
    hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'FirmwareUpload' });
exports.ProdTestT1 = schema_utils_1.Type.Object({
    payload: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'ProdTestT1' });
var CardanoDerivationType;
(function (CardanoDerivationType) {
    CardanoDerivationType[CardanoDerivationType["LEDGER"] = 0] = "LEDGER";
    CardanoDerivationType[CardanoDerivationType["ICARUS"] = 1] = "ICARUS";
    CardanoDerivationType[CardanoDerivationType["ICARUS_TREZOR"] = 2] = "ICARUS_TREZOR";
})(CardanoDerivationType || (exports.CardanoDerivationType = CardanoDerivationType = {}));
exports.EnumCardanoDerivationType = schema_utils_1.Type.Enum(CardanoDerivationType);
var CardanoAddressType;
(function (CardanoAddressType) {
    CardanoAddressType[CardanoAddressType["BASE"] = 0] = "BASE";
    CardanoAddressType[CardanoAddressType["BASE_SCRIPT_KEY"] = 1] = "BASE_SCRIPT_KEY";
    CardanoAddressType[CardanoAddressType["BASE_KEY_SCRIPT"] = 2] = "BASE_KEY_SCRIPT";
    CardanoAddressType[CardanoAddressType["BASE_SCRIPT_SCRIPT"] = 3] = "BASE_SCRIPT_SCRIPT";
    CardanoAddressType[CardanoAddressType["POINTER"] = 4] = "POINTER";
    CardanoAddressType[CardanoAddressType["POINTER_SCRIPT"] = 5] = "POINTER_SCRIPT";
    CardanoAddressType[CardanoAddressType["ENTERPRISE"] = 6] = "ENTERPRISE";
    CardanoAddressType[CardanoAddressType["ENTERPRISE_SCRIPT"] = 7] = "ENTERPRISE_SCRIPT";
    CardanoAddressType[CardanoAddressType["BYRON"] = 8] = "BYRON";
    CardanoAddressType[CardanoAddressType["REWARD"] = 14] = "REWARD";
    CardanoAddressType[CardanoAddressType["REWARD_SCRIPT"] = 15] = "REWARD_SCRIPT";
})(CardanoAddressType || (exports.CardanoAddressType = CardanoAddressType = {}));
exports.EnumCardanoAddressType = schema_utils_1.Type.Enum(CardanoAddressType);
var CardanoNativeScriptType;
(function (CardanoNativeScriptType) {
    CardanoNativeScriptType[CardanoNativeScriptType["PUB_KEY"] = 0] = "PUB_KEY";
    CardanoNativeScriptType[CardanoNativeScriptType["ALL"] = 1] = "ALL";
    CardanoNativeScriptType[CardanoNativeScriptType["ANY"] = 2] = "ANY";
    CardanoNativeScriptType[CardanoNativeScriptType["N_OF_K"] = 3] = "N_OF_K";
    CardanoNativeScriptType[CardanoNativeScriptType["INVALID_BEFORE"] = 4] = "INVALID_BEFORE";
    CardanoNativeScriptType[CardanoNativeScriptType["INVALID_HEREAFTER"] = 5] = "INVALID_HEREAFTER";
})(CardanoNativeScriptType || (exports.CardanoNativeScriptType = CardanoNativeScriptType = {}));
exports.EnumCardanoNativeScriptType = schema_utils_1.Type.Enum(CardanoNativeScriptType);
var CardanoNativeScriptHashDisplayFormat;
(function (CardanoNativeScriptHashDisplayFormat) {
    CardanoNativeScriptHashDisplayFormat[CardanoNativeScriptHashDisplayFormat["HIDE"] = 0] = "HIDE";
    CardanoNativeScriptHashDisplayFormat[CardanoNativeScriptHashDisplayFormat["BECH32"] = 1] = "BECH32";
    CardanoNativeScriptHashDisplayFormat[CardanoNativeScriptHashDisplayFormat["POLICY_ID"] = 2] = "POLICY_ID";
})(CardanoNativeScriptHashDisplayFormat || (exports.CardanoNativeScriptHashDisplayFormat = CardanoNativeScriptHashDisplayFormat = {}));
exports.EnumCardanoNativeScriptHashDisplayFormat = schema_utils_1.Type.Enum(CardanoNativeScriptHashDisplayFormat);
var CardanoTxOutputSerializationFormat;
(function (CardanoTxOutputSerializationFormat) {
    CardanoTxOutputSerializationFormat[CardanoTxOutputSerializationFormat["ARRAY_LEGACY"] = 0] = "ARRAY_LEGACY";
    CardanoTxOutputSerializationFormat[CardanoTxOutputSerializationFormat["MAP_BABBAGE"] = 1] = "MAP_BABBAGE";
})(CardanoTxOutputSerializationFormat || (exports.CardanoTxOutputSerializationFormat = CardanoTxOutputSerializationFormat = {}));
exports.EnumCardanoTxOutputSerializationFormat = schema_utils_1.Type.Enum(CardanoTxOutputSerializationFormat);
var CardanoCertificateType;
(function (CardanoCertificateType) {
    CardanoCertificateType[CardanoCertificateType["STAKE_REGISTRATION"] = 0] = "STAKE_REGISTRATION";
    CardanoCertificateType[CardanoCertificateType["STAKE_DEREGISTRATION"] = 1] = "STAKE_DEREGISTRATION";
    CardanoCertificateType[CardanoCertificateType["STAKE_DELEGATION"] = 2] = "STAKE_DELEGATION";
    CardanoCertificateType[CardanoCertificateType["STAKE_POOL_REGISTRATION"] = 3] = "STAKE_POOL_REGISTRATION";
    CardanoCertificateType[CardanoCertificateType["STAKE_REGISTRATION_CONWAY"] = 7] = "STAKE_REGISTRATION_CONWAY";
    CardanoCertificateType[CardanoCertificateType["STAKE_DEREGISTRATION_CONWAY"] = 8] = "STAKE_DEREGISTRATION_CONWAY";
    CardanoCertificateType[CardanoCertificateType["VOTE_DELEGATION"] = 9] = "VOTE_DELEGATION";
})(CardanoCertificateType || (exports.CardanoCertificateType = CardanoCertificateType = {}));
exports.EnumCardanoCertificateType = schema_utils_1.Type.Enum(CardanoCertificateType);
var CardanoDRepType;
(function (CardanoDRepType) {
    CardanoDRepType[CardanoDRepType["KEY_HASH"] = 0] = "KEY_HASH";
    CardanoDRepType[CardanoDRepType["SCRIPT_HASH"] = 1] = "SCRIPT_HASH";
    CardanoDRepType[CardanoDRepType["ABSTAIN"] = 2] = "ABSTAIN";
    CardanoDRepType[CardanoDRepType["NO_CONFIDENCE"] = 3] = "NO_CONFIDENCE";
})(CardanoDRepType || (exports.CardanoDRepType = CardanoDRepType = {}));
exports.EnumCardanoDRepType = schema_utils_1.Type.Enum(CardanoDRepType);
var CardanoPoolRelayType;
(function (CardanoPoolRelayType) {
    CardanoPoolRelayType[CardanoPoolRelayType["SINGLE_HOST_IP"] = 0] = "SINGLE_HOST_IP";
    CardanoPoolRelayType[CardanoPoolRelayType["SINGLE_HOST_NAME"] = 1] = "SINGLE_HOST_NAME";
    CardanoPoolRelayType[CardanoPoolRelayType["MULTIPLE_HOST_NAME"] = 2] = "MULTIPLE_HOST_NAME";
})(CardanoPoolRelayType || (exports.CardanoPoolRelayType = CardanoPoolRelayType = {}));
exports.EnumCardanoPoolRelayType = schema_utils_1.Type.Enum(CardanoPoolRelayType);
var CardanoTxAuxiliaryDataSupplementType;
(function (CardanoTxAuxiliaryDataSupplementType) {
    CardanoTxAuxiliaryDataSupplementType[CardanoTxAuxiliaryDataSupplementType["NONE"] = 0] = "NONE";
    CardanoTxAuxiliaryDataSupplementType[CardanoTxAuxiliaryDataSupplementType["CVOTE_REGISTRATION_SIGNATURE"] = 1] = "CVOTE_REGISTRATION_SIGNATURE";
})(CardanoTxAuxiliaryDataSupplementType || (exports.CardanoTxAuxiliaryDataSupplementType = CardanoTxAuxiliaryDataSupplementType = {}));
exports.EnumCardanoTxAuxiliaryDataSupplementType = schema_utils_1.Type.Enum(CardanoTxAuxiliaryDataSupplementType);
var CardanoCVoteRegistrationFormat;
(function (CardanoCVoteRegistrationFormat) {
    CardanoCVoteRegistrationFormat[CardanoCVoteRegistrationFormat["CIP15"] = 0] = "CIP15";
    CardanoCVoteRegistrationFormat[CardanoCVoteRegistrationFormat["CIP36"] = 1] = "CIP36";
})(CardanoCVoteRegistrationFormat || (exports.CardanoCVoteRegistrationFormat = CardanoCVoteRegistrationFormat = {}));
exports.EnumCardanoCVoteRegistrationFormat = schema_utils_1.Type.Enum(CardanoCVoteRegistrationFormat);
var CardanoTxSigningMode;
(function (CardanoTxSigningMode) {
    CardanoTxSigningMode[CardanoTxSigningMode["ORDINARY_TRANSACTION"] = 0] = "ORDINARY_TRANSACTION";
    CardanoTxSigningMode[CardanoTxSigningMode["POOL_REGISTRATION_AS_OWNER"] = 1] = "POOL_REGISTRATION_AS_OWNER";
    CardanoTxSigningMode[CardanoTxSigningMode["MULTISIG_TRANSACTION"] = 2] = "MULTISIG_TRANSACTION";
    CardanoTxSigningMode[CardanoTxSigningMode["PLUTUS_TRANSACTION"] = 3] = "PLUTUS_TRANSACTION";
})(CardanoTxSigningMode || (exports.CardanoTxSigningMode = CardanoTxSigningMode = {}));
exports.EnumCardanoTxSigningMode = schema_utils_1.Type.Enum(CardanoTxSigningMode);
var CardanoTxWitnessType;
(function (CardanoTxWitnessType) {
    CardanoTxWitnessType[CardanoTxWitnessType["BYRON_WITNESS"] = 0] = "BYRON_WITNESS";
    CardanoTxWitnessType[CardanoTxWitnessType["SHELLEY_WITNESS"] = 1] = "SHELLEY_WITNESS";
})(CardanoTxWitnessType || (exports.CardanoTxWitnessType = CardanoTxWitnessType = {}));
exports.EnumCardanoTxWitnessType = schema_utils_1.Type.Enum(CardanoTxWitnessType);
exports.CardanoBlockchainPointerType = schema_utils_1.Type.Object({
    block_index: schema_utils_1.Type.Number(),
    tx_index: schema_utils_1.Type.Number(),
    certificate_index: schema_utils_1.Type.Number(),
}, { $id: 'CardanoBlockchainPointerType' });
exports.CardanoNativeScript = schema_utils_1.Type.Recursive(This => schema_utils_1.Type.Object({
    type: exports.EnumCardanoNativeScriptType,
    scripts: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(This)),
    key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    key_path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),
    required_signatures_count: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    invalid_before: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    invalid_hereafter: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
}), { $id: 'CardanoNativeScript' });
exports.CardanoGetNativeScriptHash = schema_utils_1.Type.Object({
    script: exports.CardanoNativeScript,
    display_format: exports.EnumCardanoNativeScriptHashDisplayFormat,
    derivation_type: exports.EnumCardanoDerivationType,
}, { $id: 'CardanoGetNativeScriptHash' });
exports.CardanoNativeScriptHash = schema_utils_1.Type.Object({
    script_hash: schema_utils_1.Type.String(),
}, { $id: 'CardanoNativeScriptHash' });
exports.CardanoAddressParametersType = schema_utils_1.Type.Object({
    address_type: exports.EnumCardanoAddressType,
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    address_n_staking: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    staking_key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    certificate_pointer: schema_utils_1.Type.Optional(exports.CardanoBlockchainPointerType),
    script_payment_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    script_staking_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'CardanoAddressParametersType' });
exports.CardanoGetAddress = schema_utils_1.Type.Object({
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    protocol_magic: schema_utils_1.Type.Number(),
    network_id: schema_utils_1.Type.Number(),
    address_parameters: exports.CardanoAddressParametersType,
    derivation_type: exports.EnumCardanoDerivationType,
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'CardanoGetAddress' });
exports.CardanoAddress = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
}, { $id: 'CardanoAddress' });
exports.CardanoGetPublicKey = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    derivation_type: exports.EnumCardanoDerivationType,
}, { $id: 'CardanoGetPublicKey' });
exports.CardanoPublicKey = schema_utils_1.Type.Object({
    xpub: schema_utils_1.Type.String(),
    node: exports.HDNodeType,
}, { $id: 'CardanoPublicKey' });
exports.CardanoSignTxInit = schema_utils_1.Type.Object({
    signing_mode: exports.EnumCardanoTxSigningMode,
    protocol_magic: schema_utils_1.Type.Number(),
    network_id: schema_utils_1.Type.Number(),
    inputs_count: schema_utils_1.Type.Number(),
    outputs_count: schema_utils_1.Type.Number(),
    fee: schema_utils_1.Type.Uint(),
    ttl: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    certificates_count: schema_utils_1.Type.Number(),
    withdrawals_count: schema_utils_1.Type.Number(),
    has_auxiliary_data: schema_utils_1.Type.Boolean(),
    validity_interval_start: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    witness_requests_count: schema_utils_1.Type.Number(),
    minting_asset_groups_count: schema_utils_1.Type.Number(),
    derivation_type: exports.EnumCardanoDerivationType,
    include_network_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    script_data_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    collateral_inputs_count: schema_utils_1.Type.Number(),
    required_signers_count: schema_utils_1.Type.Number(),
    has_collateral_return: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    total_collateral: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    reference_inputs_count: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    tag_cbor_sets: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'CardanoSignTxInit' });
exports.CardanoTxInput = schema_utils_1.Type.Object({
    prev_hash: schema_utils_1.Type.String(),
    prev_index: schema_utils_1.Type.Number(),
}, { $id: 'CardanoTxInput' });
exports.CardanoTxOutput = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    address_parameters: schema_utils_1.Type.Optional(exports.CardanoAddressParametersType),
    amount: schema_utils_1.Type.Uint(),
    asset_groups_count: schema_utils_1.Type.Number(),
    datum_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    format: schema_utils_1.Type.Optional(exports.EnumCardanoTxOutputSerializationFormat),
    inline_datum_size: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    reference_script_size: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'CardanoTxOutput' });
exports.CardanoAssetGroup = schema_utils_1.Type.Object({
    policy_id: schema_utils_1.Type.String(),
    tokens_count: schema_utils_1.Type.Number(),
}, { $id: 'CardanoAssetGroup' });
exports.CardanoToken = schema_utils_1.Type.Object({
    asset_name_bytes: schema_utils_1.Type.String(),
    amount: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    mint_amount: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint({ allowNegative: true })),
}, { $id: 'CardanoToken' });
exports.CardanoTxInlineDatumChunk = schema_utils_1.Type.Object({
    data: schema_utils_1.Type.String(),
}, { $id: 'CardanoTxInlineDatumChunk' });
exports.CardanoTxReferenceScriptChunk = schema_utils_1.Type.Object({
    data: schema_utils_1.Type.String(),
}, { $id: 'CardanoTxReferenceScriptChunk' });
exports.CardanoPoolOwner = schema_utils_1.Type.Object({
    staking_key_path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),
    staking_key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'CardanoPoolOwner' });
exports.CardanoPoolRelayParameters = schema_utils_1.Type.Object({
    type: exports.EnumCardanoPoolRelayType,
    ipv4_address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    ipv6_address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    host_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    port: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'CardanoPoolRelayParameters' });
exports.CardanoPoolMetadataType = schema_utils_1.Type.Object({
    url: schema_utils_1.Type.String(),
    hash: schema_utils_1.Type.String(),
}, { $id: 'CardanoPoolMetadataType' });
exports.CardanoPoolParametersType = schema_utils_1.Type.Object({
    pool_id: schema_utils_1.Type.String(),
    vrf_key_hash: schema_utils_1.Type.String(),
    pledge: schema_utils_1.Type.Uint(),
    cost: schema_utils_1.Type.Uint(),
    margin_numerator: schema_utils_1.Type.Uint(),
    margin_denominator: schema_utils_1.Type.Uint(),
    reward_account: schema_utils_1.Type.String(),
    metadata: schema_utils_1.Type.Optional(exports.CardanoPoolMetadataType),
    owners_count: schema_utils_1.Type.Number(),
    relays_count: schema_utils_1.Type.Number(),
}, { $id: 'CardanoPoolParametersType' });
exports.CardanoDRep = schema_utils_1.Type.Object({
    type: exports.EnumCardanoDRepType,
    key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    script_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'CardanoDRep' });
exports.CardanoTxCertificate = schema_utils_1.Type.Object({
    type: exports.EnumCardanoCertificateType,
    path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),
    pool: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    pool_parameters: schema_utils_1.Type.Optional(exports.CardanoPoolParametersType),
    script_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    deposit: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    drep: schema_utils_1.Type.Optional(exports.CardanoDRep),
}, { $id: 'CardanoTxCertificate' });
exports.CardanoTxWithdrawal = schema_utils_1.Type.Object({
    path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),
    amount: schema_utils_1.Type.Uint(),
    script_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'CardanoTxWithdrawal' });
exports.CardanoCVoteRegistrationDelegation = schema_utils_1.Type.Object({
    vote_public_key: schema_utils_1.Type.String(),
    weight: schema_utils_1.Type.Uint(),
}, { $id: 'CardanoCVoteRegistrationDelegation' });
exports.CardanoCVoteRegistrationParametersType = schema_utils_1.Type.Object({
    vote_public_key: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    staking_path: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    payment_address_parameters: schema_utils_1.Type.Optional(exports.CardanoAddressParametersType),
    nonce: schema_utils_1.Type.Uint(),
    format: schema_utils_1.Type.Optional(exports.EnumCardanoCVoteRegistrationFormat),
    delegations: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoCVoteRegistrationDelegation)),
    voting_purpose: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    payment_address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'CardanoCVoteRegistrationParametersType' });
exports.CardanoTxAuxiliaryData = schema_utils_1.Type.Object({
    cvote_registration_parameters: schema_utils_1.Type.Optional(exports.CardanoCVoteRegistrationParametersType),
    hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'CardanoTxAuxiliaryData' });
exports.CardanoTxMint = schema_utils_1.Type.Object({
    asset_groups_count: schema_utils_1.Type.Number(),
}, { $id: 'CardanoTxMint' });
exports.CardanoTxCollateralInput = schema_utils_1.Type.Object({
    prev_hash: schema_utils_1.Type.String(),
    prev_index: schema_utils_1.Type.Number(),
}, { $id: 'CardanoTxCollateralInput' });
exports.CardanoTxRequiredSigner = schema_utils_1.Type.Object({
    key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    key_path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),
}, { $id: 'CardanoTxRequiredSigner' });
exports.CardanoTxReferenceInput = schema_utils_1.Type.Object({
    prev_hash: schema_utils_1.Type.String(),
    prev_index: schema_utils_1.Type.Number(),
}, { $id: 'CardanoTxReferenceInput' });
exports.CardanoTxItemAck = schema_utils_1.Type.Object({}, { $id: 'CardanoTxItemAck' });
exports.CardanoTxAuxiliaryDataSupplement = schema_utils_1.Type.Object({
    type: exports.EnumCardanoTxAuxiliaryDataSupplementType,
    auxiliary_data_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    cvote_registration_signature: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'CardanoTxAuxiliaryDataSupplement' });
exports.CardanoTxWitnessRequest = schema_utils_1.Type.Object({
    path: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
}, { $id: 'CardanoTxWitnessRequest' });
exports.CardanoTxWitnessResponse = schema_utils_1.Type.Object({
    type: exports.EnumCardanoTxWitnessType,
    pub_key: schema_utils_1.Type.String(),
    signature: schema_utils_1.Type.String(),
    chain_code: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'CardanoTxWitnessResponse' });
exports.CardanoTxHostAck = schema_utils_1.Type.Object({}, { $id: 'CardanoTxHostAck' });
exports.CardanoTxBodyHash = schema_utils_1.Type.Object({
    tx_hash: schema_utils_1.Type.String(),
}, { $id: 'CardanoTxBodyHash' });
exports.CardanoSignTxFinished = schema_utils_1.Type.Object({}, { $id: 'CardanoSignTxFinished' });
exports.Success = schema_utils_1.Type.Object({
    message: schema_utils_1.Type.String(),
}, { $id: 'Success' });
var Enum_FailureType;
(function (Enum_FailureType) {
    Enum_FailureType[Enum_FailureType["Failure_UnexpectedMessage"] = 1] = "Failure_UnexpectedMessage";
    Enum_FailureType[Enum_FailureType["Failure_ButtonExpected"] = 2] = "Failure_ButtonExpected";
    Enum_FailureType[Enum_FailureType["Failure_DataError"] = 3] = "Failure_DataError";
    Enum_FailureType[Enum_FailureType["Failure_ActionCancelled"] = 4] = "Failure_ActionCancelled";
    Enum_FailureType[Enum_FailureType["Failure_PinExpected"] = 5] = "Failure_PinExpected";
    Enum_FailureType[Enum_FailureType["Failure_PinCancelled"] = 6] = "Failure_PinCancelled";
    Enum_FailureType[Enum_FailureType["Failure_PinInvalid"] = 7] = "Failure_PinInvalid";
    Enum_FailureType[Enum_FailureType["Failure_InvalidSignature"] = 8] = "Failure_InvalidSignature";
    Enum_FailureType[Enum_FailureType["Failure_ProcessError"] = 9] = "Failure_ProcessError";
    Enum_FailureType[Enum_FailureType["Failure_NotEnoughFunds"] = 10] = "Failure_NotEnoughFunds";
    Enum_FailureType[Enum_FailureType["Failure_NotInitialized"] = 11] = "Failure_NotInitialized";
    Enum_FailureType[Enum_FailureType["Failure_PinMismatch"] = 12] = "Failure_PinMismatch";
    Enum_FailureType[Enum_FailureType["Failure_WipeCodeMismatch"] = 13] = "Failure_WipeCodeMismatch";
    Enum_FailureType[Enum_FailureType["Failure_InvalidSession"] = 14] = "Failure_InvalidSession";
    Enum_FailureType[Enum_FailureType["Failure_Busy"] = 15] = "Failure_Busy";
    Enum_FailureType[Enum_FailureType["Failure_ThpUnallocatedSession"] = 16] = "Failure_ThpUnallocatedSession";
    Enum_FailureType[Enum_FailureType["Failure_InvalidProtocol"] = 17] = "Failure_InvalidProtocol";
    Enum_FailureType[Enum_FailureType["Failure_BufferError"] = 18] = "Failure_BufferError";
    Enum_FailureType[Enum_FailureType["Failure_FirmwareError"] = 99] = "Failure_FirmwareError";
})(Enum_FailureType || (exports.Enum_FailureType = Enum_FailureType = {}));
exports.EnumEnum_FailureType = schema_utils_1.Type.Enum(Enum_FailureType);
exports.FailureType = schema_utils_1.Type.KeyOfEnum(Enum_FailureType, { $id: 'FailureType' });
exports.Failure = schema_utils_1.Type.Object({
    code: schema_utils_1.Type.Optional(exports.FailureType),
    message: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'Failure' });
var Enum_ButtonRequestType;
(function (Enum_ButtonRequestType) {
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_Other"] = 1] = "ButtonRequest_Other";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_FeeOverThreshold"] = 2] = "ButtonRequest_FeeOverThreshold";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_ConfirmOutput"] = 3] = "ButtonRequest_ConfirmOutput";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_ResetDevice"] = 4] = "ButtonRequest_ResetDevice";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_ConfirmWord"] = 5] = "ButtonRequest_ConfirmWord";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_WipeDevice"] = 6] = "ButtonRequest_WipeDevice";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_ProtectCall"] = 7] = "ButtonRequest_ProtectCall";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_SignTx"] = 8] = "ButtonRequest_SignTx";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_FirmwareCheck"] = 9] = "ButtonRequest_FirmwareCheck";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_Address"] = 10] = "ButtonRequest_Address";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_PublicKey"] = 11] = "ButtonRequest_PublicKey";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_MnemonicWordCount"] = 12] = "ButtonRequest_MnemonicWordCount";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_MnemonicInput"] = 13] = "ButtonRequest_MnemonicInput";
    Enum_ButtonRequestType[Enum_ButtonRequestType["_Deprecated_ButtonRequest_PassphraseType"] = 14] = "_Deprecated_ButtonRequest_PassphraseType";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_UnknownDerivationPath"] = 15] = "ButtonRequest_UnknownDerivationPath";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_RecoveryHomepage"] = 16] = "ButtonRequest_RecoveryHomepage";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_Success"] = 17] = "ButtonRequest_Success";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_Warning"] = 18] = "ButtonRequest_Warning";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_PassphraseEntry"] = 19] = "ButtonRequest_PassphraseEntry";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_PinEntry"] = 20] = "ButtonRequest_PinEntry";
})(Enum_ButtonRequestType || (exports.Enum_ButtonRequestType = Enum_ButtonRequestType = {}));
exports.EnumEnum_ButtonRequestType = schema_utils_1.Type.Enum(Enum_ButtonRequestType);
exports.ButtonRequestType = schema_utils_1.Type.KeyOfEnum(Enum_ButtonRequestType, {
    $id: 'ButtonRequestType',
});
exports.ButtonRequest = schema_utils_1.Type.Object({
    code: schema_utils_1.Type.Optional(exports.ButtonRequestType),
    pages: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'ButtonRequest' });
exports.ButtonAck = schema_utils_1.Type.Object({}, { $id: 'ButtonAck' });
var Enum_PinMatrixRequestType;
(function (Enum_PinMatrixRequestType) {
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_Current"] = 1] = "PinMatrixRequestType_Current";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_NewFirst"] = 2] = "PinMatrixRequestType_NewFirst";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_NewSecond"] = 3] = "PinMatrixRequestType_NewSecond";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_WipeCodeFirst"] = 4] = "PinMatrixRequestType_WipeCodeFirst";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_WipeCodeSecond"] = 5] = "PinMatrixRequestType_WipeCodeSecond";
})(Enum_PinMatrixRequestType || (exports.Enum_PinMatrixRequestType = Enum_PinMatrixRequestType = {}));
exports.EnumEnum_PinMatrixRequestType = schema_utils_1.Type.Enum(Enum_PinMatrixRequestType);
exports.PinMatrixRequestType = schema_utils_1.Type.KeyOfEnum(Enum_PinMatrixRequestType, {
    $id: 'PinMatrixRequestType',
});
exports.PinMatrixRequest = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Optional(exports.PinMatrixRequestType),
}, { $id: 'PinMatrixRequest' });
exports.PinMatrixAck = schema_utils_1.Type.Object({
    pin: schema_utils_1.Type.String(),
}, { $id: 'PinMatrixAck' });
exports.PassphraseRequest = schema_utils_1.Type.Object({
    _on_device: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'PassphraseRequest' });
exports.PassphraseAck = schema_utils_1.Type.Object({
    passphrase: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    _state: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    on_device: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'PassphraseAck' });
exports.Deprecated_PassphraseStateRequest = schema_utils_1.Type.Object({
    state: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'Deprecated_PassphraseStateRequest' });
exports.Deprecated_PassphraseStateAck = schema_utils_1.Type.Object({}, { $id: 'Deprecated_PassphraseStateAck' });
exports.CipherKeyValue = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    key: schema_utils_1.Type.String(),
    value: schema_utils_1.Type.String(),
    encrypt: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    ask_on_encrypt: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    ask_on_decrypt: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    iv: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'CipherKeyValue' });
exports.CipheredKeyValue = schema_utils_1.Type.Object({
    value: schema_utils_1.Type.String(),
}, { $id: 'CipheredKeyValue' });
exports.IdentityType = schema_utils_1.Type.Object({
    proto: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    user: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    host: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    port: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    path: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'IdentityType' });
exports.SignIdentity = schema_utils_1.Type.Object({
    identity: exports.IdentityType,
    challenge_hidden: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    challenge_visual: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    ecdsa_curve_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'SignIdentity' });
exports.SignedIdentity = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
    public_key: schema_utils_1.Type.String(),
    signature: schema_utils_1.Type.String(),
}, { $id: 'SignedIdentity' });
exports.GetECDHSessionKey = schema_utils_1.Type.Object({
    identity: exports.IdentityType,
    peer_public_key: schema_utils_1.Type.String(),
    ecdsa_curve_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'GetECDHSessionKey' });
exports.ECDHSessionKey = schema_utils_1.Type.Object({
    session_key: schema_utils_1.Type.String(),
    public_key: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'ECDHSessionKey' });
var DebugButton;
(function (DebugButton) {
    DebugButton[DebugButton["NO"] = 0] = "NO";
    DebugButton[DebugButton["YES"] = 1] = "YES";
    DebugButton[DebugButton["INFO"] = 2] = "INFO";
})(DebugButton || (exports.DebugButton = DebugButton = {}));
exports.EnumDebugButton = schema_utils_1.Type.Enum(DebugButton);
var DebugPhysicalButton;
(function (DebugPhysicalButton) {
    DebugPhysicalButton[DebugPhysicalButton["LEFT_BTN"] = 0] = "LEFT_BTN";
    DebugPhysicalButton[DebugPhysicalButton["MIDDLE_BTN"] = 1] = "MIDDLE_BTN";
    DebugPhysicalButton[DebugPhysicalButton["RIGHT_BTN"] = 2] = "RIGHT_BTN";
})(DebugPhysicalButton || (exports.DebugPhysicalButton = DebugPhysicalButton = {}));
exports.EnumDebugPhysicalButton = schema_utils_1.Type.Enum(DebugPhysicalButton);
var DebugWaitType;
(function (DebugWaitType) {
    DebugWaitType[DebugWaitType["IMMEDIATE"] = 0] = "IMMEDIATE";
    DebugWaitType[DebugWaitType["NEXT_LAYOUT"] = 1] = "NEXT_LAYOUT";
    DebugWaitType[DebugWaitType["CURRENT_LAYOUT"] = 2] = "CURRENT_LAYOUT";
})(DebugWaitType || (exports.DebugWaitType = DebugWaitType = {}));
exports.EnumDebugWaitType = schema_utils_1.Type.Enum(DebugWaitType);
exports.DebugLinkGetPairingInfo = schema_utils_1.Type.Object({
    channel_id: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    handshake_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    nfc_secret_host: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'DebugLinkGetPairingInfo' });
exports.DebugLinkPairingInfo = schema_utils_1.Type.Object({
    channel_id: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    handshake_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    code_entry_code: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    code_qr_code: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    nfc_secret_trezor: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'DebugLinkPairingInfo' });
exports.DebugLinkToggleThpPairingDialog = schema_utils_1.Type.Object({
    channel_id: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    show_dialog: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'DebugLinkToggleThpPairingDialog' });
exports.DebugLinkResetDebugEvents = schema_utils_1.Type.Object({}, { $id: 'DebugLinkResetDebugEvents' });
exports.DebugLinkOptigaSetSecMax = schema_utils_1.Type.Object({}, { $id: 'DebugLinkOptigaSetSecMax' });
exports.DebugLinkGetGcInfo = schema_utils_1.Type.Object({}, { $id: 'DebugLinkGetGcInfo' });
exports.DebugLinkGcInfoItem = schema_utils_1.Type.Object({
    name: schema_utils_1.Type.String(),
    value: schema_utils_1.Type.Number(),
}, { $id: 'DebugLinkGcInfoItem' });
exports.DebugLinkGcInfo = schema_utils_1.Type.Object({
    items: schema_utils_1.Type.Array(exports.DebugLinkGcInfoItem),
}, { $id: 'DebugLinkGcInfo' });
var DefinitionType;
(function (DefinitionType) {
    DefinitionType[DefinitionType["ETHEREUM_NETWORK"] = 0] = "ETHEREUM_NETWORK";
    DefinitionType[DefinitionType["ETHEREUM_TOKEN"] = 1] = "ETHEREUM_TOKEN";
    DefinitionType[DefinitionType["SOLANA_TOKEN"] = 2] = "SOLANA_TOKEN";
})(DefinitionType || (exports.DefinitionType = DefinitionType = {}));
exports.EnumDefinitionType = schema_utils_1.Type.Enum(DefinitionType);
exports.EthereumNetworkInfo = schema_utils_1.Type.Object({
    chain_id: schema_utils_1.Type.Number(),
    symbol: schema_utils_1.Type.String(),
    slip44: schema_utils_1.Type.Number(),
    name: schema_utils_1.Type.String(),
}, { $id: 'EthereumNetworkInfo' });
exports.EthereumTokenInfo = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
    chain_id: schema_utils_1.Type.Number(),
    symbol: schema_utils_1.Type.String(),
    decimals: schema_utils_1.Type.Number(),
    name: schema_utils_1.Type.String(),
}, { $id: 'EthereumTokenInfo' });
exports.SolanaTokenInfo = schema_utils_1.Type.Object({
    mint: schema_utils_1.Type.String(),
    symbol: schema_utils_1.Type.String(),
    name: schema_utils_1.Type.String(),
}, { $id: 'SolanaTokenInfo' });
exports.EosGetPublicKey = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'EosGetPublicKey' });
exports.EosPublicKey = schema_utils_1.Type.Object({
    wif_public_key: schema_utils_1.Type.String(),
    raw_public_key: schema_utils_1.Type.String(),
}, { $id: 'EosPublicKey' });
exports.EosTxHeader = schema_utils_1.Type.Object({
    expiration: schema_utils_1.Type.Number(),
    ref_block_num: schema_utils_1.Type.Number(),
    ref_block_prefix: schema_utils_1.Type.Number(),
    max_net_usage_words: schema_utils_1.Type.Number(),
    max_cpu_usage_ms: schema_utils_1.Type.Number(),
    delay_sec: schema_utils_1.Type.Number(),
}, { $id: 'EosTxHeader' });
exports.EosSignTx = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    chain_id: schema_utils_1.Type.String(),
    header: exports.EosTxHeader,
    num_actions: schema_utils_1.Type.Number(),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'EosSignTx' });
exports.EosTxActionRequest = schema_utils_1.Type.Object({
    data_size: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'EosTxActionRequest' });
exports.EosAsset = schema_utils_1.Type.Object({
    amount: schema_utils_1.Type.Uint(),
    symbol: schema_utils_1.Type.String(),
}, { $id: 'EosAsset' });
exports.EosPermissionLevel = schema_utils_1.Type.Object({
    actor: schema_utils_1.Type.String(),
    permission: schema_utils_1.Type.String(),
}, { $id: 'EosPermissionLevel' });
exports.EosAuthorizationKey = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    key: schema_utils_1.Type.String(),
    address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),
    weight: schema_utils_1.Type.Number(),
}, { $id: 'EosAuthorizationKey' });
exports.EosAuthorizationAccount = schema_utils_1.Type.Object({
    account: exports.EosPermissionLevel,
    weight: schema_utils_1.Type.Number(),
}, { $id: 'EosAuthorizationAccount' });
exports.EosAuthorizationWait = schema_utils_1.Type.Object({
    wait_sec: schema_utils_1.Type.Number(),
    weight: schema_utils_1.Type.Number(),
}, { $id: 'EosAuthorizationWait' });
exports.EosAuthorization = schema_utils_1.Type.Object({
    threshold: schema_utils_1.Type.Number(),
    keys: schema_utils_1.Type.Array(exports.EosAuthorizationKey),
    accounts: schema_utils_1.Type.Array(exports.EosAuthorizationAccount),
    waits: schema_utils_1.Type.Array(exports.EosAuthorizationWait),
}, { $id: 'EosAuthorization' });
exports.EosActionCommon = schema_utils_1.Type.Object({
    account: schema_utils_1.Type.String(),
    name: schema_utils_1.Type.String(),
    authorization: schema_utils_1.Type.Array(exports.EosPermissionLevel),
}, { $id: 'EosActionCommon' });
exports.EosActionTransfer = schema_utils_1.Type.Object({
    sender: schema_utils_1.Type.String(),
    receiver: schema_utils_1.Type.String(),
    quantity: exports.EosAsset,
    memo: schema_utils_1.Type.String(),
}, { $id: 'EosActionTransfer' });
exports.EosActionDelegate = schema_utils_1.Type.Object({
    sender: schema_utils_1.Type.String(),
    receiver: schema_utils_1.Type.String(),
    net_quantity: exports.EosAsset,
    cpu_quantity: exports.EosAsset,
    transfer: schema_utils_1.Type.Boolean(),
}, { $id: 'EosActionDelegate' });
exports.EosActionUndelegate = schema_utils_1.Type.Object({
    sender: schema_utils_1.Type.String(),
    receiver: schema_utils_1.Type.String(),
    net_quantity: exports.EosAsset,
    cpu_quantity: exports.EosAsset,
}, { $id: 'EosActionUndelegate' });
exports.EosActionRefund = schema_utils_1.Type.Object({
    owner: schema_utils_1.Type.String(),
}, { $id: 'EosActionRefund' });
exports.EosActionBuyRam = schema_utils_1.Type.Object({
    payer: schema_utils_1.Type.String(),
    receiver: schema_utils_1.Type.String(),
    quantity: exports.EosAsset,
}, { $id: 'EosActionBuyRam' });
exports.EosActionBuyRamBytes = schema_utils_1.Type.Object({
    payer: schema_utils_1.Type.String(),
    receiver: schema_utils_1.Type.String(),
    bytes: schema_utils_1.Type.Number(),
}, { $id: 'EosActionBuyRamBytes' });
exports.EosActionSellRam = schema_utils_1.Type.Object({
    account: schema_utils_1.Type.String(),
    bytes: schema_utils_1.Type.Number(),
}, { $id: 'EosActionSellRam' });
exports.EosActionVoteProducer = schema_utils_1.Type.Object({
    voter: schema_utils_1.Type.String(),
    proxy: schema_utils_1.Type.String(),
    producers: schema_utils_1.Type.Array(schema_utils_1.Type.String()),
}, { $id: 'EosActionVoteProducer' });
exports.EosActionUpdateAuth = schema_utils_1.Type.Object({
    account: schema_utils_1.Type.String(),
    permission: schema_utils_1.Type.String(),
    parent: schema_utils_1.Type.String(),
    auth: exports.EosAuthorization,
}, { $id: 'EosActionUpdateAuth' });
exports.EosActionDeleteAuth = schema_utils_1.Type.Object({
    account: schema_utils_1.Type.String(),
    permission: schema_utils_1.Type.String(),
}, { $id: 'EosActionDeleteAuth' });
exports.EosActionLinkAuth = schema_utils_1.Type.Object({
    account: schema_utils_1.Type.String(),
    code: schema_utils_1.Type.String(),
    type: schema_utils_1.Type.String(),
    requirement: schema_utils_1.Type.String(),
}, { $id: 'EosActionLinkAuth' });
exports.EosActionUnlinkAuth = schema_utils_1.Type.Object({
    account: schema_utils_1.Type.String(),
    code: schema_utils_1.Type.String(),
    type: schema_utils_1.Type.String(),
}, { $id: 'EosActionUnlinkAuth' });
exports.EosActionNewAccount = schema_utils_1.Type.Object({
    creator: schema_utils_1.Type.String(),
    name: schema_utils_1.Type.String(),
    owner: exports.EosAuthorization,
    active: exports.EosAuthorization,
}, { $id: 'EosActionNewAccount' });
exports.EosActionUnknown = schema_utils_1.Type.Object({
    data_size: schema_utils_1.Type.Number(),
    data_chunk: schema_utils_1.Type.String(),
}, { $id: 'EosActionUnknown' });
exports.EosTxActionAck = schema_utils_1.Type.Object({
    common: exports.EosActionCommon,
    transfer: schema_utils_1.Type.Optional(exports.EosActionTransfer),
    delegate: schema_utils_1.Type.Optional(exports.EosActionDelegate),
    undelegate: schema_utils_1.Type.Optional(exports.EosActionUndelegate),
    refund: schema_utils_1.Type.Optional(exports.EosActionRefund),
    buy_ram: schema_utils_1.Type.Optional(exports.EosActionBuyRam),
    buy_ram_bytes: schema_utils_1.Type.Optional(exports.EosActionBuyRamBytes),
    sell_ram: schema_utils_1.Type.Optional(exports.EosActionSellRam),
    vote_producer: schema_utils_1.Type.Optional(exports.EosActionVoteProducer),
    update_auth: schema_utils_1.Type.Optional(exports.EosActionUpdateAuth),
    delete_auth: schema_utils_1.Type.Optional(exports.EosActionDeleteAuth),
    link_auth: schema_utils_1.Type.Optional(exports.EosActionLinkAuth),
    unlink_auth: schema_utils_1.Type.Optional(exports.EosActionUnlinkAuth),
    new_account: schema_utils_1.Type.Optional(exports.EosActionNewAccount),
    unknown: schema_utils_1.Type.Optional(exports.EosActionUnknown),
}, { $id: 'EosTxActionAck' });
exports.EosSignedTx = schema_utils_1.Type.Object({
    signature: schema_utils_1.Type.String(),
}, { $id: 'EosSignedTx' });
exports.EthereumDefinitions = schema_utils_1.Type.Object({
    encoded_network: schema_utils_1.Type.Optional(schema_utils_1.Type.ArrayBuffer()),
    encoded_token: schema_utils_1.Type.Optional(schema_utils_1.Type.ArrayBuffer()),
}, { $id: 'EthereumDefinitions' });
exports.EthereumSignTypedData = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    primary_type: schema_utils_1.Type.String(),
    metamask_v4_compat: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    definitions: schema_utils_1.Type.Optional(exports.EthereumDefinitions),
}, { $id: 'EthereumSignTypedData' });
exports.EthereumTypedDataStructRequest = schema_utils_1.Type.Object({
    name: schema_utils_1.Type.String(),
}, { $id: 'EthereumTypedDataStructRequest' });
var EthereumDataType;
(function (EthereumDataType) {
    EthereumDataType[EthereumDataType["UINT"] = 1] = "UINT";
    EthereumDataType[EthereumDataType["INT"] = 2] = "INT";
    EthereumDataType[EthereumDataType["BYTES"] = 3] = "BYTES";
    EthereumDataType[EthereumDataType["STRING"] = 4] = "STRING";
    EthereumDataType[EthereumDataType["BOOL"] = 5] = "BOOL";
    EthereumDataType[EthereumDataType["ADDRESS"] = 6] = "ADDRESS";
    EthereumDataType[EthereumDataType["ARRAY"] = 7] = "ARRAY";
    EthereumDataType[EthereumDataType["STRUCT"] = 8] = "STRUCT";
})(EthereumDataType || (exports.EthereumDataType = EthereumDataType = {}));
exports.EnumEthereumDataType = schema_utils_1.Type.Enum(EthereumDataType);
exports.EthereumFieldType = schema_utils_1.Type.Recursive(This => schema_utils_1.Type.Object({
    data_type: exports.EnumEthereumDataType,
    size: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    entry_type: schema_utils_1.Type.Optional(This),
    struct_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}), { $id: 'EthereumFieldType' });
exports.EthereumStructMember = schema_utils_1.Type.Object({
    type: exports.EthereumFieldType,
    name: schema_utils_1.Type.String(),
}, { $id: 'EthereumStructMember' });
exports.EthereumTypedDataStructAck = schema_utils_1.Type.Object({
    members: schema_utils_1.Type.Array(exports.EthereumStructMember),
}, { $id: 'EthereumTypedDataStructAck' });
exports.EthereumTypedDataValueRequest = schema_utils_1.Type.Object({
    member_path: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
}, { $id: 'EthereumTypedDataValueRequest' });
exports.EthereumTypedDataValueAck = schema_utils_1.Type.Object({
    value: schema_utils_1.Type.String(),
}, { $id: 'EthereumTypedDataValueAck' });
exports.EthereumGetPublicKey = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'EthereumGetPublicKey' });
exports.EthereumPublicKey = schema_utils_1.Type.Object({
    node: exports.HDNodeType,
    xpub: schema_utils_1.Type.String(),
}, { $id: 'EthereumPublicKey' });
exports.EthereumGetAddress = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    encoded_network: schema_utils_1.Type.Optional(schema_utils_1.Type.ArrayBuffer()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'EthereumGetAddress' });
exports.EthereumAddress = schema_utils_1.Type.Object({
    _old_address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    address: schema_utils_1.Type.String(),
}, { $id: 'EthereumAddress' });
exports.EthereumSignTx = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    nonce: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    gas_price: schema_utils_1.Type.String(),
    gas_limit: schema_utils_1.Type.String(),
    to: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    value: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    data_initial_chunk: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    data_length: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    chain_id: schema_utils_1.Type.Number(),
    tx_type: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    definitions: schema_utils_1.Type.Optional(exports.EthereumDefinitions),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'EthereumSignTx' });
exports.EthereumAccessList = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
    storage_keys: schema_utils_1.Type.Array(schema_utils_1.Type.String()),
}, { $id: 'EthereumAccessList' });
exports.EthereumSignTxEIP1559 = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    nonce: schema_utils_1.Type.String(),
    max_gas_fee: schema_utils_1.Type.String(),
    max_priority_fee: schema_utils_1.Type.String(),
    gas_limit: schema_utils_1.Type.String(),
    to: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    value: schema_utils_1.Type.String(),
    data_initial_chunk: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    data_length: schema_utils_1.Type.Number(),
    chain_id: schema_utils_1.Type.Number(),
    access_list: schema_utils_1.Type.Array(exports.EthereumAccessList),
    definitions: schema_utils_1.Type.Optional(exports.EthereumDefinitions),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'EthereumSignTxEIP1559' });
exports.EthereumTxRequest = schema_utils_1.Type.Object({
    data_length: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    signature_v: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    signature_r: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    signature_s: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'EthereumTxRequest' });
exports.EthereumTxAck = schema_utils_1.Type.Object({
    data_chunk: schema_utils_1.Type.String(),
}, { $id: 'EthereumTxAck' });
exports.EthereumSignMessage = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    message: schema_utils_1.Type.String(),
    encoded_network: schema_utils_1.Type.Optional(schema_utils_1.Type.ArrayBuffer()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'EthereumSignMessage' });
exports.EthereumMessageSignature = schema_utils_1.Type.Object({
    signature: schema_utils_1.Type.String(),
    address: schema_utils_1.Type.String(),
}, { $id: 'EthereumMessageSignature' });
exports.EthereumVerifyMessage = schema_utils_1.Type.Object({
    signature: schema_utils_1.Type.String(),
    message: schema_utils_1.Type.String(),
    address: schema_utils_1.Type.String(),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'EthereumVerifyMessage' });
exports.EthereumSignTypedHash = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    domain_separator_hash: schema_utils_1.Type.String(),
    message_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    encoded_network: schema_utils_1.Type.Optional(schema_utils_1.Type.ArrayBuffer()),
}, { $id: 'EthereumSignTypedHash' });
exports.EthereumTypedDataSignature = schema_utils_1.Type.Object({
    signature: schema_utils_1.Type.String(),
    address: schema_utils_1.Type.String(),
}, { $id: 'EthereumTypedDataSignature' });
var Enum_BackupType;
(function (Enum_BackupType) {
    Enum_BackupType[Enum_BackupType["Bip39"] = 0] = "Bip39";
    Enum_BackupType[Enum_BackupType["Slip39_Basic"] = 1] = "Slip39_Basic";
    Enum_BackupType[Enum_BackupType["Slip39_Advanced"] = 2] = "Slip39_Advanced";
    Enum_BackupType[Enum_BackupType["Slip39_Single_Extendable"] = 3] = "Slip39_Single_Extendable";
    Enum_BackupType[Enum_BackupType["Slip39_Basic_Extendable"] = 4] = "Slip39_Basic_Extendable";
    Enum_BackupType[Enum_BackupType["Slip39_Advanced_Extendable"] = 5] = "Slip39_Advanced_Extendable";
})(Enum_BackupType || (exports.Enum_BackupType = Enum_BackupType = {}));
exports.EnumEnum_BackupType = schema_utils_1.Type.Enum(Enum_BackupType);
exports.BackupType = schema_utils_1.Type.KeyOfEnum(Enum_BackupType, { $id: 'BackupType' });
var Enum_SafetyCheckLevel;
(function (Enum_SafetyCheckLevel) {
    Enum_SafetyCheckLevel[Enum_SafetyCheckLevel["Strict"] = 0] = "Strict";
    Enum_SafetyCheckLevel[Enum_SafetyCheckLevel["PromptAlways"] = 1] = "PromptAlways";
    Enum_SafetyCheckLevel[Enum_SafetyCheckLevel["PromptTemporarily"] = 2] = "PromptTemporarily";
})(Enum_SafetyCheckLevel || (exports.Enum_SafetyCheckLevel = Enum_SafetyCheckLevel = {}));
exports.EnumEnum_SafetyCheckLevel = schema_utils_1.Type.Enum(Enum_SafetyCheckLevel);
exports.SafetyCheckLevel = schema_utils_1.Type.KeyOfEnum(Enum_SafetyCheckLevel, { $id: 'SafetyCheckLevel' });
var Enum_DisplayRotation;
(function (Enum_DisplayRotation) {
    Enum_DisplayRotation[Enum_DisplayRotation["North"] = 0] = "North";
    Enum_DisplayRotation[Enum_DisplayRotation["East"] = 90] = "East";
    Enum_DisplayRotation[Enum_DisplayRotation["South"] = 180] = "South";
    Enum_DisplayRotation[Enum_DisplayRotation["West"] = 270] = "West";
})(Enum_DisplayRotation || (exports.Enum_DisplayRotation = Enum_DisplayRotation = {}));
exports.EnumEnum_DisplayRotation = schema_utils_1.Type.Enum(Enum_DisplayRotation);
exports.DisplayRotation = schema_utils_1.Type.KeyOfEnum(Enum_DisplayRotation, { $id: 'DisplayRotation' });
var Enum_HomescreenFormat;
(function (Enum_HomescreenFormat) {
    Enum_HomescreenFormat[Enum_HomescreenFormat["Toif"] = 1] = "Toif";
    Enum_HomescreenFormat[Enum_HomescreenFormat["Jpeg"] = 2] = "Jpeg";
    Enum_HomescreenFormat[Enum_HomescreenFormat["ToiG"] = 3] = "ToiG";
})(Enum_HomescreenFormat || (exports.Enum_HomescreenFormat = Enum_HomescreenFormat = {}));
exports.EnumEnum_HomescreenFormat = schema_utils_1.Type.Enum(Enum_HomescreenFormat);
exports.HomescreenFormat = schema_utils_1.Type.KeyOfEnum(Enum_HomescreenFormat, { $id: 'HomescreenFormat' });
exports.Initialize = schema_utils_1.Type.Object({
    session_id: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    _skip_passphrase: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    derive_cardano: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'Initialize' });
exports.GetFeatures = schema_utils_1.Type.Object({}, { $id: 'GetFeatures' });
var Enum_BackupAvailability;
(function (Enum_BackupAvailability) {
    Enum_BackupAvailability[Enum_BackupAvailability["NotAvailable"] = 0] = "NotAvailable";
    Enum_BackupAvailability[Enum_BackupAvailability["Required"] = 1] = "Required";
    Enum_BackupAvailability[Enum_BackupAvailability["Available"] = 2] = "Available";
})(Enum_BackupAvailability || (exports.Enum_BackupAvailability = Enum_BackupAvailability = {}));
exports.EnumEnum_BackupAvailability = schema_utils_1.Type.Enum(Enum_BackupAvailability);
exports.BackupAvailability = schema_utils_1.Type.KeyOfEnum(Enum_BackupAvailability, {
    $id: 'BackupAvailability',
});
var Enum_RecoveryStatus;
(function (Enum_RecoveryStatus) {
    Enum_RecoveryStatus[Enum_RecoveryStatus["Nothing"] = 0] = "Nothing";
    Enum_RecoveryStatus[Enum_RecoveryStatus["Recovery"] = 1] = "Recovery";
    Enum_RecoveryStatus[Enum_RecoveryStatus["Backup"] = 2] = "Backup";
})(Enum_RecoveryStatus || (exports.Enum_RecoveryStatus = Enum_RecoveryStatus = {}));
exports.EnumEnum_RecoveryStatus = schema_utils_1.Type.Enum(Enum_RecoveryStatus);
exports.RecoveryStatus = schema_utils_1.Type.KeyOfEnum(Enum_RecoveryStatus, { $id: 'RecoveryStatus' });
var Enum_Capability;
(function (Enum_Capability) {
    Enum_Capability[Enum_Capability["Capability_Bitcoin"] = 1] = "Capability_Bitcoin";
    Enum_Capability[Enum_Capability["Capability_Bitcoin_like"] = 2] = "Capability_Bitcoin_like";
    Enum_Capability[Enum_Capability["Capability_Binance"] = 3] = "Capability_Binance";
    Enum_Capability[Enum_Capability["Capability_Cardano"] = 4] = "Capability_Cardano";
    Enum_Capability[Enum_Capability["Capability_Crypto"] = 5] = "Capability_Crypto";
    Enum_Capability[Enum_Capability["Capability_EOS"] = 6] = "Capability_EOS";
    Enum_Capability[Enum_Capability["Capability_Ethereum"] = 7] = "Capability_Ethereum";
    Enum_Capability[Enum_Capability["Capability_Lisk"] = 8] = "Capability_Lisk";
    Enum_Capability[Enum_Capability["Capability_Monero"] = 9] = "Capability_Monero";
    Enum_Capability[Enum_Capability["Capability_NEM"] = 10] = "Capability_NEM";
    Enum_Capability[Enum_Capability["Capability_Ripple"] = 11] = "Capability_Ripple";
    Enum_Capability[Enum_Capability["Capability_Stellar"] = 12] = "Capability_Stellar";
    Enum_Capability[Enum_Capability["Capability_Tezos"] = 13] = "Capability_Tezos";
    Enum_Capability[Enum_Capability["Capability_U2F"] = 14] = "Capability_U2F";
    Enum_Capability[Enum_Capability["Capability_Shamir"] = 15] = "Capability_Shamir";
    Enum_Capability[Enum_Capability["Capability_ShamirGroups"] = 16] = "Capability_ShamirGroups";
    Enum_Capability[Enum_Capability["Capability_PassphraseEntry"] = 17] = "Capability_PassphraseEntry";
    Enum_Capability[Enum_Capability["Capability_Solana"] = 18] = "Capability_Solana";
    Enum_Capability[Enum_Capability["Capability_Translations"] = 19] = "Capability_Translations";
    Enum_Capability[Enum_Capability["Capability_Brightness"] = 20] = "Capability_Brightness";
    Enum_Capability[Enum_Capability["Capability_Haptic"] = 21] = "Capability_Haptic";
    Enum_Capability[Enum_Capability["Capability_BLE"] = 22] = "Capability_BLE";
    Enum_Capability[Enum_Capability["Capability_NFC"] = 23] = "Capability_NFC";
})(Enum_Capability || (exports.Enum_Capability = Enum_Capability = {}));
exports.EnumEnum_Capability = schema_utils_1.Type.Enum(Enum_Capability);
exports.Capability = schema_utils_1.Type.KeyOfEnum(Enum_Capability, { $id: 'Capability' });
var RecoveryDeviceInputMethod;
(function (RecoveryDeviceInputMethod) {
    RecoveryDeviceInputMethod[RecoveryDeviceInputMethod["ScrambledWords"] = 0] = "ScrambledWords";
    RecoveryDeviceInputMethod[RecoveryDeviceInputMethod["Matrix"] = 1] = "Matrix";
})(RecoveryDeviceInputMethod || (exports.RecoveryDeviceInputMethod = RecoveryDeviceInputMethod = {}));
exports.EnumRecoveryDeviceInputMethod = schema_utils_1.Type.Enum(RecoveryDeviceInputMethod);
var Enum_RecoveryType;
(function (Enum_RecoveryType) {
    Enum_RecoveryType[Enum_RecoveryType["NormalRecovery"] = 0] = "NormalRecovery";
    Enum_RecoveryType[Enum_RecoveryType["DryRun"] = 1] = "DryRun";
    Enum_RecoveryType[Enum_RecoveryType["UnlockRepeatedBackup"] = 2] = "UnlockRepeatedBackup";
})(Enum_RecoveryType || (exports.Enum_RecoveryType = Enum_RecoveryType = {}));
exports.EnumEnum_RecoveryType = schema_utils_1.Type.Enum(Enum_RecoveryType);
exports.RecoveryType = schema_utils_1.Type.KeyOfEnum(Enum_RecoveryType, { $id: 'RecoveryType' });
exports.RecoveryDevice = schema_utils_1.Type.Object({
    word_count: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    passphrase_protection: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    pin_protection: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    language: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    label: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    enforce_wordlist: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    input_method: schema_utils_1.Type.Optional(exports.EnumRecoveryDeviceInputMethod),
    u2f_counter: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    type: schema_utils_1.Type.Optional(exports.RecoveryType),
}, { $id: 'RecoveryDevice' });
exports.Features = schema_utils_1.Type.Object({
    vendor: schema_utils_1.Type.String(),
    major_version: schema_utils_1.Type.Number(),
    minor_version: schema_utils_1.Type.Number(),
    patch_version: schema_utils_1.Type.Number(),
    bootloader_mode: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    device_id: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),
    pin_protection: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    passphrase_protection: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    language: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),
    label: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),
    initialized: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    revision: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),
    bootloader_hash: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),
    imported: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    unlocked: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    _passphrase_cached: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    firmware_present: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    backup_availability: schema_utils_1.Type.Union([exports.BackupAvailability, schema_utils_1.Type.Null()]),
    flags: schema_utils_1.Type.Union([schema_utils_1.Type.Number(), schema_utils_1.Type.Null()]),
    model: schema_utils_1.Type.String(),
    fw_major: schema_utils_1.Type.Union([schema_utils_1.Type.Number(), schema_utils_1.Type.Null()]),
    fw_minor: schema_utils_1.Type.Union([schema_utils_1.Type.Number(), schema_utils_1.Type.Null()]),
    fw_patch: schema_utils_1.Type.Union([schema_utils_1.Type.Number(), schema_utils_1.Type.Null()]),
    fw_vendor: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),
    unfinished_backup: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    no_backup: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    recovery_status: schema_utils_1.Type.Union([exports.RecoveryStatus, schema_utils_1.Type.Null()]),
    capabilities: schema_utils_1.Type.Array(exports.Capability),
    backup_type: schema_utils_1.Type.Union([exports.BackupType, schema_utils_1.Type.Null()]),
    sd_card_present: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    sd_protection: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    wipe_code_protection: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    session_id: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),
    passphrase_always_on_device: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    safety_checks: schema_utils_1.Type.Union([exports.SafetyCheckLevel, schema_utils_1.Type.Null()]),
    auto_lock_delay_ms: schema_utils_1.Type.Union([schema_utils_1.Type.Number(), schema_utils_1.Type.Null()]),
    display_rotation: schema_utils_1.Type.Union([exports.DisplayRotation, schema_utils_1.Type.Null()]),
    experimental_features: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),
    busy: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    homescreen_format: schema_utils_1.Type.Optional(exports.HomescreenFormat),
    hide_passphrase_from_host: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    internal_model: exports.EnumDeviceModelInternal,
    unit_color: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    unit_btconly: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    homescreen_width: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    homescreen_height: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    bootloader_locked: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    language_version_matches: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    unit_packaging: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    haptic_feedback: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    recovery_type: schema_utils_1.Type.Optional(exports.RecoveryType),
    optiga_sec: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'Features' });
exports.LockDevice = schema_utils_1.Type.Object({}, { $id: 'LockDevice' });
exports.SetBusy = schema_utils_1.Type.Object({
    expiry_ms: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'SetBusy' });
exports.EndSession = schema_utils_1.Type.Object({}, { $id: 'EndSession' });
exports.ApplySettings = schema_utils_1.Type.Object({
    language: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    label: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    use_passphrase: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    homescreen: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    _passphrase_source: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    auto_lock_delay_ms: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    display_rotation: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([exports.DisplayRotation, exports.EnumEnum_DisplayRotation])),
    passphrase_always_on_device: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    safety_checks: schema_utils_1.Type.Optional(exports.SafetyCheckLevel),
    experimental_features: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    hide_passphrase_from_host: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    haptic_feedback: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    homescreen_length: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'ApplySettings' });
exports.ChangeLanguage = schema_utils_1.Type.Object({
    data_length: schema_utils_1.Type.Number(),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'ChangeLanguage' });
exports.DataChunkRequest = schema_utils_1.Type.Object({
    data_length: schema_utils_1.Type.Number(),
    data_offset: schema_utils_1.Type.Number(),
}, { $id: 'DataChunkRequest' });
exports.DataChunkAck = schema_utils_1.Type.Object({
    data_chunk: schema_utils_1.Type.String(),
}, { $id: 'DataChunkAck' });
exports.ApplyFlags = schema_utils_1.Type.Object({
    flags: schema_utils_1.Type.Number(),
}, { $id: 'ApplyFlags' });
exports.ChangePin = schema_utils_1.Type.Object({
    remove: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'ChangePin' });
exports.ChangeWipeCode = schema_utils_1.Type.Object({
    remove: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'ChangeWipeCode' });
var SdProtectOperationType;
(function (SdProtectOperationType) {
    SdProtectOperationType[SdProtectOperationType["DISABLE"] = 0] = "DISABLE";
    SdProtectOperationType[SdProtectOperationType["ENABLE"] = 1] = "ENABLE";
    SdProtectOperationType[SdProtectOperationType["REFRESH"] = 2] = "REFRESH";
})(SdProtectOperationType || (exports.SdProtectOperationType = SdProtectOperationType = {}));
exports.EnumSdProtectOperationType = schema_utils_1.Type.Enum(SdProtectOperationType);
exports.SdProtect = schema_utils_1.Type.Object({
    operation: exports.EnumSdProtectOperationType,
}, { $id: 'SdProtect' });
exports.Ping = schema_utils_1.Type.Object({
    message: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    button_protection: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'Ping' });
exports.Cancel = schema_utils_1.Type.Object({}, { $id: 'Cancel' });
exports.GetEntropy = schema_utils_1.Type.Object({
    size: schema_utils_1.Type.Number(),
}, { $id: 'GetEntropy' });
exports.Entropy = schema_utils_1.Type.Object({
    entropy: schema_utils_1.Type.String(),
}, { $id: 'Entropy' });
exports.GetFirmwareHash = schema_utils_1.Type.Object({
    challenge: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'GetFirmwareHash' });
exports.FirmwareHash = schema_utils_1.Type.Object({
    hash: schema_utils_1.Type.String(),
}, { $id: 'FirmwareHash' });
exports.AuthenticateDevice = schema_utils_1.Type.Object({
    challenge: schema_utils_1.Type.String(),
}, { $id: 'AuthenticateDevice' });
exports.AuthenticityProof = schema_utils_1.Type.Object({
    certificates: schema_utils_1.Type.Array(schema_utils_1.Type.String()),
    signature: schema_utils_1.Type.String(),
}, { $id: 'AuthenticityProof' });
exports.WipeDevice = schema_utils_1.Type.Object({}, { $id: 'WipeDevice' });
exports.LoadDevice = schema_utils_1.Type.Object({
    mnemonics: schema_utils_1.Type.Array(schema_utils_1.Type.String()),
    pin: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    passphrase_protection: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    language: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    label: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    skip_checksum: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    u2f_counter: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    needs_backup: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    no_backup: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'LoadDevice' });
exports.ResetDevice = schema_utils_1.Type.Object({
    strength: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    passphrase_protection: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    pin_protection: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    language: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    label: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    u2f_counter: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    skip_backup: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    no_backup: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    backup_type: schema_utils_1.Type.Optional(exports.EnumEnum_BackupType),
    entropy_check: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'ResetDevice' });
exports.Slip39Group = schema_utils_1.Type.Object({
    member_threshold: schema_utils_1.Type.Number(),
    member_count: schema_utils_1.Type.Number(),
}, { $id: 'Slip39Group' });
exports.BackupDevice = schema_utils_1.Type.Object({
    group_threshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    groups: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.Slip39Group)),
}, { $id: 'BackupDevice' });
exports.EntropyRequest = schema_utils_1.Type.Object({
    entropy_commitment: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    prev_entropy: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'EntropyRequest' });
exports.EntropyAck = schema_utils_1.Type.Object({
    entropy: schema_utils_1.Type.String(),
}, { $id: 'EntropyAck' });
exports.EntropyCheckReady = schema_utils_1.Type.Object({}, { $id: 'EntropyCheckReady' });
exports.EntropyCheckContinue = schema_utils_1.Type.Object({
    finish: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'EntropyCheckContinue' });
var Enum_WordRequestType;
(function (Enum_WordRequestType) {
    Enum_WordRequestType[Enum_WordRequestType["WordRequestType_Plain"] = 0] = "WordRequestType_Plain";
    Enum_WordRequestType[Enum_WordRequestType["WordRequestType_Matrix9"] = 1] = "WordRequestType_Matrix9";
    Enum_WordRequestType[Enum_WordRequestType["WordRequestType_Matrix6"] = 2] = "WordRequestType_Matrix6";
})(Enum_WordRequestType || (exports.Enum_WordRequestType = Enum_WordRequestType = {}));
exports.EnumEnum_WordRequestType = schema_utils_1.Type.Enum(Enum_WordRequestType);
exports.WordRequestType = schema_utils_1.Type.KeyOfEnum(Enum_WordRequestType, { $id: 'WordRequestType' });
exports.WordRequest = schema_utils_1.Type.Object({
    type: exports.WordRequestType,
}, { $id: 'WordRequest' });
exports.WordAck = schema_utils_1.Type.Object({
    word: schema_utils_1.Type.String(),
}, { $id: 'WordAck' });
exports.SetU2FCounter = schema_utils_1.Type.Object({
    u2f_counter: schema_utils_1.Type.Number(),
}, { $id: 'SetU2FCounter' });
exports.GetNextU2FCounter = schema_utils_1.Type.Object({}, { $id: 'GetNextU2FCounter' });
exports.NextU2FCounter = schema_utils_1.Type.Object({
    u2f_counter: schema_utils_1.Type.Number(),
}, { $id: 'NextU2FCounter' });
exports.DoPreauthorized = schema_utils_1.Type.Object({}, { $id: 'DoPreauthorized' });
exports.PreauthorizedRequest = schema_utils_1.Type.Object({}, { $id: 'PreauthorizedRequest' });
exports.CancelAuthorization = schema_utils_1.Type.Object({}, { $id: 'CancelAuthorization' });
var BootCommand;
(function (BootCommand) {
    BootCommand[BootCommand["STOP_AND_WAIT"] = 0] = "STOP_AND_WAIT";
    BootCommand[BootCommand["INSTALL_UPGRADE"] = 1] = "INSTALL_UPGRADE";
})(BootCommand || (exports.BootCommand = BootCommand = {}));
exports.EnumBootCommand = schema_utils_1.Type.Enum(BootCommand);
exports.RebootToBootloader = schema_utils_1.Type.Object({
    boot_command: schema_utils_1.Type.Optional(exports.EnumBootCommand),
    firmware_header: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    language_data_length: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'RebootToBootloader' });
exports.GetNonce = schema_utils_1.Type.Object({}, { $id: 'GetNonce' });
exports.Nonce = schema_utils_1.Type.Object({
    nonce: schema_utils_1.Type.String(),
}, { $id: 'Nonce' });
exports.UnlockPath = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    mac: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'UnlockPath' });
exports.UnlockedPathRequest = schema_utils_1.Type.Object({
    mac: schema_utils_1.Type.String(),
}, { $id: 'UnlockedPathRequest' });
exports.ShowDeviceTutorial = schema_utils_1.Type.Object({}, { $id: 'ShowDeviceTutorial' });
exports.UnlockBootloader = schema_utils_1.Type.Object({}, { $id: 'UnlockBootloader' });
exports.SetBrightness = schema_utils_1.Type.Object({
    value: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'SetBrightness' });
exports.NEMGetAddress = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    network: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'NEMGetAddress' });
exports.NEMAddress = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
}, { $id: 'NEMAddress' });
exports.NEMTransactionCommon = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),
    network: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    timestamp: schema_utils_1.Type.Number(),
    fee: schema_utils_1.Type.Uint(),
    deadline: schema_utils_1.Type.Number(),
    signer: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'NEMTransactionCommon' });
exports.NEMMosaic = schema_utils_1.Type.Object({
    namespace: schema_utils_1.Type.String(),
    mosaic: schema_utils_1.Type.String(),
    quantity: schema_utils_1.Type.Number(),
}, { $id: 'NEMMosaic' });
exports.NEMTransfer = schema_utils_1.Type.Object({
    recipient: schema_utils_1.Type.String(),
    amount: schema_utils_1.Type.Uint(),
    payload: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    public_key: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    mosaics: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.NEMMosaic)),
}, { $id: 'NEMTransfer' });
exports.NEMProvisionNamespace = schema_utils_1.Type.Object({
    namespace: schema_utils_1.Type.String(),
    parent: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    sink: schema_utils_1.Type.String(),
    fee: schema_utils_1.Type.Uint(),
}, { $id: 'NEMProvisionNamespace' });
var NEMMosaicLevy;
(function (NEMMosaicLevy) {
    NEMMosaicLevy[NEMMosaicLevy["MosaicLevy_Absolute"] = 1] = "MosaicLevy_Absolute";
    NEMMosaicLevy[NEMMosaicLevy["MosaicLevy_Percentile"] = 2] = "MosaicLevy_Percentile";
})(NEMMosaicLevy || (exports.NEMMosaicLevy = NEMMosaicLevy = {}));
exports.EnumNEMMosaicLevy = schema_utils_1.Type.Enum(NEMMosaicLevy);
exports.NEMMosaicDefinition = schema_utils_1.Type.Object({
    name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    ticker: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    namespace: schema_utils_1.Type.String(),
    mosaic: schema_utils_1.Type.String(),
    divisibility: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    levy: schema_utils_1.Type.Optional(exports.EnumNEMMosaicLevy),
    fee: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    levy_address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    levy_namespace: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    levy_mosaic: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    supply: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    mutable_supply: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    transferable: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    description: schema_utils_1.Type.String(),
    networks: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),
}, { $id: 'NEMMosaicDefinition' });
exports.NEMMosaicCreation = schema_utils_1.Type.Object({
    definition: exports.NEMMosaicDefinition,
    sink: schema_utils_1.Type.String(),
    fee: schema_utils_1.Type.Uint(),
}, { $id: 'NEMMosaicCreation' });
var NEMSupplyChangeType;
(function (NEMSupplyChangeType) {
    NEMSupplyChangeType[NEMSupplyChangeType["SupplyChange_Increase"] = 1] = "SupplyChange_Increase";
    NEMSupplyChangeType[NEMSupplyChangeType["SupplyChange_Decrease"] = 2] = "SupplyChange_Decrease";
})(NEMSupplyChangeType || (exports.NEMSupplyChangeType = NEMSupplyChangeType = {}));
exports.EnumNEMSupplyChangeType = schema_utils_1.Type.Enum(NEMSupplyChangeType);
exports.NEMMosaicSupplyChange = schema_utils_1.Type.Object({
    namespace: schema_utils_1.Type.String(),
    mosaic: schema_utils_1.Type.String(),
    type: exports.EnumNEMSupplyChangeType,
    delta: schema_utils_1.Type.Number(),
}, { $id: 'NEMMosaicSupplyChange' });
var NEMModificationType;
(function (NEMModificationType) {
    NEMModificationType[NEMModificationType["CosignatoryModification_Add"] = 1] = "CosignatoryModification_Add";
    NEMModificationType[NEMModificationType["CosignatoryModification_Delete"] = 2] = "CosignatoryModification_Delete";
})(NEMModificationType || (exports.NEMModificationType = NEMModificationType = {}));
exports.EnumNEMModificationType = schema_utils_1.Type.Enum(NEMModificationType);
exports.NEMCosignatoryModification = schema_utils_1.Type.Object({
    type: exports.EnumNEMModificationType,
    public_key: schema_utils_1.Type.String(),
}, { $id: 'NEMCosignatoryModification' });
exports.NEMAggregateModification = schema_utils_1.Type.Object({
    modifications: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.NEMCosignatoryModification)),
    relative_change: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'NEMAggregateModification' });
var NEMImportanceTransferMode;
(function (NEMImportanceTransferMode) {
    NEMImportanceTransferMode[NEMImportanceTransferMode["ImportanceTransfer_Activate"] = 1] = "ImportanceTransfer_Activate";
    NEMImportanceTransferMode[NEMImportanceTransferMode["ImportanceTransfer_Deactivate"] = 2] = "ImportanceTransfer_Deactivate";
})(NEMImportanceTransferMode || (exports.NEMImportanceTransferMode = NEMImportanceTransferMode = {}));
exports.EnumNEMImportanceTransferMode = schema_utils_1.Type.Enum(NEMImportanceTransferMode);
exports.NEMImportanceTransfer = schema_utils_1.Type.Object({
    mode: exports.EnumNEMImportanceTransferMode,
    public_key: schema_utils_1.Type.String(),
}, { $id: 'NEMImportanceTransfer' });
exports.NEMSignTx = schema_utils_1.Type.Object({
    transaction: exports.NEMTransactionCommon,
    multisig: schema_utils_1.Type.Optional(exports.NEMTransactionCommon),
    transfer: schema_utils_1.Type.Optional(exports.NEMTransfer),
    cosigning: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    provision_namespace: schema_utils_1.Type.Optional(exports.NEMProvisionNamespace),
    mosaic_creation: schema_utils_1.Type.Optional(exports.NEMMosaicCreation),
    supply_change: schema_utils_1.Type.Optional(exports.NEMMosaicSupplyChange),
    aggregate_modification: schema_utils_1.Type.Optional(exports.NEMAggregateModification),
    importance_transfer: schema_utils_1.Type.Optional(exports.NEMImportanceTransfer),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'NEMSignTx' });
exports.NEMSignedTx = schema_utils_1.Type.Object({
    data: schema_utils_1.Type.String(),
    signature: schema_utils_1.Type.String(),
}, { $id: 'NEMSignedTx' });
exports.NEMDecryptMessage = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    network: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    public_key: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    payload: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'NEMDecryptMessage' });
exports.NEMDecryptedMessage = schema_utils_1.Type.Object({
    payload: schema_utils_1.Type.String(),
}, { $id: 'NEMDecryptedMessage' });
exports.RippleGetAddress = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'RippleGetAddress' });
exports.RippleAddress = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
}, { $id: 'RippleAddress' });
exports.RipplePayment = schema_utils_1.Type.Object({
    amount: schema_utils_1.Type.Uint(),
    destination: schema_utils_1.Type.String(),
    destination_tag: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'RipplePayment' });
exports.RippleSignTx = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    fee: schema_utils_1.Type.Uint(),
    flags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    sequence: schema_utils_1.Type.Number(),
    last_ledger_sequence: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    payment: exports.RipplePayment,
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'RippleSignTx' });
exports.RippleSignedTx = schema_utils_1.Type.Object({
    signature: schema_utils_1.Type.String(),
    serialized_tx: schema_utils_1.Type.String(),
}, { $id: 'RippleSignedTx' });
exports.SolanaGetPublicKey = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'SolanaGetPublicKey' });
exports.SolanaPublicKey = schema_utils_1.Type.Object({
    public_key: schema_utils_1.Type.String(),
}, { $id: 'SolanaPublicKey' });
exports.SolanaGetAddress = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'SolanaGetAddress' });
exports.SolanaAddress = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
}, { $id: 'SolanaAddress' });
exports.SolanaTxTokenAccountInfo = schema_utils_1.Type.Object({
    base_address: schema_utils_1.Type.String(),
    token_program: schema_utils_1.Type.String(),
    token_mint: schema_utils_1.Type.String(),
    token_account: schema_utils_1.Type.String(),
}, { $id: 'SolanaTxTokenAccountInfo' });
exports.SolanaTxAdditionalInfo = schema_utils_1.Type.Object({
    token_accounts_infos: schema_utils_1.Type.Array(exports.SolanaTxTokenAccountInfo),
    encoded_token: schema_utils_1.Type.Optional(schema_utils_1.Type.ArrayBuffer()),
}, { $id: 'SolanaTxAdditionalInfo' });
exports.SolanaSignTx = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    serialized_tx: schema_utils_1.Type.String(),
    additional_info: schema_utils_1.Type.Optional(exports.SolanaTxAdditionalInfo),
}, { $id: 'SolanaSignTx' });
exports.SolanaTxSignature = schema_utils_1.Type.Object({
    signature: schema_utils_1.Type.String(),
}, { $id: 'SolanaTxSignature' });
var StellarAssetType;
(function (StellarAssetType) {
    StellarAssetType[StellarAssetType["NATIVE"] = 0] = "NATIVE";
    StellarAssetType[StellarAssetType["ALPHANUM4"] = 1] = "ALPHANUM4";
    StellarAssetType[StellarAssetType["ALPHANUM12"] = 2] = "ALPHANUM12";
})(StellarAssetType || (exports.StellarAssetType = StellarAssetType = {}));
exports.EnumStellarAssetType = schema_utils_1.Type.Enum(StellarAssetType);
exports.StellarAsset = schema_utils_1.Type.Object({
    type: schema_utils_1.Type.Union([
        schema_utils_1.Type.Literal(0),
        schema_utils_1.Type.Literal(1),
        schema_utils_1.Type.Literal(2),
        schema_utils_1.Type.Literal('NATIVE'),
        schema_utils_1.Type.Literal('ALPHANUM4'),
        schema_utils_1.Type.Literal('ALPHANUM12'),
    ]),
    code: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    issuer: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
}, { $id: 'StellarAsset' });
exports.StellarGetAddress = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'StellarGetAddress' });
exports.StellarAddress = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
}, { $id: 'StellarAddress' });
var StellarMemoType;
(function (StellarMemoType) {
    StellarMemoType[StellarMemoType["NONE"] = 0] = "NONE";
    StellarMemoType[StellarMemoType["TEXT"] = 1] = "TEXT";
    StellarMemoType[StellarMemoType["ID"] = 2] = "ID";
    StellarMemoType[StellarMemoType["HASH"] = 3] = "HASH";
    StellarMemoType[StellarMemoType["RETURN"] = 4] = "RETURN";
})(StellarMemoType || (exports.StellarMemoType = StellarMemoType = {}));
exports.EnumStellarMemoType = schema_utils_1.Type.Enum(StellarMemoType);
exports.StellarSignTx = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    network_passphrase: schema_utils_1.Type.String(),
    source_account: schema_utils_1.Type.String(),
    fee: schema_utils_1.Type.Uint(),
    sequence_number: schema_utils_1.Type.Uint(),
    timebounds_start: schema_utils_1.Type.Number(),
    timebounds_end: schema_utils_1.Type.Number(),
    memo_type: exports.EnumStellarMemoType,
    memo_text: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    memo_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    memo_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.Buffer(), schema_utils_1.Type.String()])),
    num_operations: schema_utils_1.Type.Number(),
}, { $id: 'StellarSignTx' });
exports.StellarTxOpRequest = schema_utils_1.Type.Object({}, { $id: 'StellarTxOpRequest' });
exports.StellarPaymentOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    destination_account: schema_utils_1.Type.String(),
    asset: exports.StellarAsset,
    amount: schema_utils_1.Type.Uint(),
}, { $id: 'StellarPaymentOp' });
exports.StellarCreateAccountOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    new_account: schema_utils_1.Type.String(),
    starting_balance: schema_utils_1.Type.Uint(),
}, { $id: 'StellarCreateAccountOp' });
exports.StellarPathPaymentStrictReceiveOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    send_asset: exports.StellarAsset,
    send_max: schema_utils_1.Type.Uint(),
    destination_account: schema_utils_1.Type.String(),
    destination_asset: exports.StellarAsset,
    destination_amount: schema_utils_1.Type.Uint(),
    paths: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.StellarAsset)),
}, { $id: 'StellarPathPaymentStrictReceiveOp' });
exports.StellarPathPaymentStrictSendOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    send_asset: exports.StellarAsset,
    send_amount: schema_utils_1.Type.Uint(),
    destination_account: schema_utils_1.Type.String(),
    destination_asset: exports.StellarAsset,
    destination_min: schema_utils_1.Type.Uint(),
    paths: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.StellarAsset)),
}, { $id: 'StellarPathPaymentStrictSendOp' });
exports.StellarManageSellOfferOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    selling_asset: exports.StellarAsset,
    buying_asset: exports.StellarAsset,
    amount: schema_utils_1.Type.Uint(),
    price_n: schema_utils_1.Type.Number(),
    price_d: schema_utils_1.Type.Number(),
    offer_id: schema_utils_1.Type.Uint(),
}, { $id: 'StellarManageSellOfferOp' });
exports.StellarManageBuyOfferOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    selling_asset: exports.StellarAsset,
    buying_asset: exports.StellarAsset,
    amount: schema_utils_1.Type.Uint(),
    price_n: schema_utils_1.Type.Number(),
    price_d: schema_utils_1.Type.Number(),
    offer_id: schema_utils_1.Type.Uint(),
}, { $id: 'StellarManageBuyOfferOp' });
exports.StellarCreatePassiveSellOfferOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    selling_asset: exports.StellarAsset,
    buying_asset: exports.StellarAsset,
    amount: schema_utils_1.Type.Uint(),
    price_n: schema_utils_1.Type.Number(),
    price_d: schema_utils_1.Type.Number(),
}, { $id: 'StellarCreatePassiveSellOfferOp' });
var StellarSignerType;
(function (StellarSignerType) {
    StellarSignerType[StellarSignerType["ACCOUNT"] = 0] = "ACCOUNT";
    StellarSignerType[StellarSignerType["PRE_AUTH"] = 1] = "PRE_AUTH";
    StellarSignerType[StellarSignerType["HASH"] = 2] = "HASH";
})(StellarSignerType || (exports.StellarSignerType = StellarSignerType = {}));
exports.EnumStellarSignerType = schema_utils_1.Type.Enum(StellarSignerType);
exports.StellarSetOptionsOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    inflation_destination_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    clear_flags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    set_flags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
    master_weight: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    low_threshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    medium_threshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    high_threshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),
    home_domain: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    signer_type: schema_utils_1.Type.Optional(exports.EnumStellarSignerType),
    signer_key: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.Buffer(), schema_utils_1.Type.String()])),
    signer_weight: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),
}, { $id: 'StellarSetOptionsOp' });
exports.StellarChangeTrustOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    asset: exports.StellarAsset,
    limit: schema_utils_1.Type.Uint(),
}, { $id: 'StellarChangeTrustOp' });
exports.StellarAllowTrustOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    trusted_account: schema_utils_1.Type.String(),
    asset_type: exports.EnumStellarAssetType,
    asset_code: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    is_authorized: schema_utils_1.Type.Boolean(),
}, { $id: 'StellarAllowTrustOp' });
exports.StellarAccountMergeOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    destination_account: schema_utils_1.Type.String(),
}, { $id: 'StellarAccountMergeOp' });
exports.StellarManageDataOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    key: schema_utils_1.Type.String(),
    value: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.Buffer(), schema_utils_1.Type.String()])),
}, { $id: 'StellarManageDataOp' });
exports.StellarBumpSequenceOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    bump_to: schema_utils_1.Type.Uint(),
}, { $id: 'StellarBumpSequenceOp' });
exports.StellarClaimClaimableBalanceOp = schema_utils_1.Type.Object({
    source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    balance_id: schema_utils_1.Type.String(),
}, { $id: 'StellarClaimClaimableBalanceOp' });
exports.StellarSignedTx = schema_utils_1.Type.Object({
    public_key: schema_utils_1.Type.String(),
    signature: schema_utils_1.Type.String(),
}, { $id: 'StellarSignedTx' });
exports.TezosGetAddress = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'TezosGetAddress' });
exports.TezosAddress = schema_utils_1.Type.Object({
    address: schema_utils_1.Type.String(),
}, { $id: 'TezosAddress' });
exports.TezosGetPublicKey = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'TezosGetPublicKey' });
exports.TezosPublicKey = schema_utils_1.Type.Object({
    public_key: schema_utils_1.Type.String(),
}, { $id: 'TezosPublicKey' });
var TezosContractType;
(function (TezosContractType) {
    TezosContractType[TezosContractType["Implicit"] = 0] = "Implicit";
    TezosContractType[TezosContractType["Originated"] = 1] = "Originated";
})(TezosContractType || (exports.TezosContractType = TezosContractType = {}));
exports.EnumTezosContractType = schema_utils_1.Type.Enum(TezosContractType);
exports.TezosContractID = schema_utils_1.Type.Object({
    tag: schema_utils_1.Type.Number(),
    hash: schema_utils_1.Type.Uint8Array(),
}, { $id: 'TezosContractID' });
exports.TezosRevealOp = schema_utils_1.Type.Object({
    source: schema_utils_1.Type.Uint8Array(),
    fee: schema_utils_1.Type.Uint(),
    counter: schema_utils_1.Type.Number(),
    gas_limit: schema_utils_1.Type.Number(),
    storage_limit: schema_utils_1.Type.Number(),
    public_key: schema_utils_1.Type.Uint8Array(),
}, { $id: 'TezosRevealOp' });
exports.TezosManagerTransfer = schema_utils_1.Type.Object({
    destination: exports.TezosContractID,
    amount: schema_utils_1.Type.Uint(),
}, { $id: 'TezosManagerTransfer' });
exports.TezosParametersManager = schema_utils_1.Type.Object({
    set_delegate: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint8Array()),
    cancel_delegate: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    transfer: schema_utils_1.Type.Optional(exports.TezosManagerTransfer),
}, { $id: 'TezosParametersManager' });
exports.TezosTransactionOp = schema_utils_1.Type.Object({
    source: schema_utils_1.Type.Uint8Array(),
    fee: schema_utils_1.Type.Uint(),
    counter: schema_utils_1.Type.Number(),
    gas_limit: schema_utils_1.Type.Number(),
    storage_limit: schema_utils_1.Type.Number(),
    amount: schema_utils_1.Type.Uint(),
    destination: exports.TezosContractID,
    parameters: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),
    parameters_manager: schema_utils_1.Type.Optional(exports.TezosParametersManager),
}, { $id: 'TezosTransactionOp' });
exports.TezosOriginationOp = schema_utils_1.Type.Object({
    source: schema_utils_1.Type.Uint8Array(),
    fee: schema_utils_1.Type.Uint(),
    counter: schema_utils_1.Type.Number(),
    gas_limit: schema_utils_1.Type.Number(),
    storage_limit: schema_utils_1.Type.Number(),
    manager_pubkey: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),
    balance: schema_utils_1.Type.Number(),
    spendable: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    delegatable: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
    delegate: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint8Array()),
    script: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Array(schema_utils_1.Type.Number())]),
}, { $id: 'TezosOriginationOp' });
exports.TezosDelegationOp = schema_utils_1.Type.Object({
    source: schema_utils_1.Type.Uint8Array(),
    fee: schema_utils_1.Type.Uint(),
    counter: schema_utils_1.Type.Number(),
    gas_limit: schema_utils_1.Type.Number(),
    storage_limit: schema_utils_1.Type.Number(),
    delegate: schema_utils_1.Type.Uint8Array(),
}, { $id: 'TezosDelegationOp' });
exports.TezosProposalOp = schema_utils_1.Type.Object({
    source: schema_utils_1.Type.String(),
    period: schema_utils_1.Type.Number(),
    proposals: schema_utils_1.Type.Array(schema_utils_1.Type.String()),
}, { $id: 'TezosProposalOp' });
var TezosBallotType;
(function (TezosBallotType) {
    TezosBallotType[TezosBallotType["Yay"] = 0] = "Yay";
    TezosBallotType[TezosBallotType["Nay"] = 1] = "Nay";
    TezosBallotType[TezosBallotType["Pass"] = 2] = "Pass";
})(TezosBallotType || (exports.TezosBallotType = TezosBallotType = {}));
exports.EnumTezosBallotType = schema_utils_1.Type.Enum(TezosBallotType);
exports.TezosBallotOp = schema_utils_1.Type.Object({
    source: schema_utils_1.Type.String(),
    period: schema_utils_1.Type.Number(),
    proposal: schema_utils_1.Type.String(),
    ballot: exports.EnumTezosBallotType,
}, { $id: 'TezosBallotOp' });
exports.TezosSignTx = schema_utils_1.Type.Object({
    address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),
    branch: schema_utils_1.Type.Uint8Array(),
    reveal: schema_utils_1.Type.Optional(exports.TezosRevealOp),
    transaction: schema_utils_1.Type.Optional(exports.TezosTransactionOp),
    origination: schema_utils_1.Type.Optional(exports.TezosOriginationOp),
    delegation: schema_utils_1.Type.Optional(exports.TezosDelegationOp),
    proposal: schema_utils_1.Type.Optional(exports.TezosProposalOp),
    ballot: schema_utils_1.Type.Optional(exports.TezosBallotOp),
    chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),
}, { $id: 'TezosSignTx' });
exports.TezosSignedTx = schema_utils_1.Type.Object({
    signature: schema_utils_1.Type.String(),
    sig_op_contents: schema_utils_1.Type.String(),
    operation_hash: schema_utils_1.Type.String(),
}, { $id: 'TezosSignedTx' });
exports.MessageType = schema_utils_1.Type.Object({
    HDNodeType: exports.HDNodeType,
    HDNodePathType: exports.HDNodePathType,
    MultisigRedeemScriptType: exports.MultisigRedeemScriptType,
    GetPublicKey: exports.GetPublicKey,
    PublicKey: exports.PublicKey,
    GetAddress: exports.GetAddress,
    Address: exports.Address,
    GetOwnershipId: exports.GetOwnershipId,
    OwnershipId: exports.OwnershipId,
    SignMessage: exports.SignMessage,
    MessageSignature: exports.MessageSignature,
    VerifyMessage: exports.VerifyMessage,
    CoinJoinRequest: exports.CoinJoinRequest,
    SignTx: exports.SignTx,
    TxRequestDetailsType: exports.TxRequestDetailsType,
    TxRequestSerializedType: exports.TxRequestSerializedType,
    TxRequest: exports.TxRequest,
    TxInputType: exports.TxInputType,
    TxOutputBinType: exports.TxOutputBinType,
    TxOutputType: exports.TxOutputType,
    PrevTx: exports.PrevTx,
    PrevInput: exports.PrevInput,
    PrevOutput: exports.PrevOutput,
    TextMemo: exports.TextMemo,
    RefundMemo: exports.RefundMemo,
    CoinPurchaseMemo: exports.CoinPurchaseMemo,
    PaymentRequestMemo: exports.PaymentRequestMemo,
    TxAckPaymentRequest: exports.TxAckPaymentRequest,
    TxAck: exports.TxAck,
    TxAckInputWrapper: exports.TxAckInputWrapper,
    TxAckInput: exports.TxAckInput,
    TxAckOutputWrapper: exports.TxAckOutputWrapper,
    TxAckOutput: exports.TxAckOutput,
    TxAckPrevMeta: exports.TxAckPrevMeta,
    TxAckPrevInputWrapper: exports.TxAckPrevInputWrapper,
    TxAckPrevInput: exports.TxAckPrevInput,
    TxAckPrevOutputWrapper: exports.TxAckPrevOutputWrapper,
    TxAckPrevOutput: exports.TxAckPrevOutput,
    TxAckPrevExtraDataWrapper: exports.TxAckPrevExtraDataWrapper,
    TxAckPrevExtraData: exports.TxAckPrevExtraData,
    GetOwnershipProof: exports.GetOwnershipProof,
    OwnershipProof: exports.OwnershipProof,
    AuthorizeCoinJoin: exports.AuthorizeCoinJoin,
    BleUnpair: exports.BleUnpair,
    FirmwareErase: exports.FirmwareErase,
    FirmwareRequest: exports.FirmwareRequest,
    FirmwareUpload: exports.FirmwareUpload,
    ProdTestT1: exports.ProdTestT1,
    CardanoBlockchainPointerType: exports.CardanoBlockchainPointerType,
    CardanoNativeScript: exports.CardanoNativeScript,
    CardanoGetNativeScriptHash: exports.CardanoGetNativeScriptHash,
    CardanoNativeScriptHash: exports.CardanoNativeScriptHash,
    CardanoAddressParametersType: exports.CardanoAddressParametersType,
    CardanoGetAddress: exports.CardanoGetAddress,
    CardanoAddress: exports.CardanoAddress,
    CardanoGetPublicKey: exports.CardanoGetPublicKey,
    CardanoPublicKey: exports.CardanoPublicKey,
    CardanoSignTxInit: exports.CardanoSignTxInit,
    CardanoTxInput: exports.CardanoTxInput,
    CardanoTxOutput: exports.CardanoTxOutput,
    CardanoAssetGroup: exports.CardanoAssetGroup,
    CardanoToken: exports.CardanoToken,
    CardanoTxInlineDatumChunk: exports.CardanoTxInlineDatumChunk,
    CardanoTxReferenceScriptChunk: exports.CardanoTxReferenceScriptChunk,
    CardanoPoolOwner: exports.CardanoPoolOwner,
    CardanoPoolRelayParameters: exports.CardanoPoolRelayParameters,
    CardanoPoolMetadataType: exports.CardanoPoolMetadataType,
    CardanoPoolParametersType: exports.CardanoPoolParametersType,
    CardanoDRep: exports.CardanoDRep,
    CardanoTxCertificate: exports.CardanoTxCertificate,
    CardanoTxWithdrawal: exports.CardanoTxWithdrawal,
    CardanoCVoteRegistrationDelegation: exports.CardanoCVoteRegistrationDelegation,
    CardanoCVoteRegistrationParametersType: exports.CardanoCVoteRegistrationParametersType,
    CardanoTxAuxiliaryData: exports.CardanoTxAuxiliaryData,
    CardanoTxMint: exports.CardanoTxMint,
    CardanoTxCollateralInput: exports.CardanoTxCollateralInput,
    CardanoTxRequiredSigner: exports.CardanoTxRequiredSigner,
    CardanoTxReferenceInput: exports.CardanoTxReferenceInput,
    CardanoTxItemAck: exports.CardanoTxItemAck,
    CardanoTxAuxiliaryDataSupplement: exports.CardanoTxAuxiliaryDataSupplement,
    CardanoTxWitnessRequest: exports.CardanoTxWitnessRequest,
    CardanoTxWitnessResponse: exports.CardanoTxWitnessResponse,
    CardanoTxHostAck: exports.CardanoTxHostAck,
    CardanoTxBodyHash: exports.CardanoTxBodyHash,
    CardanoSignTxFinished: exports.CardanoSignTxFinished,
    Success: exports.Success,
    Failure: exports.Failure,
    ButtonRequest: exports.ButtonRequest,
    ButtonAck: exports.ButtonAck,
    PinMatrixRequest: exports.PinMatrixRequest,
    PinMatrixAck: exports.PinMatrixAck,
    PassphraseRequest: exports.PassphraseRequest,
    PassphraseAck: exports.PassphraseAck,
    Deprecated_PassphraseStateRequest: exports.Deprecated_PassphraseStateRequest,
    Deprecated_PassphraseStateAck: exports.Deprecated_PassphraseStateAck,
    CipherKeyValue: exports.CipherKeyValue,
    CipheredKeyValue: exports.CipheredKeyValue,
    IdentityType: exports.IdentityType,
    SignIdentity: exports.SignIdentity,
    SignedIdentity: exports.SignedIdentity,
    GetECDHSessionKey: exports.GetECDHSessionKey,
    ECDHSessionKey: exports.ECDHSessionKey,
    DebugLinkGetPairingInfo: exports.DebugLinkGetPairingInfo,
    DebugLinkPairingInfo: exports.DebugLinkPairingInfo,
    DebugLinkToggleThpPairingDialog: exports.DebugLinkToggleThpPairingDialog,
    DebugLinkResetDebugEvents: exports.DebugLinkResetDebugEvents,
    DebugLinkOptigaSetSecMax: exports.DebugLinkOptigaSetSecMax,
    DebugLinkGetGcInfo: exports.DebugLinkGetGcInfo,
    DebugLinkGcInfoItem: exports.DebugLinkGcInfoItem,
    DebugLinkGcInfo: exports.DebugLinkGcInfo,
    EthereumNetworkInfo: exports.EthereumNetworkInfo,
    EthereumTokenInfo: exports.EthereumTokenInfo,
    SolanaTokenInfo: exports.SolanaTokenInfo,
    EosGetPublicKey: exports.EosGetPublicKey,
    EosPublicKey: exports.EosPublicKey,
    EosTxHeader: exports.EosTxHeader,
    EosSignTx: exports.EosSignTx,
    EosTxActionRequest: exports.EosTxActionRequest,
    EosAsset: exports.EosAsset,
    EosPermissionLevel: exports.EosPermissionLevel,
    EosAuthorizationKey: exports.EosAuthorizationKey,
    EosAuthorizationAccount: exports.EosAuthorizationAccount,
    EosAuthorizationWait: exports.EosAuthorizationWait,
    EosAuthorization: exports.EosAuthorization,
    EosActionCommon: exports.EosActionCommon,
    EosActionTransfer: exports.EosActionTransfer,
    EosActionDelegate: exports.EosActionDelegate,
    EosActionUndelegate: exports.EosActionUndelegate,
    EosActionRefund: exports.EosActionRefund,
    EosActionBuyRam: exports.EosActionBuyRam,
    EosActionBuyRamBytes: exports.EosActionBuyRamBytes,
    EosActionSellRam: exports.EosActionSellRam,
    EosActionVoteProducer: exports.EosActionVoteProducer,
    EosActionUpdateAuth: exports.EosActionUpdateAuth,
    EosActionDeleteAuth: exports.EosActionDeleteAuth,
    EosActionLinkAuth: exports.EosActionLinkAuth,
    EosActionUnlinkAuth: exports.EosActionUnlinkAuth,
    EosActionNewAccount: exports.EosActionNewAccount,
    EosActionUnknown: exports.EosActionUnknown,
    EosTxActionAck: exports.EosTxActionAck,
    EosSignedTx: exports.EosSignedTx,
    EthereumDefinitions: exports.EthereumDefinitions,
    EthereumSignTypedData: exports.EthereumSignTypedData,
    EthereumTypedDataStructRequest: exports.EthereumTypedDataStructRequest,
    EthereumFieldType: exports.EthereumFieldType,
    EthereumStructMember: exports.EthereumStructMember,
    EthereumTypedDataStructAck: exports.EthereumTypedDataStructAck,
    EthereumTypedDataValueRequest: exports.EthereumTypedDataValueRequest,
    EthereumTypedDataValueAck: exports.EthereumTypedDataValueAck,
    EthereumGetPublicKey: exports.EthereumGetPublicKey,
    EthereumPublicKey: exports.EthereumPublicKey,
    EthereumGetAddress: exports.EthereumGetAddress,
    EthereumAddress: exports.EthereumAddress,
    EthereumSignTx: exports.EthereumSignTx,
    EthereumAccessList: exports.EthereumAccessList,
    EthereumSignTxEIP1559: exports.EthereumSignTxEIP1559,
    EthereumTxRequest: exports.EthereumTxRequest,
    EthereumTxAck: exports.EthereumTxAck,
    EthereumSignMessage: exports.EthereumSignMessage,
    EthereumMessageSignature: exports.EthereumMessageSignature,
    EthereumVerifyMessage: exports.EthereumVerifyMessage,
    EthereumSignTypedHash: exports.EthereumSignTypedHash,
    EthereumTypedDataSignature: exports.EthereumTypedDataSignature,
    Initialize: exports.Initialize,
    GetFeatures: exports.GetFeatures,
    RecoveryDevice: exports.RecoveryDevice,
    Features: exports.Features,
    LockDevice: exports.LockDevice,
    SetBusy: exports.SetBusy,
    EndSession: exports.EndSession,
    ApplySettings: exports.ApplySettings,
    ChangeLanguage: exports.ChangeLanguage,
    DataChunkRequest: exports.DataChunkRequest,
    DataChunkAck: exports.DataChunkAck,
    ApplyFlags: exports.ApplyFlags,
    ChangePin: exports.ChangePin,
    ChangeWipeCode: exports.ChangeWipeCode,
    SdProtect: exports.SdProtect,
    Ping: exports.Ping,
    Cancel: exports.Cancel,
    GetEntropy: exports.GetEntropy,
    Entropy: exports.Entropy,
    GetFirmwareHash: exports.GetFirmwareHash,
    FirmwareHash: exports.FirmwareHash,
    AuthenticateDevice: exports.AuthenticateDevice,
    AuthenticityProof: exports.AuthenticityProof,
    WipeDevice: exports.WipeDevice,
    LoadDevice: exports.LoadDevice,
    ResetDevice: exports.ResetDevice,
    Slip39Group: exports.Slip39Group,
    BackupDevice: exports.BackupDevice,
    EntropyRequest: exports.EntropyRequest,
    EntropyAck: exports.EntropyAck,
    EntropyCheckReady: exports.EntropyCheckReady,
    EntropyCheckContinue: exports.EntropyCheckContinue,
    WordRequest: exports.WordRequest,
    WordAck: exports.WordAck,
    SetU2FCounter: exports.SetU2FCounter,
    GetNextU2FCounter: exports.GetNextU2FCounter,
    NextU2FCounter: exports.NextU2FCounter,
    DoPreauthorized: exports.DoPreauthorized,
    PreauthorizedRequest: exports.PreauthorizedRequest,
    CancelAuthorization: exports.CancelAuthorization,
    RebootToBootloader: exports.RebootToBootloader,
    GetNonce: exports.GetNonce,
    Nonce: exports.Nonce,
    UnlockPath: exports.UnlockPath,
    UnlockedPathRequest: exports.UnlockedPathRequest,
    ShowDeviceTutorial: exports.ShowDeviceTutorial,
    UnlockBootloader: exports.UnlockBootloader,
    SetBrightness: exports.SetBrightness,
    NEMGetAddress: exports.NEMGetAddress,
    NEMAddress: exports.NEMAddress,
    NEMTransactionCommon: exports.NEMTransactionCommon,
    NEMMosaic: exports.NEMMosaic,
    NEMTransfer: exports.NEMTransfer,
    NEMProvisionNamespace: exports.NEMProvisionNamespace,
    NEMMosaicDefinition: exports.NEMMosaicDefinition,
    NEMMosaicCreation: exports.NEMMosaicCreation,
    NEMMosaicSupplyChange: exports.NEMMosaicSupplyChange,
    NEMCosignatoryModification: exports.NEMCosignatoryModification,
    NEMAggregateModification: exports.NEMAggregateModification,
    NEMImportanceTransfer: exports.NEMImportanceTransfer,
    NEMSignTx: exports.NEMSignTx,
    NEMSignedTx: exports.NEMSignedTx,
    NEMDecryptMessage: exports.NEMDecryptMessage,
    NEMDecryptedMessage: exports.NEMDecryptedMessage,
    RippleGetAddress: exports.RippleGetAddress,
    RippleAddress: exports.RippleAddress,
    RipplePayment: exports.RipplePayment,
    RippleSignTx: exports.RippleSignTx,
    RippleSignedTx: exports.RippleSignedTx,
    SolanaGetPublicKey: exports.SolanaGetPublicKey,
    SolanaPublicKey: exports.SolanaPublicKey,
    SolanaGetAddress: exports.SolanaGetAddress,
    SolanaAddress: exports.SolanaAddress,
    SolanaTxTokenAccountInfo: exports.SolanaTxTokenAccountInfo,
    SolanaTxAdditionalInfo: exports.SolanaTxAdditionalInfo,
    SolanaSignTx: exports.SolanaSignTx,
    SolanaTxSignature: exports.SolanaTxSignature,
    StellarAsset: exports.StellarAsset,
    StellarGetAddress: exports.StellarGetAddress,
    StellarAddress: exports.StellarAddress,
    StellarSignTx: exports.StellarSignTx,
    StellarTxOpRequest: exports.StellarTxOpRequest,
    StellarPaymentOp: exports.StellarPaymentOp,
    StellarCreateAccountOp: exports.StellarCreateAccountOp,
    StellarPathPaymentStrictReceiveOp: exports.StellarPathPaymentStrictReceiveOp,
    StellarPathPaymentStrictSendOp: exports.StellarPathPaymentStrictSendOp,
    StellarManageSellOfferOp: exports.StellarManageSellOfferOp,
    StellarManageBuyOfferOp: exports.StellarManageBuyOfferOp,
    StellarCreatePassiveSellOfferOp: exports.StellarCreatePassiveSellOfferOp,
    StellarSetOptionsOp: exports.StellarSetOptionsOp,
    StellarChangeTrustOp: exports.StellarChangeTrustOp,
    StellarAllowTrustOp: exports.StellarAllowTrustOp,
    StellarAccountMergeOp: exports.StellarAccountMergeOp,
    StellarManageDataOp: exports.StellarManageDataOp,
    StellarBumpSequenceOp: exports.StellarBumpSequenceOp,
    StellarClaimClaimableBalanceOp: exports.StellarClaimClaimableBalanceOp,
    StellarSignedTx: exports.StellarSignedTx,
    TezosGetAddress: exports.TezosGetAddress,
    TezosAddress: exports.TezosAddress,
    TezosGetPublicKey: exports.TezosGetPublicKey,
    TezosPublicKey: exports.TezosPublicKey,
    TezosContractID: exports.TezosContractID,
    TezosRevealOp: exports.TezosRevealOp,
    TezosManagerTransfer: exports.TezosManagerTransfer,
    TezosParametersManager: exports.TezosParametersManager,
    TezosTransactionOp: exports.TezosTransactionOp,
    TezosOriginationOp: exports.TezosOriginationOp,
    TezosDelegationOp: exports.TezosDelegationOp,
    TezosProposalOp: exports.TezosProposalOp,
    TezosBallotOp: exports.TezosBallotOp,
    TezosSignTx: exports.TezosSignTx,
    TezosSignedTx: exports.TezosSignedTx,
}, { $id: 'MessageType' });
//# sourceMappingURL=messages-schema.js.map

/***/ }),

/***/ "./node_modules/@trezor/protobuf/lib/messages.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TezosBallotType = exports.TezosContractType = exports.StellarSignerType = exports.StellarMemoType = exports.StellarAssetType = exports.NEMImportanceTransferMode = exports.NEMModificationType = exports.NEMSupplyChangeType = exports.NEMMosaicLevy = exports.BootCommand = exports.Enum_WordRequestType = exports.SdProtectOperationType = exports.Enum_RecoveryType = exports.RecoveryDeviceInputMethod = exports.Enum_Capability = exports.Enum_RecoveryStatus = exports.Enum_BackupAvailability = exports.Enum_HomescreenFormat = exports.Enum_DisplayRotation = exports.Enum_SafetyCheckLevel = exports.Enum_BackupType = exports.EthereumDataType = exports.DefinitionType = exports.DebugWaitType = exports.DebugPhysicalButton = exports.DebugButton = exports.Enum_PinMatrixRequestType = exports.Enum_ButtonRequestType = exports.Enum_FailureType = exports.CardanoTxWitnessType = exports.CardanoTxSigningMode = exports.CardanoCVoteRegistrationFormat = exports.CardanoTxAuxiliaryDataSupplementType = exports.CardanoPoolRelayType = exports.CardanoDRepType = exports.CardanoCertificateType = exports.CardanoTxOutputSerializationFormat = exports.CardanoNativeScriptHashDisplayFormat = exports.CardanoNativeScriptType = exports.CardanoAddressType = exports.CardanoDerivationType = exports.Enum_RequestType = exports.MultisigPubkeysOrder = exports.AmountUnit = exports.DecredStakingSpendType = exports.Enum_OutputScriptType = exports.Enum_InputScriptType = exports.DeviceModelInternal = void 0;
var DeviceModelInternal;
(function (DeviceModelInternal) {
    DeviceModelInternal["T1B1"] = "T1B1";
    DeviceModelInternal["T2T1"] = "T2T1";
    DeviceModelInternal["T2B1"] = "T2B1";
    DeviceModelInternal["T3B1"] = "T3B1";
    DeviceModelInternal["T3T1"] = "T3T1";
    DeviceModelInternal["T3W1"] = "T3W1";
    DeviceModelInternal["UNKNOWN"] = "UNKNOWN";
})(DeviceModelInternal || (exports.DeviceModelInternal = DeviceModelInternal = {}));
var Enum_InputScriptType;
(function (Enum_InputScriptType) {
    Enum_InputScriptType[Enum_InputScriptType["SPENDADDRESS"] = 0] = "SPENDADDRESS";
    Enum_InputScriptType[Enum_InputScriptType["SPENDMULTISIG"] = 1] = "SPENDMULTISIG";
    Enum_InputScriptType[Enum_InputScriptType["EXTERNAL"] = 2] = "EXTERNAL";
    Enum_InputScriptType[Enum_InputScriptType["SPENDWITNESS"] = 3] = "SPENDWITNESS";
    Enum_InputScriptType[Enum_InputScriptType["SPENDP2SHWITNESS"] = 4] = "SPENDP2SHWITNESS";
    Enum_InputScriptType[Enum_InputScriptType["SPENDTAPROOT"] = 5] = "SPENDTAPROOT";
})(Enum_InputScriptType || (exports.Enum_InputScriptType = Enum_InputScriptType = {}));
var Enum_OutputScriptType;
(function (Enum_OutputScriptType) {
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOADDRESS"] = 0] = "PAYTOADDRESS";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOSCRIPTHASH"] = 1] = "PAYTOSCRIPTHASH";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOMULTISIG"] = 2] = "PAYTOMULTISIG";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOOPRETURN"] = 3] = "PAYTOOPRETURN";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOWITNESS"] = 4] = "PAYTOWITNESS";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOP2SHWITNESS"] = 5] = "PAYTOP2SHWITNESS";
    Enum_OutputScriptType[Enum_OutputScriptType["PAYTOTAPROOT"] = 6] = "PAYTOTAPROOT";
})(Enum_OutputScriptType || (exports.Enum_OutputScriptType = Enum_OutputScriptType = {}));
var DecredStakingSpendType;
(function (DecredStakingSpendType) {
    DecredStakingSpendType[DecredStakingSpendType["SSGen"] = 0] = "SSGen";
    DecredStakingSpendType[DecredStakingSpendType["SSRTX"] = 1] = "SSRTX";
})(DecredStakingSpendType || (exports.DecredStakingSpendType = DecredStakingSpendType = {}));
var AmountUnit;
(function (AmountUnit) {
    AmountUnit[AmountUnit["BITCOIN"] = 0] = "BITCOIN";
    AmountUnit[AmountUnit["MILLIBITCOIN"] = 1] = "MILLIBITCOIN";
    AmountUnit[AmountUnit["MICROBITCOIN"] = 2] = "MICROBITCOIN";
    AmountUnit[AmountUnit["SATOSHI"] = 3] = "SATOSHI";
})(AmountUnit || (exports.AmountUnit = AmountUnit = {}));
var MultisigPubkeysOrder;
(function (MultisigPubkeysOrder) {
    MultisigPubkeysOrder[MultisigPubkeysOrder["PRESERVED"] = 0] = "PRESERVED";
    MultisigPubkeysOrder[MultisigPubkeysOrder["LEXICOGRAPHIC"] = 1] = "LEXICOGRAPHIC";
})(MultisigPubkeysOrder || (exports.MultisigPubkeysOrder = MultisigPubkeysOrder = {}));
var Enum_RequestType;
(function (Enum_RequestType) {
    Enum_RequestType[Enum_RequestType["TXINPUT"] = 0] = "TXINPUT";
    Enum_RequestType[Enum_RequestType["TXOUTPUT"] = 1] = "TXOUTPUT";
    Enum_RequestType[Enum_RequestType["TXMETA"] = 2] = "TXMETA";
    Enum_RequestType[Enum_RequestType["TXFINISHED"] = 3] = "TXFINISHED";
    Enum_RequestType[Enum_RequestType["TXEXTRADATA"] = 4] = "TXEXTRADATA";
    Enum_RequestType[Enum_RequestType["TXORIGINPUT"] = 5] = "TXORIGINPUT";
    Enum_RequestType[Enum_RequestType["TXORIGOUTPUT"] = 6] = "TXORIGOUTPUT";
    Enum_RequestType[Enum_RequestType["TXPAYMENTREQ"] = 7] = "TXPAYMENTREQ";
})(Enum_RequestType || (exports.Enum_RequestType = Enum_RequestType = {}));
var CardanoDerivationType;
(function (CardanoDerivationType) {
    CardanoDerivationType[CardanoDerivationType["LEDGER"] = 0] = "LEDGER";
    CardanoDerivationType[CardanoDerivationType["ICARUS"] = 1] = "ICARUS";
    CardanoDerivationType[CardanoDerivationType["ICARUS_TREZOR"] = 2] = "ICARUS_TREZOR";
})(CardanoDerivationType || (exports.CardanoDerivationType = CardanoDerivationType = {}));
var CardanoAddressType;
(function (CardanoAddressType) {
    CardanoAddressType[CardanoAddressType["BASE"] = 0] = "BASE";
    CardanoAddressType[CardanoAddressType["BASE_SCRIPT_KEY"] = 1] = "BASE_SCRIPT_KEY";
    CardanoAddressType[CardanoAddressType["BASE_KEY_SCRIPT"] = 2] = "BASE_KEY_SCRIPT";
    CardanoAddressType[CardanoAddressType["BASE_SCRIPT_SCRIPT"] = 3] = "BASE_SCRIPT_SCRIPT";
    CardanoAddressType[CardanoAddressType["POINTER"] = 4] = "POINTER";
    CardanoAddressType[CardanoAddressType["POINTER_SCRIPT"] = 5] = "POINTER_SCRIPT";
    CardanoAddressType[CardanoAddressType["ENTERPRISE"] = 6] = "ENTERPRISE";
    CardanoAddressType[CardanoAddressType["ENTERPRISE_SCRIPT"] = 7] = "ENTERPRISE_SCRIPT";
    CardanoAddressType[CardanoAddressType["BYRON"] = 8] = "BYRON";
    CardanoAddressType[CardanoAddressType["REWARD"] = 14] = "REWARD";
    CardanoAddressType[CardanoAddressType["REWARD_SCRIPT"] = 15] = "REWARD_SCRIPT";
})(CardanoAddressType || (exports.CardanoAddressType = CardanoAddressType = {}));
var CardanoNativeScriptType;
(function (CardanoNativeScriptType) {
    CardanoNativeScriptType[CardanoNativeScriptType["PUB_KEY"] = 0] = "PUB_KEY";
    CardanoNativeScriptType[CardanoNativeScriptType["ALL"] = 1] = "ALL";
    CardanoNativeScriptType[CardanoNativeScriptType["ANY"] = 2] = "ANY";
    CardanoNativeScriptType[CardanoNativeScriptType["N_OF_K"] = 3] = "N_OF_K";
    CardanoNativeScriptType[CardanoNativeScriptType["INVALID_BEFORE"] = 4] = "INVALID_BEFORE";
    CardanoNativeScriptType[CardanoNativeScriptType["INVALID_HEREAFTER"] = 5] = "INVALID_HEREAFTER";
})(CardanoNativeScriptType || (exports.CardanoNativeScriptType = CardanoNativeScriptType = {}));
var CardanoNativeScriptHashDisplayFormat;
(function (CardanoNativeScriptHashDisplayFormat) {
    CardanoNativeScriptHashDisplayFormat[CardanoNativeScriptHashDisplayFormat["HIDE"] = 0] = "HIDE";
    CardanoNativeScriptHashDisplayFormat[CardanoNativeScriptHashDisplayFormat["BECH32"] = 1] = "BECH32";
    CardanoNativeScriptHashDisplayFormat[CardanoNativeScriptHashDisplayFormat["POLICY_ID"] = 2] = "POLICY_ID";
})(CardanoNativeScriptHashDisplayFormat || (exports.CardanoNativeScriptHashDisplayFormat = CardanoNativeScriptHashDisplayFormat = {}));
var CardanoTxOutputSerializationFormat;
(function (CardanoTxOutputSerializationFormat) {
    CardanoTxOutputSerializationFormat[CardanoTxOutputSerializationFormat["ARRAY_LEGACY"] = 0] = "ARRAY_LEGACY";
    CardanoTxOutputSerializationFormat[CardanoTxOutputSerializationFormat["MAP_BABBAGE"] = 1] = "MAP_BABBAGE";
})(CardanoTxOutputSerializationFormat || (exports.CardanoTxOutputSerializationFormat = CardanoTxOutputSerializationFormat = {}));
var CardanoCertificateType;
(function (CardanoCertificateType) {
    CardanoCertificateType[CardanoCertificateType["STAKE_REGISTRATION"] = 0] = "STAKE_REGISTRATION";
    CardanoCertificateType[CardanoCertificateType["STAKE_DEREGISTRATION"] = 1] = "STAKE_DEREGISTRATION";
    CardanoCertificateType[CardanoCertificateType["STAKE_DELEGATION"] = 2] = "STAKE_DELEGATION";
    CardanoCertificateType[CardanoCertificateType["STAKE_POOL_REGISTRATION"] = 3] = "STAKE_POOL_REGISTRATION";
    CardanoCertificateType[CardanoCertificateType["STAKE_REGISTRATION_CONWAY"] = 7] = "STAKE_REGISTRATION_CONWAY";
    CardanoCertificateType[CardanoCertificateType["STAKE_DEREGISTRATION_CONWAY"] = 8] = "STAKE_DEREGISTRATION_CONWAY";
    CardanoCertificateType[CardanoCertificateType["VOTE_DELEGATION"] = 9] = "VOTE_DELEGATION";
})(CardanoCertificateType || (exports.CardanoCertificateType = CardanoCertificateType = {}));
var CardanoDRepType;
(function (CardanoDRepType) {
    CardanoDRepType[CardanoDRepType["KEY_HASH"] = 0] = "KEY_HASH";
    CardanoDRepType[CardanoDRepType["SCRIPT_HASH"] = 1] = "SCRIPT_HASH";
    CardanoDRepType[CardanoDRepType["ABSTAIN"] = 2] = "ABSTAIN";
    CardanoDRepType[CardanoDRepType["NO_CONFIDENCE"] = 3] = "NO_CONFIDENCE";
})(CardanoDRepType || (exports.CardanoDRepType = CardanoDRepType = {}));
var CardanoPoolRelayType;
(function (CardanoPoolRelayType) {
    CardanoPoolRelayType[CardanoPoolRelayType["SINGLE_HOST_IP"] = 0] = "SINGLE_HOST_IP";
    CardanoPoolRelayType[CardanoPoolRelayType["SINGLE_HOST_NAME"] = 1] = "SINGLE_HOST_NAME";
    CardanoPoolRelayType[CardanoPoolRelayType["MULTIPLE_HOST_NAME"] = 2] = "MULTIPLE_HOST_NAME";
})(CardanoPoolRelayType || (exports.CardanoPoolRelayType = CardanoPoolRelayType = {}));
var CardanoTxAuxiliaryDataSupplementType;
(function (CardanoTxAuxiliaryDataSupplementType) {
    CardanoTxAuxiliaryDataSupplementType[CardanoTxAuxiliaryDataSupplementType["NONE"] = 0] = "NONE";
    CardanoTxAuxiliaryDataSupplementType[CardanoTxAuxiliaryDataSupplementType["CVOTE_REGISTRATION_SIGNATURE"] = 1] = "CVOTE_REGISTRATION_SIGNATURE";
})(CardanoTxAuxiliaryDataSupplementType || (exports.CardanoTxAuxiliaryDataSupplementType = CardanoTxAuxiliaryDataSupplementType = {}));
var CardanoCVoteRegistrationFormat;
(function (CardanoCVoteRegistrationFormat) {
    CardanoCVoteRegistrationFormat[CardanoCVoteRegistrationFormat["CIP15"] = 0] = "CIP15";
    CardanoCVoteRegistrationFormat[CardanoCVoteRegistrationFormat["CIP36"] = 1] = "CIP36";
})(CardanoCVoteRegistrationFormat || (exports.CardanoCVoteRegistrationFormat = CardanoCVoteRegistrationFormat = {}));
var CardanoTxSigningMode;
(function (CardanoTxSigningMode) {
    CardanoTxSigningMode[CardanoTxSigningMode["ORDINARY_TRANSACTION"] = 0] = "ORDINARY_TRANSACTION";
    CardanoTxSigningMode[CardanoTxSigningMode["POOL_REGISTRATION_AS_OWNER"] = 1] = "POOL_REGISTRATION_AS_OWNER";
    CardanoTxSigningMode[CardanoTxSigningMode["MULTISIG_TRANSACTION"] = 2] = "MULTISIG_TRANSACTION";
    CardanoTxSigningMode[CardanoTxSigningMode["PLUTUS_TRANSACTION"] = 3] = "PLUTUS_TRANSACTION";
})(CardanoTxSigningMode || (exports.CardanoTxSigningMode = CardanoTxSigningMode = {}));
var CardanoTxWitnessType;
(function (CardanoTxWitnessType) {
    CardanoTxWitnessType[CardanoTxWitnessType["BYRON_WITNESS"] = 0] = "BYRON_WITNESS";
    CardanoTxWitnessType[CardanoTxWitnessType["SHELLEY_WITNESS"] = 1] = "SHELLEY_WITNESS";
})(CardanoTxWitnessType || (exports.CardanoTxWitnessType = CardanoTxWitnessType = {}));
var Enum_FailureType;
(function (Enum_FailureType) {
    Enum_FailureType[Enum_FailureType["Failure_UnexpectedMessage"] = 1] = "Failure_UnexpectedMessage";
    Enum_FailureType[Enum_FailureType["Failure_ButtonExpected"] = 2] = "Failure_ButtonExpected";
    Enum_FailureType[Enum_FailureType["Failure_DataError"] = 3] = "Failure_DataError";
    Enum_FailureType[Enum_FailureType["Failure_ActionCancelled"] = 4] = "Failure_ActionCancelled";
    Enum_FailureType[Enum_FailureType["Failure_PinExpected"] = 5] = "Failure_PinExpected";
    Enum_FailureType[Enum_FailureType["Failure_PinCancelled"] = 6] = "Failure_PinCancelled";
    Enum_FailureType[Enum_FailureType["Failure_PinInvalid"] = 7] = "Failure_PinInvalid";
    Enum_FailureType[Enum_FailureType["Failure_InvalidSignature"] = 8] = "Failure_InvalidSignature";
    Enum_FailureType[Enum_FailureType["Failure_ProcessError"] = 9] = "Failure_ProcessError";
    Enum_FailureType[Enum_FailureType["Failure_NotEnoughFunds"] = 10] = "Failure_NotEnoughFunds";
    Enum_FailureType[Enum_FailureType["Failure_NotInitialized"] = 11] = "Failure_NotInitialized";
    Enum_FailureType[Enum_FailureType["Failure_PinMismatch"] = 12] = "Failure_PinMismatch";
    Enum_FailureType[Enum_FailureType["Failure_WipeCodeMismatch"] = 13] = "Failure_WipeCodeMismatch";
    Enum_FailureType[Enum_FailureType["Failure_InvalidSession"] = 14] = "Failure_InvalidSession";
    Enum_FailureType[Enum_FailureType["Failure_Busy"] = 15] = "Failure_Busy";
    Enum_FailureType[Enum_FailureType["Failure_ThpUnallocatedSession"] = 16] = "Failure_ThpUnallocatedSession";
    Enum_FailureType[Enum_FailureType["Failure_InvalidProtocol"] = 17] = "Failure_InvalidProtocol";
    Enum_FailureType[Enum_FailureType["Failure_BufferError"] = 18] = "Failure_BufferError";
    Enum_FailureType[Enum_FailureType["Failure_FirmwareError"] = 99] = "Failure_FirmwareError";
})(Enum_FailureType || (exports.Enum_FailureType = Enum_FailureType = {}));
var Enum_ButtonRequestType;
(function (Enum_ButtonRequestType) {
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_Other"] = 1] = "ButtonRequest_Other";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_FeeOverThreshold"] = 2] = "ButtonRequest_FeeOverThreshold";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_ConfirmOutput"] = 3] = "ButtonRequest_ConfirmOutput";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_ResetDevice"] = 4] = "ButtonRequest_ResetDevice";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_ConfirmWord"] = 5] = "ButtonRequest_ConfirmWord";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_WipeDevice"] = 6] = "ButtonRequest_WipeDevice";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_ProtectCall"] = 7] = "ButtonRequest_ProtectCall";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_SignTx"] = 8] = "ButtonRequest_SignTx";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_FirmwareCheck"] = 9] = "ButtonRequest_FirmwareCheck";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_Address"] = 10] = "ButtonRequest_Address";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_PublicKey"] = 11] = "ButtonRequest_PublicKey";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_MnemonicWordCount"] = 12] = "ButtonRequest_MnemonicWordCount";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_MnemonicInput"] = 13] = "ButtonRequest_MnemonicInput";
    Enum_ButtonRequestType[Enum_ButtonRequestType["_Deprecated_ButtonRequest_PassphraseType"] = 14] = "_Deprecated_ButtonRequest_PassphraseType";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_UnknownDerivationPath"] = 15] = "ButtonRequest_UnknownDerivationPath";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_RecoveryHomepage"] = 16] = "ButtonRequest_RecoveryHomepage";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_Success"] = 17] = "ButtonRequest_Success";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_Warning"] = 18] = "ButtonRequest_Warning";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_PassphraseEntry"] = 19] = "ButtonRequest_PassphraseEntry";
    Enum_ButtonRequestType[Enum_ButtonRequestType["ButtonRequest_PinEntry"] = 20] = "ButtonRequest_PinEntry";
})(Enum_ButtonRequestType || (exports.Enum_ButtonRequestType = Enum_ButtonRequestType = {}));
var Enum_PinMatrixRequestType;
(function (Enum_PinMatrixRequestType) {
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_Current"] = 1] = "PinMatrixRequestType_Current";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_NewFirst"] = 2] = "PinMatrixRequestType_NewFirst";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_NewSecond"] = 3] = "PinMatrixRequestType_NewSecond";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_WipeCodeFirst"] = 4] = "PinMatrixRequestType_WipeCodeFirst";
    Enum_PinMatrixRequestType[Enum_PinMatrixRequestType["PinMatrixRequestType_WipeCodeSecond"] = 5] = "PinMatrixRequestType_WipeCodeSecond";
})(Enum_PinMatrixRequestType || (exports.Enum_PinMatrixRequestType = Enum_PinMatrixRequestType = {}));
var DebugButton;
(function (DebugButton) {
    DebugButton[DebugButton["NO"] = 0] = "NO";
    DebugButton[DebugButton["YES"] = 1] = "YES";
    DebugButton[DebugButton["INFO"] = 2] = "INFO";
})(DebugButton || (exports.DebugButton = DebugButton = {}));
var DebugPhysicalButton;
(function (DebugPhysicalButton) {
    DebugPhysicalButton[DebugPhysicalButton["LEFT_BTN"] = 0] = "LEFT_BTN";
    DebugPhysicalButton[DebugPhysicalButton["MIDDLE_BTN"] = 1] = "MIDDLE_BTN";
    DebugPhysicalButton[DebugPhysicalButton["RIGHT_BTN"] = 2] = "RIGHT_BTN";
})(DebugPhysicalButton || (exports.DebugPhysicalButton = DebugPhysicalButton = {}));
var DebugWaitType;
(function (DebugWaitType) {
    DebugWaitType[DebugWaitType["IMMEDIATE"] = 0] = "IMMEDIATE";
    DebugWaitType[DebugWaitType["NEXT_LAYOUT"] = 1] = "NEXT_LAYOUT";
    DebugWaitType[DebugWaitType["CURRENT_LAYOUT"] = 2] = "CURRENT_LAYOUT";
})(DebugWaitType || (exports.DebugWaitType = DebugWaitType = {}));
var DefinitionType;
(function (DefinitionType) {
    DefinitionType[DefinitionType["ETHEREUM_NETWORK"] = 0] = "ETHEREUM_NETWORK";
    DefinitionType[DefinitionType["ETHEREUM_TOKEN"] = 1] = "ETHEREUM_TOKEN";
    DefinitionType[DefinitionType["SOLANA_TOKEN"] = 2] = "SOLANA_TOKEN";
})(DefinitionType || (exports.DefinitionType = DefinitionType = {}));
var EthereumDataType;
(function (EthereumDataType) {
    EthereumDataType[EthereumDataType["UINT"] = 1] = "UINT";
    EthereumDataType[EthereumDataType["INT"] = 2] = "INT";
    EthereumDataType[EthereumDataType["BYTES"] = 3] = "BYTES";
    EthereumDataType[EthereumDataType["STRING"] = 4] = "STRING";
    EthereumDataType[EthereumDataType["BOOL"] = 5] = "BOOL";
    EthereumDataType[EthereumDataType["ADDRESS"] = 6] = "ADDRESS";
    EthereumDataType[EthereumDataType["ARRAY"] = 7] = "ARRAY";
    EthereumDataType[EthereumDataType["STRUCT"] = 8] = "STRUCT";
})(EthereumDataType || (exports.EthereumDataType = EthereumDataType = {}));
var Enum_BackupType;
(function (Enum_BackupType) {
    Enum_BackupType[Enum_BackupType["Bip39"] = 0] = "Bip39";
    Enum_BackupType[Enum_BackupType["Slip39_Basic"] = 1] = "Slip39_Basic";
    Enum_BackupType[Enum_BackupType["Slip39_Advanced"] = 2] = "Slip39_Advanced";
    Enum_BackupType[Enum_BackupType["Slip39_Single_Extendable"] = 3] = "Slip39_Single_Extendable";
    Enum_BackupType[Enum_BackupType["Slip39_Basic_Extendable"] = 4] = "Slip39_Basic_Extendable";
    Enum_BackupType[Enum_BackupType["Slip39_Advanced_Extendable"] = 5] = "Slip39_Advanced_Extendable";
})(Enum_BackupType || (exports.Enum_BackupType = Enum_BackupType = {}));
var Enum_SafetyCheckLevel;
(function (Enum_SafetyCheckLevel) {
    Enum_SafetyCheckLevel[Enum_SafetyCheckLevel["Strict"] = 0] = "Strict";
    Enum_SafetyCheckLevel[Enum_SafetyCheckLevel["PromptAlways"] = 1] = "PromptAlways";
    Enum_SafetyCheckLevel[Enum_SafetyCheckLevel["PromptTemporarily"] = 2] = "PromptTemporarily";
})(Enum_SafetyCheckLevel || (exports.Enum_SafetyCheckLevel = Enum_SafetyCheckLevel = {}));
var Enum_DisplayRotation;
(function (Enum_DisplayRotation) {
    Enum_DisplayRotation[Enum_DisplayRotation["North"] = 0] = "North";
    Enum_DisplayRotation[Enum_DisplayRotation["East"] = 90] = "East";
    Enum_DisplayRotation[Enum_DisplayRotation["South"] = 180] = "South";
    Enum_DisplayRotation[Enum_DisplayRotation["West"] = 270] = "West";
})(Enum_DisplayRotation || (exports.Enum_DisplayRotation = Enum_DisplayRotation = {}));
var Enum_HomescreenFormat;
(function (Enum_HomescreenFormat) {
    Enum_HomescreenFormat[Enum_HomescreenFormat["Toif"] = 1] = "Toif";
    Enum_HomescreenFormat[Enum_HomescreenFormat["Jpeg"] = 2] = "Jpeg";
    Enum_HomescreenFormat[Enum_HomescreenFormat["ToiG"] = 3] = "ToiG";
})(Enum_HomescreenFormat || (exports.Enum_HomescreenFormat = Enum_HomescreenFormat = {}));
var Enum_BackupAvailability;
(function (Enum_BackupAvailability) {
    Enum_BackupAvailability[Enum_BackupAvailability["NotAvailable"] = 0] = "NotAvailable";
    Enum_BackupAvailability[Enum_BackupAvailability["Required"] = 1] = "Required";
    Enum_BackupAvailability[Enum_BackupAvailability["Available"] = 2] = "Available";
})(Enum_BackupAvailability || (exports.Enum_BackupAvailability = Enum_BackupAvailability = {}));
var Enum_RecoveryStatus;
(function (Enum_RecoveryStatus) {
    Enum_RecoveryStatus[Enum_RecoveryStatus["Nothing"] = 0] = "Nothing";
    Enum_RecoveryStatus[Enum_RecoveryStatus["Recovery"] = 1] = "Recovery";
    Enum_RecoveryStatus[Enum_RecoveryStatus["Backup"] = 2] = "Backup";
})(Enum_RecoveryStatus || (exports.Enum_RecoveryStatus = Enum_RecoveryStatus = {}));
var Enum_Capability;
(function (Enum_Capability) {
    Enum_Capability[Enum_Capability["Capability_Bitcoin"] = 1] = "Capability_Bitcoin";
    Enum_Capability[Enum_Capability["Capability_Bitcoin_like"] = 2] = "Capability_Bitcoin_like";
    Enum_Capability[Enum_Capability["Capability_Binance"] = 3] = "Capability_Binance";
    Enum_Capability[Enum_Capability["Capability_Cardano"] = 4] = "Capability_Cardano";
    Enum_Capability[Enum_Capability["Capability_Crypto"] = 5] = "Capability_Crypto";
    Enum_Capability[Enum_Capability["Capability_EOS"] = 6] = "Capability_EOS";
    Enum_Capability[Enum_Capability["Capability_Ethereum"] = 7] = "Capability_Ethereum";
    Enum_Capability[Enum_Capability["Capability_Lisk"] = 8] = "Capability_Lisk";
    Enum_Capability[Enum_Capability["Capability_Monero"] = 9] = "Capability_Monero";
    Enum_Capability[Enum_Capability["Capability_NEM"] = 10] = "Capability_NEM";
    Enum_Capability[Enum_Capability["Capability_Ripple"] = 11] = "Capability_Ripple";
    Enum_Capability[Enum_Capability["Capability_Stellar"] = 12] = "Capability_Stellar";
    Enum_Capability[Enum_Capability["Capability_Tezos"] = 13] = "Capability_Tezos";
    Enum_Capability[Enum_Capability["Capability_U2F"] = 14] = "Capability_U2F";
    Enum_Capability[Enum_Capability["Capability_Shamir"] = 15] = "Capability_Shamir";
    Enum_Capability[Enum_Capability["Capability_ShamirGroups"] = 16] = "Capability_ShamirGroups";
    Enum_Capability[Enum_Capability["Capability_PassphraseEntry"] = 17] = "Capability_PassphraseEntry";
    Enum_Capability[Enum_Capability["Capability_Solana"] = 18] = "Capability_Solana";
    Enum_Capability[Enum_Capability["Capability_Translations"] = 19] = "Capability_Translations";
    Enum_Capability[Enum_Capability["Capability_Brightness"] = 20] = "Capability_Brightness";
    Enum_Capability[Enum_Capability["Capability_Haptic"] = 21] = "Capability_Haptic";
    Enum_Capability[Enum_Capability["Capability_BLE"] = 22] = "Capability_BLE";
    Enum_Capability[Enum_Capability["Capability_NFC"] = 23] = "Capability_NFC";
})(Enum_Capability || (exports.Enum_Capability = Enum_Capability = {}));
var RecoveryDeviceInputMethod;
(function (RecoveryDeviceInputMethod) {
    RecoveryDeviceInputMethod[RecoveryDeviceInputMethod["ScrambledWords"] = 0] = "ScrambledWords";
    RecoveryDeviceInputMethod[RecoveryDeviceInputMethod["Matrix"] = 1] = "Matrix";
})(RecoveryDeviceInputMethod || (exports.RecoveryDeviceInputMethod = RecoveryDeviceInputMethod = {}));
var Enum_RecoveryType;
(function (Enum_RecoveryType) {
    Enum_RecoveryType[Enum_RecoveryType["NormalRecovery"] = 0] = "NormalRecovery";
    Enum_RecoveryType[Enum_RecoveryType["DryRun"] = 1] = "DryRun";
    Enum_RecoveryType[Enum_RecoveryType["UnlockRepeatedBackup"] = 2] = "UnlockRepeatedBackup";
})(Enum_RecoveryType || (exports.Enum_RecoveryType = Enum_RecoveryType = {}));
var SdProtectOperationType;
(function (SdProtectOperationType) {
    SdProtectOperationType[SdProtectOperationType["DISABLE"] = 0] = "DISABLE";
    SdProtectOperationType[SdProtectOperationType["ENABLE"] = 1] = "ENABLE";
    SdProtectOperationType[SdProtectOperationType["REFRESH"] = 2] = "REFRESH";
})(SdProtectOperationType || (exports.SdProtectOperationType = SdProtectOperationType = {}));
var Enum_WordRequestType;
(function (Enum_WordRequestType) {
    Enum_WordRequestType[Enum_WordRequestType["WordRequestType_Plain"] = 0] = "WordRequestType_Plain";
    Enum_WordRequestType[Enum_WordRequestType["WordRequestType_Matrix9"] = 1] = "WordRequestType_Matrix9";
    Enum_WordRequestType[Enum_WordRequestType["WordRequestType_Matrix6"] = 2] = "WordRequestType_Matrix6";
})(Enum_WordRequestType || (exports.Enum_WordRequestType = Enum_WordRequestType = {}));
var BootCommand;
(function (BootCommand) {
    BootCommand[BootCommand["STOP_AND_WAIT"] = 0] = "STOP_AND_WAIT";
    BootCommand[BootCommand["INSTALL_UPGRADE"] = 1] = "INSTALL_UPGRADE";
})(BootCommand || (exports.BootCommand = BootCommand = {}));
var NEMMosaicLevy;
(function (NEMMosaicLevy) {
    NEMMosaicLevy[NEMMosaicLevy["MosaicLevy_Absolute"] = 1] = "MosaicLevy_Absolute";
    NEMMosaicLevy[NEMMosaicLevy["MosaicLevy_Percentile"] = 2] = "MosaicLevy_Percentile";
})(NEMMosaicLevy || (exports.NEMMosaicLevy = NEMMosaicLevy = {}));
var NEMSupplyChangeType;
(function (NEMSupplyChangeType) {
    NEMSupplyChangeType[NEMSupplyChangeType["SupplyChange_Increase"] = 1] = "SupplyChange_Increase";
    NEMSupplyChangeType[NEMSupplyChangeType["SupplyChange_Decrease"] = 2] = "SupplyChange_Decrease";
})(NEMSupplyChangeType || (exports.NEMSupplyChangeType = NEMSupplyChangeType = {}));
var NEMModificationType;
(function (NEMModificationType) {
    NEMModificationType[NEMModificationType["CosignatoryModification_Add"] = 1] = "CosignatoryModification_Add";
    NEMModificationType[NEMModificationType["CosignatoryModification_Delete"] = 2] = "CosignatoryModification_Delete";
})(NEMModificationType || (exports.NEMModificationType = NEMModificationType = {}));
var NEMImportanceTransferMode;
(function (NEMImportanceTransferMode) {
    NEMImportanceTransferMode[NEMImportanceTransferMode["ImportanceTransfer_Activate"] = 1] = "ImportanceTransfer_Activate";
    NEMImportanceTransferMode[NEMImportanceTransferMode["ImportanceTransfer_Deactivate"] = 2] = "ImportanceTransfer_Deactivate";
})(NEMImportanceTransferMode || (exports.NEMImportanceTransferMode = NEMImportanceTransferMode = {}));
var StellarAssetType;
(function (StellarAssetType) {
    StellarAssetType[StellarAssetType["NATIVE"] = 0] = "NATIVE";
    StellarAssetType[StellarAssetType["ALPHANUM4"] = 1] = "ALPHANUM4";
    StellarAssetType[StellarAssetType["ALPHANUM12"] = 2] = "ALPHANUM12";
})(StellarAssetType || (exports.StellarAssetType = StellarAssetType = {}));
var StellarMemoType;
(function (StellarMemoType) {
    StellarMemoType[StellarMemoType["NONE"] = 0] = "NONE";
    StellarMemoType[StellarMemoType["TEXT"] = 1] = "TEXT";
    StellarMemoType[StellarMemoType["ID"] = 2] = "ID";
    StellarMemoType[StellarMemoType["HASH"] = 3] = "HASH";
    StellarMemoType[StellarMemoType["RETURN"] = 4] = "RETURN";
})(StellarMemoType || (exports.StellarMemoType = StellarMemoType = {}));
var StellarSignerType;
(function (StellarSignerType) {
    StellarSignerType[StellarSignerType["ACCOUNT"] = 0] = "ACCOUNT";
    StellarSignerType[StellarSignerType["PRE_AUTH"] = 1] = "PRE_AUTH";
    StellarSignerType[StellarSignerType["HASH"] = 2] = "HASH";
})(StellarSignerType || (exports.StellarSignerType = StellarSignerType = {}));
var TezosContractType;
(function (TezosContractType) {
    TezosContractType[TezosContractType["Implicit"] = 0] = "Implicit";
    TezosContractType[TezosContractType["Originated"] = 1] = "Originated";
})(TezosContractType || (exports.TezosContractType = TezosContractType = {}));
var TezosBallotType;
(function (TezosBallotType) {
    TezosBallotType[TezosBallotType["Yay"] = 0] = "Yay";
    TezosBallotType[TezosBallotType["Nay"] = 1] = "Nay";
    TezosBallotType[TezosBallotType["Pass"] = 2] = "Pass";
})(TezosBallotType || (exports.TezosBallotType = TezosBallotType = {}));
//# sourceMappingURL=messages.js.map

/***/ }),

/***/ "./node_modules/@trezor/protobuf/lib/utils.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageFromType = exports.createMessageFromName = exports.isPrimitiveField = void 0;
exports.parseConfigure = parseConfigure;
const tslib_1 = __webpack_require__("./node_modules/tslib/tslib.es6.mjs");
const protobuf = tslib_1.__importStar(__webpack_require__("./node_modules/protobufjs/light.js"));
const primitiveTypes = [
    'bool',
    'string',
    'bytes',
    'int32',
    'int64',
    'uint32',
    'uint64',
    'sint32',
    'sint64',
    'fixed32',
    'fixed64',
    'sfixed32',
    'sfixed64',
    'double',
    'float',
];
const isPrimitiveField = (field) => primitiveTypes.includes(field);
exports.isPrimitiveField = isPrimitiveField;
function parseConfigure(data) {
    if (typeof data === 'string') {
        return protobuf.Root.fromJSON(JSON.parse(data));
    }
    return protobuf.Root.fromJSON(data);
}
const createMessageFromName = (messages, name) => {
    const Message = messages.lookupType(name);
    const messageTypes = messages.lookupEnum('MessageType');
    let messageTypeId = messageTypes.values[name];
    if (typeof messageTypeId !== 'number' && Message.options) {
        messageTypeId = Message.options['(wire_type)'];
    }
    return {
        Message,
        messageType: messageTypeId ?? name,
    };
};
exports.createMessageFromName = createMessageFromName;
const createMessageFromType = (messages, messageType) => {
    if (typeof messageType === 'string') {
        const Message = messages.lookupType(messageType);
        return {
            Message,
            messageName: messageType,
        };
    }
    const messageTypes = messages.lookupEnum('MessageType');
    const messageName = messageTypes.valuesById[messageType];
    const Message = messages.lookupType(messageName);
    return {
        Message,
        messageName,
    };
};
exports.createMessageFromType = createMessageFromType;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@trezor/schema-utils/lib/custom-types/array-buffer.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArrayBufferBuilder = void 0;
const typebox_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/index.js");
typebox_1.TypeRegistry.Set('ArrayBuffer', (_, value) => value instanceof ArrayBuffer);
class ArrayBufferBuilder extends typebox_1.JavaScriptTypeBuilder {
    ArrayBuffer(options) {
        return (0, typebox_1.CreateType)({ [typebox_1.Kind]: 'ArrayBuffer', type: 'ArrayBuffer' }, options);
    }
}
exports.ArrayBufferBuilder = ArrayBufferBuilder;
//# sourceMappingURL=array-buffer.js.map

/***/ }),

/***/ "./node_modules/@trezor/schema-utils/lib/custom-types/buffer.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__("./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BufferBuilder = void 0;
const typebox_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/index.js");
typebox_1.TypeRegistry.Set('Buffer', (_, value) => value instanceof Buffer);
class BufferBuilder extends typebox_1.JavaScriptTypeBuilder {
    Buffer(options) {
        return (0, typebox_1.CreateType)({ [typebox_1.Kind]: 'Buffer', type: 'Buffer' }, options);
    }
}
exports.BufferBuilder = BufferBuilder;
//# sourceMappingURL=buffer.js.map

/***/ }),

/***/ "./node_modules/@trezor/schema-utils/lib/custom-types/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UintBuilder = exports.KeyofEnumBuilder = exports.BufferBuilder = exports.ArrayBufferBuilder = void 0;
var array_buffer_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/custom-types/array-buffer.js");
Object.defineProperty(exports, "ArrayBufferBuilder", ({ enumerable: true, get: function () { return array_buffer_1.ArrayBufferBuilder; } }));
var buffer_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/custom-types/buffer.js");
Object.defineProperty(exports, "BufferBuilder", ({ enumerable: true, get: function () { return buffer_1.BufferBuilder; } }));
var keyof_enum_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/custom-types/keyof-enum.js");
Object.defineProperty(exports, "KeyofEnumBuilder", ({ enumerable: true, get: function () { return keyof_enum_1.KeyofEnumBuilder; } }));
var uint_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/custom-types/uint.js");
Object.defineProperty(exports, "UintBuilder", ({ enumerable: true, get: function () { return uint_1.UintBuilder; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/schema-utils/lib/custom-types/keyof-enum.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyofEnumBuilder = void 0;
const typebox_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/index.js");
class KeyofEnumBuilder extends typebox_1.JavaScriptTypeBuilder {
    KeyOfEnum(schema, options) {
        const keys = Object.keys(schema).map(key => this.Literal(key));
        return this.Union(keys, { ...options, [typebox_1.Hint]: 'KeyOfEnum' });
    }
    Enum(schema, options) {
        const anyOf = Object.entries(schema)
            .filter(([key, _value]) => typeof key === 'string' || !isNaN(key))
            .map(([key, value]) => this.Literal(value, { $id: key }));
        return this.Union(anyOf, { ...options, [typebox_1.Hint]: 'Enum' });
    }
}
exports.KeyofEnumBuilder = KeyofEnumBuilder;
//# sourceMappingURL=keyof-enum.js.map

/***/ }),

/***/ "./node_modules/@trezor/schema-utils/lib/custom-types/uint.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UintBuilder = void 0;
const typebox_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/index.js");
typebox_1.TypeRegistry.Set('Uint', (schema, value) => {
    if (typeof value !== 'string' && typeof value !== 'number') {
        return false;
    }
    if ((typeof value === 'number' && !Number.isSafeInteger(value)) ||
        !/^(?:[1-9]\d*|\d)$/.test(value.toString().replace(/^-/, schema.allowNegative ? '' : '-'))) {
        return false;
    }
    return true;
});
class UintBuilder extends typebox_1.JavaScriptTypeBuilder {
    Uint(options) {
        return (0, typebox_1.CreateType)({ [typebox_1.Kind]: 'Uint', type: 'Uint' }, options);
    }
}
exports.UintBuilder = UintBuilder;
//# sourceMappingURL=uint.js.map

/***/ }),

/***/ "./node_modules/@trezor/schema-utils/lib/errors.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InvalidParameter = void 0;
class InvalidParameter extends Error {
    field;
    type;
    constructor(reason, field, type, value) {
        let message = `Invalid parameter`;
        message += ` "${field.substring(1)}"`;
        message += ` (= ${JSON.stringify(value)})`;
        message += `: ${reason.replace(/'/g, '"')}`;
        super(message);
        this.name = 'InvalidParameter';
        this.field = field;
        this.type = type;
    }
}
exports.InvalidParameter = InvalidParameter;
//# sourceMappingURL=errors.js.map

/***/ }),

/***/ "./node_modules/@trezor/schema-utils/lib/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloneType = exports.Optional = exports.Type = void 0;
exports.Validate = Validate;
exports.Assert = Assert;
exports.AssertWeak = AssertWeak;
const typebox_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/index.js");
Object.defineProperty(exports, "CloneType", ({ enumerable: true, get: function () { return typebox_1.CloneType; } }));
Object.defineProperty(exports, "Optional", ({ enumerable: true, get: function () { return typebox_1.Optional; } }));
const errors_1 = __webpack_require__("./node_modules/@sinclair/typebox/build/cjs/errors/index.js");
const ts_mixer_1 = __webpack_require__("./node_modules/ts-mixer/dist/esm/index.js");
const custom_types_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/custom-types/index.js");
const errors_2 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/errors.js");
const utils_1 = __webpack_require__("./node_modules/@trezor/schema-utils/lib/utils.js");
class CustomTypeBuilder extends (0, ts_mixer_1.Mixin)(typebox_1.JavaScriptTypeBuilder, custom_types_1.ArrayBufferBuilder, custom_types_1.BufferBuilder, custom_types_1.KeyofEnumBuilder, custom_types_1.UintBuilder) {
}
function Validate(schema, value) {
    try {
        Assert(schema, value);
        return true;
    }
    catch {
        return false;
    }
}
function FindErrorInUnion(error) {
    const currentValue = error.value;
    const unionMembers = error.schema.anyOf;
    const hasValidMember = unionMembers.find(unionSchema => Validate(unionSchema, currentValue));
    if (!hasValidMember) {
        const possibleMatchesByLiterals = unionMembers.filter(unionSchema => {
            if (unionSchema[typebox_1.Kind] !== 'Object')
                return false;
            return !Object.entries(unionSchema.properties).find(([property, propertySchema]) => propertySchema.const && propertySchema.const !== currentValue[property]);
        });
        if (possibleMatchesByLiterals.length === 1) {
            Assert(possibleMatchesByLiterals[0], currentValue);
        }
        else if (possibleMatchesByLiterals.length > 1) {
            const errorsOfPossibleMatches = possibleMatchesByLiterals.map((matchSchema) => ({
                schema: matchSchema,
                errors: [...(0, errors_1.Errors)(matchSchema, currentValue)],
            }));
            const sortedErrors = errorsOfPossibleMatches.sort((a, b) => a.errors.length - b.errors.length);
            const [bestMatch] = sortedErrors;
            Assert(bestMatch.schema, currentValue);
        }
        throw new errors_2.InvalidParameter(error.message, error.path, error.type, error.value);
    }
}
function Assert(schema, value) {
    const errors = [...(0, errors_1.Errors)(schema, value)];
    let [error] = errors;
    while (error) {
        if (error.path === '/' && errors.length > 1) {
        }
        else if (error.value == null && error.schema[typebox_1.OptionalKind] === 'Optional') {
        }
        else if (error.type === errors_1.ValueErrorType.Union) {
            FindErrorInUnion(error);
        }
        else if (error.type === errors_1.ValueErrorType.Number && typeof error.value === 'string') {
            const currentValue = error.value;
            const parsedNumber = Number(currentValue);
            if (!Number.isNaN(parsedNumber) && currentValue === parsedNumber.toString()) {
                const pathParts = error.path.slice(1).split('/');
                (0, utils_1.setDeepValue)(value, pathParts, parsedNumber);
            }
            else {
                throw new errors_2.InvalidParameter(error.message, error.path, error.type, error.value);
            }
        }
        else {
            throw new errors_2.InvalidParameter(error.message, error.path, error.type, error.value);
        }
        errors.shift();
        [error] = errors;
    }
}
function AssertWeak(schema, value) {
    try {
        Assert(schema, value);
    }
    catch (e) {
        if (e instanceof errors_2.InvalidParameter) {
            if (e.type === errors_1.ValueErrorType.ObjectRequiredProperty) {
                throw e;
            }
            console.warn('Method params validation failed', e);
        }
        else {
            throw e;
        }
    }
}
exports.Type = new CustomTypeBuilder();
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@trezor/schema-utils/lib/utils.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setDeepValue = setDeepValue;
exports.getDeepValue = getDeepValue;
function setDeepValue(obj, [prop, ...path], value) {
    if (!path.length) {
        obj[prop] = value;
    }
    else {
        if (!(prop in obj))
            obj[prop] = {};
        setDeepValue(obj[prop], path, value);
    }
}
function getDeepValue(obj, [prop, ...path]) {
    if (!path.length) {
        return obj[prop];
    }
    else {
        if (!(prop in obj))
            return undefined;
        return getDeepValue(obj[prop], path);
    }
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@trezor/transport/lib/constants.js":
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TRANSPORT = exports.ACTION_TIMEOUT = exports.TREZOR_USB_DESCRIPTORS = exports.WEBUSB_BOOTLOADER_PRODUCT = exports.T1_HID_PRODUCT = exports.T1_HID_VENDOR = exports.DEBUGLINK_ENDPOINT_ID = exports.DEBUGLINK_INTERFACE_ID = exports.ENDPOINT_ID = exports.INTERFACE_ID = exports.CONFIGURATION_ID = void 0;
exports.CONFIGURATION_ID = 1;
exports.INTERFACE_ID = 0;
exports.ENDPOINT_ID = 1;
exports.DEBUGLINK_INTERFACE_ID = 1;
exports.DEBUGLINK_ENDPOINT_ID = 2;
exports.T1_HID_VENDOR = 0x534c;
exports.T1_HID_PRODUCT = 0x0001;
const WEBUSB_FIRMWARE_PRODUCT = 0x53c1;
exports.WEBUSB_BOOTLOADER_PRODUCT = 0x53c0;
exports.TREZOR_USB_DESCRIPTORS = [
    { vendorId: 0x534c, productId: exports.T1_HID_PRODUCT },
    { vendorId: 0x1209, productId: exports.WEBUSB_BOOTLOADER_PRODUCT },
    { vendorId: 0x1209, productId: WEBUSB_FIRMWARE_PRODUCT },
];
exports.ACTION_TIMEOUT = 10000;
exports.TRANSPORT = {
    START: 'transport-start',
    ERROR: 'transport-error',
    STOPPED: 'transport-stopped',
    DEVICE_CONNECTED: 'transport-device_connected',
    DEVICE_DISCONNECTED: 'transport-device_disconnected',
    DEVICE_SESSION_CHANGED: 'transport-device_session_changed',
    DEVICE_REQUEST_RELEASE: 'transport-device_request_release',
    SEND_MESSAGE_PROGRESS: 'transport-send_message_progress',
    DISABLE_WEBUSB: 'transport-disable_webusb',
    REQUEST_DEVICE: 'transport-request_device',
    GET_INFO: 'transport-get_info',
    SET_TRANSPORTS: 'transport-set_transports',
};
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/long/umd/index.js":
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// GENERATED FILE. DO NOT EDIT.
var Long = (function(exports) {
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  
  /**
   * @license
   * Copyright 2009 The Closure Library Authors
   * Copyright 2020 Daniel Wirtz / The long.js Authors.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * SPDX-License-Identifier: Apache-2.0
   */
  // WebAssembly optimizations to do native i64 multiplication and divide
  var wasm = null;
  
  try {
    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
  } catch (e) {// no wasm support :(
  }
  /**
   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
   *  See the from* functions below for more convenient ways of constructing Longs.
   * @exports Long
   * @class A Long class for representing a 64 bit two's-complement integer value.
   * @param {number} low The low (signed) 32 bits of the long
   * @param {number} high The high (signed) 32 bits of the long
   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
   * @constructor
   */
  
  
  function Long(low, high, unsigned) {
    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;
    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
  
    this.high = high | 0;
    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
  
    this.unsigned = !!unsigned;
  } // The internal representation of a long is the two given signed, 32-bit values.
  // We use 32-bit pieces because these are the size of integers on which
  // Javascript performs bit-operations.  For operations like addition and
  // multiplication, we split each number into 16 bit pieces, which can easily be
  // multiplied within Javascript's floating-point representation without overflow
  // or change in sign.
  //
  // In the algorithms below, we frequently reduce the negative case to the
  // positive case by negating the input(s) and then post-processing the result.
  // Note that we must ALWAYS check specially whether those values are MIN_VALUE
  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
  // a positive number, it overflows back into a negative).  Not handling this
  // case would often result in infinite recursion.
  //
  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
  // methods on which they depend.
  
  /**
   * An indicator used to reliably determine if an object is a Long or not.
   * @type {boolean}
   * @const
   * @private
   */
  
  
  Long.prototype.__isLong__;
  Object.defineProperty(Long.prototype, "__isLong__", {
    value: true
  });
  /**
   * @function
   * @param {*} obj Object
   * @returns {boolean}
   * @inner
   */
  
  function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
  }
  /**
   * @function
   * @param {*} value number
   * @returns {number}
   * @inner
   */
  
  
  function ctz32(value) {
    var c = Math.clz32(value & -value);
    return value ? 31 - c : c;
  }
  /**
   * Tests if the specified object is a Long.
   * @function
   * @param {*} obj Object
   * @returns {boolean}
   */
  
  
  Long.isLong = isLong;
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @inner
   */
  
  var INT_CACHE = {};
  /**
   * A cache of the Long representations of small unsigned integer values.
   * @type {!Object}
   * @inner
   */
  
  var UINT_CACHE = {};
  /**
   * @param {number} value
   * @param {boolean=} unsigned
   * @returns {!Long}
   * @inner
   */
  
  function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
  
    if (unsigned) {
      value >>>= 0;
  
      if (cache = 0 <= value && value < 256) {
        cachedObj = UINT_CACHE[value];
        if (cachedObj) return cachedObj;
      }
  
      obj = fromBits(value, 0, true);
      if (cache) UINT_CACHE[value] = obj;
      return obj;
    } else {
      value |= 0;
  
      if (cache = -128 <= value && value < 128) {
        cachedObj = INT_CACHE[value];
        if (cachedObj) return cachedObj;
      }
  
      obj = fromBits(value, value < 0 ? -1 : 0, false);
      if (cache) INT_CACHE[value] = obj;
      return obj;
    }
  }
  /**
   * Returns a Long representing the given 32 bit integer value.
   * @function
   * @param {number} value The 32 bit integer in question
   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
   * @returns {!Long} The corresponding Long value
   */
  
  
  Long.fromInt = fromInt;
  /**
   * @param {number} value
   * @param {boolean=} unsigned
   * @returns {!Long}
   * @inner
   */
  
  function fromNumber(value, unsigned) {
    if (isNaN(value)) return unsigned ? UZERO : ZERO;
  
    if (unsigned) {
      if (value < 0) return UZERO;
      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
    } else {
      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
    }
  
    if (value < 0) return fromNumber(-value, unsigned).neg();
    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
  }
  /**
   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
   * @function
   * @param {number} value The number in question
   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
   * @returns {!Long} The corresponding Long value
   */
  
  
  Long.fromNumber = fromNumber;
  /**
   * @param {number} lowBits
   * @param {number} highBits
   * @param {boolean=} unsigned
   * @returns {!Long}
   * @inner
   */
  
  function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
  }
  /**
   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
   *  assumed to use 32 bits.
   * @function
   * @param {number} lowBits The low 32 bits
   * @param {number} highBits The high 32 bits
   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
   * @returns {!Long} The corresponding Long value
   */
  
  
  Long.fromBits = fromBits;
  /**
   * @function
   * @param {number} base
   * @param {number} exponent
   * @returns {number}
   * @inner
   */
  
  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)
  
  /**
   * @param {string} str
   * @param {(boolean|number)=} unsigned
   * @param {number=} radix
   * @returns {!Long}
   * @inner
   */
  
  function fromString(str, unsigned, radix) {
    if (str.length === 0) throw Error('empty string');
  
    if (typeof unsigned === 'number') {
      // For goog.math.long compatibility
      radix = unsigned;
      unsigned = false;
    } else {
      unsigned = !!unsigned;
    }
  
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return unsigned ? UZERO : ZERO;
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError('radix');
    var p;
    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {
      return fromString(str.substring(1), unsigned, radix).neg();
    } // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
  
    var radixToPower = fromNumber(pow_dbl(radix, 8));
    var result = ZERO;
  
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i),
          value = parseInt(str.substring(i, i + size), radix);
  
      if (size < 8) {
        var power = fromNumber(pow_dbl(radix, size));
        result = result.mul(power).add(fromNumber(value));
      } else {
        result = result.mul(radixToPower);
        result = result.add(fromNumber(value));
      }
    }
  
    result.unsigned = unsigned;
    return result;
  }
  /**
   * Returns a Long representation of the given string, written using the specified radix.
   * @function
   * @param {string} str The textual representation of the Long
   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
   * @returns {!Long} The corresponding Long value
   */
  
  
  Long.fromString = fromString;
  /**
   * @function
   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
   * @param {boolean=} unsigned
   * @returns {!Long}
   * @inner
   */
  
  function fromValue(val, unsigned) {
    if (typeof val === 'number') return fromNumber(val, unsigned);
    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:
  
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
  }
  /**
   * Converts the specified value to a Long using the appropriate from* function for its type.
   * @function
   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
   * @returns {!Long}
   */
  
  
  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
  // no runtime penalty for these.
  
  /**
   * @type {number}
   * @const
   * @inner
   */
  
  var TWO_PWR_16_DBL = 1 << 16;
  /**
   * @type {number}
   * @const
   * @inner
   */
  
  var TWO_PWR_24_DBL = 1 << 24;
  /**
   * @type {number}
   * @const
   * @inner
   */
  
  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
  /**
   * @type {number}
   * @const
   * @inner
   */
  
  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
  /**
   * @type {number}
   * @const
   * @inner
   */
  
  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
  /**
   * @type {!Long}
   * @const
   * @inner
   */
  
  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
  /**
   * @type {!Long}
   * @inner
   */
  
  var ZERO = fromInt(0);
  /**
   * Signed zero.
   * @type {!Long}
   */
  
  Long.ZERO = ZERO;
  /**
   * @type {!Long}
   * @inner
   */
  
  var UZERO = fromInt(0, true);
  /**
   * Unsigned zero.
   * @type {!Long}
   */
  
  Long.UZERO = UZERO;
  /**
   * @type {!Long}
   * @inner
   */
  
  var ONE = fromInt(1);
  /**
   * Signed one.
   * @type {!Long}
   */
  
  Long.ONE = ONE;
  /**
   * @type {!Long}
   * @inner
   */
  
  var UONE = fromInt(1, true);
  /**
   * Unsigned one.
   * @type {!Long}
   */
  
  Long.UONE = UONE;
  /**
   * @type {!Long}
   * @inner
   */
  
  var NEG_ONE = fromInt(-1);
  /**
   * Signed negative one.
   * @type {!Long}
   */
  
  Long.NEG_ONE = NEG_ONE;
  /**
   * @type {!Long}
   * @inner
   */
  
  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);
  /**
   * Maximum signed value.
   * @type {!Long}
   */
  
  Long.MAX_VALUE = MAX_VALUE;
  /**
   * @type {!Long}
   * @inner
   */
  
  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);
  /**
   * Maximum unsigned value.
   * @type {!Long}
   */
  
  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
  /**
   * @type {!Long}
   * @inner
   */
  
  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);
  /**
   * Minimum signed value.
   * @type {!Long}
   */
  
  Long.MIN_VALUE = MIN_VALUE;
  /**
   * @alias Long.prototype
   * @inner
   */
  
  var LongPrototype = Long.prototype;
  /**
   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
   * @this {!Long}
   * @returns {number}
   */
  
  LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
  };
  /**
   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
   * @this {!Long}
   * @returns {number}
   */
  
  
  LongPrototype.toNumber = function toNumber() {
    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
  };
  /**
   * Converts the Long to a string written in the specified radix.
   * @this {!Long}
   * @param {number=} radix Radix (2-36), defaults to 10
   * @returns {string}
   * @override
   * @throws {RangeError} If `radix` is out of range
   */
  
  
  LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError('radix');
    if (this.isZero()) return '0';
  
    if (this.isNegative()) {
      // Unsigned Longs are never negative
      if (this.eq(MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = fromNumber(radix),
            div = this.div(radixLong),
            rem1 = div.mul(radixLong).sub(this);
        return div.toString(radix) + rem1.toInt().toString(radix);
      } else return '-' + this.neg().toString(radix);
    } // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
  
  
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
  
    while (true) {
      var remDiv = rem.div(radixToPower),
          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
          digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) return digits + result;else {
        while (digits.length < 6) digits = '0' + digits;
  
        result = '' + digits + result;
      }
    }
  };
  /**
   * Gets the high 32 bits as a signed integer.
   * @this {!Long}
   * @returns {number} Signed high bits
   */
  
  
  LongPrototype.getHighBits = function getHighBits() {
    return this.high;
  };
  /**
   * Gets the high 32 bits as an unsigned integer.
   * @this {!Long}
   * @returns {number} Unsigned high bits
   */
  
  
  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
  };
  /**
   * Gets the low 32 bits as a signed integer.
   * @this {!Long}
   * @returns {number} Signed low bits
   */
  
  
  LongPrototype.getLowBits = function getLowBits() {
    return this.low;
  };
  /**
   * Gets the low 32 bits as an unsigned integer.
   * @this {!Long}
   * @returns {number} Unsigned low bits
   */
  
  
  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
  };
  /**
   * Gets the number of bits needed to represent the absolute value of this Long.
   * @this {!Long}
   * @returns {number}
   */
  
  
  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
  
    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;
  
    return this.high != 0 ? bit + 33 : bit + 1;
  };
  /**
   * Tests if this Long's value equals zero.
   * @this {!Long}
   * @returns {boolean}
   */
  
  
  LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
  };
  /**
   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
   * @returns {boolean}
   */
  
  
  LongPrototype.eqz = LongPrototype.isZero;
  /**
   * Tests if this Long's value is negative.
   * @this {!Long}
   * @returns {boolean}
   */
  
  LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
  };
  /**
   * Tests if this Long's value is positive or zero.
   * @this {!Long}
   * @returns {boolean}
   */
  
  
  LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
  };
  /**
   * Tests if this Long's value is odd.
   * @this {!Long}
   * @returns {boolean}
   */
  
  
  LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
  };
  /**
   * Tests if this Long's value is even.
   * @this {!Long}
   * @returns {boolean}
   */
  
  
  LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
  };
  /**
   * Tests if this Long's value equals the specified's.
   * @this {!Long}
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  
  LongPrototype.equals = function equals(other) {
    if (!isLong(other)) other = fromValue(other);
    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
    return this.high === other.high && this.low === other.low;
  };
  /**
   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
   * @function
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  
  LongPrototype.eq = LongPrototype.equals;
  /**
   * Tests if this Long's value differs from the specified's.
   * @this {!Long}
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(
    /* validates */
    other);
  };
  /**
   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
   * @function
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  
  LongPrototype.neq = LongPrototype.notEquals;
  /**
   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
   * @function
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  LongPrototype.ne = LongPrototype.notEquals;
  /**
   * Tests if this Long's value is less than the specified's.
   * @this {!Long}
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  LongPrototype.lessThan = function lessThan(other) {
    return this.comp(
    /* validates */
    other) < 0;
  };
  /**
   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
   * @function
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  
  LongPrototype.lt = LongPrototype.lessThan;
  /**
   * Tests if this Long's value is less than or equal the specified's.
   * @this {!Long}
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(
    /* validates */
    other) <= 0;
  };
  /**
   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
   * @function
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  
  LongPrototype.lte = LongPrototype.lessThanOrEqual;
  /**
   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
   * @function
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  LongPrototype.le = LongPrototype.lessThanOrEqual;
  /**
   * Tests if this Long's value is greater than the specified's.
   * @this {!Long}
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(
    /* validates */
    other) > 0;
  };
  /**
   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
   * @function
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  
  LongPrototype.gt = LongPrototype.greaterThan;
  /**
   * Tests if this Long's value is greater than or equal the specified's.
   * @this {!Long}
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(
    /* validates */
    other) >= 0;
  };
  /**
   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
   * @function
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  
  LongPrototype.gte = LongPrototype.greaterThanOrEqual;
  /**
   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
   * @function
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */
  
  LongPrototype.ge = LongPrototype.greaterThanOrEqual;
  /**
   * Compares this Long's value with the specified's.
   * @this {!Long}
   * @param {!Long|number|string} other Other value
   * @returns {number} 0 if they are the same, 1 if the this is greater and -1
   *  if the given one is greater
   */
  
  LongPrototype.compare = function compare(other) {
    if (!isLong(other)) other = fromValue(other);
    if (this.eq(other)) return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) return -1;
    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same
  
    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned
  
    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
  };
  /**
   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
   * @function
   * @param {!Long|number|string} other Other value
   * @returns {number} 0 if they are the same, 1 if the this is greater and -1
   *  if the given one is greater
   */
  
  
  LongPrototype.comp = LongPrototype.compare;
  /**
   * Negates this Long's value.
   * @this {!Long}
   * @returns {!Long} Negated Long
   */
  
  LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;
    return this.not().add(ONE);
  };
  /**
   * Negates this Long's value. This is an alias of {@link Long#negate}.
   * @function
   * @returns {!Long} Negated Long
   */
  
  
  LongPrototype.neg = LongPrototype.negate;
  /**
   * Returns the sum of this and the specified Long.
   * @this {!Long}
   * @param {!Long|number|string} addend Addend
   * @returns {!Long} Sum
   */
  
  LongPrototype.add = function add(addend) {
    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
  
    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;
    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;
    var c48 = 0,
        c32 = 0,
        c16 = 0,
        c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
  };
  /**
   * Returns the difference of this and the specified Long.
   * @this {!Long}
   * @param {!Long|number|string} subtrahend Subtrahend
   * @returns {!Long} Difference
   */
  
  
  LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
  };
  /**
   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
   * @function
   * @param {!Long|number|string} subtrahend Subtrahend
   * @returns {!Long} Difference
   */
  
  
  LongPrototype.sub = LongPrototype.subtract;
  /**
   * Returns the product of this and the specified Long.
   * @this {!Long}
   * @param {!Long|number|string} multiplier Multiplier
   * @returns {!Long} Product
   */
  
  LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero()) return this;
    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present
  
    if (wasm) {
      var low = wasm["mul"](this.low, this.high, multiplier.low, multiplier.high);
      return fromBits(low, wasm["get_high"](), this.unsigned);
    }
  
    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;
    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;
  
    if (this.isNegative()) {
      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication
  
  
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
  
    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;
    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;
    var c48 = 0,
        c32 = 0,
        c16 = 0,
        c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
  };
  /**
   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
   * @function
   * @param {!Long|number|string} multiplier Multiplier
   * @returns {!Long} Product
   */
  
  
  LongPrototype.mul = LongPrototype.multiply;
  /**
   * Returns this Long divided by the specified. The result is signed if this Long is signed or
   *  unsigned if this Long is unsigned.
   * @this {!Long}
   * @param {!Long|number|string} divisor Divisor
   * @returns {!Long} Quotient
   */
  
  LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor)) divisor = fromValue(divisor);
    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present
  
    if (wasm) {
      // guard against signed division overflow: the largest
      // negative number / -1 would be 1 larger than the largest
      // positive number, due to two's complement.
      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {
        // be consistent with non-wasm code path
        return this;
      }
  
      var low = (this.unsigned ? wasm["div_u"] : wasm["div_s"])(this.low, this.high, divisor.low, divisor.high);
      return fromBits(low, wasm["get_high"](), this.unsigned);
    }
  
    if (this.isZero()) return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
  
    if (!this.unsigned) {
      // This section is only relevant for signed longs and is derived from the
      // closure library as a whole.
      if (this.eq(MIN_VALUE)) {
        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
        else if (divisor.eq(MIN_VALUE)) return ONE;else {
          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
          var halfThis = this.shr(1);
          approx = halfThis.div(divisor).shl(1);
  
          if (approx.eq(ZERO)) {
            return divisor.isNegative() ? ONE : NEG_ONE;
          } else {
            rem = this.sub(divisor.mul(approx));
            res = approx.add(rem.div(divisor));
            return res;
          }
        }
      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;
  
      if (this.isNegative()) {
        if (divisor.isNegative()) return this.neg().div(divisor.neg());
        return this.neg().div(divisor).neg();
      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();
  
      res = ZERO;
    } else {
      // The algorithm below has not been made for unsigned longs. It's therefore
      // required to take special care of the MSB prior to running it.
      if (!divisor.unsigned) divisor = divisor.toUnsigned();
      if (divisor.gt(this)) return UZERO;
      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
        return UONE;
      res = UZERO;
    } // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
  
  
    rem = this;
  
    while (rem.gte(divisor)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
  
      var log2 = Math.ceil(Math.log(approx) / Math.LN2),
          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),
          // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      approxRes = fromNumber(approx),
          approxRem = approxRes.mul(divisor);
  
      while (approxRem.isNegative() || approxRem.gt(rem)) {
        approx -= delta;
        approxRes = fromNumber(approx, this.unsigned);
        approxRem = approxRes.mul(divisor);
      } // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
  
  
      if (approxRes.isZero()) approxRes = ONE;
      res = res.add(approxRes);
      rem = rem.sub(approxRem);
    }
  
    return res;
  };
  /**
   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
   * @function
   * @param {!Long|number|string} divisor Divisor
   * @returns {!Long} Quotient
   */
  
  
  LongPrototype.div = LongPrototype.divide;
  /**
   * Returns this Long modulo the specified.
   * @this {!Long}
   * @param {!Long|number|string} divisor Divisor
   * @returns {!Long} Remainder
   */
  
  LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present
  
    if (wasm) {
      var low = (this.unsigned ? wasm["rem_u"] : wasm["rem_s"])(this.low, this.high, divisor.low, divisor.high);
      return fromBits(low, wasm["get_high"](), this.unsigned);
    }
  
    return this.sub(this.div(divisor).mul(divisor));
  };
  /**
   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
   * @function
   * @param {!Long|number|string} divisor Divisor
   * @returns {!Long} Remainder
   */
  
  
  LongPrototype.mod = LongPrototype.modulo;
  /**
   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
   * @function
   * @param {!Long|number|string} divisor Divisor
   * @returns {!Long} Remainder
   */
  
  LongPrototype.rem = LongPrototype.modulo;
  /**
   * Returns the bitwise NOT of this Long.
   * @this {!Long}
   * @returns {!Long}
   */
  
  LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
  };
  /**
   * Returns count leading zeros of this Long.
   * @this {!Long}
   * @returns {!number}
   */
  
  
  LongPrototype.countLeadingZeros = function countLeadingZeros() {
    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
  };
  /**
   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.
   * @function
   * @param {!Long}
   * @returns {!number}
   */
  
  
  LongPrototype.clz = LongPrototype.countLeadingZeros;
  /**
   * Returns count trailing zeros of this Long.
   * @this {!Long}
   * @returns {!number}
   */
  
  LongPrototype.countTrailingZeros = function countTrailingZeros() {
    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;
  };
  /**
   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.
   * @function
   * @param {!Long}
   * @returns {!number}
   */
  
  
  LongPrototype.ctz = LongPrototype.countTrailingZeros;
  /**
   * Returns the bitwise AND of this Long and the specified.
   * @this {!Long}
   * @param {!Long|number|string} other Other Long
   * @returns {!Long}
   */
  
  LongPrototype.and = function and(other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
  };
  /**
   * Returns the bitwise OR of this Long and the specified.
   * @this {!Long}
   * @param {!Long|number|string} other Other Long
   * @returns {!Long}
   */
  
  
  LongPrototype.or = function or(other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
  };
  /**
   * Returns the bitwise XOR of this Long and the given one.
   * @this {!Long}
   * @param {!Long|number|string} other Other Long
   * @returns {!Long}
   */
  
  
  LongPrototype.xor = function xor(other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @this {!Long}
   * @param {number|!Long} numBits Number of bits
   * @returns {!Long} Shifted Long
   */
  
  
  LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
   * @function
   * @param {number|!Long} numBits Number of bits
   * @returns {!Long} Shifted Long
   */
  
  
  LongPrototype.shl = LongPrototype.shiftLeft;
  /**
   * Returns this Long with bits arithmetically shifted to the right by the given amount.
   * @this {!Long}
   * @param {number|!Long} numBits Number of bits
   * @returns {!Long} Shifted Long
   */
  
  LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
  };
  /**
   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
   * @function
   * @param {number|!Long} numBits Number of bits
   * @returns {!Long} Shifted Long
   */
  
  
  LongPrototype.shr = LongPrototype.shiftRight;
  /**
   * Returns this Long with bits logically shifted to the right by the given amount.
   * @this {!Long}
   * @param {number|!Long} numBits Number of bits
   * @returns {!Long} Shifted Long
   */
  
  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;
    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);
    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);
    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);
  };
  /**
   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
   * @function
   * @param {number|!Long} numBits Number of bits
   * @returns {!Long} Shifted Long
   */
  
  
  LongPrototype.shru = LongPrototype.shiftRightUnsigned;
  /**
   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
   * @function
   * @param {number|!Long} numBits Number of bits
   * @returns {!Long} Shifted Long
   */
  
  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
  /**
   * Returns this Long with bits rotated to the left by the given amount.
   * @this {!Long}
   * @param {number|!Long} numBits Number of bits
   * @returns {!Long} Rotated Long
   */
  
  LongPrototype.rotateLeft = function rotateLeft(numBits) {
    var b;
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;
    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);
  
    if (numBits < 32) {
      b = 32 - numBits;
      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);
    }
  
    numBits -= 32;
    b = 32 - numBits;
    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);
  };
  /**
   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.
   * @function
   * @param {number|!Long} numBits Number of bits
   * @returns {!Long} Rotated Long
   */
  
  
  LongPrototype.rotl = LongPrototype.rotateLeft;
  /**
   * Returns this Long with bits rotated to the right by the given amount.
   * @this {!Long}
   * @param {number|!Long} numBits Number of bits
   * @returns {!Long} Rotated Long
   */
  
  LongPrototype.rotateRight = function rotateRight(numBits) {
    var b;
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;
    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);
  
    if (numBits < 32) {
      b = 32 - numBits;
      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);
    }
  
    numBits -= 32;
    b = 32 - numBits;
    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);
  };
  /**
   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.
   * @function
   * @param {number|!Long} numBits Number of bits
   * @returns {!Long} Rotated Long
   */
  
  
  LongPrototype.rotr = LongPrototype.rotateRight;
  /**
   * Converts this Long to signed.
   * @this {!Long}
   * @returns {!Long} Signed long
   */
  
  LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned) return this;
    return fromBits(this.low, this.high, false);
  };
  /**
   * Converts this Long to unsigned.
   * @this {!Long}
   * @returns {!Long} Unsigned long
   */
  
  
  LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned) return this;
    return fromBits(this.low, this.high, true);
  };
  /**
   * Converts this Long to its byte representation.
   * @param {boolean=} le Whether little or big endian, defaults to big endian
   * @this {!Long}
   * @returns {!Array.<number>} Byte representation
   */
  
  
  LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
  };
  /**
   * Converts this Long to its little endian byte representation.
   * @this {!Long}
   * @returns {!Array.<number>} Little endian byte representation
   */
  
  
  LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];
  };
  /**
   * Converts this Long to its big endian byte representation.
   * @this {!Long}
   * @returns {!Array.<number>} Big endian byte representation
   */
  
  
  LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];
  };
  /**
   * Creates a Long from its byte representation.
   * @param {!Array.<number>} bytes Byte representation
   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
   * @param {boolean=} le Whether little or big endian, defaults to big endian
   * @returns {Long} The corresponding Long value
   */
  
  
  Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
  };
  /**
   * Creates a Long from its little endian byte representation.
   * @param {!Array.<number>} bytes Little endian byte representation
   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
   * @returns {Long} The corresponding Long value
   */
  
  
  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
  };
  /**
   * Creates a Long from its big endian byte representation.
   * @param {!Array.<number>} bytes Big endian byte representation
   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
   * @returns {Long} The corresponding Long value
   */
  
  
  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
  };
  
  var _default = Long;
  exports.default = _default;
  return "default" in exports ? exports.default : exports;
})({});
if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() { return Long; }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
else // removed by dead control flow
{}


/***/ }),

/***/ "./node_modules/protobufjs/light.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
// light library entry point.


module.exports = __webpack_require__("./node_modules/protobufjs/src/index-light.js");

/***/ }),

/***/ "./node_modules/protobufjs/src/converter.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Runtime message from/to plain object converters.
 * @namespace
 */
var converter = exports;

var Enum = __webpack_require__("./node_modules/protobufjs/src/enum.js"),
    util = __webpack_require__("./node_modules/protobufjs/src/util.js");

/**
 * Generates a partial value fromObject conveter.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} prop Property reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
    var defaultAlreadyEmitted = false;
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) { gen
            ("switch(d%s){", prop);
            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
                // enum unknown values passthrough
                if (values[keys[i]] === field.typeDefault && !defaultAlreadyEmitted) { gen
                    ("default:")
                        ("if(typeof(d%s)===\"number\"){m%s=d%s;break}", prop, prop, prop);
                    if (!field.repeated) gen // fallback to default value only for
                                             // arrays, to avoid leaving holes.
                        ("break");           // for non-repeated fields, just ignore
                    defaultAlreadyEmitted = true;
                }
                gen
                ("case%j:", keys[i])
                ("case %i:", values[keys[i]])
                    ("m%s=%j", prop, values[keys[i]])
                    ("break");
            } gen
            ("}");
        } else gen
            ("if(typeof d%s!==\"object\")", prop)
                ("throw TypeError(%j)", field.fullName + ": object expected")
            ("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
    } else {
        var isUnsigned = false;
        switch (field.type) {
            case "double":
            case "float": gen
                ("m%s=Number(d%s)", prop, prop); // also catches "NaN", "Infinity"
                break;
            case "uint32":
            case "fixed32": gen
                ("m%s=d%s>>>0", prop, prop);
                break;
            case "int32":
            case "sint32":
            case "sfixed32": gen
                ("m%s=d%s|0", prop, prop);
                break;
            case "uint64":
                isUnsigned = true;
                // eslint-disable-next-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
                ("if(util.Long)")
                    ("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)
                ("else if(typeof d%s===\"string\")", prop)
                    ("m%s=parseInt(d%s,10)", prop, prop)
                ("else if(typeof d%s===\"number\")", prop)
                    ("m%s=d%s", prop, prop)
                ("else if(typeof d%s===\"object\")", prop)
                    ("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
                break;
            case "bytes": gen
                ("if(typeof d%s===\"string\")", prop)
                    ("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)
                ("else if(d%s.length >= 0)", prop)
                    ("m%s=d%s", prop, prop);
                break;
            case "string": gen
                ("m%s=String(d%s)", prop, prop);
                break;
            case "bool": gen
                ("m%s=Boolean(d%s)", prop, prop);
                break;
            /* default: gen
                ("m%s=d%s", prop, prop);
                break; */
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}

/**
 * Generates a plain object to runtime message converter specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
converter.fromObject = function fromObject(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var fields = mtype.fieldsArray;
    var gen = util.codegen(["d"], mtype.name + "$fromObject")
    ("if(d instanceof this.ctor)")
        ("return d");
    if (!fields.length) return gen
    ("return new this.ctor");
    gen
    ("var m=new this.ctor");
    for (var i = 0; i < fields.length; ++i) {
        var field  = fields[i].resolve(),
            prop   = util.safeProp(field.name);

        // Map fields
        if (field.map) { gen
    ("if(d%s){", prop)
        ("if(typeof d%s!==\"object\")", prop)
            ("throw TypeError(%j)", field.fullName + ": object expected")
        ("m%s={}", prop)
        ("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[ks[i]]")
        ("}")
    ("}");

        // Repeated fields
        } else if (field.repeated) { gen
    ("if(d%s){", prop)
        ("if(!Array.isArray(d%s))", prop)
            ("throw TypeError(%j)", field.fullName + ": array expected")
        ("m%s=[]", prop)
        ("for(var i=0;i<d%s.length;++i){", prop);
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[i]")
        ("}")
    ("}");

        // Non-repeated fields
        } else {
            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)
    ("if(d%s!=null){", prop); // !== undefined && !== null
        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);
            if (!(field.resolvedType instanceof Enum)) gen
    ("}");
        }
    } return gen
    ("return m");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
};

/**
 * Generates a partial value toObject converter.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} prop Property reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genValuePartial_toObject(gen, field, fieldIndex, prop) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) gen
            ("d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s", prop, fieldIndex, prop, prop, fieldIndex, prop, prop);
        else gen
            ("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
    } else {
        var isUnsigned = false;
        switch (field.type) {
            case "double":
            case "float": gen
            ("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
                break;
            case "uint64":
                isUnsigned = true;
                // eslint-disable-next-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
            ("if(typeof m%s===\"number\")", prop)
                ("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)
            ("else") // Long-like
                ("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true": "", prop);
                break;
            case "bytes": gen
            ("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
                break;
            default: gen
            ("d%s=m%s", prop, prop);
                break;
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}

/**
 * Generates a runtime message to plain object converter specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
converter.toObject = function toObject(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
    if (!fields.length)
        return util.codegen()("return {}");
    var gen = util.codegen(["m", "o"], mtype.name + "$toObject")
    ("if(!o)")
        ("o={}")
    ("var d={}");

    var repeatedFields = [],
        mapFields = [],
        normalFields = [],
        i = 0;
    for (; i < fields.length; ++i)
        if (!fields[i].partOf)
            ( fields[i].resolve().repeated ? repeatedFields
            : fields[i].map ? mapFields
            : normalFields).push(fields[i]);

    if (repeatedFields.length) { gen
    ("if(o.arrays||o.defaults){");
        for (i = 0; i < repeatedFields.length; ++i) gen
        ("d%s=[]", util.safeProp(repeatedFields[i].name));
        gen
    ("}");
    }

    if (mapFields.length) { gen
    ("if(o.objects||o.defaults){");
        for (i = 0; i < mapFields.length; ++i) gen
        ("d%s={}", util.safeProp(mapFields[i].name));
        gen
    ("}");
    }

    if (normalFields.length) { gen
    ("if(o.defaults){");
        for (i = 0; i < normalFields.length; ++i) {
            var field = normalFields[i],
                prop  = util.safeProp(field.name);
            if (field.resolvedType instanceof Enum) gen
        ("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
            else if (field.long) gen
        ("if(util.Long){")
            ("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)
            ("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)
        ("}else")
            ("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
            else if (field.bytes) {
                var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
                gen
        ("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))
        ("else{")
            ("d%s=%s", prop, arrayDefault)
            ("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)
        ("}");
            } else gen
        ("d%s=%j", prop, field.typeDefault); // also messages (=null)
        } gen
    ("}");
    }
    var hasKs2 = false;
    for (i = 0; i < fields.length; ++i) {
        var field = fields[i],
            index = mtype._fieldsArray.indexOf(field),
            prop  = util.safeProp(field.name);
        if (field.map) {
            if (!hasKs2) { hasKs2 = true; gen
    ("var ks2");
            } gen
    ("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)
        ("d%s={}", prop)
        ("for(var j=0;j<ks2.length;++j){");
            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[ks2[j]]")
        ("}");
        } else if (field.repeated) { gen
    ("if(m%s&&m%s.length){", prop, prop)
        ("d%s=[]", prop)
        ("for(var j=0;j<m%s.length;++j){", prop);
            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[j]")
        ("}");
        } else { gen
    ("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name); // !== undefined && !== null
        genValuePartial_toObject(gen, field, /* sorted */ index, prop);
        if (field.partOf) gen
        ("if(o.oneofs)")
            ("d%s=%j", util.safeProp(field.partOf.name), field.name);
        }
        gen
    ("}");
    }
    return gen
    ("return d");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
};


/***/ }),

/***/ "./node_modules/protobufjs/src/decoder.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = decoder;

var Enum    = __webpack_require__("./node_modules/protobufjs/src/enum.js"),
    types   = __webpack_require__("./node_modules/protobufjs/src/types.js"),
    util    = __webpack_require__("./node_modules/protobufjs/src/util.js");

function missing(field) {
    return "missing required '" + field.name + "'";
}

/**
 * Generates a decoder specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function decoder(mtype) {
    /* eslint-disable no-unexpected-multiline */
    var gen = util.codegen(["r", "l"], mtype.name + "$decode")
    ("if(!(r instanceof Reader))")
        ("r=Reader.create(r)")
    ("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? ",k,value" : ""))
    ("while(r.pos<c){")
        ("var t=r.uint32()");
    if (mtype.group) gen
        ("if((t&7)===4)")
            ("break");
    gen
        ("switch(t>>>3){");

    var i = 0;
    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(),
            type  = field.resolvedType instanceof Enum ? "int32" : field.type,
            ref   = "m" + util.safeProp(field.name); gen
            ("case %i: {", field.id);

        // Map fields
        if (field.map) { gen
                ("if(%s===util.emptyObject)", ref)
                    ("%s={}", ref)
                ("var c2 = r.uint32()+r.pos");

            if (types.defaults[field.keyType] !== undefined) gen
                ("k=%j", types.defaults[field.keyType]);
            else gen
                ("k=null");

            if (types.defaults[type] !== undefined) gen
                ("value=%j", types.defaults[type]);
            else gen
                ("value=null");

            gen
                ("while(r.pos<c2){")
                    ("var tag2=r.uint32()")
                    ("switch(tag2>>>3){")
                        ("case 1: k=r.%s(); break", field.keyType)
                        ("case 2:");

            if (types.basic[type] === undefined) gen
                            ("value=types[%i].decode(r,r.uint32())", i); // can't be groups
            else gen
                            ("value=r.%s()", type);

            gen
                            ("break")
                        ("default:")
                            ("r.skipType(tag2&7)")
                            ("break")
                    ("}")
                ("}");

            if (types.long[field.keyType] !== undefined) gen
                ("%s[typeof k===\"object\"?util.longToHash(k):k]=value", ref);
            else gen
                ("%s[k]=value", ref);

        // Repeated fields
        } else if (field.repeated) { gen

                ("if(!(%s&&%s.length))", ref, ref)
                    ("%s=[]", ref);

            // Packable (always check for forward and backward compatiblity)
            if (types.packed[type] !== undefined) gen
                ("if((t&7)===2){")
                    ("var c2=r.uint32()+r.pos")
                    ("while(r.pos<c2)")
                        ("%s.push(r.%s())", ref, type)
                ("}else");

            // Non-packed
            if (types.basic[type] === undefined) gen(field.resolvedType.group
                    ? "%s.push(types[%i].decode(r))"
                    : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
            else gen
                    ("%s.push(r.%s())", ref, type);

        // Non-repeated
        } else if (types.basic[type] === undefined) gen(field.resolvedType.group
                ? "%s=types[%i].decode(r)"
                : "%s=types[%i].decode(r,r.uint32())", ref, i);
        else gen
                ("%s=r.%s()", ref, type);
        gen
                ("break")
            ("}");
        // Unknown fields
    } gen
            ("default:")
                ("r.skipType(t&7)")
                ("break")

        ("}")
    ("}");

    // Field presence
    for (i = 0; i < mtype._fieldsArray.length; ++i) {
        var rfield = mtype._fieldsArray[i];
        if (rfield.required) gen
    ("if(!m.hasOwnProperty(%j))", rfield.name)
        ("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
    }

    return gen
    ("return m");
    /* eslint-enable no-unexpected-multiline */
}


/***/ }),

/***/ "./node_modules/protobufjs/src/encoder.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = encoder;

var Enum     = __webpack_require__("./node_modules/protobufjs/src/enum.js"),
    types    = __webpack_require__("./node_modules/protobufjs/src/types.js"),
    util     = __webpack_require__("./node_modules/protobufjs/src/util.js");

/**
 * Generates a partial message type encoder.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genTypePartial(gen, field, fieldIndex, ref) {
    return field.resolvedType.group
        ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)
        : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
}

/**
 * Generates an encoder specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function encoder(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var gen = util.codegen(["m", "w"], mtype.name + "$encode")
    ("if(!w)")
        ("w=Writer.create()");

    var i, ref;

    // "when a message is serialized its known fields should be written sequentially by field number"
    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);

    for (var i = 0; i < fields.length; ++i) {
        var field    = fields[i].resolve(),
            index    = mtype._fieldsArray.indexOf(field),
            type     = field.resolvedType instanceof Enum ? "int32" : field.type,
            wireType = types.basic[type];
            ref      = "m" + util.safeProp(field.name);

        // Map fields
        if (field.map) {
            gen
    ("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field.name) // !== undefined && !== null
        ("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)
            ("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
            if (wireType === undefined) gen
            ("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref); // can't be groups
            else gen
            (".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
            gen
        ("}")
    ("}");

            // Repeated fields
        } else if (field.repeated) { gen
    ("if(%s!=null&&%s.length){", ref, ref); // !== undefined && !== null

            // Packed repeated
            if (field.packed && types.packed[type] !== undefined) { gen

        ("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)
        ("for(var i=0;i<%s.length;++i)", ref)
            ("w.%s(%s[i])", type, ref)
        ("w.ldelim()");

            // Non-packed
            } else { gen

        ("for(var i=0;i<%s.length;++i)", ref);
                if (wireType === undefined)
            genTypePartial(gen, field, index, ref + "[i]");
                else gen
            ("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);

            } gen
    ("}");

        // Non-repeated
        } else {
            if (field.optional) gen
    ("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field.name); // !== undefined && !== null

            if (wireType === undefined)
        genTypePartial(gen, field, index, ref);
            else gen
        ("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);

        }
    }

    return gen
    ("return w");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}


/***/ }),

/***/ "./node_modules/protobufjs/src/enum.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Enum;

// extends ReflectionObject
var ReflectionObject = __webpack_require__("./node_modules/protobufjs/src/object.js");
((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";

var Namespace = __webpack_require__("./node_modules/protobufjs/src/namespace.js"),
    util = __webpack_require__("./node_modules/protobufjs/src/util.js");

/**
 * Constructs a new enum instance.
 * @classdesc Reflected enum.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {Object.<string,number>} [values] Enum values as an object, by name
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] The comment for this enum
 * @param {Object.<string,string>} [comments] The value comments for this enum
 * @param {Object.<string,Object<string,*>>|undefined} [valuesOptions] The value options for this enum
 */
function Enum(name, values, options, comment, comments, valuesOptions) {
    ReflectionObject.call(this, name, options);

    if (values && typeof values !== "object")
        throw TypeError("values must be an object");

    /**
     * Enum values by id.
     * @type {Object.<number,string>}
     */
    this.valuesById = {};

    /**
     * Enum values by name.
     * @type {Object.<string,number>}
     */
    this.values = Object.create(this.valuesById); // toJSON, marker

    /**
     * Enum comment text.
     * @type {string|null}
     */
    this.comment = comment;

    /**
     * Value comment texts, if any.
     * @type {Object.<string,string>}
     */
    this.comments = comments || {};

    /**
     * Values options, if any
     * @type {Object<string, Object<string, *>>|undefined}
     */
    this.valuesOptions = valuesOptions;

    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */
    this.reserved = undefined; // toJSON

    // Note that values inherit valuesById on their prototype which makes them a TypeScript-
    // compatible enum. This is used by pbts to write actual enum definitions that work for
    // static and reflection code alike instead of emitting generic object definitions.

    if (values)
        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
            if (typeof values[keys[i]] === "number") // use forward entries only
                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];
}

/**
 * Enum descriptor.
 * @interface IEnum
 * @property {Object.<string,number>} values Enum values
 * @property {Object.<string,*>} [options] Enum options
 */

/**
 * Constructs an enum from an enum descriptor.
 * @param {string} name Enum name
 * @param {IEnum} json Enum descriptor
 * @returns {Enum} Created enum
 * @throws {TypeError} If arguments are invalid
 */
Enum.fromJSON = function fromJSON(name, json) {
    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
    enm.reserved = json.reserved;
    return enm;
};

/**
 * Converts this enum to an enum descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IEnum} Enum descriptor
 */
Enum.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options"       , this.options,
        "valuesOptions" , this.valuesOptions,
        "values"        , this.values,
        "reserved"      , this.reserved && this.reserved.length ? this.reserved : undefined,
        "comment"       , keepComments ? this.comment : undefined,
        "comments"      , keepComments ? this.comments : undefined
    ]);
};

/**
 * Adds a value to this enum.
 * @param {string} name Value name
 * @param {number} id Value id
 * @param {string} [comment] Comment, if any
 * @param {Object.<string, *>|undefined} [options] Options, if any
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a value with this name or id
 */
Enum.prototype.add = function add(name, id, comment, options) {
    // utilized by the parser but not by .fromJSON

    if (!util.isString(name))
        throw TypeError("name must be a string");

    if (!util.isInteger(id))
        throw TypeError("id must be an integer");

    if (this.values[name] !== undefined)
        throw Error("duplicate name '" + name + "' in " + this);

    if (this.isReservedId(id))
        throw Error("id " + id + " is reserved in " + this);

    if (this.isReservedName(name))
        throw Error("name '" + name + "' is reserved in " + this);

    if (this.valuesById[id] !== undefined) {
        if (!(this.options && this.options.allow_alias))
            throw Error("duplicate id " + id + " in " + this);
        this.values[name] = id;
    } else
        this.valuesById[this.values[name] = id] = name;

    if (options) {
        if (this.valuesOptions === undefined)
            this.valuesOptions = {};
        this.valuesOptions[name] = options || null;
    }

    this.comments[name] = comment || null;
    return this;
};

/**
 * Removes a value from this enum
 * @param {string} name Value name
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `name` is not a name of this enum
 */
Enum.prototype.remove = function remove(name) {

    if (!util.isString(name))
        throw TypeError("name must be a string");

    var val = this.values[name];
    if (val == null)
        throw Error("name '" + name + "' does not exist in " + this);

    delete this.valuesById[val];
    delete this.values[name];
    delete this.comments[name];
    if (this.valuesOptions)
        delete this.valuesOptions[name];

    return this;
};

/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Enum.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};

/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Enum.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};


/***/ }),

/***/ "./node_modules/protobufjs/src/field.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Field;

// extends ReflectionObject
var ReflectionObject = __webpack_require__("./node_modules/protobufjs/src/object.js");
((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";

var Enum  = __webpack_require__("./node_modules/protobufjs/src/enum.js"),
    types = __webpack_require__("./node_modules/protobufjs/src/types.js"),
    util  = __webpack_require__("./node_modules/protobufjs/src/util.js");

var Type; // cyclic

var ruleRe = /^required|optional|repeated$/;

/**
 * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.
 * @name Field
 * @classdesc Reflected message field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 */

/**
 * Constructs a field from a field descriptor.
 * @param {string} name Field name
 * @param {IField} json Field descriptor
 * @returns {Field} Created field
 * @throws {TypeError} If arguments are invalid
 */
Field.fromJSON = function fromJSON(name, json) {
    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
};

/**
 * Not an actual constructor. Use {@link Field} instead.
 * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports FieldBase
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function Field(name, id, type, rule, extend, options, comment) {

    if (util.isObject(rule)) {
        comment = extend;
        options = rule;
        rule = extend = undefined;
    } else if (util.isObject(extend)) {
        comment = options;
        options = extend;
        extend = undefined;
    }

    ReflectionObject.call(this, name, options);

    if (!util.isInteger(id) || id < 0)
        throw TypeError("id must be a non-negative integer");

    if (!util.isString(type))
        throw TypeError("type must be a string");

    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))
        throw TypeError("rule must be a string rule");

    if (extend !== undefined && !util.isString(extend))
        throw TypeError("extend must be a string");

    /**
     * Field rule, if any.
     * @type {string|undefined}
     */
    if (rule === "proto3_optional") {
        rule = "optional";
    }
    this.rule = rule && rule !== "optional" ? rule : undefined; // toJSON

    /**
     * Field type.
     * @type {string}
     */
    this.type = type; // toJSON

    /**
     * Unique field id.
     * @type {number}
     */
    this.id = id; // toJSON, marker

    /**
     * Extended type if different from parent.
     * @type {string|undefined}
     */
    this.extend = extend || undefined; // toJSON

    /**
     * Whether this field is required.
     * @type {boolean}
     */
    this.required = rule === "required";

    /**
     * Whether this field is optional.
     * @type {boolean}
     */
    this.optional = !this.required;

    /**
     * Whether this field is repeated.
     * @type {boolean}
     */
    this.repeated = rule === "repeated";

    /**
     * Whether this field is a map or not.
     * @type {boolean}
     */
    this.map = false;

    /**
     * Message this field belongs to.
     * @type {Type|null}
     */
    this.message = null;

    /**
     * OneOf this field belongs to, if any,
     * @type {OneOf|null}
     */
    this.partOf = null;

    /**
     * The field type's default value.
     * @type {*}
     */
    this.typeDefault = null;

    /**
     * The field's default value on prototypes.
     * @type {*}
     */
    this.defaultValue = null;

    /**
     * Whether this field's value should be treated as a long.
     * @type {boolean}
     */
    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;

    /**
     * Whether this field's value is a buffer.
     * @type {boolean}
     */
    this.bytes = type === "bytes";

    /**
     * Resolved type if not a basic type.
     * @type {Type|Enum|null}
     */
    this.resolvedType = null;

    /**
     * Sister-field within the extended type if a declaring extension field.
     * @type {Field|null}
     */
    this.extensionField = null;

    /**
     * Sister-field within the declaring namespace if an extended field.
     * @type {Field|null}
     */
    this.declaringField = null;

    /**
     * Internally remembers whether this field is packed.
     * @type {boolean|null}
     * @private
     */
    this._packed = null;

    /**
     * Comment for this field.
     * @type {string|null}
     */
    this.comment = comment;
}

/**
 * Determines whether this field is packed. Only relevant when repeated and working with proto2.
 * @name Field#packed
 * @type {boolean}
 * @readonly
 */
Object.defineProperty(Field.prototype, "packed", {
    get: function() {
        // defaults to packed=true if not explicity set to false
        if (this._packed === null)
            this._packed = this.getOption("packed") !== false;
        return this._packed;
    }
});

/**
 * @override
 */
Field.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (name === "packed") // clear cached before setting
        this._packed = null;
    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
};

/**
 * Field descriptor.
 * @interface IField
 * @property {string} [rule="optional"] Field rule
 * @property {string} type Field type
 * @property {number} id Field id
 * @property {Object.<string,*>} [options] Field options
 */

/**
 * Extension field descriptor.
 * @interface IExtensionField
 * @extends IField
 * @property {string} extend Extended type
 */

/**
 * Converts this field to a field descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IField} Field descriptor
 */
Field.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "rule"    , this.rule !== "optional" && this.rule || undefined,
        "type"    , this.type,
        "id"      , this.id,
        "extend"  , this.extend,
        "options" , this.options,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * Resolves this field's type references.
 * @returns {Field} `this`
 * @throws {Error} If any reference cannot be resolved
 */
Field.prototype.resolve = function resolve() {

    if (this.resolved)
        return this;

    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type)
            this.typeDefault = null;
        else // instanceof Enum
            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined
    } else if (this.options && this.options.proto3_optional) {
        // proto3 scalar value marked optional; should default to null
        this.typeDefault = null;
    }

    // use explicitly set default value if present
    if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
            this.typeDefault = this.resolvedType.values[this.typeDefault];
    }

    // remove unnecessary options
    if (this.options) {
        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))
            delete this.options.packed;
        if (!Object.keys(this.options).length)
            this.options = undefined;
    }

    // convert to internal data type if necesssary
    if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");

        /* istanbul ignore else */
        if (Object.freeze)
            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)

    } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        if (util.base64.test(this.typeDefault))
            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        else
            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
    }

    // take special care of maps and repeated fields
    if (this.map)
        this.defaultValue = util.emptyObject;
    else if (this.repeated)
        this.defaultValue = util.emptyArray;
    else
        this.defaultValue = this.typeDefault;

    // ensure proper value on prototype
    if (this.parent instanceof Type)
        this.parent.ctor.prototype[this.name] = this.defaultValue;

    return ReflectionObject.prototype.resolve.call(this);
};

/**
 * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).
 * @typedef FieldDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} fieldName Field name
 * @returns {undefined}
 */

/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"string"|"bool"|"bytes"|Object} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @param {T} [defaultValue] Default value
 * @returns {FieldDecorator} Decorator function
 * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]
 */
Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {

    // submessage: decorate the submessage and use its name as the type
    if (typeof fieldType === "function")
        fieldType = util.decorateType(fieldType).name;

    // enum reference: create a reflected copy of the enum and keep reuseing it
    else if (fieldType && typeof fieldType === "object")
        fieldType = util.decorateEnum(fieldType).name;

    return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor)
            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
    };
};

/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {Constructor<T>|string} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @returns {FieldDecorator} Decorator function
 * @template T extends Message<T>
 * @variation 2
 */
// like Field.d but without a default value

// Sets up cyclic dependencies (called in index-light)
Field._configure = function configure(Type_) {
    Type = Type_;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/index-light.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var protobuf = module.exports = __webpack_require__("./node_modules/protobufjs/src/index-minimal.js");

protobuf.build = "light";

/**
 * A node-style callback as used by {@link load} and {@link Root#load}.
 * @typedef LoadCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Root} [root] Root, if there hasn't been an error
 * @returns {undefined}
 */

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} root Root namespace, defaults to create a new one if omitted.
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @see {@link Root#load}
 */
function load(filename, root, callback) {
    if (typeof root === "function") {
        callback = root;
        root = new protobuf.Root();
    } else if (!root)
        root = new protobuf.Root();
    return root.load(filename, callback);
}

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
 * @name load
 * @function
 * @param {string|string[]} filename One or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @see {@link Root#load}
 * @variation 2
 */
// function load(filename:string, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.
 * @name load
 * @function
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
 * @returns {Promise<Root>} Promise
 * @see {@link Root#load}
 * @variation 3
 */
// function load(filename:string, [root:Root]):Promise<Root>

protobuf.load = load;

/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 * @see {@link Root#loadSync}
 */
function loadSync(filename, root) {
    if (!root)
        root = new protobuf.Root();
    return root.loadSync(filename);
}

protobuf.loadSync = loadSync;

// Serialization
protobuf.encoder          = __webpack_require__("./node_modules/protobufjs/src/encoder.js");
protobuf.decoder          = __webpack_require__("./node_modules/protobufjs/src/decoder.js");
protobuf.verifier         = __webpack_require__("./node_modules/protobufjs/src/verifier.js");
protobuf.converter        = __webpack_require__("./node_modules/protobufjs/src/converter.js");

// Reflection
protobuf.ReflectionObject = __webpack_require__("./node_modules/protobufjs/src/object.js");
protobuf.Namespace        = __webpack_require__("./node_modules/protobufjs/src/namespace.js");
protobuf.Root             = __webpack_require__("./node_modules/protobufjs/src/root.js");
protobuf.Enum             = __webpack_require__("./node_modules/protobufjs/src/enum.js");
protobuf.Type             = __webpack_require__("./node_modules/protobufjs/src/type.js");
protobuf.Field            = __webpack_require__("./node_modules/protobufjs/src/field.js");
protobuf.OneOf            = __webpack_require__("./node_modules/protobufjs/src/oneof.js");
protobuf.MapField         = __webpack_require__("./node_modules/protobufjs/src/mapfield.js");
protobuf.Service          = __webpack_require__("./node_modules/protobufjs/src/service.js");
protobuf.Method           = __webpack_require__("./node_modules/protobufjs/src/method.js");

// Runtime
protobuf.Message          = __webpack_require__("./node_modules/protobufjs/src/message.js");
protobuf.wrappers         = __webpack_require__("./node_modules/protobufjs/src/wrappers.js");

// Utility
protobuf.types            = __webpack_require__("./node_modules/protobufjs/src/types.js");
protobuf.util             = __webpack_require__("./node_modules/protobufjs/src/util.js");

// Set up possibly cyclic reflection dependencies
protobuf.ReflectionObject._configure(protobuf.Root);
protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
protobuf.Root._configure(protobuf.Type);
protobuf.Field._configure(protobuf.Type);


/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = __webpack_require__("./node_modules/protobufjs/src/writer.js");
protobuf.BufferWriter = __webpack_require__("./node_modules/protobufjs/src/writer_buffer.js");
protobuf.Reader       = __webpack_require__("./node_modules/protobufjs/src/reader.js");
protobuf.BufferReader = __webpack_require__("./node_modules/protobufjs/src/reader_buffer.js");

// Utility
protobuf.util         = __webpack_require__("./node_modules/protobufjs/src/util/minimal.js");
protobuf.rpc          = __webpack_require__("./node_modules/protobufjs/src/rpc.js");
protobuf.roots        = __webpack_require__("./node_modules/protobufjs/src/roots.js");
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.util._configure();
    protobuf.Writer._configure(protobuf.BufferWriter);
    protobuf.Reader._configure(protobuf.BufferReader);
}

// Set up buffer utility according to the environment
configure();


/***/ }),

/***/ "./node_modules/protobufjs/src/mapfield.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = MapField;

// extends Field
var Field = __webpack_require__("./node_modules/protobufjs/src/field.js");
((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";

var types   = __webpack_require__("./node_modules/protobufjs/src/types.js"),
    util    = __webpack_require__("./node_modules/protobufjs/src/util.js");

/**
 * Constructs a new map field instance.
 * @classdesc Reflected map field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} keyType Key type
 * @param {string} type Value type
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function MapField(name, id, keyType, type, options, comment) {
    Field.call(this, name, id, type, undefined, undefined, options, comment);

    /* istanbul ignore if */
    if (!util.isString(keyType))
        throw TypeError("keyType must be a string");

    /**
     * Key type.
     * @type {string}
     */
    this.keyType = keyType; // toJSON, marker

    /**
     * Resolved key type if not a basic type.
     * @type {ReflectionObject|null}
     */
    this.resolvedKeyType = null;

    // Overrides Field#map
    this.map = true;
}

/**
 * Map field descriptor.
 * @interface IMapField
 * @extends {IField}
 * @property {string} keyType Key type
 */

/**
 * Extension map field descriptor.
 * @interface IExtensionMapField
 * @extends IMapField
 * @property {string} extend Extended type
 */

/**
 * Constructs a map field from a map field descriptor.
 * @param {string} name Field name
 * @param {IMapField} json Map field descriptor
 * @returns {MapField} Created map field
 * @throws {TypeError} If arguments are invalid
 */
MapField.fromJSON = function fromJSON(name, json) {
    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
};

/**
 * Converts this map field to a map field descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IMapField} Map field descriptor
 */
MapField.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "keyType" , this.keyType,
        "type"    , this.type,
        "id"      , this.id,
        "extend"  , this.extend,
        "options" , this.options,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * @override
 */
MapField.prototype.resolve = function resolve() {
    if (this.resolved)
        return this;

    // Besides a value type, map fields have a key type that may be "any scalar type except for floating point types and bytes"
    if (types.mapKey[this.keyType] === undefined)
        throw Error("invalid key type: " + this.keyType);

    return Field.prototype.resolve.call(this);
};

/**
 * Map field decorator (TypeScript).
 * @name MapField.d
 * @function
 * @param {number} fieldId Field id
 * @param {"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"} fieldKeyType Field key type
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"|"bytes"|Object|Constructor<{}>} fieldValueType Field value type
 * @returns {FieldDecorator} Decorator function
 * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }
 */
MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {

    // submessage value: decorate the submessage and use its name as the type
    if (typeof fieldValueType === "function")
        fieldValueType = util.decorateType(fieldValueType).name;

    // enum reference value: create a reflected copy of the enum and keep reuseing it
    else if (fieldValueType && typeof fieldValueType === "object")
        fieldValueType = util.decorateEnum(fieldValueType).name;

    return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor)
            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
    };
};


/***/ }),

/***/ "./node_modules/protobufjs/src/message.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Message;

var util = __webpack_require__("./node_modules/protobufjs/src/util/minimal.js");

/**
 * Constructs a new message instance.
 * @classdesc Abstract runtime message.
 * @constructor
 * @param {Properties<T>} [properties] Properties to set
 * @template T extends object = object
 */
function Message(properties) {
    // not used internally
    if (properties)
        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            this[keys[i]] = properties[keys[i]];
}

/**
 * Reference to the reflected type.
 * @name Message.$type
 * @type {Type}
 * @readonly
 */

/**
 * Reference to the reflected type.
 * @name Message#$type
 * @type {Type}
 * @readonly
 */

/*eslint-disable valid-jsdoc*/

/**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<T>} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.create = function create(properties) {
    return this.$type.create(properties);
};

/**
 * Encodes a message of this type.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.encode = function encode(message, writer) {
    return this.$type.encode(message, writer);
};

/**
 * Encodes a message of this type preceeded by its length as a varint.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.encodeDelimited = function encodeDelimited(message, writer) {
    return this.$type.encodeDelimited(message, writer);
};

/**
 * Decodes a message of this type.
 * @name Message.decode
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.decode = function decode(reader) {
    return this.$type.decode(reader);
};

/**
 * Decodes a message of this type preceeded by its length as a varint.
 * @name Message.decodeDelimited
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.decodeDelimited = function decodeDelimited(reader) {
    return this.$type.decodeDelimited(reader);
};

/**
 * Verifies a message of this type.
 * @name Message.verify
 * @function
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {string|null} `null` if valid, otherwise the reason why it is not
 */
Message.verify = function verify(message) {
    return this.$type.verify(message);
};

/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object
 * @returns {T} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.fromObject = function fromObject(object) {
    return this.$type.fromObject(object);
};

/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {T} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.toObject = function toObject(message, options) {
    return this.$type.toObject(message, options);
};

/**
 * Converts this message to JSON.
 * @returns {Object.<string,*>} JSON object
 */
Message.prototype.toJSON = function toJSON() {
    return this.$type.toObject(this, util.toJSONOptions);
};

/*eslint-enable valid-jsdoc*/

/***/ }),

/***/ "./node_modules/protobufjs/src/method.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Method;

// extends ReflectionObject
var ReflectionObject = __webpack_require__("./node_modules/protobufjs/src/object.js");
((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";

var util = __webpack_require__("./node_modules/protobufjs/src/util.js");

/**
 * Constructs a new service method instance.
 * @classdesc Reflected service method.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Method name
 * @param {string|undefined} type Method type, usually `"rpc"`
 * @param {string} requestType Request message type
 * @param {string} responseType Response message type
 * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed
 * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] The comment for this method
 * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object
 */
function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {

    /* istanbul ignore next */
    if (util.isObject(requestStream)) {
        options = requestStream;
        requestStream = responseStream = undefined;
    } else if (util.isObject(responseStream)) {
        options = responseStream;
        responseStream = undefined;
    }

    /* istanbul ignore if */
    if (!(type === undefined || util.isString(type)))
        throw TypeError("type must be a string");

    /* istanbul ignore if */
    if (!util.isString(requestType))
        throw TypeError("requestType must be a string");

    /* istanbul ignore if */
    if (!util.isString(responseType))
        throw TypeError("responseType must be a string");

    ReflectionObject.call(this, name, options);

    /**
     * Method type.
     * @type {string}
     */
    this.type = type || "rpc"; // toJSON

    /**
     * Request type.
     * @type {string}
     */
    this.requestType = requestType; // toJSON, marker

    /**
     * Whether requests are streamed or not.
     * @type {boolean|undefined}
     */
    this.requestStream = requestStream ? true : undefined; // toJSON

    /**
     * Response type.
     * @type {string}
     */
    this.responseType = responseType; // toJSON

    /**
     * Whether responses are streamed or not.
     * @type {boolean|undefined}
     */
    this.responseStream = responseStream ? true : undefined; // toJSON

    /**
     * Resolved request type.
     * @type {Type|null}
     */
    this.resolvedRequestType = null;

    /**
     * Resolved response type.
     * @type {Type|null}
     */
    this.resolvedResponseType = null;

    /**
     * Comment for this method
     * @type {string|null}
     */
    this.comment = comment;

    /**
     * Options properly parsed into an object
     */
    this.parsedOptions = parsedOptions;
}

/**
 * Method descriptor.
 * @interface IMethod
 * @property {string} [type="rpc"] Method type
 * @property {string} requestType Request type
 * @property {string} responseType Response type
 * @property {boolean} [requestStream=false] Whether requests are streamed
 * @property {boolean} [responseStream=false] Whether responses are streamed
 * @property {Object.<string,*>} [options] Method options
 * @property {string} comment Method comments
 * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object
 */

/**
 * Constructs a method from a method descriptor.
 * @param {string} name Method name
 * @param {IMethod} json Method descriptor
 * @returns {Method} Created method
 * @throws {TypeError} If arguments are invalid
 */
Method.fromJSON = function fromJSON(name, json) {
    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
};

/**
 * Converts this method to a method descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IMethod} Method descriptor
 */
Method.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "type"           , this.type !== "rpc" && /* istanbul ignore next */ this.type || undefined,
        "requestType"    , this.requestType,
        "requestStream"  , this.requestStream,
        "responseType"   , this.responseType,
        "responseStream" , this.responseStream,
        "options"        , this.options,
        "comment"        , keepComments ? this.comment : undefined,
        "parsedOptions"  , this.parsedOptions,
    ]);
};

/**
 * @override
 */
Method.prototype.resolve = function resolve() {

    /* istanbul ignore if */
    if (this.resolved)
        return this;

    this.resolvedRequestType = this.parent.lookupType(this.requestType);
    this.resolvedResponseType = this.parent.lookupType(this.responseType);

    return ReflectionObject.prototype.resolve.call(this);
};


/***/ }),

/***/ "./node_modules/protobufjs/src/namespace.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Namespace;

// extends ReflectionObject
var ReflectionObject = __webpack_require__("./node_modules/protobufjs/src/object.js");
((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";

var Field    = __webpack_require__("./node_modules/protobufjs/src/field.js"),
    util     = __webpack_require__("./node_modules/protobufjs/src/util.js"),
    OneOf    = __webpack_require__("./node_modules/protobufjs/src/oneof.js");

var Type,    // cyclic
    Service,
    Enum;

/**
 * Constructs a new namespace instance.
 * @name Namespace
 * @classdesc Reflected namespace.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 */

/**
 * Constructs a namespace from JSON.
 * @memberof Namespace
 * @function
 * @param {string} name Namespace name
 * @param {Object.<string,*>} json JSON object
 * @returns {Namespace} Created namespace
 * @throws {TypeError} If arguments are invalid
 */
Namespace.fromJSON = function fromJSON(name, json) {
    return new Namespace(name, json.options).addJSON(json.nested);
};

/**
 * Converts an array of reflection objects to JSON.
 * @memberof Namespace
 * @param {ReflectionObject[]} array Object array
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty
 */
function arrayToJSON(array, toJSONOptions) {
    if (!(array && array.length))
        return undefined;
    var obj = {};
    for (var i = 0; i < array.length; ++i)
        obj[array[i].name] = array[i].toJSON(toJSONOptions);
    return obj;
}

Namespace.arrayToJSON = arrayToJSON;

/**
 * Tests if the specified id is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Namespace.isReservedId = function isReservedId(reserved, id) {
    if (reserved)
        for (var i = 0; i < reserved.length; ++i)
            if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] > id)
                return true;
    return false;
};

/**
 * Tests if the specified name is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Namespace.isReservedName = function isReservedName(reserved, name) {
    if (reserved)
        for (var i = 0; i < reserved.length; ++i)
            if (reserved[i] === name)
                return true;
    return false;
};

/**
 * Not an actual constructor. Use {@link Namespace} instead.
 * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports NamespaceBase
 * @extends ReflectionObject
 * @abstract
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 * @see {@link Namespace}
 */
function Namespace(name, options) {
    ReflectionObject.call(this, name, options);

    /**
     * Nested objects by name.
     * @type {Object.<string,ReflectionObject>|undefined}
     */
    this.nested = undefined; // toJSON

    /**
     * Cached nested objects as an array.
     * @type {ReflectionObject[]|null}
     * @private
     */
    this._nestedArray = null;
}

function clearCache(namespace) {
    namespace._nestedArray = null;
    return namespace;
}

/**
 * Nested objects of this namespace as an array for iteration.
 * @name NamespaceBase#nestedArray
 * @type {ReflectionObject[]}
 * @readonly
 */
Object.defineProperty(Namespace.prototype, "nestedArray", {
    get: function() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
    }
});

/**
 * Namespace descriptor.
 * @interface INamespace
 * @property {Object.<string,*>} [options] Namespace options
 * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors
 */

/**
 * Any extension field descriptor.
 * @typedef AnyExtensionField
 * @type {IExtensionField|IExtensionMapField}
 */

/**
 * Any nested object descriptor.
 * @typedef AnyNestedObject
 * @type {IEnum|IType|IService|AnyExtensionField|INamespace|IOneOf}
 */

/**
 * Converts this namespace to a namespace descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {INamespace} Namespace descriptor
 */
Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
    return util.toObject([
        "options" , this.options,
        "nested"  , arrayToJSON(this.nestedArray, toJSONOptions)
    ]);
};

/**
 * Adds nested objects to this namespace from nested object descriptors.
 * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors
 * @returns {Namespace} `this`
 */
Namespace.prototype.addJSON = function addJSON(nestedJson) {
    var ns = this;
    /* istanbul ignore else */
    if (nestedJson) {
        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
            nested = nestedJson[names[i]];
            ns.add( // most to least likely
                ( nested.fields !== undefined
                ? Type.fromJSON
                : nested.values !== undefined
                ? Enum.fromJSON
                : nested.methods !== undefined
                ? Service.fromJSON
                : nested.id !== undefined
                ? Field.fromJSON
                : Namespace.fromJSON )(names[i], nested)
            );
        }
    }
    return this;
};

/**
 * Gets the nested object of the specified name.
 * @param {string} name Nested object name
 * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist
 */
Namespace.prototype.get = function get(name) {
    return this.nested && this.nested[name]
        || null;
};

/**
 * Gets the values of the nested {@link Enum|enum} of the specified name.
 * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.
 * @param {string} name Nested enum name
 * @returns {Object.<string,number>} Enum values
 * @throws {Error} If there is no such enum
 */
Namespace.prototype.getEnum = function getEnum(name) {
    if (this.nested && this.nested[name] instanceof Enum)
        return this.nested[name].values;
    throw Error("no such enum: " + name);
};

/**
 * Adds a nested object to this namespace.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name
 */
Namespace.prototype.add = function add(object) {

    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type  || object instanceof OneOf || object instanceof Enum || object instanceof Service || object instanceof Namespace))
        throw TypeError("object must be a valid nested object");

    if (!this.nested)
        this.nested = {};
    else {
        var prev = this.get(object.name);
        if (prev) {
            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
                // replace plain namespace but keep existing nested elements and options
                var nested = prev.nestedArray;
                for (var i = 0; i < nested.length; ++i)
                    object.add(nested[i]);
                this.remove(prev);
                if (!this.nested)
                    this.nested = {};
                object.setOptions(prev.options, true);

            } else
                throw Error("duplicate name '" + object.name + "' in " + this);
        }
    }
    this.nested[object.name] = object;
    object.onAdd(this);
    return clearCache(this);
};

/**
 * Removes a nested object from this namespace.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this namespace
 */
Namespace.prototype.remove = function remove(object) {

    if (!(object instanceof ReflectionObject))
        throw TypeError("object must be a ReflectionObject");
    if (object.parent !== this)
        throw Error(object + " is not a member of " + this);

    delete this.nested[object.name];
    if (!Object.keys(this.nested).length)
        this.nested = undefined;

    object.onRemove(this);
    return clearCache(this);
};

/**
 * Defines additial namespaces within this one if not yet existing.
 * @param {string|string[]} path Path to create
 * @param {*} [json] Nested types to create from JSON
 * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty
 */
Namespace.prototype.define = function define(path, json) {

    if (util.isString(path))
        path = path.split(".");
    else if (!Array.isArray(path))
        throw TypeError("illegal path");
    if (path && path.length && path[0] === "")
        throw Error("path must be relative");

    var ptr = this;
    while (path.length > 0) {
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
            ptr = ptr.nested[part];
            if (!(ptr instanceof Namespace))
                throw Error("path conflicts with non-namespace objects");
        } else
            ptr.add(ptr = new Namespace(part));
    }
    if (json)
        ptr.addJSON(json);
    return ptr;
};

/**
 * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.
 * @returns {Namespace} `this`
 */
Namespace.prototype.resolveAll = function resolveAll() {
    var nested = this.nestedArray, i = 0;
    while (i < nested.length)
        if (nested[i] instanceof Namespace)
            nested[i++].resolveAll();
        else
            nested[i++].resolve();
    return this.resolve();
};

/**
 * Recursively looks up the reflection object matching the specified path in the scope of this namespace.
 * @param {string|string[]} path Path to look up
 * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.
 * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 */
Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {

    /* istanbul ignore next */
    if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = undefined;
    } else if (filterTypes && !Array.isArray(filterTypes))
        filterTypes = [ filterTypes ];

    if (util.isString(path) && path.length) {
        if (path === ".")
            return this.root;
        path = path.split(".");
    } else if (!path.length)
        return this;

    // Start at root if path is absolute
    if (path[0] === "")
        return this.root.lookup(path.slice(1), filterTypes);

    // Test if the first part matches any nested object, and if so, traverse if path contains more
    var found = this.get(path[0]);
    if (found) {
        if (path.length === 1) {
            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
                return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
            return found;

    // Otherwise try each nested namespace
    } else
        for (var i = 0; i < this.nestedArray.length; ++i)
            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
                return found;

    // If there hasn't been a match, try again at the parent
    if (this.parent === null || parentAlreadyChecked)
        return null;
    return this.parent.lookup(path, filterTypes);
};

/**
 * Looks up the reflection object at the specified path, relative to this namespace.
 * @name NamespaceBase#lookup
 * @function
 * @param {string|string[]} path Path to look up
 * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 * @variation 2
 */
// lookup(path: string, [parentAlreadyChecked: boolean])

/**
 * Looks up the {@link Type|type} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type
 * @throws {Error} If `path` does not point to a type
 */
Namespace.prototype.lookupType = function lookupType(path) {
    var found = this.lookup(path, [ Type ]);
    if (!found)
        throw Error("no such type: " + path);
    return found;
};

/**
 * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Enum} Looked up enum
 * @throws {Error} If `path` does not point to an enum
 */
Namespace.prototype.lookupEnum = function lookupEnum(path) {
    var found = this.lookup(path, [ Enum ]);
    if (!found)
        throw Error("no such Enum '" + path + "' in " + this);
    return found;
};

/**
 * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type or enum
 * @throws {Error} If `path` does not point to a type or enum
 */
Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
    var found = this.lookup(path, [ Type, Enum ]);
    if (!found)
        throw Error("no such Type or Enum '" + path + "' in " + this);
    return found;
};

/**
 * Looks up the {@link Service|service} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Service} Looked up service
 * @throws {Error} If `path` does not point to a service
 */
Namespace.prototype.lookupService = function lookupService(path) {
    var found = this.lookup(path, [ Service ]);
    if (!found)
        throw Error("no such Service '" + path + "' in " + this);
    return found;
};

// Sets up cyclic dependencies (called in index-light)
Namespace._configure = function(Type_, Service_, Enum_) {
    Type    = Type_;
    Service = Service_;
    Enum    = Enum_;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/object.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = ReflectionObject;

ReflectionObject.className = "ReflectionObject";

var util = __webpack_require__("./node_modules/protobufjs/src/util.js");

var Root; // cyclic

/**
 * Constructs a new reflection object instance.
 * @classdesc Base class of all reflection objects.
 * @constructor
 * @param {string} name Object name
 * @param {Object.<string,*>} [options] Declared options
 * @abstract
 */
function ReflectionObject(name, options) {

    if (!util.isString(name))
        throw TypeError("name must be a string");

    if (options && !util.isObject(options))
        throw TypeError("options must be an object");

    /**
     * Options.
     * @type {Object.<string,*>|undefined}
     */
    this.options = options; // toJSON

    /**
     * Parsed Options.
     * @type {Array.<Object.<string,*>>|undefined}
     */
    this.parsedOptions = null;

    /**
     * Unique name within its namespace.
     * @type {string}
     */
    this.name = name;

    /**
     * Parent namespace.
     * @type {Namespace|null}
     */
    this.parent = null;

    /**
     * Whether already resolved or not.
     * @type {boolean}
     */
    this.resolved = false;

    /**
     * Comment text, if any.
     * @type {string|null}
     */
    this.comment = null;

    /**
     * Defining file name.
     * @type {string|null}
     */
    this.filename = null;
}

Object.defineProperties(ReflectionObject.prototype, {

    /**
     * Reference to the root namespace.
     * @name ReflectionObject#root
     * @type {Root}
     * @readonly
     */
    root: {
        get: function() {
            var ptr = this;
            while (ptr.parent !== null)
                ptr = ptr.parent;
            return ptr;
        }
    },

    /**
     * Full name including leading dot.
     * @name ReflectionObject#fullName
     * @type {string}
     * @readonly
     */
    fullName: {
        get: function() {
            var path = [ this.name ],
                ptr = this.parent;
            while (ptr) {
                path.unshift(ptr.name);
                ptr = ptr.parent;
            }
            return path.join(".");
        }
    }
});

/**
 * Converts this reflection object to its descriptor representation.
 * @returns {Object.<string,*>} Descriptor
 * @abstract
 */
ReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {
    throw Error(); // not implemented, shouldn't happen
};

/**
 * Called when this object is added to a parent.
 * @param {ReflectionObject} parent Parent added to
 * @returns {undefined}
 */
ReflectionObject.prototype.onAdd = function onAdd(parent) {
    if (this.parent && this.parent !== parent)
        this.parent.remove(this);
    this.parent = parent;
    this.resolved = false;
    var root = parent.root;
    if (root instanceof Root)
        root._handleAdd(this);
};

/**
 * Called when this object is removed from a parent.
 * @param {ReflectionObject} parent Parent removed from
 * @returns {undefined}
 */
ReflectionObject.prototype.onRemove = function onRemove(parent) {
    var root = parent.root;
    if (root instanceof Root)
        root._handleRemove(this);
    this.parent = null;
    this.resolved = false;
};

/**
 * Resolves this objects type references.
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.resolve = function resolve() {
    if (this.resolved)
        return this;
    if (this.root instanceof Root)
        this.resolved = true; // only if part of a root
    return this;
};

/**
 * Gets an option value.
 * @param {string} name Option name
 * @returns {*} Option value or `undefined` if not set
 */
ReflectionObject.prototype.getOption = function getOption(name) {
    if (this.options)
        return this.options[name];
    return undefined;
};

/**
 * Sets an option.
 * @param {string} name Option name
 * @param {*} value Option value
 * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (!ifNotSet || !this.options || this.options[name] === undefined)
        (this.options || (this.options = {}))[name] = value;
    return this;
};

/**
 * Sets a parsed option.
 * @param {string} name parsed Option name
 * @param {*} value Option value
 * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\empty, will add a new option with that value
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {
    if (!this.parsedOptions) {
        this.parsedOptions = [];
    }
    var parsedOptions = this.parsedOptions;
    if (propName) {
        // If setting a sub property of an option then try to merge it
        // with an existing option
        var opt = parsedOptions.find(function (opt) {
            return Object.prototype.hasOwnProperty.call(opt, name);
        });
        if (opt) {
            // If we found an existing option - just merge the property value
            var newValue = opt[name];
            util.setProperty(newValue, propName, value);
        } else {
            // otherwise, create a new option, set it's property and add it to the list
            opt = {};
            opt[name] = util.setProperty({}, propName, value);
            parsedOptions.push(opt);
        }
    } else {
        // Always create a new option when setting the value of the option itself
        var newOpt = {};
        newOpt[name] = value;
        parsedOptions.push(newOpt);
    }
    return this;
};

/**
 * Sets multiple options.
 * @param {Object.<string,*>} options Options to set
 * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
    if (options)
        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)
            this.setOption(keys[i], options[keys[i]], ifNotSet);
    return this;
};

/**
 * Converts this instance to its string representation.
 * @returns {string} Class name[, space, full name]
 */
ReflectionObject.prototype.toString = function toString() {
    var className = this.constructor.className,
        fullName  = this.fullName;
    if (fullName.length)
        return className + " " + fullName;
    return className;
};

// Sets up cyclic dependencies (called in index-light)
ReflectionObject._configure = function(Root_) {
    Root = Root_;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/oneof.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = OneOf;

// extends ReflectionObject
var ReflectionObject = __webpack_require__("./node_modules/protobufjs/src/object.js");
((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";

var Field = __webpack_require__("./node_modules/protobufjs/src/field.js"),
    util  = __webpack_require__("./node_modules/protobufjs/src/util.js");

/**
 * Constructs a new oneof instance.
 * @classdesc Reflected oneof.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Oneof name
 * @param {string[]|Object.<string,*>} [fieldNames] Field names
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function OneOf(name, fieldNames, options, comment) {
    if (!Array.isArray(fieldNames)) {
        options = fieldNames;
        fieldNames = undefined;
    }
    ReflectionObject.call(this, name, options);

    /* istanbul ignore if */
    if (!(fieldNames === undefined || Array.isArray(fieldNames)))
        throw TypeError("fieldNames must be an Array");

    /**
     * Field names that belong to this oneof.
     * @type {string[]}
     */
    this.oneof = fieldNames || []; // toJSON, marker

    /**
     * Fields that belong to this oneof as an array for iteration.
     * @type {Field[]}
     * @readonly
     */
    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent

    /**
     * Comment for this field.
     * @type {string|null}
     */
    this.comment = comment;
}

/**
 * Oneof descriptor.
 * @interface IOneOf
 * @property {Array.<string>} oneof Oneof field names
 * @property {Object.<string,*>} [options] Oneof options
 */

/**
 * Constructs a oneof from a oneof descriptor.
 * @param {string} name Oneof name
 * @param {IOneOf} json Oneof descriptor
 * @returns {OneOf} Created oneof
 * @throws {TypeError} If arguments are invalid
 */
OneOf.fromJSON = function fromJSON(name, json) {
    return new OneOf(name, json.oneof, json.options, json.comment);
};

/**
 * Converts this oneof to a oneof descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IOneOf} Oneof descriptor
 */
OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options" , this.options,
        "oneof"   , this.oneof,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * Adds the fields of the specified oneof to the parent if not already done so.
 * @param {OneOf} oneof The oneof
 * @returns {undefined}
 * @inner
 * @ignore
 */
function addFieldsToParent(oneof) {
    if (oneof.parent)
        for (var i = 0; i < oneof.fieldsArray.length; ++i)
            if (!oneof.fieldsArray[i].parent)
                oneof.parent.add(oneof.fieldsArray[i]);
}

/**
 * Adds a field to this oneof and removes it from its current parent, if any.
 * @param {Field} field Field to add
 * @returns {OneOf} `this`
 */
OneOf.prototype.add = function add(field) {

    /* istanbul ignore if */
    if (!(field instanceof Field))
        throw TypeError("field must be a Field");

    if (field.parent && field.parent !== this.parent)
        field.parent.remove(field);
    this.oneof.push(field.name);
    this.fieldsArray.push(field);
    field.partOf = this; // field.parent remains null
    addFieldsToParent(this);
    return this;
};

/**
 * Removes a field from this oneof and puts it back to the oneof's parent.
 * @param {Field} field Field to remove
 * @returns {OneOf} `this`
 */
OneOf.prototype.remove = function remove(field) {

    /* istanbul ignore if */
    if (!(field instanceof Field))
        throw TypeError("field must be a Field");

    var index = this.fieldsArray.indexOf(field);

    /* istanbul ignore if */
    if (index < 0)
        throw Error(field + " is not a member of " + this);

    this.fieldsArray.splice(index, 1);
    index = this.oneof.indexOf(field.name);

    /* istanbul ignore else */
    if (index > -1) // theoretical
        this.oneof.splice(index, 1);

    field.partOf = null;
    return this;
};

/**
 * @override
 */
OneOf.prototype.onAdd = function onAdd(parent) {
    ReflectionObject.prototype.onAdd.call(this, parent);
    var self = this;
    // Collect present fields
    for (var i = 0; i < this.oneof.length; ++i) {
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
            field.partOf = self;
            self.fieldsArray.push(field);
        }
    }
    // Add not yet present fields
    addFieldsToParent(this);
};

/**
 * @override
 */
OneOf.prototype.onRemove = function onRemove(parent) {
    for (var i = 0, field; i < this.fieldsArray.length; ++i)
        if ((field = this.fieldsArray[i]).parent)
            field.parent.remove(field);
    ReflectionObject.prototype.onRemove.call(this, parent);
};

/**
 * Decorator function as returned by {@link OneOf.d} (TypeScript).
 * @typedef OneOfDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} oneofName OneOf name
 * @returns {undefined}
 */

/**
 * OneOf decorator (TypeScript).
 * @function
 * @param {...string} fieldNames Field names
 * @returns {OneOfDecorator} Decorator function
 * @template T extends string
 */
OneOf.d = function decorateOneOf() {
    var fieldNames = new Array(arguments.length),
        index = 0;
    while (index < arguments.length)
        fieldNames[index] = arguments[index++];
    return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor)
            .add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, {
            get: util.oneOfGetter(fieldNames),
            set: util.oneOfSetter(fieldNames)
        });
    };
};


/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Reader;

var util      = __webpack_require__("./node_modules/protobufjs/src/util/minimal.js");

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup(buffer) {
            return (Reader.create = function create_buffer(buffer) {
                return util.Buffer.isBuffer(buffer)
                    ? new BufferReader(buffer)
                    /* istanbul ignore next */
                    : create_array(buffer);
            })(buffer);
        }
        /* istanbul ignore next */
        : create_array;
};

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = create();

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);

    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1
        var nativeBuffer = util.Buffer;
        return nativeBuffer
            ? nativeBuffer.alloc(0)
            : new this.buf.constructor(0);
    }
    return this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;
    Reader.create = create();
    BufferReader._configure();

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};


/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = BufferReader;

// extends Reader
var Reader = __webpack_require__("./node_modules/protobufjs/src/reader.js");
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = __webpack_require__("./node_modules/protobufjs/src/util/minimal.js");

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

BufferReader._configure = function () {
    /* istanbul ignore else */
    if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
};


/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice
        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */

BufferReader._configure();


/***/ }),

/***/ "./node_modules/protobufjs/src/root.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Root;

// extends Namespace
var Namespace = __webpack_require__("./node_modules/protobufjs/src/namespace.js");
((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";

var Field   = __webpack_require__("./node_modules/protobufjs/src/field.js"),
    Enum    = __webpack_require__("./node_modules/protobufjs/src/enum.js"),
    OneOf   = __webpack_require__("./node_modules/protobufjs/src/oneof.js"),
    util    = __webpack_require__("./node_modules/protobufjs/src/util.js");

var Type,   // cyclic
    parse,  // might be excluded
    common; // "

/**
 * Constructs a new root namespace instance.
 * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.
 * @extends NamespaceBase
 * @constructor
 * @param {Object.<string,*>} [options] Top level options
 */
function Root(options) {
    Namespace.call(this, "", options);

    /**
     * Deferred extension fields.
     * @type {Field[]}
     */
    this.deferred = [];

    /**
     * Resolved file names of loaded files.
     * @type {string[]}
     */
    this.files = [];
}

/**
 * Loads a namespace descriptor into a root namespace.
 * @param {INamespace} json Nameespace descriptor
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted
 * @returns {Root} Root namespace
 */
Root.fromJSON = function fromJSON(json, root) {
    if (!root)
        root = new Root();
    if (json.options)
        root.setOptions(json.options);
    return root.addJSON(json.nested);
};

/**
 * Resolves the path of an imported file, relative to the importing origin.
 * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.
 * @function
 * @param {string} origin The file name of the importing file
 * @param {string} target The file name being imported
 * @returns {string|null} Resolved path to `target` or `null` to skip the file
 */
Root.prototype.resolvePath = util.path.resolve;

/**
 * Fetch content from file path or url
 * This method exists so you can override it with your own logic.
 * @function
 * @param {string} path File path or url
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 */
Root.prototype.fetch = util.fetch;

// A symbol-like function to safely signal synchronous loading
/* istanbul ignore next */
function SYNC() {} // eslint-disable-line no-empty-function

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} options Parse options
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 */
Root.prototype.load = function load(filename, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = undefined;
    }
    var self = this;
    if (!callback)
        return util.asPromise(load, self, filename, options);

    var sync = callback === SYNC; // undocumented

    // Finishes loading by calling the callback (exactly once)
    function finish(err, root) {
        /* istanbul ignore if */
        if (!callback)
            return;
        if (sync)
            throw err;
        var cb = callback;
        callback = null;
        cb(err, root);
    }

    // Bundled definition existence checking
    function getBundledFileName(filename) {
        var idx = filename.lastIndexOf("google/protobuf/");
        if (idx > -1) {
            var altname = filename.substring(idx);
            if (altname in common) return altname;
        }
        return null;
    }

    // Processes a single file
    function process(filename, source) {
        try {
            if (util.isString(source) && source.charAt(0) === "{")
                source = JSON.parse(source);
            if (!util.isString(source))
                self.setOptions(source.options).addJSON(source.nested);
            else {
                parse.filename = filename;
                var parsed = parse(source, self, options),
                    resolved,
                    i = 0;
                if (parsed.imports)
                    for (; i < parsed.imports.length; ++i)
                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))
                            fetch(resolved);
                if (parsed.weakImports)
                    for (i = 0; i < parsed.weakImports.length; ++i)
                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))
                            fetch(resolved, true);
            }
        } catch (err) {
            finish(err);
        }
        if (!sync && !queued)
            finish(null, self); // only once anyway
    }

    // Fetches a single file
    function fetch(filename, weak) {
        filename = getBundledFileName(filename) || filename;

        // Skip if already loaded / attempted
        if (self.files.indexOf(filename) > -1)
            return;
        self.files.push(filename);

        // Shortcut bundled definitions
        if (filename in common) {
            if (sync)
                process(filename, common[filename]);
            else {
                ++queued;
                setTimeout(function() {
                    --queued;
                    process(filename, common[filename]);
                });
            }
            return;
        }

        // Otherwise fetch from disk or network
        if (sync) {
            var source;
            try {
                source = util.fs.readFileSync(filename).toString("utf8");
            } catch (err) {
                if (!weak)
                    finish(err);
                return;
            }
            process(filename, source);
        } else {
            ++queued;
            self.fetch(filename, function(err, source) {
                --queued;
                /* istanbul ignore if */
                if (!callback)
                    return; // terminated meanwhile
                if (err) {
                    /* istanbul ignore else */
                    if (!weak)
                        finish(err);
                    else if (!queued) // can't be covered reliably
                        finish(null, self);
                    return;
                }
                process(filename, source);
            });
        }
    }
    var queued = 0;

    // Assembling the root namespace doesn't require working type
    // references anymore, so we can load everything in parallel
    if (util.isString(filename))
        filename = [ filename ];
    for (var i = 0, resolved; i < filename.length; ++i)
        if (resolved = self.resolvePath("", filename[i]))
            fetch(resolved);

    if (sync)
        return self;
    if (!queued)
        finish(null, self);
    return undefined;
};
// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @variation 2
 */
// function load(filename:string, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Promise<Root>} Promise
 * @variation 3
 */
// function load(filename:string, [options:IParseOptions]):Promise<Root>

/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).
 * @function Root#loadSync
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 */
Root.prototype.loadSync = function loadSync(filename, options) {
    if (!util.isNode)
        throw Error("not supported");
    return this.load(filename, options, SYNC);
};

/**
 * @override
 */
Root.prototype.resolveAll = function resolveAll() {
    if (this.deferred.length)
        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
            return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
    return Namespace.prototype.resolveAll.call(this);
};

// only uppercased (and thus conflict-free) children are exposed, see below
var exposeRe = /^[A-Z]/;

/**
 * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.
 * @param {Root} root Root instance
 * @param {Field} field Declaring extension field witin the declaring type
 * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise
 * @inner
 * @ignore
 */
function tryHandleExtension(root, field) {
    var extendedType = field.parent.lookup(field.extend);
    if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);
        //do not allow to extend same field twice to prevent the error
        if (extendedType.get(sisterField.name)) {
            return true;
        }
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
    }
    return false;
}

/**
 * Called when any object is added to this root or its sub-namespaces.
 * @param {ReflectionObject} object Object added
 * @returns {undefined}
 * @private
 */
Root.prototype._handleAdd = function _handleAdd(object) {
    if (object instanceof Field) {

        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)
            if (!tryHandleExtension(this, object))
                this.deferred.push(object);

    } else if (object instanceof Enum) {

        if (exposeRe.test(object.name))
            object.parent[object.name] = object.values; // expose enum values as property of its parent

    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {

        if (object instanceof Type) // Try to handle any deferred extensions
            for (var i = 0; i < this.deferred.length;)
                if (tryHandleExtension(this, this.deferred[i]))
                    this.deferred.splice(i, 1);
                else
                    ++i;
        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace
            this._handleAdd(object._nestedArray[j]);
        if (exposeRe.test(object.name))
            object.parent[object.name] = object; // expose namespace as property of its parent
    }

    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as
    // properties of namespaces just like static code does. This allows using a .d.ts generated for
    // a static module with reflection-based solutions where the condition is met.
};

/**
 * Called when any object is removed from this root or its sub-namespaces.
 * @param {ReflectionObject} object Object removed
 * @returns {undefined}
 * @private
 */
Root.prototype._handleRemove = function _handleRemove(object) {
    if (object instanceof Field) {

        if (/* an extension field */ object.extend !== undefined) {
            if (/* already handled */ object.extensionField) { // remove its sister field
                object.extensionField.parent.remove(object.extensionField);
                object.extensionField = null;
            } else { // cancel the extension
                var index = this.deferred.indexOf(object);
                /* istanbul ignore else */
                if (index > -1)
                    this.deferred.splice(index, 1);
            }
        }

    } else if (object instanceof Enum) {

        if (exposeRe.test(object.name))
            delete object.parent[object.name]; // unexpose enum values

    } else if (object instanceof Namespace) {

        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace
            this._handleRemove(object._nestedArray[i]);

        if (exposeRe.test(object.name))
            delete object.parent[object.name]; // unexpose namespaces

    }
};

// Sets up cyclic dependencies (called in index-light)
Root._configure = function(Type_, parse_, common_) {
    Type   = Type_;
    parse  = parse_;
    common = common_;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/***/ (function(module) {

"use strict";

module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available across modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */


/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = __webpack_require__("./node_modules/protobufjs/src/rpc/service.js");


/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Service;

var util = __webpack_require__("./node_modules/protobufjs/src/util/minimal.js");

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/service.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Service;

// extends Namespace
var Namespace = __webpack_require__("./node_modules/protobufjs/src/namespace.js");
((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";

var Method = __webpack_require__("./node_modules/protobufjs/src/method.js"),
    util   = __webpack_require__("./node_modules/protobufjs/src/util.js"),
    rpc    = __webpack_require__("./node_modules/protobufjs/src/rpc.js");

/**
 * Constructs a new service instance.
 * @classdesc Reflected service.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Service name
 * @param {Object.<string,*>} [options] Service options
 * @throws {TypeError} If arguments are invalid
 */
function Service(name, options) {
    Namespace.call(this, name, options);

    /**
     * Service methods.
     * @type {Object.<string,Method>}
     */
    this.methods = {}; // toJSON, marker

    /**
     * Cached methods as an array.
     * @type {Method[]|null}
     * @private
     */
    this._methodsArray = null;
}

/**
 * Service descriptor.
 * @interface IService
 * @extends INamespace
 * @property {Object.<string,IMethod>} methods Method descriptors
 */

/**
 * Constructs a service from a service descriptor.
 * @param {string} name Service name
 * @param {IService} json Service descriptor
 * @returns {Service} Created service
 * @throws {TypeError} If arguments are invalid
 */
Service.fromJSON = function fromJSON(name, json) {
    var service = new Service(name, json.options);
    /* istanbul ignore else */
    if (json.methods)
        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
            service.add(Method.fromJSON(names[i], json.methods[names[i]]));
    if (json.nested)
        service.addJSON(json.nested);
    service.comment = json.comment;
    return service;
};

/**
 * Converts this service to a service descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IService} Service descriptor
 */
Service.prototype.toJSON = function toJSON(toJSONOptions) {
    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options" , inherited && inherited.options || undefined,
        "methods" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},
        "nested"  , inherited && inherited.nested || undefined,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * Methods of this service as an array for iteration.
 * @name Service#methodsArray
 * @type {Method[]}
 * @readonly
 */
Object.defineProperty(Service.prototype, "methodsArray", {
    get: function() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
    }
});

function clearCache(service) {
    service._methodsArray = null;
    return service;
}

/**
 * @override
 */
Service.prototype.get = function get(name) {
    return this.methods[name]
        || Namespace.prototype.get.call(this, name);
};

/**
 * @override
 */
Service.prototype.resolveAll = function resolveAll() {
    var methods = this.methodsArray;
    for (var i = 0; i < methods.length; ++i)
        methods[i].resolve();
    return Namespace.prototype.resolve.call(this);
};

/**
 * @override
 */
Service.prototype.add = function add(object) {

    /* istanbul ignore if */
    if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);

    if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};

/**
 * @override
 */
Service.prototype.remove = function remove(object) {
    if (object instanceof Method) {

        /* istanbul ignore if */
        if (this.methods[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};

/**
 * Creates a runtime service using the specified rpc implementation.
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.
 */
Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen(["r","c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
            m: method,
            q: method.resolvedRequestType.ctor,
            s: method.resolvedResponseType.ctor
        });
    }
    return rpcService;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/type.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Type;

// extends Namespace
var Namespace = __webpack_require__("./node_modules/protobufjs/src/namespace.js");
((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";

var Enum      = __webpack_require__("./node_modules/protobufjs/src/enum.js"),
    OneOf     = __webpack_require__("./node_modules/protobufjs/src/oneof.js"),
    Field     = __webpack_require__("./node_modules/protobufjs/src/field.js"),
    MapField  = __webpack_require__("./node_modules/protobufjs/src/mapfield.js"),
    Service   = __webpack_require__("./node_modules/protobufjs/src/service.js"),
    Message   = __webpack_require__("./node_modules/protobufjs/src/message.js"),
    Reader    = __webpack_require__("./node_modules/protobufjs/src/reader.js"),
    Writer    = __webpack_require__("./node_modules/protobufjs/src/writer.js"),
    util      = __webpack_require__("./node_modules/protobufjs/src/util.js"),
    encoder   = __webpack_require__("./node_modules/protobufjs/src/encoder.js"),
    decoder   = __webpack_require__("./node_modules/protobufjs/src/decoder.js"),
    verifier  = __webpack_require__("./node_modules/protobufjs/src/verifier.js"),
    converter = __webpack_require__("./node_modules/protobufjs/src/converter.js"),
    wrappers  = __webpack_require__("./node_modules/protobufjs/src/wrappers.js");

/**
 * Constructs a new reflected message type instance.
 * @classdesc Reflected message type.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Message name
 * @param {Object.<string,*>} [options] Declared options
 */
function Type(name, options) {
    Namespace.call(this, name, options);

    /**
     * Message fields.
     * @type {Object.<string,Field>}
     */
    this.fields = {};  // toJSON, marker

    /**
     * Oneofs declared within this namespace, if any.
     * @type {Object.<string,OneOf>}
     */
    this.oneofs = undefined; // toJSON

    /**
     * Extension ranges, if any.
     * @type {number[][]}
     */
    this.extensions = undefined; // toJSON

    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */
    this.reserved = undefined; // toJSON

    /*?
     * Whether this type is a legacy group.
     * @type {boolean|undefined}
     */
    this.group = undefined; // toJSON

    /**
     * Cached fields by id.
     * @type {Object.<number,Field>|null}
     * @private
     */
    this._fieldsById = null;

    /**
     * Cached fields as an array.
     * @type {Field[]|null}
     * @private
     */
    this._fieldsArray = null;

    /**
     * Cached oneofs as an array.
     * @type {OneOf[]|null}
     * @private
     */
    this._oneofsArray = null;

    /**
     * Cached constructor.
     * @type {Constructor<{}>}
     * @private
     */
    this._ctor = null;
}

Object.defineProperties(Type.prototype, {

    /**
     * Message fields by id.
     * @name Type#fieldsById
     * @type {Object.<number,Field>}
     * @readonly
     */
    fieldsById: {
        get: function() {

            /* istanbul ignore if */
            if (this._fieldsById)
                return this._fieldsById;

            this._fieldsById = {};
            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
                var field = this.fields[names[i]],
                    id = field.id;

                /* istanbul ignore if */
                if (this._fieldsById[id])
                    throw Error("duplicate id " + id + " in " + this);

                this._fieldsById[id] = field;
            }
            return this._fieldsById;
        }
    },

    /**
     * Fields of this message as an array for iteration.
     * @name Type#fieldsArray
     * @type {Field[]}
     * @readonly
     */
    fieldsArray: {
        get: function() {
            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
    },

    /**
     * Oneofs of this message as an array for iteration.
     * @name Type#oneofsArray
     * @type {OneOf[]}
     * @readonly
     */
    oneofsArray: {
        get: function() {
            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
    },

    /**
     * The registered constructor, if any registered, otherwise a generic constructor.
     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
     * @name Type#ctor
     * @type {Constructor<{}>}
     */
    ctor: {
        get: function() {
            return this._ctor || (this.ctor = Type.generateConstructor(this)());
        },
        set: function(ctor) {

            // Ensure proper prototype
            var prototype = ctor.prototype;
            if (!(prototype instanceof Message)) {
                (ctor.prototype = new Message()).constructor = ctor;
                util.merge(ctor.prototype, prototype);
            }

            // Classes and messages reference their reflected type
            ctor.$type = ctor.prototype.$type = this;

            // Mix in static methods
            util.merge(ctor, Message, true);

            this._ctor = ctor;

            // Messages have non-enumerable default values on their prototype
            var i = 0;
            for (; i < /* initializes */ this.fieldsArray.length; ++i)
                this._fieldsArray[i].resolve(); // ensures a proper value

            // Messages have non-enumerable getters and setters for each virtual oneof field
            var ctorProperties = {};
            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)
                ctorProperties[this._oneofsArray[i].resolve().name] = {
                    get: util.oneOfGetter(this._oneofsArray[i].oneof),
                    set: util.oneOfSetter(this._oneofsArray[i].oneof)
                };
            if (i)
                Object.defineProperties(ctor.prototype, ctorProperties);
        }
    }
});

/**
 * Generates a constructor function for the specified type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
Type.generateConstructor = function generateConstructor(mtype) {
    /* eslint-disable no-unexpected-multiline */
    var gen = util.codegen(["p"], mtype.name);
    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype
    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
        if ((field = mtype._fieldsArray[i]).map) gen
            ("this%s={}", util.safeProp(field.name));
        else if (field.repeated) gen
            ("this%s=[]", util.safeProp(field.name));
    return gen
    ("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)") // omit undefined or null
        ("this[ks[i]]=p[ks[i]]");
    /* eslint-enable no-unexpected-multiline */
};

function clearCache(type) {
    type._fieldsById = type._fieldsArray = type._oneofsArray = null;
    delete type.encode;
    delete type.decode;
    delete type.verify;
    return type;
}

/**
 * Message type descriptor.
 * @interface IType
 * @extends INamespace
 * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors
 * @property {Object.<string,IField>} fields Field descriptors
 * @property {number[][]} [extensions] Extension ranges
 * @property {Array.<number[]|string>} [reserved] Reserved ranges
 * @property {boolean} [group=false] Whether a legacy group or not
 */

/**
 * Creates a message type from a message type descriptor.
 * @param {string} name Message name
 * @param {IType} json Message type descriptor
 * @returns {Type} Created message type
 */
Type.fromJSON = function fromJSON(name, json) {
    var type = new Type(name, json.options);
    type.extensions = json.extensions;
    type.reserved = json.reserved;
    var names = Object.keys(json.fields),
        i = 0;
    for (; i < names.length; ++i)
        type.add(
            ( typeof json.fields[names[i]].keyType !== "undefined"
            ? MapField.fromJSON
            : Field.fromJSON )(names[i], json.fields[names[i]])
        );
    if (json.oneofs)
        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
    if (json.nested)
        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
            var nested = json.nested[names[i]];
            type.add( // most to least likely
                ( nested.id !== undefined
                ? Field.fromJSON
                : nested.fields !== undefined
                ? Type.fromJSON
                : nested.values !== undefined
                ? Enum.fromJSON
                : nested.methods !== undefined
                ? Service.fromJSON
                : Namespace.fromJSON )(names[i], nested)
            );
        }
    if (json.extensions && json.extensions.length)
        type.extensions = json.extensions;
    if (json.reserved && json.reserved.length)
        type.reserved = json.reserved;
    if (json.group)
        type.group = true;
    if (json.comment)
        type.comment = json.comment;
    return type;
};

/**
 * Converts this message type to a message type descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IType} Message type descriptor
 */
Type.prototype.toJSON = function toJSON(toJSONOptions) {
    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options"    , inherited && inherited.options || undefined,
        "oneofs"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
        "fields"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},
        "extensions" , this.extensions && this.extensions.length ? this.extensions : undefined,
        "reserved"   , this.reserved && this.reserved.length ? this.reserved : undefined,
        "group"      , this.group || undefined,
        "nested"     , inherited && inherited.nested || undefined,
        "comment"    , keepComments ? this.comment : undefined
    ]);
};

/**
 * @override
 */
Type.prototype.resolveAll = function resolveAll() {
    var fields = this.fieldsArray, i = 0;
    while (i < fields.length)
        fields[i++].resolve();
    var oneofs = this.oneofsArray; i = 0;
    while (i < oneofs.length)
        oneofs[i++].resolve();
    return Namespace.prototype.resolveAll.call(this);
};

/**
 * @override
 */
Type.prototype.get = function get(name) {
    return this.fields[name]
        || this.oneofs && this.oneofs[name]
        || this.nested && this.nested[name]
        || null;
};

/**
 * Adds a nested object to this type.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Type} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id
 */
Type.prototype.add = function add(object) {

    if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);

    if (object instanceof Field && object.extend === undefined) {
        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.
        // The root object takes care of adding distinct sister-fields to the respective extended
        // type instead.

        // avoids calling the getter if not absolutely necessary because it's called quite frequently
        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])
            throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id))
            throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name))
            throw Error("name '" + object.name + "' is reserved in " + this);

        if (object.parent)
            object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {
        if (!this.oneofs)
            this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};

/**
 * Removes a nested object from this type.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Type} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this type
 */
Type.prototype.remove = function remove(object) {
    if (object instanceof Field && object.extend === undefined) {
        // See Type#add for the reason why extension fields are excluded here.

        /* istanbul ignore if */
        if (!this.fields || this.fields[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {

        /* istanbul ignore if */
        if (!this.oneofs || this.oneofs[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};

/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Type.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};

/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Type.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};

/**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<{}>} Message instance
 */
Type.prototype.create = function create(properties) {
    return new this.ctor(properties);
};

/**
 * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.
 * @returns {Type} `this`
 */
Type.prototype.setup = function setup() {
    // Sets up everything at once so that the prototype chain does not have to be re-evaluated
    // multiple times (V8, soft-deopt prototype-check).

    var fullName = this.fullName,
        types    = [];
    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)
        types.push(this._fieldsArray[i].resolve().resolvedType);

    // Replace setup methods with type-specific generated functions
    this.encode = encoder(this)({
        Writer : Writer,
        types  : types,
        util   : util
    });
    this.decode = decoder(this)({
        Reader : Reader,
        types  : types,
        util   : util
    });
    this.verify = verifier(this)({
        types : types,
        util  : util
    });
    this.fromObject = converter.fromObject(this)({
        types : types,
        util  : util
    });
    this.toObject = converter.toObject(this)({
        types : types,
        util  : util
    });

    // Inject custom wrappers for common types
    var wrapper = wrappers[fullName];
    if (wrapper) {
        var originalThis = Object.create(this);
        // if (wrapper.fromObject) {
            originalThis.fromObject = this.fromObject;
            this.fromObject = wrapper.fromObject.bind(originalThis);
        // }
        // if (wrapper.toObject) {
            originalThis.toObject = this.toObject;
            this.toObject = wrapper.toObject.bind(originalThis);
        // }
    }

    return this;
};

/**
 * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */
Type.prototype.encode = function encode_setup(message, writer) {
    return this.setup().encode(message, writer); // overrides this method
};

/**
 * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */
Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
};

/**
 * Decodes a message of this type.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @param {number} [length] Length of the message, if known beforehand
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError<{}>} If required fields are missing
 */
Type.prototype.decode = function decode_setup(reader, length) {
    return this.setup().decode(reader, length); // overrides this method
};

/**
 * Decodes a message of this type preceeded by its byte length as a varint.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError} If required fields are missing
 */
Type.prototype.decodeDelimited = function decodeDelimited(reader) {
    if (!(reader instanceof Reader))
        reader = Reader.create(reader);
    return this.decode(reader, reader.uint32());
};

/**
 * Verifies that field values are valid and that required fields are present.
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {null|string} `null` if valid, otherwise the reason why it is not
 */
Type.prototype.verify = function verify_setup(message) {
    return this.setup().verify(message); // overrides this method
};

/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object to convert
 * @returns {Message<{}>} Message instance
 */
Type.prototype.fromObject = function fromObject(object) {
    return this.setup().fromObject(object);
};

/**
 * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.
 * @interface IConversionOptions
 * @property {Function} [longs] Long conversion type.
 * Valid values are `String` and `Number` (the global types).
 * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.
 * @property {Function} [enums] Enum value conversion type.
 * Only valid value is `String` (the global type).
 * Defaults to copy the present value, which is the numeric id.
 * @property {Function} [bytes] Bytes value conversion type.
 * Valid values are `Array` and (a base64 encoded) `String` (the global types).
 * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.
 * @property {boolean} [defaults=false] Also sets default values on the resulting object
 * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`
 * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`
 * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any
 * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings
 */

/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 */
Type.prototype.toObject = function toObject(message, options) {
    return this.setup().toObject(message, options);
};

/**
 * Decorator function as returned by {@link Type.d} (TypeScript).
 * @typedef TypeDecorator
 * @type {function}
 * @param {Constructor<T>} target Target constructor
 * @returns {undefined}
 * @template T extends Message<T>
 */

/**
 * Type decorator (TypeScript).
 * @param {string} [typeName] Type name, defaults to the constructor's name
 * @returns {TypeDecorator<T>} Decorator function
 * @template T extends Message<T>
 */
Type.d = function decorateType(typeName) {
    return function typeDecorator(target) {
        util.decorateType(target, typeName);
    };
};


/***/ }),

/***/ "./node_modules/protobufjs/src/types.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


/**
 * Common type constants.
 * @namespace
 */
var types = exports;

var util = __webpack_require__("./node_modules/protobufjs/src/util.js");

var s = [
    "double",   // 0
    "float",    // 1
    "int32",    // 2
    "uint32",   // 3
    "sint32",   // 4
    "fixed32",  // 5
    "sfixed32", // 6
    "int64",    // 7
    "uint64",   // 8
    "sint64",   // 9
    "fixed64",  // 10
    "sfixed64", // 11
    "bool",     // 12
    "string",   // 13
    "bytes"     // 14
];

function bake(values, offset) {
    var i = 0, o = {};
    offset |= 0;
    while (i < values.length) o[s[i + offset]] = values[i++];
    return o;
}

/**
 * Basic type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 * @property {number} bytes=2 Ldelim wire type
 */
types.basic = bake([
    /* double   */ 1,
    /* float    */ 5,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0,
    /* string   */ 2,
    /* bytes    */ 2
]);

/**
 * Basic type defaults.
 * @type {Object.<string,*>}
 * @const
 * @property {number} double=0 Double default
 * @property {number} float=0 Float default
 * @property {number} int32=0 Int32 default
 * @property {number} uint32=0 Uint32 default
 * @property {number} sint32=0 Sint32 default
 * @property {number} fixed32=0 Fixed32 default
 * @property {number} sfixed32=0 Sfixed32 default
 * @property {number} int64=0 Int64 default
 * @property {number} uint64=0 Uint64 default
 * @property {number} sint64=0 Sint32 default
 * @property {number} fixed64=0 Fixed64 default
 * @property {number} sfixed64=0 Sfixed64 default
 * @property {boolean} bool=false Bool default
 * @property {string} string="" String default
 * @property {Array.<number>} bytes=Array(0) Bytes default
 * @property {null} message=null Message default
 */
types.defaults = bake([
    /* double   */ 0,
    /* float    */ 0,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 0,
    /* sfixed32 */ 0,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 0,
    /* sfixed64 */ 0,
    /* bool     */ false,
    /* string   */ "",
    /* bytes    */ util.emptyArray,
    /* message  */ null
]);

/**
 * Basic long type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 */
types.long = bake([
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1
], 7);

/**
 * Allowed types for map keys with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 */
types.mapKey = bake([
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0,
    /* string   */ 2
], 2);

/**
 * Allowed types for packed repeated fields with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 */
types.packed = bake([
    /* double   */ 1,
    /* float    */ 5,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0
]);


/***/ }),

/***/ "./node_modules/protobufjs/src/util.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


/**
 * Various utility functions.
 * @namespace
 */
var util = module.exports = __webpack_require__("./node_modules/protobufjs/src/util/minimal.js");

var roots = __webpack_require__("./node_modules/protobufjs/src/roots.js");

var Type, // cyclic
    Enum;

util.codegen = __webpack_require__("./node_modules/@protobufjs/codegen/index.js");
util.fetch   = __webpack_require__("./node_modules/@protobufjs/fetch/index.js");
util.path    = __webpack_require__("./node_modules/@protobufjs/path/index.js");

/**
 * Node's fs module if available.
 * @type {Object.<string,*>}
 */
util.fs = util.inquire("fs");

/**
 * Converts an object's values to an array.
 * @param {Object.<string,*>} object Object to convert
 * @returns {Array.<*>} Converted array
 */
util.toArray = function toArray(object) {
    if (object) {
        var keys  = Object.keys(object),
            array = new Array(keys.length),
            index = 0;
        while (index < keys.length)
            array[index] = object[keys[index++]];
        return array;
    }
    return [];
};

/**
 * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.
 * @param {Array.<*>} array Array to convert
 * @returns {Object.<string,*>} Converted object
 */
util.toObject = function toObject(array) {
    var object = {},
        index  = 0;
    while (index < array.length) {
        var key = array[index++],
            val = array[index++];
        if (val !== undefined)
            object[key] = val;
    }
    return object;
};

var safePropBackslashRe = /\\/g,
    safePropQuoteRe     = /"/g;

/**
 * Tests whether the specified name is a reserved word in JS.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
util.isReserved = function isReserved(name) {
    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
};

/**
 * Returns a safe property accessor for the specified property name.
 * @param {string} prop Property name
 * @returns {string} Safe accessor
 */
util.safeProp = function safeProp(prop) {
    if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
        return "[\"" + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, "\\\"") + "\"]";
    return "." + prop;
};

/**
 * Converts the first character of a string to upper case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.ucFirst = function ucFirst(str) {
    return str.charAt(0).toUpperCase() + str.substring(1);
};

var camelCaseRe = /_([a-z])/g;

/**
 * Converts a string to camel case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.camelCase = function camelCase(str) {
    return str.substring(0, 1)
         + str.substring(1)
               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });
};

/**
 * Compares reflected fields by id.
 * @param {Field} a First field
 * @param {Field} b Second field
 * @returns {number} Comparison value
 */
util.compareFieldsById = function compareFieldsById(a, b) {
    return a.id - b.id;
};

/**
 * Decorator helper for types (TypeScript).
 * @param {Constructor<T>} ctor Constructor function
 * @param {string} [typeName] Type name, defaults to the constructor's name
 * @returns {Type} Reflected type
 * @template T extends Message<T>
 * @property {Root} root Decorators root
 */
util.decorateType = function decorateType(ctor, typeName) {

    /* istanbul ignore if */
    if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
            util.decorateRoot.remove(ctor.$type);
            ctor.$type.name = typeName;
            util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
    }

    /* istanbul ignore next */
    if (!Type)
        Type = __webpack_require__("./node_modules/protobufjs/src/type.js");

    var type = new Type(typeName || ctor.name);
    util.decorateRoot.add(type);
    type.ctor = ctor; // sets up .encode, .decode etc.
    Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
    Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
    return type;
};

var decorateEnumIndex = 0;

/**
 * Decorator helper for enums (TypeScript).
 * @param {Object} object Enum object
 * @returns {Enum} Reflected enum
 */
util.decorateEnum = function decorateEnum(object) {

    /* istanbul ignore if */
    if (object.$type)
        return object.$type;

    /* istanbul ignore next */
    if (!Enum)
        Enum = __webpack_require__("./node_modules/protobufjs/src/enum.js");

    var enm = new Enum("Enum" + decorateEnumIndex++, object);
    util.decorateRoot.add(enm);
    Object.defineProperty(object, "$type", { value: enm, enumerable: false });
    return enm;
};


/**
 * Sets the value of a property by property path. If a value already exists, it is turned to an array
 * @param {Object.<string,*>} dst Destination object
 * @param {string} path dot '.' delimited path of the property to set
 * @param {Object} value the value to set
 * @returns {Object.<string,*>} Destination object
 */
util.setProperty = function setProperty(dst, path, value) {
    function setProp(dst, path, value) {
        var part = path.shift();
        if (part === "__proto__" || part === "prototype") {
          return dst;
        }
        if (path.length > 0) {
            dst[part] = setProp(dst[part] || {}, path, value);
        } else {
            var prevValue = dst[part];
            if (prevValue)
                value = [].concat(prevValue).concat(value);
            dst[part] = value;
        }
        return dst;
    }

    if (typeof dst !== "object")
        throw TypeError("dst must be an object");
    if (!path)
        throw TypeError("path must be specified");

    path = path.split(".");
    return setProp(dst, path, value);
};

/**
 * Decorator root (TypeScript).
 * @name util.decorateRoot
 * @type {Root}
 * @readonly
 */
Object.defineProperty(util, "decorateRoot", {
    get: function() {
        return roots["decorated"] || (roots["decorated"] = new (__webpack_require__("./node_modules/protobufjs/src/root.js"))());
    }
});


/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = LongBits;

var util = __webpack_require__("./node_modules/protobufjs/src/util/minimal.js");

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var util = exports;

// used to return a Promise where callback is omitted
util.asPromise = __webpack_require__("./node_modules/@protobufjs/aspromise/index.js");

// converts to / from base64 encoded strings
util.base64 = __webpack_require__("./node_modules/@protobufjs/base64/index.js");

// base class of rpc.Service
util.EventEmitter = __webpack_require__("./node_modules/@protobufjs/eventemitter/index.js");

// float handling accross browsers
util.float = __webpack_require__("./node_modules/@protobufjs/float/index.js");

// requires modules optionally and hides the call from bundlers
util.inquire = __webpack_require__("./node_modules/@protobufjs/inquire/index.js");

// converts to / from utf8 encoded strings
util.utf8 = __webpack_require__("./node_modules/@protobufjs/utf8/index.js");

// provides a node-like buffer pool in the browser
util.pool = __webpack_require__("./node_modules/@protobufjs/pool/index.js");

// utility to work with the low and high bits of a 64 bit value
util.LongBits = __webpack_require__("./node_modules/protobufjs/src/util/longbits.js");

/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 */
util.isNode = Boolean( true
                   && ({}).process
                   && ({}).process.versions
                   && ({}).process.versions.node);

/**
 * Global object reference.
 * @memberof util
 * @type {Object}
 */
util.global = util.isNode && ({})
           || typeof window !== "undefined" && window
           || typeof self   !== "undefined" && self
           || this; // eslint-disable-line no-invalid-this

/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */
util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */
util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */
util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */
util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */
util.isObject = function isObject(value) {
    return value && typeof value === "object";
};

/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isset =

/**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};

/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */

/**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */
util.Buffer = (function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */
        return null;
    }
})();

// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;

/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */
util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number"
        ? util.Buffer
            ? util._Buffer_allocUnsafe(sizeOrArray)
            : new util.Array(sizeOrArray)
        : util.Buffer
            ? util._Buffer_from(sizeOrArray)
            : typeof Uint8Array === "undefined"
                ? sizeOrArray
                : new Uint8Array(sizeOrArray);
};

/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */

/**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */
util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
         || /* istanbul ignore next */ util.global.Long
         || util.inquire("long");

/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */
util.key2Re = /^true|false|0|1$/;

/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */
util.longToHash = function longToHash(value) {
    return value
        ? util.LongBits.from(value).toHash()
        : util.LongBits.zeroHash;
};

/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */
util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};

/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */
function merge(dst, src, ifNotSet) { // used by converters
    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === undefined || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
    return dst;
}

util.merge = merge;

/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};

/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */
function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError))
            return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function() { return message; } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);
        else
            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

        if (properties)
            merge(this, properties);
    }

    CustomError.prototype = Object.create(Error.prototype, {
        constructor: {
            value: CustomError,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        name: {
            get: function get() { return name; },
            set: undefined,
            enumerable: false,
            // configurable: false would accurately preserve the behavior of
            // the original, but I'm guessing that was not intentional.
            // For an actual error subclass, this property would
            // be configurable.
            configurable: true,
        },
        toString: {
            value: function value() { return this.name + ": " + this.message; },
            writable: true,
            enumerable: false,
            configurable: true,
        },
    });

    return CustomError;
}

util.newError = newError;

/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */
util.ProtocolError = newError("ProtocolError");

/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */

/**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */

/**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */
util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;

    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */
    return function() { // eslint-disable-line consistent-return
        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                return keys[i];
    };
};

/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */

/**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */
util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
                delete this[fieldNames[i]];
    };
};

/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */
util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */
    if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
            return new Buffer(value, encoding);
        };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
            return new Buffer(size);
        };
};


/***/ }),

/***/ "./node_modules/protobufjs/src/verifier.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = verifier;

var Enum      = __webpack_require__("./node_modules/protobufjs/src/enum.js"),
    util      = __webpack_require__("./node_modules/protobufjs/src/util.js");

function invalid(field, expected) {
    return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:"+field.keyType+"}" : "") + " expected";
}

/**
 * Generates a partial value verifier.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genVerifyValue(gen, field, fieldIndex, ref) {
    /* eslint-disable no-unexpected-multiline */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) { gen
            ("switch(%s){", ref)
                ("default:")
                    ("return%j", invalid(field, "enum value"));
            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen
                ("case %i:", field.resolvedType.values[keys[j]]);
            gen
                    ("break")
            ("}");
        } else {
            gen
            ("{")
                ("var e=types[%i].verify(%s);", fieldIndex, ref)
                ("if(e)")
                    ("return%j+e", field.name + ".")
            ("}");
        }
    } else {
        switch (field.type) {
            case "int32":
            case "uint32":
            case "sint32":
            case "fixed32":
            case "sfixed32": gen
                ("if(!util.isInteger(%s))", ref)
                    ("return%j", invalid(field, "integer"));
                break;
            case "int64":
            case "uint64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
                ("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)
                    ("return%j", invalid(field, "integer|Long"));
                break;
            case "float":
            case "double": gen
                ("if(typeof %s!==\"number\")", ref)
                    ("return%j", invalid(field, "number"));
                break;
            case "bool": gen
                ("if(typeof %s!==\"boolean\")", ref)
                    ("return%j", invalid(field, "boolean"));
                break;
            case "string": gen
                ("if(!util.isString(%s))", ref)
                    ("return%j", invalid(field, "string"));
                break;
            case "bytes": gen
                ("if(!(%s&&typeof %s.length===\"number\"||util.isString(%s)))", ref, ref, ref)
                    ("return%j", invalid(field, "buffer"));
                break;
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline */
}

/**
 * Generates a partial key verifier.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genVerifyKey(gen, field, ref) {
    /* eslint-disable no-unexpected-multiline */
    switch (field.keyType) {
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32": gen
            ("if(!util.key32Re.test(%s))", ref)
                ("return%j", invalid(field, "integer key"));
            break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64": gen
            ("if(!util.key64Re.test(%s))", ref) // see comment above: x is ok, d is not
                ("return%j", invalid(field, "integer|Long key"));
            break;
        case "bool": gen
            ("if(!util.key2Re.test(%s))", ref)
                ("return%j", invalid(field, "boolean key"));
            break;
    }
    return gen;
    /* eslint-enable no-unexpected-multiline */
}

/**
 * Generates a verifier specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function verifier(mtype) {
    /* eslint-disable no-unexpected-multiline */

    var gen = util.codegen(["m"], mtype.name + "$verify")
    ("if(typeof m!==\"object\"||m===null)")
        ("return%j", "object expected");
    var oneofs = mtype.oneofsArray,
        seenFirstField = {};
    if (oneofs.length) gen
    ("var p={}");

    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(),
            ref   = "m" + util.safeProp(field.name);

        if (field.optional) gen
        ("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name); // !== undefined && !== null

        // map fields
        if (field.map) { gen
            ("if(!util.isObject(%s))", ref)
                ("return%j", invalid(field, "object"))
            ("var k=Object.keys(%s)", ref)
            ("for(var i=0;i<k.length;++i){");
                genVerifyKey(gen, field, "k[i]");
                genVerifyValue(gen, field, i, ref + "[k[i]]")
            ("}");

        // repeated fields
        } else if (field.repeated) { gen
            ("if(!Array.isArray(%s))", ref)
                ("return%j", invalid(field, "array"))
            ("for(var i=0;i<%s.length;++i){", ref);
                genVerifyValue(gen, field, i, ref + "[i]")
            ("}");

        // required or present fields
        } else {
            if (field.partOf) {
                var oneofProp = util.safeProp(field.partOf.name);
                if (seenFirstField[field.partOf.name] === 1) gen
            ("if(p%s===1)", oneofProp)
                ("return%j", field.partOf.name + ": multiple values");
                seenFirstField[field.partOf.name] = 1;
                gen
            ("p%s=1", oneofProp);
            }
            genVerifyValue(gen, field, i, ref);
        }
        if (field.optional) gen
        ("}");
    }
    return gen
    ("return null");
    /* eslint-enable no-unexpected-multiline */
}

/***/ }),

/***/ "./node_modules/protobufjs/src/wrappers.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


/**
 * Wrappers for common types.
 * @type {Object.<string,IWrapper>}
 * @const
 */
var wrappers = exports;

var Message = __webpack_require__("./node_modules/protobufjs/src/message.js");

/**
 * From object converter part of an {@link IWrapper}.
 * @typedef WrapperFromObjectConverter
 * @type {function}
 * @param {Object.<string,*>} object Plain object
 * @returns {Message<{}>} Message instance
 * @this Type
 */

/**
 * To object converter part of an {@link IWrapper}.
 * @typedef WrapperToObjectConverter
 * @type {function}
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @this Type
 */

/**
 * Common type wrapper part of {@link wrappers}.
 * @interface IWrapper
 * @property {WrapperFromObjectConverter} [fromObject] From object converter
 * @property {WrapperToObjectConverter} [toObject] To object converter
 */

// Custom wrapper for Any
wrappers[".google.protobuf.Any"] = {

    fromObject: function(object) {

        // unwrap value type if mapped
        if (object && object["@type"]) {
             // Only use fully qualified type name after the last '/'
            var name = object["@type"].substring(object["@type"].lastIndexOf("/") + 1);
            var type = this.lookup(name);
            /* istanbul ignore else */
            if (type) {
                // type_url does not accept leading "."
                var type_url = object["@type"].charAt(0) === "." ?
                    object["@type"].slice(1) : object["@type"];
                // type_url prefix is optional, but path seperator is required
                if (type_url.indexOf("/") === -1) {
                    type_url = "/" + type_url;
                }
                return this.create({
                    type_url: type_url,
                    value: type.encode(type.fromObject(object)).finish()
                });
            }
        }

        return this.fromObject(object);
    },

    toObject: function(message, options) {

        // Default prefix
        var googleApi = "type.googleapis.com/";
        var prefix = "";
        var name = "";

        // decode value if requested and unmapped
        if (options && options.json && message.type_url && message.value) {
            // Only use fully qualified type name after the last '/'
            name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
            // Separate the prefix used
            prefix = message.type_url.substring(0, message.type_url.lastIndexOf("/") + 1);
            var type = this.lookup(name);
            /* istanbul ignore else */
            if (type)
                message = type.decode(message.value);
        }

        // wrap value if unmapped
        if (!(message instanceof this.ctor) && message instanceof Message) {
            var object = message.$type.toObject(message, options);
            var messageName = message.$type.fullName[0] === "." ?
                message.$type.fullName.slice(1) : message.$type.fullName;
            // Default to type.googleapis.com prefix if no prefix is used
            if (prefix === "") {
                prefix = googleApi;
            }
            name = prefix + messageName;
            object["@type"] = name;
            return object;
        }

        return this.toObject(message, options);
    }
};


/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Writer;

var util      = __webpack_require__("./node_modules/protobufjs/src/util/minimal.js");

var BufferWriter; // cyclic

var LongBits  = util.LongBits,
    base64    = util.base64,
    utf8      = util.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup() {
            return (Writer.create = function create_buffer() {
                return new BufferWriter();
            })();
        }
        /* istanbul ignore next */
        : function create_array() {
            return new Writer();
        };
};

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = create();

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array)
    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len
        ? this.uint32(len)._push(utf8.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
    Writer.create = create();
    BufferWriter._configure();
};


/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = BufferWriter;

// extends Writer
var Writer = __webpack_require__("./node_modules/protobufjs/src/writer.js");
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util = __webpack_require__("./node_modules/protobufjs/src/util/minimal.js");

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

BufferWriter._configure = function () {
    /**
     * Allocates a buffer of the specified size.
     * @function
     * @param {number} size Buffer size
     * @returns {Buffer} Buffer
     */
    BufferWriter.alloc = util._Buffer_allocUnsafe;

    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set"
        ? function writeBytesBuffer_set(val, buf, pos) {
          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
          // also works for plain array values
        }
        /* istanbul ignore next */
        : function writeBytesBuffer_copy(val, buf, pos) {
          if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
          else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
        };
};


/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value))
        value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util.utf8.write(val, buf, pos);
    else if (buf.utf8Write)
        buf.utf8Write(val, pos);
    else
        buf.write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = util.Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */

BufferWriter._configure();


/***/ }),

/***/ "./node_modules/ts-mixer/dist/esm/index.js":
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Mixin: function() { return /* binding */ Mixin; },
/* harmony export */   decorate: function() { return /* binding */ decorate; },
/* harmony export */   hasMixin: function() { return /* binding */ hasMixin; },
/* harmony export */   mix: function() { return /* binding */ mix; },
/* harmony export */   settings: function() { return /* binding */ settings; }
/* harmony export */ });
/**
 * Utility function that works like `Object.apply`, but copies getters and setters properly as well.  Additionally gives
 * the option to exclude properties by name.
 */
const copyProps = (dest, src, exclude = []) => {
    const props = Object.getOwnPropertyDescriptors(src);
    for (let prop of exclude)
        delete props[prop];
    Object.defineProperties(dest, props);
};
/**
 * Returns the full chain of prototypes up until Object.prototype given a starting object.  The order of prototypes will
 * be closest to farthest in the chain.
 */
const protoChain = (obj, currentChain = [obj]) => {
    const proto = Object.getPrototypeOf(obj);
    if (proto === null)
        return currentChain;
    return protoChain(proto, [...currentChain, proto]);
};
/**
 * Identifies the nearest ancestor common to all the given objects in their prototype chains.  For most unrelated
 * objects, this function should return Object.prototype.
 */
const nearestCommonProto = (...objs) => {
    if (objs.length === 0)
        return undefined;
    let commonProto = undefined;
    const protoChains = objs.map(obj => protoChain(obj));
    while (protoChains.every(protoChain => protoChain.length > 0)) {
        const protos = protoChains.map(protoChain => protoChain.pop());
        const potentialCommonProto = protos[0];
        if (protos.every(proto => proto === potentialCommonProto))
            commonProto = potentialCommonProto;
        else
            break;
    }
    return commonProto;
};
/**
 * Creates a new prototype object that is a mixture of the given prototypes.  The mixing is achieved by first
 * identifying the nearest common ancestor and using it as the prototype for a new object.  Then all properties/methods
 * downstream of this prototype (ONLY downstream) are copied into the new object.
 *
 * The resulting prototype is more performant than softMixProtos(...), as well as ES5 compatible.  However, it's not as
 * flexible as updates to the source prototypes aren't captured by the mixed result.  See softMixProtos for why you may
 * want to use that instead.
 */
const hardMixProtos = (ingredients, constructor, exclude = []) => {
    var _a;
    const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;
    const mixedProto = Object.create(base);
    // Keeps track of prototypes we've already visited to avoid copying the same properties multiple times.  We init the
    // list with the proto chain below the nearest common ancestor because we don't want any of those methods mixed in
    // when they will already be accessible via prototype access.
    const visitedProtos = protoChain(base);
    for (let prototype of ingredients) {
        let protos = protoChain(prototype);
        // Apply the prototype chain in reverse order so that old methods don't override newer ones.
        for (let i = protos.length - 1; i >= 0; i--) {
            let newProto = protos[i];
            if (visitedProtos.indexOf(newProto) === -1) {
                copyProps(mixedProto, newProto, ['constructor', ...exclude]);
                visitedProtos.push(newProto);
            }
        }
    }
    mixedProto.constructor = constructor;
    return mixedProto;
};
const unique = (arr) => arr.filter((e, i) => arr.indexOf(e) == i);

/**
 * Finds the ingredient with the given prop, searching in reverse order and breadth-first if searching ingredient
 * prototypes is required.
 */
const getIngredientWithProp = (prop, ingredients) => {
    const protoChains = ingredients.map(ingredient => protoChain(ingredient));
    // since we search breadth-first, we need to keep track of our depth in the prototype chains
    let protoDepth = 0;
    // not all prototype chains are the same depth, so this remains true as long as at least one of the ingredients'
    // prototype chains has an object at this depth
    let protosAreLeftToSearch = true;
    while (protosAreLeftToSearch) {
        // with the start of each horizontal slice, we assume this is the one that's deeper than any of the proto chains
        protosAreLeftToSearch = false;
        // scan through the ingredients right to left
        for (let i = ingredients.length - 1; i >= 0; i--) {
            const searchTarget = protoChains[i][protoDepth];
            if (searchTarget !== undefined && searchTarget !== null) {
                // if we find something, this is proof that this horizontal slice potentially more objects to search
                protosAreLeftToSearch = true;
                // eureka, we found it
                if (Object.getOwnPropertyDescriptor(searchTarget, prop) != undefined) {
                    return protoChains[i][0];
                }
            }
        }
        protoDepth++;
    }
    return undefined;
};
/**
 * "Mixes" ingredients by wrapping them in a Proxy.  The optional prototype argument allows the mixed object to sit
 * downstream of an existing prototype chain.  Note that "properties" cannot be added, deleted, or modified.
 */
const proxyMix = (ingredients, prototype = Object.prototype) => new Proxy({}, {
    getPrototypeOf() {
        return prototype;
    },
    setPrototypeOf() {
        throw Error('Cannot set prototype of Proxies created by ts-mixer');
    },
    getOwnPropertyDescriptor(_, prop) {
        return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);
    },
    defineProperty() {
        throw new Error('Cannot define new properties on Proxies created by ts-mixer');
    },
    has(_, prop) {
        return getIngredientWithProp(prop, ingredients) !== undefined || prototype[prop] !== undefined;
    },
    get(_, prop) {
        return (getIngredientWithProp(prop, ingredients) || prototype)[prop];
    },
    set(_, prop, val) {
        const ingredientWithProp = getIngredientWithProp(prop, ingredients);
        if (ingredientWithProp === undefined)
            throw new Error('Cannot set new properties on Proxies created by ts-mixer');
        ingredientWithProp[prop] = val;
        return true;
    },
    deleteProperty() {
        throw new Error('Cannot delete properties on Proxies created by ts-mixer');
    },
    ownKeys() {
        return ingredients
            .map(Object.getOwnPropertyNames)
            .reduce((prev, curr) => curr.concat(prev.filter(key => curr.indexOf(key) < 0)));
    },
});
/**
 * Creates a new proxy-prototype object that is a "soft" mixture of the given prototypes.  The mixing is achieved by
 * proxying all property access to the ingredients.  This is not ES5 compatible and less performant.  However, any
 * changes made to the source prototypes will be reflected in the proxy-prototype, which may be desirable.
 */
const softMixProtos = (ingredients, constructor) => proxyMix([...ingredients, { constructor }]);

const settings = {
    initFunction: null,
    staticsStrategy: 'copy',
    prototypeStrategy: 'copy',
    decoratorInheritance: 'deep',
};

// Keeps track of constituent classes for every mixin class created by ts-mixer.
const mixins = new WeakMap();
const getMixinsForClass = (clazz) => mixins.get(clazz);
const registerMixins = (mixedClass, constituents) => mixins.set(mixedClass, constituents);
const hasMixin = (instance, mixin) => {
    if (instance instanceof mixin)
        return true;
    const constructor = instance.constructor;
    const visited = new Set();
    let frontier = new Set();
    frontier.add(constructor);
    while (frontier.size > 0) {
        // check if the frontier has the mixin we're looking for.  if not, we can say we visited every item in the frontier
        if (frontier.has(mixin))
            return true;
        frontier.forEach((item) => visited.add(item));
        // build a new frontier based on the associated mixin classes and prototype chains of each frontier item
        const newFrontier = new Set();
        frontier.forEach((item) => {
            var _a;
            const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype)
                .map((proto) => proto.constructor)
                .filter((item) => item !== null);
            if (itemConstituents)
                itemConstituents.forEach((constituent) => {
                    if (!visited.has(constituent) && !frontier.has(constituent))
                        newFrontier.add(constituent);
                });
        });
        // we have a new frontier, now search again
        frontier = newFrontier;
    }
    // if we get here, we couldn't find the mixin anywhere in the prototype chain or associated mixin classes
    return false;
};

const mergeObjectsOfDecorators = (o1, o2) => {
    var _a, _b;
    const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);
    const mergedObject = {};
    for (let key of allKeys)
        mergedObject[key] = unique([...((_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : []), ...((_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : [])]);
    return mergedObject;
};
const mergePropertyAndMethodDecorators = (d1, d2) => {
    var _a, _b, _c, _d;
    return ({
        property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),
        method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {}),
    });
};
const mergeDecorators = (d1, d2) => {
    var _a, _b, _c, _d, _e, _f;
    return ({
        class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),
        static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),
        instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {}),
    });
};
const decorators = new Map();
const findAllConstituentClasses = (...classes) => {
    var _a;
    const allClasses = new Set();
    const frontier = new Set([...classes]);
    while (frontier.size > 0) {
        for (let clazz of frontier) {
            const protoChainClasses = protoChain(clazz.prototype).map(proto => proto.constructor);
            const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];
            const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];
            const newClasses = potentiallyNewClasses.filter(c => !allClasses.has(c));
            for (let newClass of newClasses)
                frontier.add(newClass);
            allClasses.add(clazz);
            frontier.delete(clazz);
        }
    }
    return [...allClasses];
};
const deepDecoratorSearch = (...classes) => {
    const decoratorsForClassChain = findAllConstituentClasses(...classes)
        .map(clazz => decorators.get(clazz))
        .filter(decorators => !!decorators);
    if (decoratorsForClassChain.length == 0)
        return {};
    if (decoratorsForClassChain.length == 1)
        return decoratorsForClassChain[0];
    return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));
};
const directDecoratorSearch = (...classes) => {
    const classDecorators = classes.map(clazz => getDecoratorsForClass(clazz));
    if (classDecorators.length === 0)
        return {};
    if (classDecorators.length === 1)
        return classDecorators[0];
    return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));
};
const getDecoratorsForClass = (clazz) => {
    let decoratorsForClass = decorators.get(clazz);
    if (!decoratorsForClass) {
        decoratorsForClass = {};
        decorators.set(clazz, decoratorsForClass);
    }
    return decoratorsForClass;
};
const decorateClass = (decorator) => ((clazz) => {
    const decoratorsForClass = getDecoratorsForClass(clazz);
    let classDecorators = decoratorsForClass.class;
    if (!classDecorators) {
        classDecorators = [];
        decoratorsForClass.class = classDecorators;
    }
    classDecorators.push(decorator);
    return decorator(clazz);
});
const decorateMember = (decorator) => ((object, key, ...otherArgs) => {
    var _a, _b, _c;
    const decoratorTargetType = typeof object === 'function' ? 'static' : 'instance';
    const decoratorType = typeof object[key] === 'function' ? 'method' : 'property';
    const clazz = decoratorTargetType === 'static' ? object : object.constructor;
    const decoratorsForClass = getDecoratorsForClass(clazz);
    const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};
    decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;
    let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};
    decoratorsForTargetType[decoratorType] = decoratorsForType;
    let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];
    decoratorsForType[key] = decoratorsForKey;
    // @ts-ignore: array is type `A[] | B[]` and item is type `A | B`, so technically a type error, but it's fine
    decoratorsForKey.push(decorator);
    // @ts-ignore
    return decorator(object, key, ...otherArgs);
});
const decorate = (decorator) => ((...args) => {
    if (args.length === 1)
        return decorateClass(decorator)(args[0]);
    return decorateMember(decorator)(...args);
});

function Mixin(...constructors) {
    var _a, _b, _c;
    const prototypes = constructors.map(constructor => constructor.prototype);
    // Here we gather up the init functions of the ingredient prototypes, combine them into one init function, and
    // attach it to the mixed class prototype.  The reason we do this is because we want the init functions to mix
    // similarly to constructors -- not methods, which simply override each other.
    const initFunctionName = settings.initFunction;
    if (initFunctionName !== null) {
        const initFunctions = prototypes
            .map(proto => proto[initFunctionName])
            .filter(func => typeof func === 'function');
        const combinedInitFunction = function (...args) {
            for (let initFunction of initFunctions)
                initFunction.apply(this, args);
        };
        const extraProto = { [initFunctionName]: combinedInitFunction };
        prototypes.push(extraProto);
    }
    function MixedClass(...args) {
        for (const constructor of constructors)
            // @ts-ignore: potentially abstract class
            copyProps(this, new constructor(...args));
        if (initFunctionName !== null && typeof this[initFunctionName] === 'function')
            this[initFunctionName].apply(this, args);
    }
    MixedClass.prototype = settings.prototypeStrategy === 'copy'
        ? hardMixProtos(prototypes, MixedClass)
        : softMixProtos(prototypes, MixedClass);
    Object.setPrototypeOf(MixedClass, settings.staticsStrategy === 'copy'
        ? hardMixProtos(constructors, null, ['prototype'])
        : proxyMix(constructors, Function.prototype));
    let DecoratedMixedClass = MixedClass;
    if (settings.decoratorInheritance !== 'none') {
        const classDecorators = settings.decoratorInheritance === 'deep'
            ? deepDecoratorSearch(...constructors)
            : directDecoratorSearch(...constructors);
        for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {
            const result = decorator(DecoratedMixedClass);
            if (result) {
                DecoratedMixedClass = result;
            }
        }
        applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);
        applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);
    }
    registerMixins(DecoratedMixedClass, constructors);
    return DecoratedMixedClass;
}
const applyPropAndMethodDecorators = (propAndMethodDecorators, target) => {
    const propDecorators = propAndMethodDecorators.property;
    const methodDecorators = propAndMethodDecorators.method;
    if (propDecorators)
        for (let key in propDecorators)
            for (let decorator of propDecorators[key])
                decorator(target, key);
    if (methodDecorators)
        for (let key in methodDecorators)
            for (let decorator of methodDecorators[key])
                decorator(target, key, Object.getOwnPropertyDescriptor(target, key));
};
/**
 * A decorator version of the `Mixin` function.  You'll want to use this instead of `Mixin` for mixing generic classes.
 */
const mix = (...ingredients) => decoratedClass => {
    // @ts-ignore
    const mixedClass = Mixin(...ingredients.concat([decoratedClass]));
    Object.defineProperty(mixedClass, 'name', {
        value: decoratedClass.name,
        writable: false,
    });
    return mixedClass;
};




/***/ }),

/***/ "./node_modules/tslib/tslib.es6.mjs":
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __addDisposableResource: function() { return /* binding */ __addDisposableResource; },
/* harmony export */   __assign: function() { return /* binding */ __assign; },
/* harmony export */   __asyncDelegator: function() { return /* binding */ __asyncDelegator; },
/* harmony export */   __asyncGenerator: function() { return /* binding */ __asyncGenerator; },
/* harmony export */   __asyncValues: function() { return /* binding */ __asyncValues; },
/* harmony export */   __await: function() { return /* binding */ __await; },
/* harmony export */   __awaiter: function() { return /* binding */ __awaiter; },
/* harmony export */   __classPrivateFieldGet: function() { return /* binding */ __classPrivateFieldGet; },
/* harmony export */   __classPrivateFieldIn: function() { return /* binding */ __classPrivateFieldIn; },
/* harmony export */   __classPrivateFieldSet: function() { return /* binding */ __classPrivateFieldSet; },
/* harmony export */   __createBinding: function() { return /* binding */ __createBinding; },
/* harmony export */   __decorate: function() { return /* binding */ __decorate; },
/* harmony export */   __disposeResources: function() { return /* binding */ __disposeResources; },
/* harmony export */   __esDecorate: function() { return /* binding */ __esDecorate; },
/* harmony export */   __exportStar: function() { return /* binding */ __exportStar; },
/* harmony export */   __extends: function() { return /* binding */ __extends; },
/* harmony export */   __generator: function() { return /* binding */ __generator; },
/* harmony export */   __importDefault: function() { return /* binding */ __importDefault; },
/* harmony export */   __importStar: function() { return /* binding */ __importStar; },
/* harmony export */   __makeTemplateObject: function() { return /* binding */ __makeTemplateObject; },
/* harmony export */   __metadata: function() { return /* binding */ __metadata; },
/* harmony export */   __param: function() { return /* binding */ __param; },
/* harmony export */   __propKey: function() { return /* binding */ __propKey; },
/* harmony export */   __read: function() { return /* binding */ __read; },
/* harmony export */   __rest: function() { return /* binding */ __rest; },
/* harmony export */   __rewriteRelativeImportExtension: function() { return /* binding */ __rewriteRelativeImportExtension; },
/* harmony export */   __runInitializers: function() { return /* binding */ __runInitializers; },
/* harmony export */   __setFunctionName: function() { return /* binding */ __setFunctionName; },
/* harmony export */   __spread: function() { return /* binding */ __spread; },
/* harmony export */   __spreadArray: function() { return /* binding */ __spreadArray; },
/* harmony export */   __spreadArrays: function() { return /* binding */ __spreadArrays; },
/* harmony export */   __values: function() { return /* binding */ __values; }
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

var ownKeys = function(o) {
  ownKeys = Object.getOwnPropertyNames || function (o) {
    var ar = [];
    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
    return ar;
  };
  return ownKeys(o);
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
        }
        else s |= 1;
      }
      catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}

function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
      return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {
          return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : (d + ext + "." + cm.toLowerCase() + "js");
      });
  }
  return path;
}

/* harmony default export */ __webpack_exports__["default"] = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __esDecorate,
  __runInitializers,
  __propKey,
  __setFunctionName,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
  __rewriteRelativeImportExtension,
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,